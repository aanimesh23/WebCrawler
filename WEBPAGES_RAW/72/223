//    Processing educational code
//    Copyright (C) 2013  Lee Martie
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.


/**
* Think of a sprite as an animation that we will move around and is a
* property of our character, that is, it is its image
*/
class Sprite {

  //sprite sheet
  PImage spriteSheet;
  //array to store our sprites
  PImage [] spriteAnimationArray;

  //sprite width
  public int spriteWidth;
  //sprite height
  public int spriteHeight;
  
  int rows;
  int cols;


/**
* This constructor takens in a spriteSheet
*  It assumes there is a sprite at each row and column.
* and it assumes that each sprite at these locations as a height of _spriteHeight
* and a width of _spriteWidth
*
*/
  public Sprite(String _spriteSheet, int _rows, int _cols, int _spriteHeight, int _spriteWidth) {
    rows = _rows;
    cols = _cols;
    
    //saving our spritesheet in our spriteSheet global variable
    spriteSheet = loadImage(_spriteSheet);
    //saving sprite width
    spriteWidth = spriteSheet.width / cols;
    //saving sprite height
    spriteHeight = spriteSheet.height / rows;
    
// We will take our sprite sheet that can be thought of like this:  
//      |col 1|col 2|col j|col n|
//      |-----+-----+-----+-----|
// row 1| ss  |  ss |...  | ss  |
//      |-----+-----+-----+-----|
// row 2|ss   | ss  |...  | ss  |
//      |-----+-----+-----+-----|
// row i|...  |...  |...  |...  |
//      |-----+-----+-----+-----|      
// row m|ss   | ss  |...  | ss  | 
//      |-----+-----+-----+-----|     
// where we have m rows and n columns and ss = sprite size (height*width);
//
// and we will turn it into a 1 dimensional array like this:
//       r1c1  r1c2  r1cj  r1cn    r2c1  r2c2  r2cj  c2cn        rmc1  rmc2  rmcj  rmcn
//      |-----+-----+-----+-----||-----+-----+-----+-----|     |-----+-----+-----+-----| 
//      | img | img |...  |img  ||img  |img  |...  |img  | ... |img  |img  |...  |img  |
//      |-----+-----+-----+-----||-----+-----+-----+-----|     |-----+-----+-----+-----|
//
//
//  we see then this means we need an array of m*n length
    spriteAnimationArray = new PImage[rows*cols];
    
    //Now here we will "chop" up our sprite sheet and store the block of pixels into our 1 diemensional array
    //to do this we will get the pixel block at each row and column of or image.  To do this 
    //we will get the pixel block at row i, column j, of the size of the sprite (width*height).
    //We can do this by writing a for lop and using the processing get method.
    //The get method retrieves the block of pixels where it has 4 paraterms. The first two points
    //specify the point of the upper left of a bounding box
    //and the other x, y specifies the lower right of the bounding box
    //
    for (int i = 0; i<rows; i++){
            for (int j = 0; j<cols; j++){
        spriteAnimationArray[i*cols+j] = spriteSheet.
        get(j*spriteWidth, i*spriteHeight, spriteWidth, spriteHeight);
      }
    }

        

  }
}

