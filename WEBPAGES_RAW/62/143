<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- Page automatically generated from latex_to_html converter. -->
<!-- by cc_extract_html, $Revision: 3.19 $ -->
<!-- LaTeX source file: './HalfedgeDS_ref/HalfedgeDS_decorator.tex' -->
<html> <head>  
<title>HalfedgeDS_decorator&lt;HDS&gt;</title>
</head>  
<link href="../latex_to_html.css" rel="STYLESHEET">
<body bgcolor="white">
<!-- ------------------------------------------------------------------- -->


<!-- Top Navigation ---------------------------------------------------- -->
<div class="NavTop">
<hr>
  <strong>Navigation:</strong>
<a href="Chapter_intro.html">Up</a>, 
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<hr><!-- End of Top Navigation ----------------------------------------- -->
</div>


<A NAME="Cross_link_anchor_880"></A>

<A NAME="Cross_link_anchor_881"></A>

      
     
     
     
<A NAME="Index_anchor_857"></A> 

   
<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC="cc_Class.gif"></TD></TR></TABLE>


    <A NAME="ccRef_CGAL::HalfedgeDS_decorator<HDS>"></A>
<h2><I>CGAL::HalfedgeDS_decorator&lt;HDS&gt;</I></h2>
<P>

<H3>Definition</H3>
<P>

The classes <I><A HREF="Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_895">CGAL::HalfedgeDS_items_decorator</A>&lt;HDS&gt;</I>,
<I><A HREF="Class_HalfedgeDS_decorator.html#Cross_link_anchor_880">CGAL::HalfedgeDS_decorator</A>&lt;HDS&gt;</I>, and
<I><A HREF="Class_HalfedgeDS_const_decorator.html#Cross_link_anchor_878">CGAL::HalfedgeDS_const_decorator</A>&lt;HDS&gt;</I> provide additional functions
to examine and to modify a halfedge data structure <I>HDS</I>. The class
<I><A HREF="Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_895">CGAL::HalfedgeDS_items_decorator</A>&lt;HDS&gt;</I> provides additional functions
for vertices, halfedges, and faces of a halfedge data structure
without knowing the containing halfedge data structure. The class
<I><A HREF="Class_HalfedgeDS_decorator.html#Cross_link_anchor_880">CGAL::HalfedgeDS_decorator</A>&lt;HDS&gt;</I> stores a reference to the halfedge
data structure and provides functions that modify the halfedge data
structure, for example Euler-operators. The class
<I><A HREF="Class_HalfedgeDS_const_decorator.html#Cross_link_anchor_878">CGAL::HalfedgeDS_const_decorator</A>&lt;HDS&gt;</I> stores a const reference to
the halfedge data structure. It contains non-modifying functions, for
example the test for validness of the data structure.
<P>

All these additional functions take care of the different capabilities
a halfedge data structure may have or may not have.  The functions
evaluate the type tags of the halfedge data structure to decide on the
actions. If a particular feature is not supported nothing is done.
Note that for example the creation of new halfedges is mandatory for
all halfedge data structures and will not appear here again.
<P>

<I>#include &lt;<A HREF="../../../include/CGAL/HalfedgeDS_decorator.h">CGAL/HalfedgeDS_decorator.h</A>&gt;</I>
<P>

<H3>Inherits From</H3>
<P>

<I><A HREF="Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_895">CGAL::HalfedgeDS_items_decorator</A>&lt;HDS&gt;</I>
<P>

<H3>Creation</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_HalfedgeDS_decorator.html#Cross_link_anchor_881">HalfedgeDS_decorator</A>&lt;HDS&gt; D ( HDS&amp; hds);
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    keeps internally a reference to <I>hds</I>.
<P>

</TD></TR>
        </TABLE>
<P>

<H3>Creation of New Items</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Vertex_handle_vertices_push_back6_const_Vertex__v9;"></A>
Vertex_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.vertices_push_back (  Vertex v)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    appends a copy of <MATH><I>v</I></MATH> to <I>hds</I> if vertices are supported.
    Returns a handle of the new vertex, or <I>Vertex_handle()</I> otherwise.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Face_handle_faces_push_back6_const_Face__f9;"></A>
Face_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.faces_push_back (  Face f)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    appends a copy of <MATH><I>f</I></MATH> to <I>hds</I> if faces are supported.
    Returns a handle of the new face, or <I>Face_handle()</I> otherwise.
        </TD></TR>
        </TABLE>
<P>

<H3>Creation of New Composed Items</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_create_loop69;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    D.create_loop ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns handle of a halfedge from a newly created loop in <I>hds</I>
    consisting of a single closed edge, one vertex and two faces (if
    supported respectively).
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_create_segment69;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.create_segment ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a halfedge from a newly created segment in <I>hds</I>
    consisting of a single open edge, two vertices and one face (if
    supported respectively).
        </TD></TR>
        </TABLE>
<P>

<H3>Removal of Elements</H3>
<P>

The following member functions do <I>not</I> update affected
incidence relations except if mentioned otherwise.
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_vertices_pop_front69;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.vertices_pop_front ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the first vertex if vertices are supported.<BR>

<EM>Requirement: </EM> <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH> 
    <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_vertices_pop_back69;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.vertices_pop_back ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the last vertex if vertices are supported.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_vertices_erase6_Vertex_handle_v9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.vertices_erase ( Vertex_handle v)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the vertex <MATH><I>v</I></MATH> if vertices are supported.<BR>

<EM>Requirement: </EM> <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH> 
    <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_vertices_erase6_Vertex_handle_first+_Vertex_handle_last9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    D.vertices_erase ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    Vertex_handle first,<BR>

Vertex_handle last)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the range <MATH><I>[<I>first</I>,<I>last</I>)</I></MATH> if vertices 
    are supported.<BR>

<EM>Requirement: </EM> <I>Supports_removal</I> 
    <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH> <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_faces_pop_front69;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.faces_pop_front ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the first face if faces are supported.<BR>

<EM>Requirement: </EM> <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH> 
    <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_faces_pop_back69;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.faces_pop_back ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the last face if faces are supported.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_faces_erase6_Face_handle_f9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.faces_erase ( Face_handle f)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the face <MATH><I>f</I></MATH> if faces are supported.<BR>

<EM>Requirement: </EM> <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH>
    <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_faces_erase6_Face_handle_first+_Face_handle_last9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.faces_erase ( Face_handle first,  Face_handle last)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the range <MATH><I>[<I>first</I>,<I>last</I>)</I></MATH> if faces are 
    supported.<BR>

<EM>Requirement: </EM> <I>Supports_removal</I>
    <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH> <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_erase_face6_Halfedge_handle_h9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.erase_face ( Halfedge_handle h)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the
   face incident to <I>h</I> from <I>hds</I> and changes all halfedges
   incident to the face into border edges or removes them from the
   halfedge data structure if they were already border edges. If this
   creates isolated vertices they get removed as well. See
   <I>make_hole(h)</I> for a more specialized variant.<BR>

<EM>Precondition: </EM><I>h-&gt;is_border() == false</I>.<BR>

<EM>Requirement: </EM> If faces are supported,
   <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH> <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_erase_connected_component6_Halfedge_handle_h9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.erase_connected_component ( Halfedge_handle h)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the  vertices, halfedges, and faces that belong to the 
     connected component of <MATH><I>h</I></MATH>.<BR>

<EM>Precondition: </EM>For all halfedges <MATH><I>g</I></MATH> in the 
     connected component <I>g.next() != Halfedge_handle()</I>.<BR>

<EM>Requirement: </EM>  <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH>
     <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        </TABLE>
<P>

<H3>Modifying Functions (For Border Halfedges)</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_make_hole6_Halfedge_handle_h9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.make_hole ( Halfedge_handle h)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the face incident to <I>h</I> from <I>hds</I> and creates a hole.<BR>

<EM>Precondition: </EM><I>h != Halfedge_handle()</I> and <I>!(h-&gt;is_border())</I>.<BR>

<EM>Requirement: </EM> If faces are supported,  
    <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH> <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_fill_hole6_Halfedge_handle_h9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.fill_hole ( Halfedge_handle h)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    fills the hole incident to <I>h</I> with a new face from <I>hds</I>.
    Returns <I>h</I>.<BR>

<EM>Precondition: </EM><I>h != Halfedge_handle()</I> and <I>h-&gt;is_border()</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_fill_hole6_Halfedge_handle_h+_const_Face__f9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.fill_hole ( Halfedge_handle h,  Face f)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    fills the hole incident to <I>h</I> with a copy of face <MATH><I>f</I></MATH>.
    Returns <I>h</I>.<BR>

<EM>Precondition: </EM><I>h != Halfedge_handle()</I> and <I>h-&gt;is_border()</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_add_face_to_border6_Halfedge_handle_h+_Halfedge_handle_g9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    D.add_face_to_border ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    Halfedge_handle h,<BR>

Halfedge_handle g)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    extends the surface with a new face from <I>hds</I> into the hole 
    incident to <MATH><I>h</I></MATH> and <MATH><I>g</I></MATH>. It creates a new edge connecting the vertex
    denoted by <MATH><I>g</I></MATH> with the vertex denoted by <MATH><I>h</I></MATH> and fills this separated 
    part of the hole with a new face, such that the new face is incident 
    to <MATH><I>g</I></MATH>. Returns the new halfedge that is incident to the new face.<BR>

<EM>Precondition: </EM><I>h != Halfedge_handle()</I>, <I>g != Halfedge_handle()</I>,
    <I>h-&gt;is_border()</I>, <I>g-&gt;is_border()</I> and <MATH><I>g</I></MATH> can be reached 
    along the hole starting with <MATH><I>h</I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_add_face_to_border6_Halfedge_handle_h+_Halfedge_handle_g+_const_Face__f9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    D.add_face_to_border ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    Halfedge_handle h,<BR>

Halfedge_handle g,<BR>

Face f)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    extends the surface with a copy of face <MATH><I>f</I></MATH> into the hole 
    incident to <MATH><I>h</I></MATH> and <MATH><I>g</I></MATH>. It creates a new edge connecting the tip of
    <MATH><I>g</I></MATH> with the tip of <MATH><I>h</I></MATH> and fills this separated part of the hole with a
    copy of face <MATH><I>f</I></MATH>, such that the new face is incident to <MATH><I>g</I></MATH>. Returns 
    the new halfedge that is incident to the new face.<BR>

<EM>Precondition: </EM><I>h != Halfedge_handle()</I>, <I>g != Halfedge_handle()</I>,
    <I>h-&gt;is_border()</I>, <I>g-&gt;is_border()</I> and <MATH><I>g</I></MATH> can be reached 
    along the hole starting with <MATH><I>h</I></MATH>.
        </TD></TR>
        </TABLE>
<P>

<H3>Modifying Functions (Euler Operators)</H3>
<P>

The following Euler operations modify consistently the combinatorial
structure of the halfedge data structure. The geometry remains unchanged.
Note that well known graph operations are also captured with these 
Euler operators, for example an edge contraction is equal to a
<I>join_vertex()</I> operation, or an edge removal to <I>join_face()</I>.
<P>

Given a halfedge data structure <I>hds</I> and a halfedge handle <MATH><I>h</I></MATH>
four special applications of the Euler operators are worth mentioning:
<I>split_vertex(h,h)</I> results in an antenna emanating from the tip
of <I>h</I>; <I>split_vertex(h,h-&gt;next()-&gt;<A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A>())</I> results in an edge 
split of the halfedge <I>h-&gt;next</I> with a new vertex in-between;
<I>split_face(h,h)</I> results in a loop directly following <I>h</I>;
and <I>split_face(h,h-&gt;next())</I> results in a bridge <A HREF="../Kernel_23_ref/Function_parallel.html#Cross_link_anchor_249">parallel</A> to
the halfedge <I>h-&gt;next</I> with a new face in-between.
<P>

<CENTER>
    <img src="fig/euler_face.gif" alt="Euler Operator: Face">
<P>

</CENTER>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_split_face6_Halfedge_handle_h+_Halfedge_handle_g9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.split_face ( Halfedge_handle h,  Halfedge_handle g)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    splits the face incident to <I>h</I> and <I>g</I> into two faces
     with a new diagonal between the two vertices denoted by <I>h</I> and
     <I>g</I> respectively. The second (new) face obtained from
     <I>hds</I> is a copy of the first face. Returns <I>h-&gt;next()</I> after the
     operation, i.e., the new diagonal. The new face is to the right of the 
     new diagonal, the old face is to the left. The time is proportional 
     to the distance from <I>h</I> to <I>g</I> around the face.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_join_face6_Halfedge_handle_h9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.join_face ( Halfedge_handle h)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    joins the two faces incident to <MATH><I>h</I></MATH>. The face incident to
      <I>h-&gt;<A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A>()</I> gets removed from <I>hds</I>. Both faces might be
    holes. Returns the <A HREF="../STL_Extension_ref/Function_predecessor.html#Cross_link_anchor_1442">predecessor</A> of <MATH><I>h</I></MATH> around the face. The invariant
    <I>join_face( split_face( h, g))</I> returns <MATH><I>h</I></MATH> and keeps
    the data structure unchanged. The time is proportional to the size
    of the face removed and the time to compute <I>h-&gt;prev()</I>.<BR>

<EM>Requirement: </EM> <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH>
    <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        </TABLE>
<P>

<CENTER>
    <img src="fig/euler_vertex.gif" alt="Euler Operator: Vertex">
<P>

</CENTER>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_split_vertex6_Halfedge_handle_h+_Halfedge_handle_g9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.split_vertex ( Halfedge_handle h,  Halfedge_handle g)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    splits the vertex incident to <I>h</I> and <I>g</I> into two vertices
     and connects them with a new edge. The second (new) vertex
     obtained from <I>hds</I> is a copy of the first vertex. Returns
     <I>h-&gt;next()-&gt;<A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A>()</I> after the operation, i.e., the new edge
     in the <A HREF="../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247">orientation</A> towards the new vertex. The time is proportional 
     to the distance from <I>h</I> to <I>g</I> around the vertex.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_join_vertex6_Halfedge_handle_h9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.join_vertex ( Halfedge_handle h)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    joins the two vertices incident to <MATH><I>h</I></MATH>. The vertex denoted by
     <I>h-&gt;<A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A>()</I> gets removed by <I>hds</I>. Returns the <A HREF="../STL_Extension_ref/Function_predecessor.html#Cross_link_anchor_1442">predecessor</A> of
     <MATH><I>h</I></MATH> around the vertex, i.e., <I>h-&gt;<A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A>()-&gt;prev()</I>. The invariant 
     <I>join_vertex( split_vertex( h, g))</I> returns <MATH><I>h</I></MATH>
     and keeps the polyhedron unchanged. 
     The time is proportional to the degree of the vertex removed and 
     the time to compute <I>h-&gt;prev()</I> and <I>h-&gt;<A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A>()-&gt;prev()</I>.<BR>

<EM>Requirement: </EM> <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH>
     <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        </TABLE>
<P>

<CENTER>
    <img src="fig/euler_center.gif" alt="Euler Operator: Center Vertex">
<P>

</CENTER>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_create_center_vertex6_Halfedge_handle_h9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.create_center_vertex ( Halfedge_handle h)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    barycentric triangulation of <I>h-&gt;face()</I>. Creates a new vertex,
     a copy of <I>h-&gt;vertex()</I>, and connects it to each vertex incident 
     to <I>h-&gt;face()</I> splitting <I>h-&gt;face()</I> into triangles. 
     <I>h</I> remains incident to the original face, all other triangles 
     are copies of this face. Returns the halfedge <I>h-&gt;next()</I>
     after the operation, i.e., a halfedge pointing to the new vertex. 
     The time is proportional to the size of the face.<BR>

<EM>Precondition: </EM><I>h</I> is not a border halfedge.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_erase_center_vertex6_Halfedge_handle_g9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.erase_center_vertex ( Halfedge_handle g)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    reverses <I>create_center_vertex</I>. Erases the
     vertex pointed to by <I>g</I> and all incident halfedges thereby
     merging all incident faces. Only <I>g-&gt;face()</I> remains. 
     The neighborhood of <I>g-&gt;vertex()</I> may not be triangulated,
     it can have larger faces. Returns the halfedge <I>g-&gt;prev()</I>.
     Thus, the invariant <I>h == erase_center_vertex(       create_center_vertex(h))</I> holds if <I>h</I> is not a border halfedge.
     The time is proportional to the sum of the size of all incident faces.<BR>

<EM>Precondition: </EM>None of the incident faces of <I>g-&gt;vertex()</I> is 
     a hole. There are at least two distinct faces incident
     to the faces that are incident to <I>g-&gt;vertex()</I>. (This 
     prevents the operation from collapsing a <A HREF="../Kernel_23_ref/Function_volume.html#Cross_link_anchor_269">volume</A> into two faces
     glued together with <A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A> orientations, such as would
     happen with any vertex of a tetrahedron.)<BR>

<EM>Requirement: </EM> <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH> 
     <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        </TABLE>
<P>

<CENTER>
    <img src="fig/euler_loop.gif" alt="Euler Operator: Loop">
<P>

</CENTER>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_split_loop6_Halfedge_handle_h+_Halfedge_handle_i+_Halfedge_handle_j9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    D.split_loop ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    Halfedge_handle h,<BR>

Halfedge_handle i,<BR>

Halfedge_handle j)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    cuts the halfedge data structure into two parts along the cycle <MATH><I>(h,i,j)</I></MATH>.
    Three new vertices (one copy for each vertex in the cycle) and three 
    new halfedges (one copy for each halfedge in the cycle), and two new 
    triangles are created. <MATH><I>h,i,j</I></MATH> will be incident to the first new triangle.
    The return value will be the halfedge incident to the second new triangle 
    which is the copy of <I>h-<A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A>()</I>.<BR>

<EM>Precondition: </EM><MATH><I>h,i,j</I></MATH> denote distinct, consecutive vertices of the
    halfedge data structure and form a cycle: i.e., <I>h-&gt;vertex() ==     i-&gt;<A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A>()-&gt;vertex()</I>, ..., <I>j-&gt;vertex() ==     h-&gt;<A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A>()-&gt;vertex()</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Halfedge_handle_join_loop6_Halfedge_handle_h+_Halfedge_handle_g9;"></A>
Halfedge_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.join_loop ( Halfedge_handle h,  Halfedge_handle g)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    glues the boundary of the two faces denoted by <MATH><I>h</I></MATH> and <MATH><I>g</I></MATH> together 
    and returns <MATH><I>h</I></MATH>. Both faces and the vertices along the face denoted
    by <MATH><I>g</I></MATH> gets removed. Both faces may be holes. The invariant 
    <I>join_loop( h, split_loop( h, i, j))</I> returns <MATH><I>h</I></MATH> and keeps the 
    data structure unchanged.<BR>

<EM>Precondition: </EM>The faces denoted by <MATH><I>h</I></MATH> and <MATH><I>g</I></MATH> are different and have
    equal degree (i.e., number of edges).<BR>

<EM>Requirement: </EM> <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC="cc_equiv.gif"> </I></MATH> 
    <I><A HREF="../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477">CGAL::Tag_true</A></I>.
        </TD></TR>
        </TABLE>
<P>

<H3>Validness Checks</H3>
<P>

These operations are the same as for 
<I><A HREF="Class_HalfedgeDS_const_decorator.html#Cross_link_anchor_878">CGAL::HalfedgeDS_const_decorator</A>&lt;HDS&gt;</I>.
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_valid6_bool_verbose_=_false+_int_level_=_09_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.is_valid ( bool verbose = false,  int level = 0)
        </I></NOBR>
        
    
        </TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_normalized_border_is_valid6_bool_verbose_=_false9_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    D.normalized_border_is_valid ( bool verbose = false)
        </I></NOBR>
        
    
        </TR>
        </TABLE>
<P>

<H3>Miscellaneous</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_inside_out69;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    D.inside_out ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    reverses face orientations.<BR>

<EM>Precondition: </EM><I>is_valid()</I> of level three.
        </TD></TR>
        </TABLE>
<P>

<H3>See Also</H3>
<P>

<I><A HREF="Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_895">CGAL::HalfedgeDS_items_decorator</A>&lt;HDS&gt;</I><BR>

<I><A HREF="Class_HalfedgeDS_const_decorator.html#Cross_link_anchor_878">CGAL::HalfedgeDS_const_decorator</A>&lt;HDS&gt;</I>
<P>

<H3>Example</H3>
<P>

The following program fragment illustrates the implementation of the
Euler operator <I>split_vertex()</I> for a simplified polyhedron class.
<P>

<pre class="ExampleCode">
template &lt;class Traits&gt;
namespace CGAL {
    class Polyhedron {
        typedef <A HREF="Class_HalfedgeDS_default.html#Cross_link_anchor_883">HalfedgeDS_default</A>&lt;Traits&gt; HDS;
        HDS hds;
    public:
        // ...
        Halfedge_handle split_vertex( Halfedge_handle h, Halfedge_handle g) {
            <A HREF="Class_HalfedgeDS_decorator.html#Cross_link_anchor_881">HalfedgeDS_decorator</A>&lt;HDS&gt; D(hds);
            // Stricter preconditions than for <A HREF="Concept_HalfedgeDS.html#Cross_link_anchor_873">HalfedgeDS</A> only.
            CGAL_precondition( D.get_vertex(h) == D.get_vertex(g));
            CGAL_precondition( h != g);
            return D.split_vertex( h, g);
        }
    };
}
</pre>
<P>

<div class="NavNext"><hr> <b>Next:</b> <a href="Class_HalfedgeDS_default.html"><I>HalfedgeDS_default&lt;Traits,HalfedgeDSItems,Alloc&gt;</I></a> 


    
<div class="NavBottom">
<hr><!-- Bottom Navigation --------------------------------------------- -->
  <strong>Navigation:</strong>
<!Up_chapter_link_30!>
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<!-- End of Bottom Navigation ------------------------------------------ -->


<hr><!-- --------------------------------------------------------------- -->
<div class="NavAddress">

The <A HREF=http://www.cgal.org>CGAL Project</A> .

Tue, December 21, 2004 .
<hr></div>
</body>  </html>  
