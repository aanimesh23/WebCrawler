<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Coding Style</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Coding Style</h1>
<p>
<h2>Introduction to Computer Science I-III
<br>
ICS-21/-22/-23</h2>
<p>
</center>



<!-- Introduction -->

<a name="Introduction"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Introduction</b></td>
<td width ="80%">
  This lecture discusses coding style, including why using good style while
    writing our programs can help us debug them faster.
  We will discuss in detail four important aspects of style:
    names, alignment, locality, and comments.
  Most decisions that we make about formating our programs closely involve one
    of these four aspects.
  You should also start reading in Vermeulen,
    <i>The Elements of Java Style</i>.
  Specifically, this lecture covers <b>items</b> 5-15, 25-26, and 32-37 (which
    appear  on pages 5-18, 25-26, and 31-36 in Vermeulen's book).


</td>
</tbody>
</table>



<!-- Style -->

<a name="Style"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Coding Style</b></td>
<td width ="80%">
  Programmers spend an enormous amount of time reading and studying code when
    they are writing, testing, and debugging their programs.
  Using good programming style allows this process to proceed much more easily.
  When writing a program using iterative-enhancement, it is an excellent idea
    to beautify your code at the end of each enhancement, before proceding to
    the next one; each enhancement should result in the best code possible,
    before continuing to the next enhancement.
  Ultimately, this strategy will save you time compared to the strategy often
    used by students: ignore style until the program is completely written.
  This is a penny-wise, pound-foolish strategy.
  It is much harder to "finish" a  poorly-styled program, because it is harder
    to read and understand it; (software) engineers must learn to practice
    techniques that overcome human nature; this is one example.
  <p>
  In the real world, companies have their own style guidelines, which all their
    programmers must follow (see Vermuelen's book or Scott Ambler's
    <a href="../../../common/handouts/javaCodingStandards.pdf">Java Coding
    Standards</a>).
  In this way, code written by different programmers is consistent (and 
    therefore more easily readable by other programmers).
  So, it is not unreasonable for me to ask you to write in a certain style, as
    consistently as you can.
  <p>
  We will use four general principles to discuss issues in programming style (backwards, they
    are the acronym CLAN).
  <ul>
    <li>Names
    <li>Alignment
    <li>Locality
    <li>Comments
  </ul>
</td>
</tbody>
</table>



<!-- Good Names -->

<a name="Names"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Good Names</b></td>
<td width ="80%">
  Programmers get to choose identifiers that name variables (and as we will
    see later in this course methods, parameters, classes, exceptions, etc).
  We should choose descriptive names.
  Yes, we should also try to choose short names, but descriptiveness is more
    important.
  A long descriptive name is better than a short unclear one.
  Of course, a short descriptive name is optimal.
  <p>
  Beginning programmers typically choose names that are too short: they
    abbreviate too much, or use just single letter names.
  Rather than declaring <b><pre>int qs; //qs means quarters</pre></b> declare
    a variable named <b>quarters</b> (and then, if necessary, comment on some
    other aspect of the name -like its units).
  Using longer names requires a bit more typing (which costs some time) and
    takes longer to read (ditto) but it makes it much easier for you to
    <b>understand</b> your program as you are enhancing/debugging it (which
    saves much much much more time).
  Examine the names that I use in my sample and solution programs and mimic
    them.
  <p>
  So far, we have learned the following Java naming conventions.
  <ul>
    <li>Names of Variable start with lower-case letters, and use upper-case 
          letters at the start of each word in the name ("camel-style"):
          e.g., <b>dartsInCircle</b>.
    <li>Names of classes start with upper-case letters,and use use other
          upper-case letters at the start of each word in the name: e.g.,
          <b>StringTokenizer</b>.
    <li>Names of <b>public static final<b> fields are written in all
          upper-case, and use underscores to separate each word in the name:
          e.g., <b>PI</b>, <b>SPEED_OF_LIGHT</b>.
  </ul>
</td>
</tbody>
</table>



<!-- Alignment/Indenting -->

<a name="Alignment"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Alignment<br>(indenting)</b></td>
<td width ="80%">
  Generally, we use whitespace to present our programs (to humans, not
    computers) in an easy to  read and understand form.
  Remember that adding extra whitespace doesn't affect the meaning of our
    programs (the sequence of tokens is still the same), but it does affect
    how a program is displayed in the editor while we are reading it.
  <p>
  Using extra whitespace will make the program "longer" but easier to read.
  In fact, in one early style of written English (scriptio continua), words
    were strung together with no intervening whitespace.
  Itwasstillreadablebutveryslowanddifficulttocomprehend.
  Sometimes smaller isn't simpler.
  <p>
  Alignment involves mostly using horizontal whitespace.
  The most important use of alignment is showing which statements are
    controlled by which control structures, with the controlled statements
    indented to appear <i>inside</i> the statements that control them.
  This relationship is the essence of using control structures, so
    highlighting it is critical.
  <p>
  There is a pattern in how we write control structures.
  For example in the block after <b>main()</b>, all statements are indented at the same level.
  <b><pre>  public static void main (String[] args) {
     statement<sub>1</sub>
     statement<sub>2</sub>
     ...
     statement<sub>n</sub>
  }</pre></b>
  A typical indentation for these statements (and others inside control
    structures, illustrated below) is 2-4 spaces: one space is too little and
     more than four is too much (the Goldilocks principle again).
  In fact, the indent icons in the editor (red left-arrow followed by text or
    red right-arrow followed by text) make it easy to select multiple lines of
    text and indent (or outdent) them 2 spaces at a time.
  <p>
  Likewise, in an <b>if</b> statement we use the following forms (depending on
    whether or not the statement contolled by the <b>if</b> is a block)
  <b><pre>  if (test)
    statement<sub>T</sub>

  if (test) {
    statement<sub>T1</sub>
    statement<sub>T2</sub>
    ...
    statement<sub>Tn</sub>
  }</pre></b>
  For an <b>if/else</b> statement, there are four possiblities (based on the
    absence or presense of blocks).
  From simplest to most complicated, they are:
  <b><pre>  if (test)
    statement<sub>T</sub>
  else
    statement<sub>F</sub>


  if (test)
    statement<sub>T</sub>
  else{
    statement<sub>F1</sub>
    ...
    statement<sub>Fn</sub>
  }


  if (test) {
    statement<sub>T1</sub>
    ...
    statement<sub>Tn</sub>
  }else
    statement<sub>F</sub>


  if (test) {
    statement<sub>T1</sub>
    ...
    statement<sub>Tn</sub>
  }else{
    statement<sub>F1</sub>
    ...
    statement<sub>Fn</sub>
  }</pre></b>
  I like to write <b>}else{</b> on the same line, but Vermeulen likes to write
<b><pre>  }
  else{</pre></b>
  <p>
  Many programmers adopt a style that ALWAYS use blocks in <b>if</b>
    statements (and loops), even if they  contain just ONE statement.
  On the positive side, such an approach makes it very easy to add/remove
    statements (when debugging/enhancing programs), because the block is
    already there; otherwise going from one to more statements requires
    adding a block, and going from multiple to one statement requires removing
    the block.
  On the negative side, blocks, when they are unneccessary, make the program a
    harder to read.
  So, choose whichever of these options you think is better, but be consistent
    with your choice.
  I like "blocks where necessary" but Vermeulen likes "always blocks".
  <p>
  Finally, identically to <b>if</b> statements, we align a <b>for</b> loop by
    indenting the statement that is their body.
  <b><pre>  for (;;)
     statement

  for (;;) {
    statement<sub>1</sub>
    statement<sub>2</sub>
    ...
    statement<sub>n</sub>
  }</pre></b>
  Almost all interesting loops use a block for their bodies.
  Very few have trivially simple loops, and loops that have one
    <b>try-catch</b> statement in their bodies (<b>try-catch</b> has most of
    its code in its <b>try</b> block.
  <p>
  I cannot overemphasize how important it is to use proper alignment in control
    structures.
  A major source of programming errors for beginners is not understanding which
    statements are controlled by which control structures: these can get
    tricky with expression statements inside <b>if</b> statements inside loops.
  Proper alignment makes such relationships much simpler to see.
  I have seen students spend 2 hours trying to debug a program; at which point
    then finally spend 10 minutes aligning its statements (because I refuse to
    help them until they do), and then they solve their problem by themselves 
    in 1 minute.
  If you expect to debug your programs, it is imperative that you use proper
    alignment whenever you add/remove code to/from them.
  <p>
  You can get Eclipse to automatically indent your code:
    select the code to be aligned and then select the <b>Source</b>
    pull-down menu and the <b>Correct Indentation</b> option.
  (A faster way to do this is ctrl/a then ctrl/i: the first selects
   all the code in a file, the second realigns it.)
  Use this feature repeatedly as you write your code, to make sure it is
    always clearly indented, so you can see which control structures
    control which statements.
  You can even change how Eclipse does indentation (and more generally
    presents your program in an editor) by changing information in
    <b>Windows | Preferences</b>, but doing so is beyond the scope of
    this course (but feel free to disclose <b>Java | CodeStyle</b> and
     <b>Java | Editor</b>) and experiment.
  <p>
  Another use of alignment occurs when declaring a sequence of variables;
    rather than doing so haphazardly, we can align the types, names, initial
    values, and comments.
  <b><pre>  int    game      =  0;    //Current game being played
  int    maxGames  = 10;    //Limit on games for one customer
  int    winCount  =  0;    //For statistics (see WL_Ratio too)
  int    loseCount =  0;
  double winLoseRatio;      //Calculated at the end of a session</pre></b>
  Some programmers think that this kind of alignment is too much trouble,
    because if you add/remove declarations, you must realign them; I think the
    effort is worth it.
  So please examine all the alignment that I use in my sample and solution
    programs and mimic them.
</td>
</tbody>
</table>



<!-- Locality -->

<a name="Locality"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Locality<br>(paragraphing)</b></td>
<td width ="80%">
  Locality is the most subjective of the style rules.
  It involves mostly adding extra vertical whitespace (blank lines).
  By grouping statements together and then placing blank lines between groups,
    we create the programming equivalent of paragraphs in prose writing (where
    each paragraph contains related sentences).
  In a written paper, students would never put all the sentences into one long
    paragraph; likewise, students would never make every sentence into its own
    paragraph.
  So, we should always use a more reasonable grouping (some number of related
    lines) for paragraphing in our programs.
  <p>
  Typically, each code group should contain a half-dozen statements.
  The magic number 7+/-2 is also used for psychological reasons: it represents
    the number of items typically usable in the brain's short-term memory.
  Whenever a large number of statements appear in a block of code, use blank
    lines to group them into a smaller number of related sequences.
  We can write a preface comment (see below) that acts as a topic sentence for
     the paragraph of code.
  <p>
  A <b>for</b> loop and <b>try-catch</b> almost always start their own group;
    so do complicated <b>if</b> statements.
  Locality is more art than rules; I encourage you to examine the groupings
    that I use in my sample and solution programs and try to critique and
    ultimately emulate them.
</td>
</tbody>
</table>



<!-- Comments -->

<a name="Comments"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Comments</b></td>
<td width ="80%">
  We document our programs with comments.
  While we try to express ourselves as well as we can with Java code, there is
     always other useful information about a program that we would like 
     communicate to programmers reading our code (including ourself, while
     debugging it, or at some future date when we are enhancing our code).
  Such information is for programmers, not the computer: not the instructions 
    saying HOW the code works (that is for the programmer and computer), but 
    WHAT the program does and WHY it does it (that way).
  We supply this information in comments. 
  <p>
  There are a few different categories of comments that frequently reappear.
  <ul>
    <li>Preface comments act as a topic-sentence, describing a group of related
         statements that directly follow the comment.
        Use the locality principle with such comments:
        there should be more blank lines separating the comment from the code
           before it (which it doesn't describe) than blank lines separating
           the comment from the code after it (which it does describe).
        Taken together, and indented appropriately, these commments provide an
          outline of the program.
        Every loop should have a preface comment; for other statements, comment
          them as necessary.
    <p>
    <li>Sidebar comments appear on the same line, after some statement.
        They help explain that statement; sometimes a series of sidebar
           comments will also help outline the computation.
        Use alignment so that all the sidebar comments are aligned: that makes
          it very easy to have the code separated from the comments (more use 
          of the locality rule).
    <p>
    <li>"Sandwhich comments" directly preface and suffix some statement (with
          no blank lines lines).
        Use a sandwhich comment to make the <b>if/break;</b> statements
          terminating a long loop easy to locate.
 <pre><b>  //////////////////////
  if (index == maxIndex)
    break;
  //////////////////////</b></pre>
     <p>
     <li>Avoid mingling comments within code; separate them (horizontally or
           vertically) for clarity.
         In the following example use the FORMER side-bar comment, not the
         latter, code (both have the same tokens, when comments are treated
         as white-space).
 <pre><b>  d = v*t;  //distance = velocity times time
  d /*distance*/ = v /*velocity*/ * t /*time*/;</b>
  </ul>
  Like the other rules of good style, comments are best included while the
     program is being written, not after it is working.
  I find and correct many errors while writing comments, because I am focusing
     on the code while writing about it.
  Again, many students approach writing comments as something to do AFTER the
    program is complete, which ultimately slows them down.
  Examine the comments that I use in my sample and solution programs and try
    to critique and ultimately emulate them.
</td>
</tbody>
</table>



<!-- Misc -->

<a name="Misc"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Miscellaneous Style Rules</b></td>
<td width ="80%">
  Finally, here are some miscellaneous style rules
  <ul>
    <li>Use local variables whenever they clarify the code, keeping expression
          sizes managable; use the goldilocks principle
    <li>Don't reuse variable names for more than one purpose.
    <li>Choose the types for variables carefully.
        If a variable stores only integral values, declare it to be an
          <b>int</b>; use explicit conversion if you need to use it as a
          <b>double</b> in some expression(s).
    <li>Initialize variables when they are declared; but don't initialize
          them at all if the next use of the variable is to store something
          into it.
    <li>Use about 80 characters per line; remember that a carriage return
          is whitespace, so don't write huge lines of code.
    <li>Good style is cumulative: each style improvement may marginally
          improve a program; but many can dramatically improve it.
  </ul>
  Write code to be easily readable and understandable.
  Don't obfuscate code because you think it will make the code run faster.
  Compilers do amazing optimizations.
</td>
</tbody>
</table>



<!-- Problem Set -->

<a name="ProblemSet"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Problem Set</b></td>
<td width ="80%">
  To ensure that you understand all the material in this lecture, please solve
    the the announced problems after you read the lecture.
  <p>
  If you get stumped on any problem, go back and read the relevant part of the
     lecture.
  If you still have questions, please get help from the Instructor, a CA, 
    or any other student.
  <ol> 
    <li>Each of the following blocks computes the average of the scores entered by the
          user.
        Notice the difference between where <b>score</b> is declared and initialized.
        Which code do you think is best? Explain why.
<pre><b>  int count = 0;
  int sum   = 0;
  int score;
  for (;;) {
    score = Prompt.forInt("Enter score (-1 to terminate)");
    if (score == -1)
      break;
    count++;
    sum += score;
  }
  System.out.println("Average = " + sum/count);


  int count = 0;
  int sum   = 0;
  for (;;) {
    int score = Prompt.forInt("Enter score (-1 to terminate)");
    if (score == -1)
      break;
    count++;
    sum += score;
  }
  System.out.println("Average = " + sum/count);</b></pre>

  <p>
    <li>Does Java allow any of the following code fragments (with a redeclaration
          of <b>v</b>).
        If so, what values are printed.
<pre><b>
<b>a)</b>{
    int v = 0;
    System.out.println(v);
    {
      int v = 1;
      System.out.println(v);
    }
    System.out.println(v);
  }



<b>b)</b>{
    {
      int v = 0;
      System.out.println(v);
    }

    {
      int v = 0;
      System.out.println(v);
    }

  }


<b>c)</b>{
    {
      int v = 0;
      System.out.println(v);
    }

    System.out.println(v);

    {
      int v = 0;
      System.out.println(v);
    }

 }


<b>d)</b>{
    {
      int v = 0;
      System.out.println(v);
    }

    {
      System.out.println(v);
      int v = 0;
      System.out.println(v);
    }

  }</b></pre>
  </ol>
</td>
</tbody>
</table>


</body>
</html>
