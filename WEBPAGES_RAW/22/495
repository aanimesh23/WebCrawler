// The example is designed to illustrate a self-refernential data structure
// and give some practice with following references. The ideal is to draw
// the boxes and arrows with this example so that you can see what the code
// is actually doing.
public class SelfReferentialDataStructureExample {
	
	// This is an inner class which is the basic building block of the chain.
	// It holds one piece of data which in this case is an integer. (In the future
	// we will use a generic class which can hold a reference to an arbitrary object.)
	// This class also holds a variable which is a reference to an instance of this class.
	// It is declared static so that instances can be created without there being an
	// instance of class "SelfReferentialDataStructureExample". This allows us to make
	// in instance of "ChainLink" from within the static method "main".
	private static class ChainLink
	{
		public int data;
		public ChainLink next;
		
		// Constructor allows to initialize both variables.
		public ChainLink( int data, ChainLink next )
		{
			this.data = data;
			this.next = next;
		}
	}
	
	// This is a nonsense program that does nothing useful and isn't particularly well
	// written but is designed to give some practice with how references work. 
	// Draw the boxes and arrows for the code below to practice manipulating references
	// in linked data structures.
	public static void main(String[] args) {
		
		ChainLink linkA;
		
		linkA = new ChainLink( 17, null );
		
		ChainLink linkB = new ChainLink( 17, null );
		
		if ( linkB == linkA )
			System.out.println("linkA and linkB references point to the same location.");
		else
			System.out.println("linkA and linkB references do not point to the same location.");
		
		linkB.next = linkA;
		linkB.data = 10;
		linkB.next.data = 100;
		
		ChainLink linkC = new ChainLink( 23, linkB );
		
		linkA = linkC;
		
		if ( linkC == linkA )
			System.out.println("linkC and linkA references point to the same location.");
		
		// What if we did: linkB.next = null?
		// We would lose the list.
		
	}
	
	

}
