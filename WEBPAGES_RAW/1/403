<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1">
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay">
<META HTTP-EQUIV="UPDATED" CONTENT="Friday, January 10, 2003 6:18 PM">
<TITLE>Writing Professional Programs</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="D7F76DF3">
<META HTTP-EQUIV=KEYWORDS CONTENT="CS 2, CS2, Programming Style, Academic Honesty">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="Programming style and assignment guidelines for ICS H22, the honors section of the second-quarter introductory course  in the Department of Information and Computer Science at the University of California, Irvine.">
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2000 by David G. Kay.  All rights reserved.">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<A NAME="_top"></A>
<P>
<IMG SRC="Writing_Professional_Pr_files/Sidebar_123.gif" WIDTH=552 HEIGHT=77>
<BR>
<FONT FACE="AGaramond" SIZE=4> &#160; </FONT></P>
<BR>
<P>
<FONT FACE="AGaramond" SIZE=4>Nearly all of the ICS 22 lab assignments require
that you write some Java code.  In ICS 21 you concentrated mostly on the
correctness and completeness of your programs, but from now on your grade
will also depend on other qualities.  A good program has many attributes,
such as correctness, efficiency, ease of learning and use, reliability,
modifiability, and clarity.  Correctness is paramount, but &quot;anything
that works&quot; is the attitude of a hacker, not a professional.  A professional-quality
program must score highly in all these categories, and we intend to help
you learn how to write professional programs.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>One aspect of professional programs is their
style.  When we speak of programming style, we use the term &quot;style&quot;
not in the sense of an author&#39;s manner of expression--Hemingway&#39;s
style is different from Joyce&#39;s--but in the sense of &quot;good, clear
style&quot; that everyone should strive for.  Achieving that clarity requires
work at many levels, from the overall design of the program&#39;s classes,
algorithms, and data structures, to the mundane details of indentation,
capitalization, and spacing.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Throughout the course we will concentrate
on the major design issues; in this document we focus on the smaller details.
 Yet these details are not cosmetic trivialities.  Adhering to consistent
style guidelines helps you write clearer, more modifiable, more reliable,
and generally higher quality code.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>The style guidelines we present here are good
ones.  We require that you follow them (perhaps with amendments your TA
makes) for your programming in this course.  That is not to say that every
detail of these guidelines is superior to any other way of doing things,
but for the sake of consistency we require that you follow these guidelines
in this course.  You will find that many organizations have coding style
guidelines that all their programmers must follow.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>However, nobody should follow style guidelines
slavishly.  If you come upon a specific situation where the rules don&#39;t
make a program clearer, the rules should give way (though you should check
with your TA to make sure).</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Program design and organization:</B>  You
should organize your program so that its structure is clear, using abstraction
of various kinds to hide unnecessary detail at each level. </FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* &#160; A main strength of Java is the set
of features it provides to support object-oriented programming.  Wherever
appropriate, you should design your program in terms of the real-world objects
it represents, making good use of classes and their associated operations.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* &#160; Your classes should use the features
Java provides for abstraction and information hiding, including where appropriate
inheritance and private methods and instance variables.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* Methods should almost never be longer than
one screenful; break long methods into sub-programs.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* Use symbolic constants wherever applicable.
 Other than zero and one, you should have no literal constants (i.e., no
numbers) in the body of your program.  Every number has a meaning, and you
should capture that meaning in a constant definition.  (But that doesn&#39;t
mean following the silly practice of defining eponymous constants like<A NAME="_14_3191"></A></FONT><FONT FACE="Courier"><TT>
static final int TEN = 10; </TT></FONT><FONT FACE="AGaramond" SIZE=4>--use
meaningful identifier names.</FONT><FONT SIZE=4>)</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Choosing identifier names:</B>  You must
choose identifier names that convey their function clearly to anyone reading
your program.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* The names of void functions (and of methods
whose return value is only a status indicator of successful completion)
should be imperative words or phrases-- commands that describe their actions.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160;  &#160; <A NAME="_14_3597"></A></FONT><FONT FACE="Courier"><TT>public
void printFormLetter (Name n, Address a) {...}</TT></FONT></P>
<P>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; public boolean fillRecord
() {...}</TT></FONT></P>
<P>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; public int sortByVegetableName
() {...}</TT></FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* Other method names should usually be nouns,
naming the value returned.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160;  &#160; <A NAME="_14_3808"></A></FONT><FONT FACE="Courier"><TT>public
double insurancePremium (long ZipCode)  {...}</TT></FONT></P>
<P>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; public numberOfFlights sizeOfFlightRecordCollection
()  {...}</TT></FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* Names of methods that return boolean values
should be declarative statements, so that they &quot;read correctly&quot;
when they&#39;re called.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160;  &#160; <A NAME="_14_4063"></A></FONT><FONT FACE="Courier"><TT>public
boolean cityNameIsValid (Response nameToCheck) {...}</TT></FONT></P>
<P>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; if (cityNameIsValid (usersInput)
<BR>
&#160;&#160;  &#160;  &#160; System.out.println(&quot;That's a city name,
all right.&quot;);</TT></FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Indentation and spacing:  </B>The key concept
here is to include enough white space so that more closely related items
appear closer together than less closely related items.  This should make
the program&#39;s organization apparent.  Never be stingy with blank lines;
use them to help guide the reader&#39;s eye to what&#39;s important.* Start
each new statement and each new data definition on a new line.  Break long
lines at a clear, convenient place and indent the continuation to indicate
that it&#39;s not a separate new statement.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Documentation:  </B>The documentation required
varies from one assignment to the next, but at a minimum every assignment
should have the following.  Remember that comments can&#39;t make up for
poorly chosen identifier names or unclear code.* Include a comment at the
top of the program that includes your name, your student ID number, the
course, your TA&#39;s name, and the name and number of the assignment.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* Every procedure should include a comment
that describes the procedure&#39;s purpose, the kinds of parameters it expects
and any assumptions about their values (this is called the procedure&#39;s
precondition--what&#39;s true before it starts), the values it returns or
actions its performs (its postcondition--what&#39;s true after it executes),
and a high-level description of the method it uses if that method isn&#39;t
obvious from reading the code.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* Explain any intricate or obscure sections
of code in comments if you can&#39;t rewrite them to be less obscure.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* Because comments appear along with the code,
you can assume that the reader of your comments knows how to read Java,
even though he or she isn&#39;t familiar with your particular program. 
Thus, you should avoid silly, redundant comments like this:<A NAME="_14_5953"></A>
<BR>
</FONT><FONT FACE="Courier"><TT>total++;  // Add one to the total.<A NAME="_14_6004"></A></TT></FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Safety and reuse:</B>  Don&#39;t reinvent
the wheel, at least when you have permission to use an existing wheel. 
In real-world software development, program designers learn and use vast
libraries of classes and programs so they don&#39;t have to rebuild everything
from the ground up.  </FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>In an introductory course such as this one,
there will be times when we ask you to build something from the ground up
because you need to learn the construction techniques involved.  But when
we don&#39;t tell you to build something from scratch, you should use existing
code where possible and where permissible (which means, of course, that
you can&#39;t use your classmates&#39; or roommates&#39; code--see below).</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Code reuse is particularly valuable when the
existing code has qualities that your code lacks, such as extra features,
clearer design, or thorough error-checking.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>We will use the program grading form shown
below; you should read it now and use it as a guide when you write your
code.  Notice how large a portion of your grade depends on issues of programming
style.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Turning in lab assignments:</B>  Each assignment
describes what to turn in.  Typically this includes&#160;both a paper copy
and an electronic copy.  </FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Place all the parts of your paper submittal
into a manila envelope so that it forms one package. Make sure your name,
your student ID, and your TA&#39;s name are written on the front of the
envelope.  Then give the envelope to your TA in section. </FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>For electronic submission, use the Checkmate
system at </FONT><FONT FACE="Courier New">checkmate.ics.uci.edu</FONT><FONT FACE="AGaramond" SIZE=4>.
</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Please refer to the course outline on the
importance of keeping backups; papers do get lost, and servers do crash,
and we&#39;ll expect you to be able to produce a replacement copy easily
if either misfortune should occur again.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Late assignments:</B>  Assignments will
typically be due at the start of your discussion section on the date specified
on the assignment; your submission to Checkmate should be complete by then
and your paper submission should be ready to hand in. We expect everyone
to turn in by the due date whatever work they have completed; significant
lateness will incur penalties.  (We can make exceptions for major illness
or emergency, but not for conflicts with other classes or work.)  We will
give partial credit for work that is partially complete but correct as far
as it goes; this is another reason why you should develop your programs
in stages, coding and testing and debugging as you go, rather than trying
to do it all in one big push.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Early assignments:</B>  We will award a
bonus of 5% for any assignment that is turned in more than 48 hours before
the due date; we hope this will encourage you to begin work early on your
assignments.  This bonus, like all extra credit on labs, can make up for
points missed on other lab assignments, but it does not &quot;spill over&quot;
past 100% to make up for points missed on exams.  The 48-hour figure is
firm; please don&#39;t come asking for the bonus if you miss the cut-off,
even by a short while or in circumstances beyond your control.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Academic honesty:</B>  Part of being a
professional is following the profession&#39;s norms of accepted behavior.
 As you know, you may not copy commercial programs from the lab machines
to use at home.  Likewise, in an academic setting you may not turn in someone
else&#39;s work as your own.</FONT><A HREF="Writing_Professional_Pr_files/Footnotes.html#_271">Footnotes</A></P>
<P>
<FONT FACE="AGaramond" SIZE=4>As a general principle, we expect you to do
your own independent work in all parts of this course.  In this course it
is always permissible, even desirable, to talk with your classmates about
the conceptual course material or the requirements of an assignment (though
the instructor or TA will be most reliable for this).  It is always permissible
to get help from anyone about using the programming environment or other
system details, help with minor syntax errors, or suggestions possible test
cases for your programs (though when an assignment requires it, you must
write your own description of your test plan).  It is never permissible
(except if an assignment explicitly allows or requires working in groups)
to copy another student&#39;s solution (whether code, prose, or math). 
A good rule of thumb is this:  Any time you find yourself <I>writing down</I>
(on paper or by electronic means) part of someone else&#39;s solution, you
are copying impermissibly.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Turning in another person&#39;s work as your
own violates the honesty policies of ICS and UCI (<A NAME="_14_10356"></A></FONT><FONT FACE="Courier"><TT><A HREF="http://www.ics.uci.edu/academics/policies/icsAcademicHonestyPolicy.php">http://www.ics.uci.edu/academics/policies/icsAcademicHonestyPolicy.php</A></TT></FONT><FONT FACE="AGaramond" SIZE=4>,
<A NAME="_14_10434"></A></FONT><FONT FACE="Courier"><TT><A HREF="http://www.ics.uci.edu/academics/policies/uciAcademicHonestyPolicy.php">http://www.ics.uci.edu/academics/policies/uciAcademicHonestyPolicy.php</A></TT></FONT><FONT FACE="AGaramond" SIZE=4>).
The ICS Department takes academic honesty very seriously and imposes serious
penalties on students who violate its guidelines. Detected violations could
result in your failing the course, having a letter filed with the school,
and losing a variety of other benefits and privileges.  We do check for
academic dishonesty both manually and automatically.  It is an unfortunate
fact that nearly every quarter, some students in ICS classes are found to
have violated these policies; to protect the privacy of the guilty, violations
are not made public, but sadly, they do occur.  No matter how much pressure
you feel from deadlines or other sources, no matter how inconceivable it
is to you that you might not complete an assignment on time, <I>never</I>
take the shortcut of turning in someone else&#39;s code.  Compared to the
consequences of academic dishonesty, one low assignment score is a minor
disadvantage.  If you feel as if you&#39;re falling behind or have other
difficulties, see your TA or the instructor; we are more sympathetic than
you might expect.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>We do encourage all students to help their
classmates with the course material and the labs, within certain limits.
 Helping someone else doesn&#39;t hurt your grade; we don&#39;t have any
limits on how many As or Bs we can give.  It is even permissible in ICS
22 to let someone else <I>look over</I> your code to get an idea of how
you organized it.  However, you should not let anyone <I>copy</I> your code,
either on paper or electronically.  In fact, it is wise to keep your code
in your own possession; if you give a copy to someone else, even if it&#39;s
just &quot;for reference,&quot; that person might be tempted to copy portions
of your code; then <I>you</I> could be accused of academic dishonesty. </FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Most importantly, realize that getting &quot;the
answer&quot; is only the last part of each assignment.  Equally important
is the <I>process</I> of getting the solution--including the false starts,
bugs, misconceptions, and mistakes--because the learning occurs in the doing.
 Completely apart from the ethical issues, copying a solution deprives you
of the whole point of the assignment.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Working at home:</B>  Doing your lab work
at home is comfortable, convenient, economical, and safe.  It also benefits
students who work in the lab, by freeing up the machine you would otherwise
be using.  You are welcome to do your lab work at home or anywhere else
you have legitimate access to a computer, but in addition to the advantages
just noted, there are also some potentially serious disadvantages which
we will address below, and which you must consider as you decide how best
to complete your labs.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* &#160; To ensure fairness, consistency,
and efficiency in the grading, all the code you turn in must work correctly
in the Java environment in our lab.  If you develop your code on a different
computer, operating system, or Java environment, it is entirely your responsibility
to &quot;port&quot; your software to work in the lab by the due date.  Java
is supposed to be perfectly portable across platforms, but (especially if
you&#39;re using Java or Java-like products from Microsoft) there still
may be subtle, undocumented differences that are extremely difficult to
identify and work around.  You can imagine how frustrating it would be to
have a program that worked fine at home crash in the lab, especially right
before a due date.  It will be your responsibility to avoid these frustrations
to the extent you can, and to deal with them yourself, without doing damage
to the lab machines or your classmates, when they arise despite your best
efforts.  To reiterate, porting problems will not be an excuse for late
assignments.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* &#160; For some of the lab assignments,
there will be data or code that you&#39;ll need to incorporate, which we&#39;ll
supply on the lab servers. You will need to copy this information from the
servers onto floppies (or via the Internet) to use at home. </FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* &#160; For some of the labs, we will use
software other than Java, though we anticipate that any such software will
be available over the Web.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>* &#160; Working at home is convenient, but
it&#39;s also isolated; close friendships and a &quot;support network&quot;
develop among students who use the labs.  These are your first &quot;professional
contacts;&quot; it would be unfortunate to close yourself off from them
completely.</FONT></P>
<HR>
<P>
<FONT FACE="Palatino" SIZE=5>Grading Criteria for ICS 22 Programs</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Here are some guidelines for how we will assign
points for the programming portions of lab exercises. (Note that most exercises
have points for others activities as well, such as test plans and prose
analysis.)  Your TA&#39;s criteria may vary slightly; he or she has the
primary grading responsibility for your laboratory work.</FONT>
<TABLE WIDTH=100% CELLPADDING=1>
<COL WIDTH=71%><COL WIDTH=29%>
<TR>
<TD WIDTH=71% VALIGN=TOP>
<FONT FACE="AGaramond" SIZE=4><B>Correctness</B> for valid data.  Are the
answers right? Is the output spacing correct?  Does the program do what
it is supposed to do for any data that meets the problem&#39;s specifications
(i.e., does the program handle every situation that it&#39;s supposed to
handle?)</FONT></TD>
<TD WIDTH=29% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=54>
<FONT FACE="AGaramond" SIZE=6><SUB>40%</SUB></FONT><BR></TD>
</TR>
<TR>
<TD WIDTH=71% VALIGN=TOP>
<FONT FACE="AGaramond" SIZE=4><B>Robustness</B> in the face of unusual data.
Does it crash when given no data, more than the maximum allowable, bad data
values? Within the limits of the specifications, does the program bomb when
it gets garbage?  Instead, it should print an informative message in these
situations.</FONT></TD>
<TD WIDTH=29% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=54>
<FONT FACE="AGaramond" SIZE=6><SUB>10%</SUB></FONT><BR></TD>
</TR>
<TR>
<TD WIDTH=71% VALIGN=TOP>
<FONT FACE="AGaramond" SIZE=4><B>Quality</B> of solution; choice of algorithm.
Points deducted for particularly graceless, awkward, cumbersome, or inappropriate
way of going about the problem.</FONT></TD>
<TD WIDTH=29% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=54>
<FONT FACE="AGaramond" SIZE=6><SUB>10%</SUB></FONT><BR></TD>
</TR>
<TR>
<TD WIDTH=71% VALIGN=TOP>
<FONT FACE="AGaramond" SIZE=4><B>Design</B> quality. Is the program divided
into logical parts using classes where appropriate, each encapsulating a
single task and using abstraction techniques where applicable, or are the
statements for a given task scattered all over the program or run together
with other tasks?</FONT></TD>
<TD WIDTH=29% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=54>
<FONT FACE="AGaramond" SIZE=6><SUB>10%</SUB></FONT><BR></TD>
</TR>
<TR>
<TD WIDTH=71% VALIGN=TOP>
<FONT FACE="AGaramond" SIZE=4><B>Identifiers</B>. Were the identifier names
and symbolic constants chosen to reflect their function? Are they meaningful
to the reader, or do they require a lot of explanation? </FONT></TD>
<TD WIDTH=29% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=54>
<FONT FACE="AGaramond" SIZE=6><SUB>5%</SUB></FONT><BR></TD>
</TR>
<TR>
<TD WIDTH=71% VALIGN=TOP>
<FONT FACE="AGaramond" SIZE=4><B>Format </B>of source program. Does the
program follow the course&#39;s style conventions? Is white space used well?</FONT></TD>
<TD WIDTH=29% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=54>
<FONT FACE="AGaramond" SIZE=6><SUB>5%</SUB></FONT><BR></TD>
</TR>
<TR>
<TD WIDTH=71% VALIGN=TOP>
<FONT FACE="AGaramond" SIZE=4><B>Documentation</B>: Are there enough comments
to make the program clear to the reader (noting that good modularity and
identifiers make the commenting burden lighter)? Are any unusual portions
of the code explained? Do the comments clutter up or interfere with the
program text? Does the external written documentation, if required, give
the reader a lucid overview of the program&#39;s organization?</FONT></TD>
<TD WIDTH=29% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=54>
<FONT FACE="AGaramond" SIZE=6><SUB>20%</SUB></FONT><BR></TD>
</TR>
<TR>
<TD WIDTH=71% VALIGN=TOP>
<FONT FACE="AGaramond" SIZE=4><B>TOTAL</B></FONT></TD>
<TD WIDTH=29% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=54>
<FONT FACE="AGaramond" SIZE=6>100%</FONT><BR></TD>
</TR>
<TR>
<TD WIDTH=71% VALIGN=TOP>
&#160;</TD>
<TD WIDTH=29% VALIGN=TOP ALIGN=DECIMAL CHAR='.' CHAROFF=54>
<BR></TD>
</TR>
</TABLE>
<BR>
<CENTER>
<IMG SRC="Writing_Professional_Pr_files/Five_Vital_Things_to_chec.gif" WIDTH=276 HEIGHT=467 HSPACE=6 VSPACE=6 ALT="Five Vital Things to check as you start and finish your lab assignments:">
</CENTER>
<A NAME="End of Intro/TOC"></A><A NAME="TOC Location"></A></P>
<BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR>
<P>
<FONT FACE="Helvetica" SIZE=1>Written by David G. Kay (1990), including
much material adapted with permission from Appendix E of <I>Programming
for People/Pascal</I> by David&#160;G.&#160;Kay (Mayfield, 1985).</FONT></P>
<P>
<FONT FACE="Helvetica" SIZE=1>Revisions made to reflect THINK Pascal by
Joe Hummel and Norman Jacobson, January, 1992.</FONT></P>
<P>
<FONT FACE="Helvetica" SIZE=1>Minor revisions by Norman Jacobson &amp; Theresa
Millette, December 1992.</FONT></P>
<P>
<FONT FACE="Helvetica" SIZE=1>Prose polished by David G. Kay, January 1995.</FONT></P>
<P>
<FONT FACE="Helvetica" SIZE=1>Revised for C++ and object-oriented programming
by David G. Kay, with assistance from Rasheed Baqai, January 1997.</FONT></P>
<P>
<FONT FACE="Helvetica" SIZE=1>Revised January 1998 and September 1998 by
David G. Kay.</FONT></P>
<P>
<FONT FACE="Helvetica" SIZE=1>Revised yet again by David G. Kay, April 1999,
particularly to address honesty and professionalism.</FONT></P>
<P>
<FONT FACE="Helvetica" SIZE=1>Revised January 2000 to reflect Java by David
G. Kay, and revised further in January 2001 and January 2003.</FONT></P>
<BR CLEAR=ALL>
<P>
</P>
<HR>
<P>
<address>
<FONT FACE="Palatino"><A HREF="http://www.ics.uci.edu/~kay/">David G. Kay</A>,
<I>406B Computer Science
<BR>
</I><A HREF="http://www.uci.edu/">University of California, Irvine</A>
<BR>
</FONT><FONT FACE="AGaramond">Irvine, CA  92697-3425</FONT><FONT FACE="Palatino">
 --  </FONT><FONT FACE="AGaramond"><B>(949) 824-5072</B></FONT><FONT FACE="Palatino">
 --  Fax </FONT><FONT FACE="AGaramond"><B>(949) 824-4056</B></FONT><FONT FACE="Palatino">
 --  Email  <a href=mailto:kay@uci.edu>
</FONT><FONT FACE="Courier"><TT><A HREF="mailto:kay@uci.edu">kay@uci.edu</A></a>
<BR>
</address>
</TT></FONT></P>
<P>
<FONT FACE="Palatino" SIZE=1>Friday, January 10, 2003 -- 6:18 PM</FONT></P>
</BODY>
</HTML>
