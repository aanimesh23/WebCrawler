<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<!-- TemplateBeginEditable name="doctitle" -->
<!-- TemplateEndEditable -->
<!-- TemplateBeginEditable name="head" -->
<!-- TemplateEndEditable -->




<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1">
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay">
<META HTTP-EQUIV="UPDATED" CONTENT="Wednesday, November 2, 2005 12:58 PM">
<TITLE>Restaurants with Menus</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERXDATA" CONTENT="D23C3977">
<META HTTP-EQUIV=KEYWORDS CONTENT="CS 1, CS1, assignment, Scheme">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.">
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<A NAME="_top"></A>
<A NAME="Restaurants with Menus"></A>
<P>
<FONT FACE="AGaramond" SIZE=4>Steps for modifying the restaurants program to include
restaurants with a menu field:</FONT></P>
<OL TYPE="1">
<LI>
<FONT FACE="AGaramond" SIZE=4>You need data definitions for three classes
to replace the one rrant class:  One for the new rrant class (a structure
with four fields, a name, cuisine, phone, and menu), one for the menu (a
list of dishes), and one for a dish (a structure with two fields, a name
and a price).</FONT>
<BR><BR>
<FONT FACE="AGaramond" SIZE=4>By separating out each of these classes, you
have a way of thinking about which type of data each function (and each
helper function) you write needs to act on.</FONT></LI>
<BR><BR>
<LI>
<FONT FACE="AGaramond" SIZE=4>You need to handle the input of the new restaurants.
 This involves three things:  Asking the user for a single dish (name and
price), asking the user for a menu (i.e., repeatedly asking for individual
dishes), and creating the new restaurant with the entered menu.  For the
middle task, you need some way to let the user indicate he or she is finished
entering dishes.  One way would be to ask the user to enter the empty string
(&quot;&quot;) instead of a name when there are no more dishes to enter.
 Another would be to have a separate (sub-)menu command to add a new dish
(and a command to quit adding new dishes).</FONT></LI>
<BR><BR>
<LI>
<FONT FACE="AGaramond" SIZE=4>To print out a restaurant, you need to print
its menu (which means you need a way to print a nicely formatted dish).</FONT></LI>
<BR><BR>
<LI>
<FONT FACE="AGaramond" SIZE=4>The change-prices function needs to work on
a list of dishes.  One good approach would be to write a </FONT><FONT FACE="Courier New">dish-adjust-price</FONT><FONT FACE="AGaramond" SIZE=4>
function that takes a dish and a percentage and returns the dish with the
price changed by the specified percentage (up or down, as before).  Then
you can apply </FONT><FONT FACE="Courier New">dish-adjust-price</FONT><FONT FACE="AGaramond" SIZE=4>
to a whole menu.</FONT></LI>
</OL>
<BR CLEAR=ALL>
<BR>
<P>
</P>
<HR>
<FONT FACE="Garamond"><A HREF="http://www.ics.uci.edu/~kay/">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br>
<font size="2" face="Garamond">
<!-- #BeginDate format:fcAm1a -->Friday, October 24, 2008 7:03 AM<!-- #EndDate -->
</font></span>
</BODY>
</HTML>