<?xml version='1.1'?>
<!DOCTYPE html
     PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
     'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
<head>
  <title>Java Package</title>
  <meta name='Author' content='Thomas A. Alspaugh'/>
  <meta name='Description' content="Java Package"/>
  <meta http-equiv='content-type' content='text/html; charset=ISO-8859-1'/>
  <meta http-equiv='Content-Style-Type' content='text/css'/>
  <link href='../../alspaugh-uci.css' rel='stylesheet' type='text/css'/>
  <!-- <link href='../alspaugh-uci-cls.css' rel='stylesheet' type='text/css'/> -->
  <style type='text/css'>
    @media screen {
      body     {  background: url("img/bg-java-package.png") repeat-y;  }
      #TMain   {  margin-left: 10.00em;  }
    }
  </style>
</head>
<body>

<div id='TBg'>

<div id='THeader'>
Making a Java Package
</div>

<div id='TLinks1' class='Links'> <!-- - - - - - - - - - - - - - - - - - - - -->
<p>  <a class='sc' href='../../index.html'>Home</a>
</p>
<div class='hr'> </div>
<p>  <a href='index.html'>Foundations home</a>
</p>
<div class='hr'> </div>
<p>
<a href='set.html'>Sets</a><br/>
<a href='relation.html'>Relations</a><br/>
<a href='correspondence.html'>Correspondences</a><br/>
<a href='orderedSet.html'>Ordered Sets</a><br/>
<a href='lattice.html'>Lattices</a><br/>
<a href='graph.html'>Graphs</a><br/>
<a href='powerset.html'>Powersets</a><br/>
<a href='binaryString.html'>Binary Strings</a><br/>
<a href='logicConcepts.html'>Logic</a><br/>
<a href='allen.html'>AIA</a><br/><!-- -spell AIA -->
<a href='greek.html'>Greek</a><br/>
</p>
<div class='hr'> </div>
<p>
<a href='glossaryExternal.html'>Glossary</a><br/>
<a href='goodAbstract.html'>Abstracts</a><br/>
<a href='argument.html'>Argument</a><br/>
<a href='ontology.html'>Glossaries</a><br/>
<a href='inquiryCycle.html'>Inquiry Cycle</a><br/>
<a href='hohfeld.html'>Legal Relations</a><br/>
<a href='goodPresentation.html'>Presentations</a><br/>
</p>
<div class='hr'> </div>
<p>
<a href='quickStart.html'>Elicitation</a><br/>
<a href='ontology.html'>Glossaries</a><br/>
<a href='goal.html'>Goals</a><br/>
<a href='istar.html'>i*</a><br/>
<a href='SCR.html'>SCR</a><br/>
<a href='tracing.html'>Tracing</a><br/>
</p>
<div class='hr2'> </div>
<p>
<a href='alloy.html'>Alloy</a><br/>
<a href='msc.html'>MSCs</a><br/>
<a href='regularExpression.html'>Regular Exprs.</a><br/>
</p><!-- -spell MSCs Exprs -->
<div class='hr2'> </div>
<p>
<a href='java-designPattern.html'>Design Patterns</a><br/>
<a href='javadoc.html'>Javadoc</a><br/>
<a href='java-package.html'>Java Packages</a><br/>
<a href='java-type.html'>Java Types</a><br/>
</p>
<div class='hr2'> </div>
<p>
<a href='html.html'>(X)HTML</a><br/>
<a href='xmlSchema.html'>XML Schemas</a><br/>
<a href='xslt.html'>XSLT</a><br/>
</p><!-- -spell XSLT -->
</div>


<!-- No right column -->
<div id='TMain'><!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!--xhtml -y -->


<!--spell classpath cp dir edu http jarfile jarfname javac pkg's pname -->
<!--spell pname scenarioml subp subpackage -->


<p>
To make a Java package named <code>pkg</code>:
</p>

<ol>
  <li> Make a <b>directory</b> named <code>pkg</code>.&nbsp;
  </li>
  <li> Put all the <b><code>.java</code> files</b> for the classes and interfaces
    in the directory <code>pkg</code>.&nbsp;
  </li>
  <li> Begin each of the <code>.java</code> files
  with a <b>package declaration</b>:&nbsp;
    <p class='display'>
      <code>package pkg;</code>
    </p>
  </li>
  <li> Compile the files by <b>running <code>javac</code>
    from <code>pkg</code>'s parent directory</b>.&nbsp;
    For example,
    <p class='display'>
      <code>javac pkg/*.java</code>
    </p>
  </li>
  <li> Access the classes and interfaces of package <code>pkg</code>
    from other packages by importing its definitions
    with an import line in every <code>.java</code> file that uses them:&nbsp;
    <p class='display'>
      <code>import pkg;</code>
    </p>
  </li>
  <li> Tell the Java interpreter how to find package <code>pkg</code>
    by putting <code>pkg</code>'s parent directory
    on the classpath,
    or by running the interpreter from that directory.&nbsp;
    If the full or relative pathname of <code>pkg</code>'s parent directory
    is <code>pname</code>, then <code>java -cp pname ...</code>
    will put <code>pname</code> on the classpath
    and make package <code>pkg</code> accessible.&nbsp;
    If you have several packages in different parent directories,
    separate the names with colons:&nbsp;
    <code>java -cp pname:name2:dir3 ...</code>.&nbsp;
  </li>
</ol>

<p>
Here is an <a href="formula/">example package</a>.&nbsp;
The package is named <code>formula</code>,
its source files are in a directory named <code>formula</code>,
and each source file begins with
</p>

<p class='display'>
  <code>package formula;</code>
</p>


<h1>Making a Java subpackage</h1>

<p>
A subpackage is just a package in a
subdirectory of another package's directory.&nbsp;
Java uses dot as the package name separator,
like <code>/</code> is used as the directory separator
(for civilized operating systems, at least).&nbsp;
For example,
to make a subpackage <code>subp</code>
of the package <code>pkg</code>:&nbsp;
</p>

<ol>
  <li> Make a subdirectory named <code>subp</code>
    in the <code>pkg</code> directory.&nbsp;
  </li>
  <li> Put all the <code>.java</code> files for the classes and interfaces
    in the directory <code>pkg/subp</code>.&nbsp;
  </li>
  <li> Begin each <code>.java</code> file with a package declaration:&nbsp;
    <p class='display'>
      <code>package pkg.subp;</code>
    </p>
  </li>
  <li> Compile the files by running <code>javac</code>
    from <code>pkg</code>'s parent directory
    (just as before).&nbsp;
    For example,
    <p class='display'>
      <code>javac pkg/subp/*.java</code>
    </p>
  </li>
  <li> Access the classes and interfaces of package <code>subp</code>
    from other packages including <code>pkg</code>) by importing its definitions
    with an import line in every <code>.java</code> file that uses them:&nbsp;
    <p class='display'>
      <code>import pkg.subp;</code>
    </p>
  </li>
  <li> You don't need to do anything different
    to tell the Java interpreter how to find package <code>pkg.subp</code>,
    since you are already telling it to look in <code>pkg</code>'s
    parent directory.&nbsp;
  </li>
</ol>

<p>
Although it may seem like <code>pkg</code> and <code>subp</code>
should have easier or simpler access to each other
because one is a subpackage of the other,
this is not the case.&nbsp;
Either package's files have to import the other package to use it,
just like any other package's files do.
</p>



<h1>The convention for names of published packages</h1>

<p>
It doesn't much matter what you name your own packages,
as long as the names are unique.&nbsp;
For published packages,
there is a convention for unique names
that uses a URL associated with you, the package, or the project it is part of.&nbsp;
The components of the URL are used as package names,
in reverse order.&nbsp;
For example,
for the ScenarioML project
whose associated URL is <code>http://scenarioml.ics.uci.edu</code>,
each package would be a subpackage of
<code>edu.uci.ics.scenarioml</code>.&nbsp;
The <code>scenario</code> package for that project
would have this as its package name:&nbsp;
</p>

<p class='display'>
  <code>edu.uci.ics.scenarioml.scenario</code>
</p>

<p>
and its source files would have to be in a directory named
</p>

<p class='display'>
  <code>edu/uci/ics/scenarioml/scenario</code>
</p>


<h1><code>jar</code> and packages</h1>

<p>
To produce a jarfile for one or more packages,
go to the parent directory from which you would compile the source files,
and run <code>jar</code> giving it all the class file names.&nbsp;
For example,
for the <code>scenario</code> package discussed above,
you would go to the directory containing the <code>edu</code> directory
and enter the command
</p>

<p class='display'>
  <code>jar cf jarfname edu/uci/ics/scenarioml/scenario/*.class</code>
</p>
<p>

and would obtain a jarfile named <code>jarfname.jar</code>
which you could put on a classpath
and thus gain access to the <code>scenario</code> package.
</p>


</div>

</div><!-- #TBg -->

<div id='TFooter'>
<div class='W3C'>
  <a href='http://validator.w3.org/check?uri=referer'><img class='W3C'
    src='../../img/valid-xhtml10-blue.png'
    alt='Valid XHTML 1.0 Strict'/></a>
  <br/>
  <a href='http://jigsaw.w3.org/css-validator/check/referer'><img class='W3C'
    src='../../img/vcss-blue.png'
    alt='Valid CSS!'/></a>
</div>
<div class='timestamp'>2010Feb24We20:58</div>
<div style='padding-top:1px;'>
<a class='plain' href='./index.html' style='font-variant:small-caps;'
>Thomas A. Alspaugh</a>
<span style='padding-left:1em;'><span class='email ss sm'>alspaugh&nbsp;
    <span class='ss sc sm'>at</span> &middot; ics &middot; uci &middot; edu</span>
    <!-- -spell alspaugh uci edu --> </span>
</div>
</div>

<!-- Google Analytics code -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol)
  ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost +
  "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-15281497-1");
pageTracker._trackPageview();
} catch(err) {}
</script>

</body>
</html>

