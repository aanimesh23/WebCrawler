<HTML><HEAD>
<TITLE>Tetrahedra Classified by Bad Angles</TITLE>
<META name="Owner" value="eppstein">
<META name="Reply-To" value="eppstein@ics.uci.edu">
</HEAD><BODY BGCOLOR="#FFFFFF" FGCOLOR="#000000">
<!--#config timefmt="%d %h %Y, %T %Z" -->
<H1>
<A HREF="http://www.ics.uci.edu/~eppstein/junkyard/"><IMG src="junkyard.gif" ALIGN=center WIDTH="545" HEIGHT="45" ALT="The Geometry Junkyard" BORDER=0></A>
</H1>
<HR>
<H1>
Tetrahedra Classified by Bad Angles
</H1>

Simplices are the higher dimensional generalizations of triangles and
tetrahedra.  We are interested in measuring the suitability of a given
simplex for use in an unstructured finite element mesh.

<P>
Each <I>k</I>-dimensional face
in a <I>d</I>-simplex (e.g. vertex or edge in a tetrahedron)
defines an angle, and 
all angles that involve the entire simplex are so defined. 
To measure an angle, we place
a small sphere around the <I>k</I>-face and determine
what fraction of the sphere lies interior to the simplex.
The sphere is (<I>d</I>-<I>k</I>-1)-dimensional and lies in a 
(<I>d</I>-<I>k</I>)-dimensional subspace perpendicular to the
<I>k</I>-face; its center is
the projection of the face onto the subspace. 
If <I>k</I> = <I>d</I> - 2, we call the angle a dihedral angle
and we can write its measure in degrees in the usual way.
If <I>k</I> = 0, the angle is called a solid angle.

<P>
We can now define a family of problems:  for each <I>k</I>, we can
demand either no small angles, that is, all angles must be bounded
away from zero, or no large angles---all angles must
be bounded away from flat (half the sphere).
This family forms two sequences of difficulty.
No small angle at a 0-face (no small solid
angle) implies no small angle at a 1-face, which
implies no small angle at a 2-face, and so forth up to
no small angle at a (<I>d</I>-2)-face. 
No-large-angle problems reverse the order:
no large dihedral implies no large angle at a (<I>d</I>-3)-face,
which implies no large angle at a (<I>d</I>-4)-face, and so forth down
to no large solid angle.
There are two bridges between the sequences.
No small solid angle implies no large dihedral, and hence
good angles of all types.
In the opposite direction,
a large solid angle implies a small dihedral, and hence
bad angles of all types.

<P>
A (<I>j</I>,<I>k</I>)-bad-angle simplex,
0 <= <I>j</I>,<I>k</I> <= <I>d</I>-1,
allows small angles at faces of dimension up to <I>j</I>-1
and large angles at faces of dimension down to <I>k</I>.
The case <I>j</I> = 0 allows no small angles, and hence no
bad angles at all, so <I>k</I> is irrelevant.
On the other extreme, <I>k</I> = 0 allows a large solid angle and
renders <I>j</I> irrelevant.
Except for these extreme cases all other combinations
of <I>j</I> and <I>k</I> are possible, so there are
2 + (<I>d</I> - 1)<sup>2</sup>
different types of simplices.

<P>
<CENTER><IMG src="tetraqual.gif" WIDTH=533 HEIGHT=162 ALT=""></CENTER>
<P>
The figure above illustrates this classification
for the case <I>d</I> = 3.
The ideal "round" tetrahedra have neither small nor large angles.
A "needle" allows small solid angles, but not small or large dihedrals.
A "wedge" allows small but not large dihedrals.
A "spindle" allows large but not small dihedrals, and
small but not large solid angles.
A "sliver" allows large and small dihedrals, and small but not large
solid angles.
And a "cap" allows bad angles of all types including large solid angles.

<P>
[From "<A HREF="/~eppstein/pubs/p-dihedral.html">Dihedral Bounds for
Mesh Generation in High Dimensions</A>".
For related work see Baker's
"<A HREF="http://www.andrew.cmu.edu/user/sowen/abstracts/Ba52.html">Element Quality in Tetrahedral Meshes</A>".]
<P>

<HR><P>
From the <A HREF="/~eppstein/junkyard/">Geometry Junkyard</A>,
computational
and recreational geometry.<BR>
<A HREF="http://www.ics.uci.edu/~eppstein/">David Eppstein</A>,
<A HREF="http://www.ics.uci.edu/~theory/">Theory Group</A>,
<A HREF="http://www.ics.uci.edu/">ICS</A>,
<A HREF="http://www.uci.edu/">UC Irvine</A>.<P>
<SMALL>Last update: <!--#flastmod file="tetraqual.html" -->.</SMALL>
</BODY></HTML>
