<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1">
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay">
<META HTTP-EQUIV="UPDATED" CONTENT="Wednesday, January 19, 2000 3:55 PM">
<TITLE>Asst. 2 * Functional Programming</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="644ECB4B">
<META HTTP-EQUIV=KEYWORDS CONTENT="Programming languages, homework, functional programming">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="Assignment 2 on functional programming for ICS 141, an undergraduate course in the concepts of programming languages taught by David G. Kay in the Department of Information and Computer Science, University of California, Irvine.">
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 1999 by David G. Kay.  All rights reserved.">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<A NAME="_top"></A>
<P>
<IMG SRC="asst_2_functional_pgmg_files/sidebar_73.gif" WIDTH=468 HEIGHT=78>
<BR>
<FONT FACE="AGaramond" SIZE=4>This assignment is due on Monday, January
31; deposit your assignment in the locking drop box in room CS 189.  Try
to finish the assignment by Friday morning so you can ask questions about
it in discussion.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Summary:</B>  In the last lab, you became
comfortable (or at least conversant) with the Scheme interpreter, with Scheme
syntax, and with the recursive style of list processing.  In this assignment
you will work with list structures and explore some programming techniques
using higher-order functions.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(a)</B>  Draw box-and-pointer diagrams
(as shown on page 579 of Sebesta) for the following expressions.  For the
empty list, use an empty cell (rather than a cell pointing to the symbol
</FONT><FONT FACE="Courier New">NIL</FONT><FONT FACE="AGaramond" SIZE=4>,
as Sebesta does).</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; *  </FONT><FONT FACE="Courier New">(Franz
() Klefstad)</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; *  </FONT><FONT FACE="Courier New">((Pratt
Mehrotra Baldi))</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; *  </FONT><FONT FACE="Courier New">((Pratt
Gennari) (Venkatasubramanian Mehrotra) (Mark Kobsa))</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; *  </FONT><FONT FACE="Courier New">(Ackerman
(King (Grudin (Kling))))</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; *  </FONT><FONT FACE="Courier New">(define
fact (lambda (x) (if (&lt;= 0 x) 1 (* x (fact (- x 1))))))</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(b)</B>  Write the Scheme expression that
corresponds to each of the two box-and-pointer diagrams below. </FONT></P>
<P>
<IMG SRC="asst_2_functional_pgmg_files/picture_21.gif" WIDTH=322 HEIGHT=71 ALT="">
</P>
<BR><BR>
<P>
<IMG SRC="asst_2_functional_pgmg_files/picture_20.gif" WIDTH=286 HEIGHT=126 ALT="">
</P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(c)</B>  Sebesta defines the function </FONT><FONT FACE="Courier New">mapcar</FONT><FONT FACE="AGaramond" SIZE=4>,
more commonly called </FONT><FONT FACE="Courier New">map</FONT><FONT FACE="AGaramond" SIZE=4>:</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * </FONT><FONT FACE="Courier New">(map</FONT><FONT>
</FONT><FONT FACE="AGaramond" SIZE=4><I><U>action</U></I></FONT><FONT> </FONT><FONT FACE="AGaramond" SIZE=4><I><U>list</U></I></FONT><FONT FACE="Courier New">)</FONT><FONT FACE="AGaramond" SIZE=4>,
which returns a list, each of whose elements is the result of applying <I><U>action</U></I>
(a function) to the corresponding element of <I><U>list</U></I>.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Another function that takes another function
as an argument is </FONT><FONT FACE="Courier New">filter</FONT><FONT FACE="AGaramond" SIZE=4>:</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * </FONT><FONT FACE="Courier New">(filter
</FONT><FONT FACE="AGaramond" SIZE=4><I><U>test?</U></I></FONT><FONT> </FONT><FONT FACE="AGaramond" SIZE=4><I><U>list</U></I></FONT><FONT FACE="Courier New">)</FONT><FONT FACE="AGaramond" SIZE=4>,
which returns a list of those elements in <I><U>list</U></I> that satisfy
<I><U>test?</U></I> (which is a predicate--a function that returns true
or false, given an element of <I>list.</I>)</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Write a definition of </FONT><FONT FACE="Courier New">filter</FONT><FONT FACE="AGaramond" SIZE=4>.
 Check the Notes on Scheme handout, which contains a function that does
the same task.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Now look at this third function:</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; *  </FONT><FONT FACE="Courier New">(accumulate
</FONT><FONT FACE="AGaramond" SIZE=4><I><U>action</U></I></FONT><FONT> </FONT><FONT FACE="AGaramond" SIZE=4><I><U>initial-value</U></I></FONT><FONT>
</FONT><FONT FACE="AGaramond" SIZE=4><I><U>list</U></I></FONT><FONT FACE="Courier New">)</FONT><FONT FACE="AGaramond" SIZE=4>,
which is defined as follows:<A NAME="_14_1935"></A>
<BR>
</FONT><CODE><FONT FACE="Courier New">&#160;&#160; 
<BR>
(define accumulate
<BR>
&#160;&#160; (lambda (action initial-value list)
<BR>
&#160;&#160;  &#160; (cond
<BR>
&#160;&#160;  &#160;  &#160; ((null? list) initial-value)
<BR>
&#160;&#160;  &#160;  &#160; (else (action (first list) 
<BR>
&#160;&#160;  &#160;  &#160;  &#160;  &#160;  &#160;      (accumulate action
initial-value (rest list)))))))</FONT></CODE></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(c.1)</B>  What is the result of evaluating
each of these expressions?  Try them by hand before typing them in to check
your answer; you won&#39;t have a Scheme interpreter on the exams.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * </FONT><FONT FACE="Courier New">(accumulate
+ 0 &#39;(1 2 3 4 5))</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * </FONT><FONT FACE="Courier New">(accumulate
(lambda (a b) (+ b (if (even? a) a 0))) 0 &#39;(1 2 3 4 5))</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * </FONT><FONT FACE="Courier New">(accumulate
cons &#39;() &#39;(Huey Dewey Louie))</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * </FONT><FONT FACE="Courier New">(accumulate
max -1 &#39;(1953 1956 1949 1991 1964))</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(c.2)</B>  Assume you have a function </FONT><FONT FACE="Courier New">(interval
a b)</FONT><FONT FACE="AGaramond" SIZE=4> that returns a list of all the
integers between </FONT><FONT FACE="Courier New">a</FONT><FONT FACE="AGaramond" SIZE=4>
and </FONT><FONT FACE="Courier New">b</FONT><FONT FACE="AGaramond" SIZE=4>,
inclusive (so that </FONT><FONT FACE="Courier New">(interval 5 10)</FONT><FONT FACE="AGaramond" SIZE=4>
would return </FONT><FONT FACE="Courier New">(5 6 7 8 9 10)</FONT><FONT FACE="AGaramond" SIZE=4>).
 (Re-)write the function </FONT><FONT FACE="Courier New">factorial</FONT><FONT FACE="AGaramond" SIZE=4>
using </FONT><FONT FACE="Courier New">accumulate</FONT><FONT FACE="AGaramond" SIZE=4>
(and </FONT><FONT FACE="Courier New">interval</FONT><FONT FACE="AGaramond" SIZE=4>),
without any explicit recursion.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(c.3)</B>  Now, think back to the restaurant
database and assume we have a standard Lisp list (called </FONT><FONT FACE="Courier New">RL</FONT><FONT FACE="AGaramond" SIZE=4>)
of the restaurant objects as we described.  For each of the following expressions,
describe in one English sentence what value it returns.  Don&#39;t just
say, &quot;It does an accumulate of plus and zero to a map of ... ;&quot;
give a description of what the expression <I>means,</I> something you could
put in a software catalog so that a prospective buyer could find what he
or she wanted.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * </FONT><FONT FACE="Courier New">(accumulate
+ 0 (map (lambda (R) 1) RL))</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * </FONT><FONT FACE="Courier New">(filter
(lambda (R)(equal? &#39;Ethiopian (rest-cuisine R))) RL)</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * </FONT><FONT FACE="Courier New">(/
(accumulate + 0 (map (lambda (R) (rest-price R)) RL))
<BR>
&#160;&#160;  &#160;   (accumulate + 0 (map (lambda (R) 1) RL)))</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * </FONT><FONT FACE="Courier New">(let
((PRL (filter (lambda (R) (equal? 'pizza (rest-dish R))) RL)))
<BR>
&#160;&#160;  &#160;  (/ (accumulate + 0
<BR>
&#160;           (map (lambda (R) (rest-price R)) PRL))
<BR>
&#160;        (accumulate + 0 (map (lambda (R) 1) PRL))))</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(c.4)</B>  Using </FONT><FONT FACE="Courier New">map</FONT><FONT FACE="AGaramond" SIZE=4>,
</FONT><FONT FACE="Courier New">filter</FONT><FONT FACE="AGaramond" SIZE=4>,
and </FONT><FONT FACE="Courier New">accumulate</FONT><FONT FACE="AGaramond" SIZE=4>,
write an expression to return each of the following values without using
explicit recursion:</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * a list of all the French and
Italian restaurants in RL</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * a list of all the <I>names</I>
of the French and Italian restaurants in RL</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * a list of all the restaurants
in RL whose best dish costs between $10.00 and $20.00 (inclusive).</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * the name of the lowest-priced
French restaurant in RL</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>&#160;&#160; * (extra credit) a list of all
the restaurants in RL, where every French restaurant whose best dish&#39;s
price is less than the average (price of best dishes at French restaurants)
has its price changed to that average price.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>You aren&#39;t required to code up and run
the solutions to this problem; you can do them with pencil and paper.  However,
coding them up is good practice, it can help you verify that your solutions
are right, and it might earn you a bit of extra credit.</FONT></P>
<BR CLEAR=ALL>
</BODY>
</HTML>
