<html><head><title>
ECHT'94:Chimera:Future Work</title>
</head><p>

<BODY TEXT="#000000" LINK="#0000FF" VLINK="#FF0000" ALINK="#00BB00" BGCOLOR="#FFFFFF">
<TABLE WIDTH=100%>
<TR ALIGN=CENTER VALIGN=MIDDLE>
<TD ALIGN=CENTER><A HREF="index.html#TOC">Table of Contents</A></TD>
<TD ALIGN=CENTER><A HREF="implementation.html">Implementation Architecture</A></TD>
<TD ALIGN=CENTER><A HREF="related.html">Related Work</A></TD>
</TR>
</TABLE>
<HR>
<H2>5. Future Work</H2>
<H3><A NAME="Versioning">5.1 Versioning</A></H3>
Version control mechanisms are very important for any hypertext system that wishes to support software engineering activities in a non-trivial fashion [14,18].  Chimera is no exception, and a mechanism for versioning is a research priority.  A brief discussion of our preliminary approach is given below.<p>

Since Chimera intentionally offers no support for storing application objects within its hypertext data repository, version control responsibility must be shared between Chimera and its client applications.  As an example, Chimera will undoubtedly be used to create relations between source code files.  Version control responsibility for the files alone will rest with an existing revision control system such as RCS [36].  Responsibility for versioning the relations between the files will reside with Chimera.<p>

Each concept within Chimera shall be capable of multiple versions. This raises significant issues of consistency maintenance when a concept instance is changed.  For example, when an anchor is deleted, it must also be removed from any links to which it belongs, requiring a new version of those links.  Another issue is consistency maintenance between versions maintained by an external versioning system and versions maintained by Chimera.  Resolving this issue and providing a mechanism for flexible multi-concept version naming requires a new first-class concept in Chimera, the configuration. A configuration will contain a snapshot of the current versions of a hyperweb subset. External object versions can then be mapped to a configuration.<p>

It is anticipated that parallel version paths will be supported by Chimera using the first-class configuration concept.  While explicit mechanisms will need to exist to support the creation of new branches, once a new branch has been created its use should be mostly transparent. Merging of paths will require the use of a special utility which will resolve conflicts, prompting the user for guidance, if necessary.
<H3><A NAME="Collaborative">5.2 Collaborative Hyperweb Construction</A></H3>
Chimera does not currently support the collaborative building of linked hyperwebs in real-time by multiple users where each user is made aware of other user actions<A HREF="footnotes.html#Footnote12"><SUP>12</SUP></A>. This is due to limitations in the conceptual architecture that must be addressed, as well as the current implementation's restriction of one Chimera server per hyperweb. The major limitation of the current conceptual architecture is that the Chimera server must maintain the data stored in a hyperweb along with managing any Chimera clients that connect to it.  What is needed is a separation of concerns where a new component, the hyperweb server, is added to the conceptual architecture. This new component relieves the Chimera server from its data management activities.  This involves moving the ADTs which implement Chimera's hypertext concepts from the Chimera server to the hyperweb server. The Chimera server component is then free to concentrate on supporting client access to multiple hyperweb servers (and thus multiple hyperwebs). We postulate an environment in which there is one hyperweb server per hyperweb with multiple Chimera servers managing collaborative user access in real-time to these hyperweb servers. The two sets of servers would need to work together to handle links created between hyperwebs and also to ensure that notification of changes made to the information space is propagated to all connected users. We also anticipate that the Chimera server will support access to distributed objects by employing a Universal Resource Locater (URL) style object naming mechanism and an existing transfer protocol to access remote objects.
<HR>
<TABLE WIDTH=100%>
<TR ALIGN=CENTER VALIGN=MIDDLE>
<TD ALIGN=CENTER><A HREF="index.html#TOC">Table of Contents</A></TD>
<TD ALIGN=CENTER><A HREF="implementation.html">Implementation Architecture</A></TD>
<TD ALIGN=CENTER><A HREF="related.html">Related Work</A></TD>
</TR>
</TABLE><p>


<h4>
<hr size=1 noshade>
This page is part of the <A HREF="http://www.ics.uci.edu/pub/chimera/">Chimera</A> web site.<BR>
Send feedback and questions to <A HREF="mailto:kanderso@ics.uci.edu">Ken Anderson</A>.<BR>
Last updated on Thu, Sep 19, 1996 at 12:34:14 PM. 
</h4>
</body></html>
