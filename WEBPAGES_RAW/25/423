<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="course2.css" type="text/css" />

<title>Informatics 43 Spring 2009, Midterm Study Guide</title>
</head>

<body>

<div class="navbar">

<p>
Informatics 43 Spring 2009 |
<a href="index.html">News</a> |
<a href="CourseReference.html">Course Reference</a> |
<a href="Schedule.html">Schedule</a> |
<a href="CourseProject">Course Project</a> |
<a href="CodeExamples">Code Examples</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>Informatics 43 Spring 2009<br />
   Midterm Study Guide</p>

</div>

<div class="section">

<hr />

<p class="title">Introduction</p>

<p>This study guide is a summary of the material covered in lecture thusfar.  The Midterm will be focused on both lecture material and assigned readings, but the focus of this guide is the material that we covered in lecture.</p>

<p>The best advice for studying is to focus your attention as much on the "Why?" as the "What?"  It's my goal to write an exam that does not depend solely on your ability to memorize terms, definitions, and facts; instead, I'm much more interested in whether you understand why things are the way they are, and in your ability to combine concepts we've learned about in novel ways that we've yet to consider in lecture.</p>

<p>I should point out that this study guide is not intended as a replacement for the lectures or your own notes.  It's possible that something we discussed in class will have been left out of the study guide, but is still fair game for the exam.  I'm not trying to cheat you on purpose, but the study guide is what it is: it's a guide.</p>

<p>Enjoy.</p>

</div>

<div class="section">

<hr />

<p class="title">Background</p>

<p>This course is primarily about <i>software engineering</i>.  That the term "software engineering" includes the word "engineering" immediately evokes a few ideas:</p>

<ul>
  <li>Building things that solve real problems</li>
  <li>Working within real constraints (e.g., How many people do we have? How much time do we have? How much money do we have?)</li>
  <li>Evolving what we build over time, so that it solves new problems</li>
</ul>

<p>There are many similar definitions of software engineering; one of them is the following:</p>

<blockquote>Software engineering is the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software.</blockquote>

<p>Some words stand out in that definition:</p>

<ul>
  <li><i>Systematic</i>: We're not just going about our process willy-nilly; we have a plan.</li>
  <li><i>Disciplined</i>: We adhere to our plan and various "best practices" at all times.</li>
  <li><i>Quantifiable</i>: There are aspects of our development process that we can measure, for the purposes of knowing how well we're doing, how we might improve, and whether our attempted improvements worked.</li>
  <li><i>Operation</i> and <i>Maintenance</i>: Our work is not done when we ship the first version.  We have to keep it running, addressing problems that come up, adding features to solve new problems, and so on.</li>
</ul>

<p>So when we move out of the realm of programming and into the realm of software engineering is when we scale the sizes of our projects up.  It's about <i>programming-in-the-large</i> as opposed to <i>programming-in-the-small</i>.  Programming-in-the-large includes some combination of: multiple people, multiple versions, multiple years, multiple related products.</p>

<p>Basic activities in software engineering include:</p>

<ul>
  <li>Determining the requirements of the system</li>
  <li>Organizing teams to build the system cooperatively</li>
  <li>Defining an overall architecture for the system</li>
  <li>Breaking the larger architecture into modules</li>
  <li>Implementing the individual modules</li>
  <li>Integrating the modules together</li>
  <li>Testing &mdash; throughout the process, not just at the end</li>
  <li>Writing documentation</li>
  <li>Configuration management</li>
</ul>

</div>

<div class="section">

<hr />

<p class="title">Process</p>

<p>Software is said to go through a <i>lifecycle</i>, in which various activities are done at various points in time.  An idealized view of that lifecycle looks something like this:</p>

<p class="center"><img src="Informatics43-Spring2009-IdealizedSoftwareLifecycle.png" alt="Idealized Software Lifecycle" /></p>

<p>When embarking on a new software engineering project, we need to decide on a <i>process</i>.  In general, a process is a strategy for organizing a project, which answers questions like this:</p>

<ul>
  <li>In what order will the major tasks be done?</li>
  <li>Who will do the major tasks?</li>
  <li>What information will we exchange with each other as we work?</li>
</ul>

<p>There is not broad agreement in real-world software development about what process should be used.  Virtually anywhere you work will have a process that is at least slightly different than processes you'd use anywhere else.  This is partly because software is a relatively young discipline, and partly because different processes work better or worse depending on the situation (e.g., How many people do we have? How much time do we have? How well do our customers understand what needs to be built?).</p>

<p>Processes generally fit into one of a couple of categories:</p>

<ul>
  <li><i>Heavyweight</i> or <i>planning-driven</i> processes, in which are careful to plan everything thoroughly before we do it.</li>
  <li><i>Lightweight</i> or <i>agile</i> processes, in which we accept that things change often, so we spend less time planning and more time building, taking care to work in a way that allows us to change course when we discover that we need to.</li>
</ul>

<p>There is a spectrum of possible processes, with the most heavyweight on one end and the most lightweight on the other.  We discussed the two extremes in lecture: the <i>waterfall model</i> and <i>agile methods</i>.</p>

<p class="subtitle">The Waterfall Model</p>

<p>The <i>waterfall model</i> is one well-known process model for engineering software.  It breaks a project into <i>phases</i>, with each phase being one of the activities from the idealized view of the software lifecycle shown above.</p>

<p>Each phase has an output, which is some combination of documentation and code.  The output of one phase becomes the input to the next phase.  These outputs are depicted in the diagram above:</p>

<ul>
  <li>Requirements engineering &rarr; Requirements specification</li>
  <li>Design &rarr; Design specification</li>
  <li>Implementation &rarr; Code and program-level documentation</li>
  <li>Testing &rarr; Working code and accurate program-level documentation</li>
</ul>

<p>We can think of the design phase as, itself, being two separate sub-phases:</p>

<ul>
  <li><i>Architectural design</i>, which is focused on understanding the major modules and their interactions.</li>
  <li><i>Detailed design</i>, which is focused on understanding the design of each module's internals (e.g., classes, methods, etc.).</li>
</ul>

<p>Once we've reached the maintenance and evolution phase, our focus is on keeping the system running and on finding new business problems that could be solved with modifications to the product.  As we find new business problems, we can embark on a waterfall-style project in which we make these modifications.</p>

<p class="subtitle">Verification and validation</p>

<p>There are up to two additional tasks we need to perform in each step of the waterfall model: <i>verification</i> and <i>validation</i> (sometimes referred to as V&V).  They sound similar, but they're not the same.</p>

<ul>
  <li><i>Validation</i> ensures that an attempt has been made to address or implement all of the requirements, so that each part of the program/design can be traced back to a particular requirement.  This can be summed up by this question: "Are we building the right system?"</li>
  <li><i>Verification</i> ensures that each of the requirements is implemented/designed correctly.  This can be summed up by this question: "Are we building the system right?"</li>
</ul>

<p>We don't do both verification and validation at every step.  For example, we don't do verification during requirements engineering, since we haven't designed or implemented anything yet.</p>

<p class="subtitle">Testing and the V-model</p>

<p>Testing is incorporated throughout a waterfall process &mdash; as it should be throughout any process.  <i>Test plans</i> are part of the output of each phase, describing testing that will need to be done subsequently.</p>

<ul>
  <li>Requirements engineering &rarr; Acceptance test plan</li>
  <li>Architectural design &rarr; Integration test plan</li>
  <li>Detailed design &rarr; Unit test plan</li>
</ul>

<p>One way to represent this relationship pictorially is often called the <i>V-model</i>, which depicts the waterfall model, along with related forms of testing that are planned early on and them performed later.</p>

<p class="subtitle">Assessment of the waterfall model</p>

<p>The waterfall model works beautifully in an ideal world where we always complete each phase correctly the first time.  In reality, of course, we don't, so we need a way to <i>backtrack</i> to previous steps if necessary.  The cost of that backtracking is higher the further back we have to go; for example, discovering an incorrect requirement during the testing phase requires us to revisit the requirements specification, the design documentation, and the program, along with the relevant test plans.</p>

<p>Not surprisingly, the waterfall model has significant downsides in practice.</p>

<ul>
  <li>It is assumed that we'll have perfect information available and that we'll perform perfectly at each step.  The customers will know exactly what they want during the requirements engineering phase; the designers will anticipate all possible problems during the design phase; the implementers won't make any mistakes during the implementation phase; and the testers won't miss any problems during the testing phase.</li>
  <li>The later we discover a bug, the more expensive it is to fix, because we have more phases to revisit, more documentation to alter, and more people involved.</li>
  <li>Because of the need to backtrack, we'll often be working on multiple phases simultaneously, which makes it difficult to track progress; at any given time, we might not be done with any of the phases, even though we're working on all of them!</li>
</ul>

<p class="subtitle">Agile methods</p>

<p>The waterfall model represents one extreme along a spectrum of software development processes, one where planning is king and we don't act until we know exactly where we're going.  The opposite extreme is a set of processes called <i>agile methods</i>.  Agile methods arise from the basic idea that change is inevitable, because:</p>

<ul>
  <li>...mistakes are made throughout the process, which need to be cleaned up.</li>
  <li>...we don't always have perfect information available when we make decisions.</li>
  <li>...customers change their minds about what they need all the time.</li>
  <li>...customers' actual needs really do change (e.g., business processes are altered as the organization grows, applicable laws change).</li>
</ul>

<p>There are a number of variants of agile methods (e.g., Extreme Programming, Scrum), though they are generally all built according to the same set of principles.  These principles are laid out in a document called the <i>Manifesto for Agile Software Development</i> (also known as the <i>Agile Manifesto</i>), the most important part of which reads as follows:</p>

<blockquote>
We are uncovering better ways of developing software by doing it and helping others do it.  Through this work we have come to value:

<ul>
  <li>Individuals and interactions over processes and tools</li>
  <li>Working software over comprehensive documentation</li>
  <li>Customer collaboration over contract negotiation</li>
  <li>Responding to change over following a plan</li>
</ul>

That is, while there is value in the items on the right, we value the items on the left more.
</blockquote>

<p>Agile methods have the following properties:</p>

<ul>
  <li>They involve the customer throughout the process.  A central tenet is that at least one customer representative is a full-fledged member of the team.</li>
  <li>They build complete, working subsets of the system &mdash; as often as every few weeks, in many cases.  While the subsets are obviously incomplete, actual requirements are addressed correctly in each iteration.</li>
  <li>They focus on people and their interactions.  Teams often work together in one large room to facilitate interactions.  (Pair programming, in the sense that you've used in prior coursework, is often used.)</li>
  <li>They encourage looking out "code smells" and <i>refactoring</i> as soon as those smells develop.  For example, duplicate code is eliminated when found, poor design choices are revisited as soon as it's clear they can be improved, and so on.</li>
  <li>They require testing throughout the process, with as much of that testing automated as possible.</li>
  <li>They don't generate as much documentation as heavyweight processes.  Requirements are often written on index cards or some electronic equivalent; the code and tests, in general, <i>are</i> the documentation.  If you want to know how something works, look at its code and, as importantly, its tests.</li>
</ul>

<p class="subtitle">Extreme Programming</p>

<p><i>Extreme Programming (XP)</i> is an example of an agile method.  It is centered around a set of <i>practices</i>, some of which are:</p>

<ul>
  <li><i>Small releases:</i> Each version is not much different from the one that preceded it.</li>
  <li><i>The planning game:</i> Determining the scope of the next release is done quickly.  Rather than attempting to define everything we need to do, we just develop a small list of things we know we need to do.</li>
  <li><i>Simple design:</i> Creativity and "cleverness" are frowned upon.  Simpler and clearer is always considered better.</li>
  <li><i>Testing:</i> Unit tests are written for <i>all</i> code that will make up the product.</li>
  <li><i>Refactoring:</i> The design is changed when necessary, without affecting its behavior.  This refactoring is automated whenever possible.</li>
  <li><i>Pair programming:</i> All code that makes up the product is written in pairs, to reduce the probability of mistakes.</li>
  <li><i>Collective ownership:</i> Anyone can change anything at any given time.</li>
  <li><i>40-hour week:</i> Long weeks are the exception rather than the rule, since long weeks tend to lead to tired developers, which leads to mistakes that will be expensive to fix later.</li>
  <li><i>On-site customer:</i> A customer representative is a full-fledged memnber of the team, available at all times.</li>
</ul>

</div>

<div class="section">

<hr />

<p class="title">Software Quality</p>

<p>We'd like to build quality software.  But what is <i>software quality</i>?  What should we be shooting for?  Quality software...</p>

<ul>
  <li>...meets its requirements (i.e., solves a business problem).</li>
  <li>...is user friendly, if it has a user interface at all.</li>
  <li>...is safe (i.e., it won't harm people or property).</li>
  <li>...runs on available hardware.</li>
  <li>...and so on.</li>
</ul>

<p>Measuring quality empirically is a difficult proposition; despite much work in this area over the last few decades, there are not measurements that can automate the process of deciding whether you have achieved quality.</p>

<p>This doesn't mean that there aren't attributes that quality software tends to have.  We should know how to recognize these attributes and use them as guidelines as we work.</p>

<ul>
  <li><i>Correctness:</i> Does the system meet its requirements and fulfill its objectives?</li>
  <li><i>Reliability:</i> Does the system work at all times, or does it suffer from frequent bugs?</li>
  <li><i>Efficiency:</i> Does the system require a reasonable amount of resources (i.e., time, memory, processing power, energy).</li>
  <li><i>Security:</i> Does the system prevent unauthorized users from accessing information they shouldn't?  Does it allow users to access information they should be able to see?</li>
  <li><i>Usability:</i> Is it possible to learn how to use the system in a relatively short amount of time?  Is it possible to perform tasks with a minimal amount of effort?</li>
  <li><i>Maintainability:</i> Is it simple to locate and fix bugs in the system?</li>
  <li><i>Flexibility:</i> Is it possible to modify the system easily, so that it can be adapted to new requirements?</li>
  <li><i>Testability:</i> How difficult is it to test the system?</li>
  <li><i>Portability:</i> Is it easy to move the system from one operating environment (i.e., hardware, operating system) to another?</li>
  <li><i>Reusability:</i> Can parts of the system be reused in others?</li>
  <li><i>Interoperability:</i> Can the system be integrated easily with other systems?</li>
  <li><i>Fault tolerance:</i> How well does the system survive bugs and other problems?</li>
  <li><i>Safety:</i> Does the software harm people, organizations, software, property, or the environment?</li>
</ul>

<p>Some of these factors trade off of others (e.g., sometimes efficiency harms maintainability, testability, and reusability).</p>

</div>

<div class="section">

<hr />

<p class="title">Requirements Engineering</p>

<p><i>Requirements engineering</i> is the process of analyzing a customer's problem, gaining an understanding of what a system could do to solve it, documenting that understanding, and checking the accuracy of that understanding.  The product generated by requirements engineering is called a <i>requirements specification</i>; it details the current understanding of what the requirements for a system are.</p>

<p>First of all, we should decide what is meant by a <i>requirement</i>.  A requirement is "a condition or capability needed by a user to solve a problem or achieve an objective."  It's something that the system should be able to do, or a constraint that the system must meet.  Requirements are not necessary "musts" in a system; many requirements are, in practice, negotiable.</p>

<p>The requirements engineering process is characterized at least partly by the need to address the concerns of many <i>stakeholders</i>.  A stakeholder is anyone that is concerned with the system in some way:</p>

<ul>
  <li>Developers who will build the system</li>
  <li>Testers who will ensure that the system meets its specifications</li>
  <li>End-users who will use the system after it's completed</li>
  <li>Managers of end-users who are responsible for their work</li>
  <li>Regulators who will ensure that the system meets any legal requirements</li>
  <li>Domain experts who give essential background information about the application domain</li>
</ul>

<p>Different stakeholders bring different kinds of requirements to the table.  Those requirements can even conflict.  For example, YouTube has a requirement that people be allowed to upload videos; ideally, they can upload any video they'd like.  Copyright holders, however, view this requirement differently.</p>

<p>Requirements engineering is comprised of four tasks:</p>

<ul>
  <li><i>Requirements elicitation</i>, during which we interact with users, customers, etc., to gain an understanding of what the requirements should be.</li>
  <li><i>Requirements specification</i>, during which we write up what our understanding is.</li>
  <li><i>Requirements validation and verification</i>, during which we and our customers agree upon that understanding.</li>
  <li><i>Requirements negotiation</i>, during which we negotiate with the various stakeholders when there are requirements that conflict.</li>
</ul>

<p class="subtitle">Requirements elicitation</p>

<p>A variety of techniques can be used to elicit requirements, including interviews, brainstorming, surveys/questionnaires, task analysis, ethnography, and prototyping.  We choose these techniques based on who we need to interact with and what we need to know.</p>

<p class="subtitle">Requirements specification</p>

<p>A requirements specification is a document that describes the complete set of known requirements for a software engineering project.  A good requirements specification has several attributes:</p>

<ul>
  <li><i>Correct:</i> Of course, first and foremost, we want the specification to reflect the actual needs of the users.</li>
  <li><i>Unambiguous:</i> We should choose the clearest, least-ambiguous language possible.  This is difficult when writing in a natural language like English &mdash; natural languages are inherently ambiguous.  While there are formal languages that can be used to write requirements (e.g., Z), they are not in wide use.</li>
  <li><i>Complete:</i> We should include every requirement discussed.  Those that have been negotiated out might still be included in a "future directions" section.</li>
  <li><i>Consistent:</i> There should not be requirements that conflict.</li>
  <li><i>Prioritized:</i> The requirements should be prioritized so that it is clear which are more important than others.  (E.g., "must have," "should have," "could have," "won't have.")</li>
  <li><i>Verifiable/testable:</i> It should be possible to verify that a requirement can be met.  We need to be specific.</li>
  <li><i>Modifiable:</i> It should be easy to make changes to the specification.  Some of the same techniques that make it easier to modify code apply here, as well: avoiding duplication of information, categorization and organization.</li>
  <li><i>Traceable:</i> It should be possible to trace requirements forward and backward, so we should given them unique identifiers and use those identifiers elsewhere in our process.</li>
</ul>

<p>When writing a requirements specification, we want to focus on the "what" and not the "how."  For example, we want to avoid <i>implementation bias</i> whenever possible.  If we're building a web-based system, the underlying technology we choose (e.g., Java EE, PHP, .NET/ASP) is essentially irrelevant.  Either way, a web site is a web site.</p>

<p class="subtitle">Kinds of requirements</p>

<p>We can categorize requirements in many ways.  One way we did so in lecture was to separate them into <i>functional</i> and <i>non-functional</i> requirements.</p>

<ul>
  <li><i>Functional requirements</i> define the specific behavior of the system.</li>
  <li><i>Non-functional requirements</i> define additional requirements other than what behavior the system supports (e.g., performance, security, cost, usability, etc.).</li>
</ul>

<p class="subtitle">Acceptance test plans</p>

<p>Part of the requirements engineering process is to draw up an <i>acceptance test plan</i>, which details how a system will be tested to ensure that it is acceptable to the customer.  Various scenarios will be described &mdash; in relatively open-ended terms, since we want to avoid implementation bias &mdash; the successful completion of which indicates that the system is ready to be delivered.</p>

</div>

<div class="section">

<hr />

<p class="title">Design</p>

<p>Once requirements are agreed upon, it's time to begin working on a <i>design</i> for your system.  Design is a many-faceted task, whose complexity rises substantially with the complexity of the system being developed.  There is no one "right way" to design software, but there are many well-understood lessons and "best practices," recurring problems for which well-known solution patterns are known, and qualities that we know that good designs generally have and that bad designs generally lack.</p>

<p>We can say that design comes in two flavors: <i>architectural design</i>, which focuses on the "big picture"; and <i>module design</i>, which focuses on details like classes, methods, and so on.</p>

<p>There are a number of goals we're trying to achieve during the design phase:</p>

<ul>
  <li>Decomposing the problem into modules</li>
  <li>Deciding on architectures for arranging these modules</li>
  <li>Developing a plan for how the team will work on these modules</li>
  <li>Estimating cost</li>
  <li>Determining what external systems we'll need to interface with and how we'll do it</li>
  <li>Visualizing the intangibles (using modeling, diagrams, etc.)</li>
</ul>

<p class="subtitle">Moduality</p>

<p>Software is generally built by many people and generally has many versions over its lifetime; both of these facts pose issues that we'll need to solve.  The solution to both is <i>modularity</i>; we should pefer to decompose our system into a collection of subsystems.</p>

<p>Good modules have at least three characteristics:</p>

<ul>
  <li><i>High cohesion.</i>  All internal parts are closely related.</li>
  <li><i>Low coupling.</i>  Modules rely on each other as little as possible.</li>
  <li><i>Information hiding.</i>  Modules hide design and implementation decisions.  (By "hiding," I mean that other modules have no way of depending on these decisions.  If they can't depend on these decisions, we can change our minds without breaking these other modules.)</li>
</ul>

<p class="subtitle">Qualities of a good design</p>

<p>It's hard to define precisely what a "good" design is, but we do know that there are some desirable qualities that good designs have.</p>

<ul>
  <li><i>Rigor.</i>  All requirements are addressed.</li>
  <li><i>Separation of concerns.</i>  Modules each solve a single problem.  They can be written and tested independently.</li>
  <li><i>Anticipation of change.</i>  It should be possible to inject new functionality into a module with minimal impact.</li>
  <li><i>Incrementality.</i>  It should be possible to work on the software in a piecemeal fashion, as opposed to having to build many pieces before being able to test any of them.</li>
</ul>

<p class="subtitle">UML</p>

<p>The <i>Unified Modeling Language</i> (UML) is a collection of kinds of diagrams that we can use to describe the design of a software system.  Different diagrams address different parts of our design.  We spent a fair amount of time talking about one of these diagrams: <i>UML Class Diagrams</i>.  The <a href="DiscussionNotes/Informatics43-Spring2009-Discussion-2009-04-24.pdf">discussion slides</a> on this topic show the various notations used in UML Class Diagrams.</p>

<p class="subtitle">Use cases</p>

<p>Another way to view a design is in terms of problems that the system will need to solve and scenarios in which the system will be used to solve them.  <i>Use cases</i> are a way of describing the behavior of a system from the points of view of a set of <i>actors</i>.  Actors are entities external to the system (e.g., human users, other automated systems).  Use cases are described as a sequence of events, in which an actor interacts with the system in some way.</p>

<p>Use cases are focused on goals: what is each actor trying to achieve and how can the system help them to achieve it?  We define details like user interface only to the extent that we can describe a scenario; the use cases will eventually be used when we consider a more detailed view of our design (e.g., user interface design, module design).</p>

<p>There are many arrangements of use cases.  One such arrangement has use cases broken up into the following sections.</p>

<ul>
  <li><i>Name.</i>  We give the use case a name (and a short identifier) that describes it.</li>
  <li><i>Requirements Addressed.</i>  What requirements are addressed by this use case?</li>
  <li><i>Goal.</i>  What are the actors going to try to achieve in the case described?</li>
  <li><i>Brief Description.</i>  What is going on in this use case?</li>
  <li><i>Actors.</i>  What actors are involved?</li>
  <li><i>Preconditions.</i>  What must be true before this use case can be executed?</li>
  <li><i>Triggers.</i>  What forces cause the use case to be executed?  Is it a user wanting to do something?  Is it something that happens at a repeating interval (e.g., once per hour)?</li>
  <li><i>Sequence of Events.</i>  A description of sequence of events that will lead to the goal being achieved.</li>
  <li><i>Postconditions.</i>  What will be true after the use case has been executed?</li>
</ul>

<p>An example use case, which we wrote in lecture, follows.</p>

<ul>
  <li><i>Name:</i> Adding a Student to the System</li>
  <li><i>Requirements Addressed:</i> ST-2</li>
  <li><i>Goal:</i> To add a new student when they arrive for their first interim counseling meeting.</li>
  <li><i>Brief Description:</i> Students are not automatically entered into the system.  So, when a student arrives for his or her first interim counseling meeting, CCO Counselors will need to gather identifying information from the student and enter it into the system, so that the student can subsequently be scheduled into courses.</li>
  <li><i>Actors:</i> CCO Counselor, Student</li>
  <li><i>Preconditions:</i> Student has not enrolled in classes at the university previously.</li>
  <li><i>Triggers:</i> Student arrives for first-ever counseling appointment.</li>
  <li><i>Sequence of Events:</i>
    <ol>
      <li>Student arrives at CCO for meeting with CCO Counselor.</li>
      <li>Student provides student ID to CCO Counselor.</li>
      <li>CCO Counselor logs into system.</li>
      <li>CCO Counselor looks up student by ID and determines that student is new.</li>
      <li>CCO Counselor asks Student for identifying information (see requirement ST-1).</li>
      <li>CCO Counselor enters identifying information about Student into system.</li>
      <li>CCO Counselor saves changes.</li>
    </ol>
  </li>
  <li><i>Postconditions:</i> Student's information will be stored in system.</li>
</ul>

<p class="subtitle">Architectural styles</p>

<p>As we start to attack larger-scale problems, it becomes more difficult to discover a methodology for arranging our modules and their interactions.  Luckily, there are kinds of problems that recur, for which good architectural solutions have been designed and have proven useful.  These solutions are called <i>architectural styles.</i>  Architectural styles represent "success stories" from the work of previous designers; to understand and use them, when appropriate, is to avoid going through the process of trial-and-error that those previous designers endured in order to find their design.</p>

<p>Some well-known architectural styles:</p>

<ul>
  <li><i>Hierarchy</i>, or <i>Main program with subroutines</i>, in which the set of modules and their relationships (i.e., who calls who) form a hierarchy.  This is a useful style to use when writing a single program, though a lot of interesting software is built out of a collection of programs.</li>
  <li><i>Abstract data type</i>.  An abstract data type (ADT) is a set of data and a set of operations for safely manipulating that data.  ADTs, in a sense, allow us to extend our programming language, by implementing concepts that are not built into the language (as <b>int</b> or <b>boolean</b> types might be), then having them available to us throughout our system.
    <ul>
      <li>Examples include a DateTime class that represents a point in time, a TimeSpan class that represents a duration of time, and a Money class that represents currency.</li>
    </ul>
  </li>
  <li><i>Implicit invocation.</i>  Modules communicate with other modules by sending "signals," but the sending modules are not aware of who the receivers are.  There is sometimes what we call a "bus" that is used to carry the signals from one module to another.  This is a style that can lead to a very flexible design, because we can mix and match components more easily.
    <ul>
      <li>This is the way that GUIs work in Java; the components, such as buttons, react when clicked by calling a method on a set of "listeners," who are objects interested in knowing when the button is clicked.  The button's implementation does not depend on who the listeners are, but onl the mechanism for how to notify them.</li>
    </ul>
  </li>
  <li><i>Client-server.</i>  Connections between modules are <i>remote procedure calls</i>, meaning that they are done across a network (hence the word "remote") but otherwise are a lot like procedure calls (i.e., parameters are passed, a result is returned).  There is an explicit distinction between a <i>server</i> (a module that provides a service) and a <i>client</i> (a consumer of that service).
    <ul>
      <li>Web browsers interact with web servers this way.  Browsers send a particularly-formatted request and servers send back particularly-formatted responses.</li>
    </ul>
  </li>
  <li><i>Repository</i> or <i>Blackboard.</i>  A central repository, or database, holds data.  Modules "surround" the repository and share its data.  As changes are made by one module, they are published to the repository; those changes can then be picked up (or "pushed" to) other modules.
    <ul>
      <li>This style is extremely common in lots of "real" systems, where databases are extremely common.  (Examples include web sites with dynamic content, "enterprise" systems, and source control systems.)</li>
    </ul>
  </li>
  <li><i>Peer-to-peer.</i>  An increasingly common approach to solving certain kinds of problems is for modules to interact (generally across a network), but for none of them to be anointed as "clients" or "servers."  Instead, all are <i>peers</i>, meaning that they have equal rights and responsibilities.  The peers exchange information in a systematic fashion, collaborating on trying to solve some kind of problem.
    <ul>
      <li>BitTorrent, which is a peer-to-peer protocol for sharing files amongst many people (by splitting the file into many smaller chunks and having the peers "trade" for chunks that they don't already have), is a great example of this.</li>
    </ul>
  </li>
  <li><i>Pipes and filters.</i>  A series of independent, sequential transformations are made to data.  The output of one module is the input to the next module.  The modules have little or no state of their own; they simply know how to take what's given to them and affect some kind of change on it.  In this approach, we call the modules <i>filters</i> and the connections between those modules <i>pipes</i>.
    <ul>
      <li>This approach can lead to very flexible architectures, in which the output of the system is radically changed simply by rearranging the filters (e.g., adding one, removing one, or changing their order).</li>
    </ul>
  </li>
  <li><i>Layered.</i>  Modules are arranged into <i>layers</i>.  Modules in one layer only use modules in the layer directly below them.  You could say that each layer hides the details of how the layers below it work.  Layers are a good way of preventing particular complexities from pervading very far into a system; a detail is handled in one layer, hidden away in that layer so that no other layers need to know about it.
    <ul>
      <li>Networks are almost always implemented this way.  There are different arrangements of layers that are used in practiced, but layered architectures are ubiquitous.</li>
    </ul>
  </li>
</ul>

<p>It is not necessarily the case that there is one architectural style for a whole project.  We often combine them together.</p>

</div>

<div class="section">

<hr />

</div>

</body>
</html>
