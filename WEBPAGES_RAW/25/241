<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Program 5</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Program 5</h1>
<h1>Writing Classes</h1>
<p>
<h2>Introduction to Computer Science I
<br>
ICS-21<br>
</h2>
<p>
</center>


<!-- Introduction -->

<a name="Introduction">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Introduction</b></td>
<td width ="80%">
  This programming assignment is designed to ensure that you know how to write
    simple classes: both classes filled with static methods (referenced by the
    class name) and "normal" classes (from which one can construct objects
    storing state in instance variables and call their methods on these
    objects).
  Primarily, you will be writing methods (either static or not) and write a few
    constructors and specify/use a few fields (mostly instance variables).
  Of course, you will continue gaining experience with the standard control
    structures in Java (blocks, ifs, loops/breaks) as well as the more basic
    Java features (declarations and expression statements using arithmetic,
    state-change, relational and logical operators).
  <p>
  To write a class using iterative enhancement, we use the following process.
  <ol>
    <li>Write a driver for testing the class, typically a console program
          that allows us to call every method in the class.
        I will often provide these; later we will examine writing a
         different kind of driver using JUnit.
    <li>Decide on the needed instance variables for the class and declare
          (and if possible initialize) them.
    <li>Write the required constructors.
    <li>Write the header of each method, filled in with a minimal
           body.
        This is called <b>stubbing</b> methods in a class.
        <ul>
          <li> for a <b>void</b> method, the body can be just <b>{}</b>
          <li> for a method returning a reference type, the body should be
                 <b>{return null;}</b>
          <li> for a method returning a primitive type, the body should just
                 return some literal of that type (e.g., <b>{return false;}</b>
                 or <b>{return 0;}</b> etc.)
        </ul>
     <li>Once this class and its driver compiles, fill in the body of each
            method, then test it in the driver, then continue by filling in the
            body of the next method, etc.
         There is a bit of an art to determine which methods to implement/test
            first.
         A good heuristic is to implement/test <b>toString</b> first (to
           help debug the others), then implement/test the simplest methods
           first -the ones that do not call other methods defined in the class.
         Often (in the case of collection classes) the method for adding a
           value to a collection will have to be written early on, to test the
           accessors and the method to remove a value.
  </ol>
  <p>
  You will write three classes in this assignment.
  In all cases I will provide driver programs that you will use to test your
    classes.
  As always, you can check the behavior of your programs against mine by
    downloading, unzipping, and then running the file
     <a href="executable.zip">Program #5 Executables</a>,
    to help you understand the specification of the problem and observe the
    programmer/user interaction that you are to implement.
  See <a href="../program1/program.html">Program #1</a> for details on how
    to run these executables on both PCs and in Eclipse (PCs and Macs).
  Remember, you can run these programs, but not examine their source (Java)
    code.
  <p>
  Note how packages are used in this assignment.
  In each package the driver program is complete, and you must write only
    <b>one class</b> that it drives: these classes are either empty or need
     to be revised.
  All other classes provided are complete.
  <b>Please be careful when deciding whether variables are instance variables,
       parameter variables, or local variables, and using each of these.</b>
  <p>
  To start working on this assignment, download
    <a href="start.zip">Program #5 Project Folder</a>
    which contains the outlines of classes you should write for this assignment
    and the driver programs that you should use to test these classes .
  Write, run, and debug each class/program.
  When you finish each part, submit its <b>.java</b> file.
  <p>
  <b>Only one programmer of the pair should dropoff the programs: the same one
       for each part.
     It doesn't matter which of the pair submits, but that person should
       submit all the parts.
     Of course, each program should contain both student names (in the
        comment: the same one you cut, pasted, ane filled in at the top of
        each program in <a href="../program1/program.html">Program #1</a>).</b>
</td>
</tbody>
</table>


<!-- Static Library -->

<a name="StaticLibrary">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Static Library</b></td>
<td width ="80%">
  Write the methods in a class named <b>SUM</b> (abbreviating Static Utility 
    Methods) that contains the four methods described below.
  The <b>Driver</b> class prompts the user for information to use when calling
    these methods and prints the results that they return (so you can more
    easily debug them).
  <p>
  First, change the <b>SUM</b> class to be in a different package: one using
    your UCI user ID (something like <b>edu.uci.pattis</b>) and 
    use this package name when you import it into the <b>Driver</b> class.
  To do this, change the name of the package in the <b>SUM</b> class, then let
    Eclipse fix the problem (click the red X and select the first option:
    <b>Move SUM.java to package (your package name)</b>).
  <p>
  Please write the following methods to meet the specification stated.
  Throw no exceptions except for the ones mentioned below.
  As is normally the case, none of these methods do any input/output
    other than through parameters and returned values.
  <ol>
    <li><b>majority</b> takes three <b>boolean</b> parameters and returns a
          <b>boolean</b> result whose value is the one that is in the majority.
        <b>majority(true,true,false)</b> returns <b>true</b>.
        With three <b>boolean</b> arguments and only two possible
          <b>boolean</b> values, one values is always in the majority (either
            2o f 3 or 3 of 3).
        Try to find a compact method body, NOT enumerating all eight
          possibilities.
        Run my executable for further information.
    <p>
    <li><b>isPrime</b> takes one <b>int</b> parameter and returns a
        <b>boolean</b> whose value is <b>true</b> if the parameter is a prime
          number.
        If the parameter is negative, this method should throw an
           <b>IllegalArgumentException</b> with an appropriate message.
        Next is the defintion of "prime" we will use in this method's body.
        If the parameter is 0 or 1, it should return <b>false</b> (technically
           neither 0 nor 1 are prime); if the parameter is any larger value,
           it should return <b>false</b> if some number, between 2 and the
           parameter-1, exactly divides the parameter: for example, if the
            parameter is <b>15</b>, try divisors between 2 and 14 (inclusive,
           using a general <b>for</b> loop.
        If any of thess values is a divisor, IMMEDIATELY return <b>false</b>;
        if none of these values exactly divides the parameter, then the method
          should finally return <b>true</b>.
        Run my executable for further information.
    <p>
    <li><b>constrain</b> takes three <b>int</b> parameters and returns an
          <b>int</b> result whose value is constrained to lie within the 1st
          and 3rd parameter values.
        It returns the 2nd parameter, if it lies between the 1st and 3rd 
          inclusive; it returns the 1st if the 2nd parameter is less than the
          1st; it returns the 3rd if the 2nd parameter is greater than the 3rd.
        For example <b>constrain(0,5,10)</b> returns <b>5</b> because the value
          of the 2nd parameter is between the 1st and 3rd.
        But <b>constrain(0,-5,10)</b> returns <b>0</b> because the value of the
          2nd parameter is smaller than the 1st parameter.
        And <b>constrain(0,15,10)</b> returns <b>10</b> because the value of
          the 2nd parameter is larger than the 3rd parameter.
        Run my executable for further information.
    <p>
    <li><b>digits</b> takes one <b>int</b> parameter and returns an <b>int</b>
          result whose value is the number of digits in the first parameter.
        This method works for any parameter, and returns a positive value 1 or
           greater.
        For example <b>digits(0)</b> returns <b>1</b>;
        <b>digits(1245)</b> returns <b>4</b>;
        <b>digits(-10)</b> returns <b>2</b>.
        This method computes its result by counting how many times it can
          divide the parameter by 10 before reaching a single digit number;
          each division represents "chopping off" a digit in the parameter.
        Run my executable for further information.
  </ol>
</td>
</tbody>
</table>


<!-- BigRational -->

<a name="BigRational">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>BigRational: Infinite Precision Rationals</b></td>
<td width ="80%">
  Write a class named <b>BigRational</b> by updating the class named
     <b>Rational</b>.
  This assignment is actually a bridge between using/writing classes, because
    you are actually just <b>translating</b> the <b>Rational</b> class
    into <b>BigRational</b>, which contains all same the methods, but with
    translated instance variables and bodies.
  In <b>BigRational</b> instead of using two <b>int</b> instance variables for
    storing the <b>numerator</b> and <b>denominator</b> (as <b>Rational</b>
    does), use two <b>BigInteger</b> instance variables, by importing and using
    the <b>java.math.BigInteger</b> class.
  In <b>BigRational</b>, these instance variables can store integers with any
    number of digits (tens, hundreds, thousands, etc.)
  Refer to the Javadoc of <b>BigInteger</b> throughout this assignment (you
     might even want to print a copy for quicker reference).
  <p>
  What you must do is translate the <b>Rational</b> class so that instead of
    using <b>int</b>s it becomes the <b>BigRational</b> class and uses
    <b>BigInteger</b>.
  Operators applied to <b>int</b> variables must be translated into method
    calls on <b>BigInteger</b> variables.
  Most operators on <b>int</b>s are available as equivalent methods on
    <b>BigInteger</b>s.
  Use the <b>BigRational.java</b> file provided; mostly it is a copy of the
    <b>Rational.java</b> file); you must translate all the <b>Rational</b>
    constructors and methods.
  The project file also contains a <b>Driver</b> class, which compiles
    correctly when the the <b>BigRational</b> class compiles correctly.
  <p>
  Here are some general hints for translation.
  <ul>
    <li>Wherever you see <b>Rational</b> or <b>int</b> in the class, change
          them to <b>BigRational</b> or <b>BigInteger</b> (except for the
          return type of the <b>compareTo</b> method, which should remain
          <b>int</b>, and the parameter to <b>toDecimalString</b> which
          should remain <b>int</b>).
    <p>
    <li>The <b>BigInteger</b> class has static fields <b>ZERO</b> and
          <b>ONE</b>; if you need any other <b>BigInteger</b> values (say, 
          <b>10</b>) use a constructor to create one (e.g.,
          <b>BigInteger ten = new BigInteger("10");</b>).
    <p>
    <li>If <b>int a,b,c;</b> we write <b>a + b * c</b> but with
          <b>BigInteger a,b,c;</b> we write <b>a.add( b.multiply(c) )</b>; we
          can also write this expression as the cascaded method call
          <b>b.multiply(c).add(a)</b>, although this looks a bit strange
          because the order of the operands has changed.
    <p>
    <li>There is a <b>gcd</b> method in the <b>BigInteger</b> class (so you
          should use this method directly in the constructor: DO NOT define a
          <b>private static</b> method for this operation in the
          <b>BigRational</b> class; remove this method from your code).
    <p>
    <li>When writing the <b>compareTo</b> method for <b>BigRational</b> make
          use of the the <b>compareTo</b> method for <b>BigInteger</b> (and
          remember, it should still return an <b>int</b> not a
          <b>BigInteger</b>).
    <p>
    <li>Finally, I have already completely translated the
          <b>toDecimalString</b> method, which appears in both the original
          form and updated form (commented out). 
        You can study the differences and use these methods as an guide to how
          to translate the other methods.
        Put the orignal code in comment (or remove it), and uncomment
          the translated code, which will work for <b>BigInteger</b> instance
          variables.
  </ul>
  Run my executable for further information.
  After you program compiles and runs, intially test its methods by using the
    driver and  entering small values that you can compute the result for
    (e.g., 1/2 + 1/3 = 5/6).
  Eventually try running the <b>harmonic sum</b> option with 100 or 200 for
    <b>n</b> and comparing its output to my executable.
  You DO NOT need to write/update the Javadoc for this class; just focus on
    translating the instance variables and methods.
</td>
</tbody>
</table>



<!-- Bouncing Balls -->

<a name="Bouncing Balls">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Ball: For Bouncing Ball Simulations</b></td>
<td width ="80%">
  Write a simple class named <b>Ball</b>, which we can use to simulate a
    bouncing ball (there are two drivers for simulation: one textual
    -in the <b>Ball</b> class- and one graphical).
  We characterize a ball's state by five values; its
  <ul>
    <li>color (a <b>Color</b> which doesn't change)
    <li>size  (an <b>int</b> (radius of ball in <b>pixels</b>) which doesn't
        change)
    <li>height (a <b>double</b> (feet) which changes during in the simulation)
    <li>elasticity (a <b>double</b> which doesn't change and determines how
        much the ball bounces)
    <li>velocity (a <b>double</b> (feet per second) which changes during in
          the simulation)
  </ul>
Here, some states are intrinsic ball properties independent of the
  simulation: its color, size, and elasticity (what percentage of its
  downward velocity is converted into upward velocity when it bounces);
other states are a result of the simulation: its height and velocity.
<p>
Fill in the fields (instance variables), constructor, and methods in the
    <b>Ball</b> class.
  <ul>
    <li>The fields represent all the ball's states, using the types
          <b>Color</b>, <b>int</b>, and <b>double</b>.
    <p>
    <li>The constructor's parameters specify all the ball's state, except the
          velocity, which should always start at <b>0.</b> when
         <b>new</b> constructs a new <b>Ball</b> object.
    <p>
    <li>The methods are mostly accessors that return information about the
          ball's state to the simulation so it can display a ball:
           <b>getColor</b>, <b>getSize</b>, <b>getHeight</b>.
        Note that the <b>toString</b> method should return a large
          <b>String</b> containing the name of ALL instance variables and
          their current values.
        It might return a values that prints like<br>
        <b>Ball[color=java.awt.Color[r=255,g=0,b=0],size=15,height=10.0,elasticity=0.9,velocity=0.0]</b>
        Note that the <b>Color</b> class has its own <b>toString</b> method,
          which you can call.
    <p>
    <li>The <b>update</b> method computes the new height and velocity of
          the ball after the specified amount of time passes.
        This is similar to the rocket calculation, but much simpler.
        <ul>
          <li>Compute the velocity at the end of the time interval:
              the velocity at the start of the time interval - gravity*dT.
          <li>Compute the average velocity over the interval: the average
                between the velocity at the start and end of the interval.
          <li>Compute the height at the end of the time interval:
              the height at the start of the time interval +
              the average velocity during the interval times dT.
          <li>If the height IS NOT negative, store the velocity
                at the end of the time interval into the velocity
                for the start of the next time interval;
              if the height IS negative, make it 0. and then store
                the opposite of the average velocity (times the elasticity)
                into the velocity for the start of the next time interval.
        </ul>
    </ul>
First test your <b>Ball</b> class using the <b>main</b> method in the
  <b>Ball</b> class itself; remember to rewrite the <b>toString</b> method
  correctly or it won't print anything; check your results against my
  executable.
<p>
Then test your <b>Ball</b> class using the graphic driver.
For the colors, use only positive <b>int</b> values 0 to 255;
  for the size use a reasonable-sized positive integer (e.g., 15 pixels);
  for the height, don't exceed 10.
  for the elasticity, generally use a <b>double</b> value 0 to 1.; note that
    even with a perfect bounce (elasticity = 1.), because of the way the
    equations are simplified (not exact in terms of bouncing) some ball(s)
    may eventually come to rest and some not; try an elasticity > 1.
<p>
Actuallly, if you specify <b>-1</b> for any value, a random number in
  the appropriate range will be use; the default values are <b>-1</b>
  for everything except elasticity.
Experiment by running the program with <b>-1</b> and other values.
<p>
Note that I have written all the correct header methods in<b>Ball</b>, so
  this part compiles correctly.
<b>Ball</b> is the the only class that you must change, by filling
  in the instance variables, and bodies of the constructors and methods.
Try debugging your ball using the <b>Construct One</b> button first, then
  test it later with <b>Construct Many</b>.
</td>
</tbody>
</table>

<!-- 

<a name="VendingMachine">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Vending Machine</b></td>
<td width ="80%">
  Write a class named <b>Model</b> for the <b>vendingMachine</b> package.
  This class implements the actions of a vending machine which allows coins to
    be deposited and products to be bought (or transactions to be cancelled).
  It consists of some fields (you will have to infer most of these; plan on
    adding/removing fields as you implement/debug this class), methods, and a 
    constructor with no parameters.
  It must implement the following <b>public</b> methods (see their headers
    below), which are called by the <b>Controller</b> and <b>View</b> classes
    to simulate a vending machine.
  The program will not compile without these methods; you can write other
    <b>private</b> helper methods for this class as well, to avoid duplicating
    code.
  <ul>
    <li><b>void cancel()</b> is called when the cancel button is pressed.
        It should terminate any pending sale return whatever coins the user
          has deposited.
        When the view is updated, it should explain this action in the message
          window at the bottom.
    <li><b>void deposit(int amount)</b> is called when any of the money buttons
          are pressed (its parameter indicates how much money was deposited: it
          is always 5, 10, or 25 cents).
        When the view is updated, it should explain this action in the message
          window at the bottom.
    <li><b>void buy (String product)</b> is called when any of the buy buttons
          are pressed (its parameter indicates which product is bought: it is
          either <b>"Pepsi"</b> or <b>"Coke"</b>).
        When the view is updated, it should explain this action in the message
          window at the bottom, including how much change is returned.
        Note that when an item runs out, the button to buy that item become
          un-pressable.
    <li>There are six accessors, each of which the view calls when it needs to
          display information about the state of the vending machine (for
          example, to determine whether or not a buy button is pressable).
    <ul>
      <li><b>String getDeposited()</b> returns the total amount of money
          deposited since the transaction started.
      <li><b>String getMessage()</b> returns the message to display
          (at the bottom, in blue).
      <li><b>int getCokeLeft()</b> returns the number of coke bottles in the
          machine.
      <li><b>int getPepsiLeft()</b> returns the number of pepsi bottles in the
          machine.
      <li><b>String getCokePrice()</b> returns the price of a coke.
      <li><b>String getPepsiPrice()</b> returns the price of a pepsi.
    </ul>
  </ul>
  Run my executable for further information
  Deposit coins, make purchases (or cancel the purchases; try to make
    purchases with too little money) and observe the information that the
    view displays; it should work according to your expectations of how a 
    vending machine should work.
  Pay particularly close attention to...
  <ul>
    <li>..what happens when you cancel a purchase; you get back exactly the
            coins you deposited (e.g., if you put in 3 dimes, you get three
            dimes back, not a quarter and a nickel).
          Note that the result must read correctly: e.g.,
            <b>1 dime</b> but <b>2 dimes</b>.
    <li>..what happens when there is not enough (or not the right kind of)
          change left to make a purchase (the purchase should be disallowed).
    <li>..what happens when there is enough change to make a purchase.
         It should return the fewest number of coins possible.
         Be careful, though: the change might be 25 cents, but it could be
           returned as 1 dime and 3 nickels because there are
           no quarters and only one dime.
  </ul>
  For debugging purposes, each pressed button prints some information in the 
    console window.
  Notice that the information returned from the <b>toString</b> method in
    the <b>Model</b> class is displayed in the console window too, for
    debugging purposes.
  <p>
  Finally, remember to call <b>view.update()</b> whenever the state of the
    model has changed; this tells the view to recollect all the information
    that it needs to redisplay itself: in this case it will call all the tiny
    accessors to determine what to display.
  <p>
  The constructor for the model should prompt the user to enter the starting
    number of quarters, dimes, nickels, coke bottles, pepsi bottles, coke cost,
    and pepsi cost
   (if you declare any other instance  variables, initialize them
    appropriately without prompting).
  You do not need to examine/alter code in the other classes in this package.
  You do not need to write/update the Javadoc for this class.
</td>
</tbody>
</table>
--->


</table>
</body>
</html>
