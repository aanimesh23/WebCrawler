<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- Page automatically generated from latex_to_html converter. -->
<!-- by cc_extract_html, $Revision: 3.19 $ -->
<!-- LaTeX source file: './Kernel_d_ref/Sphere_d.tex' -->
<html> <head>  
<title>Sphere_d&lt;Kernel&gt;</title>
</head>  
<link href="../latex_to_html.css" rel="STYLESHEET">
<body bgcolor="white">
<!-- ------------------------------------------------------------------- -->


<!-- Top Navigation ---------------------------------------------------- -->
<div class="NavTop">
<hr>
  <strong>Navigation:</strong>
<a href="Chapter_main.html">Up</a>, 
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<hr><!-- End of Top Navigation ----------------------------------------- -->
</div>


<A NAME="Cross_link_anchor_500"></A>

<A NAME="Cross_link_anchor_501"></A>

      
     
     
     
<A NAME="Index_anchor_374"></A> 

   
<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC="cc_Class.gif"></TD></TR></TABLE>


    <A NAME="ccRef_CGAL::Sphere_d<Kernel>"></A>
<h2><I>CGAL::Sphere_d&lt;Kernel&gt;</I></h2>
<P>

<H3>Definition</H3>
<P>

An instance <MATH><I>S</I></MATH> of the data type <I><A HREF="Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A></I> is an oriented sphere
in some <MATH><I>d</I></MATH>-dimensional space. A sphere is defined by <MATH><I>d+1</I></MATH> points
(class <I><A HREF="Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;</I>). We use <MATH><I>A</I></MATH> to denote the array of the
defining points.  A set <MATH><I>A</I></MATH> of defining points is <I>legal</I> if
either the points are affinely independent or if the points are all
equal. Only a legal set of points defines a sphere in the geometric
sense and hence many operations on spheres require the set of defining
points to be legal.  The <A HREF="Function_orientation.html#Cross_link_anchor_537">orientation</A> of <MATH><I>S</I></MATH> is equal to the
<A HREF="Function_orientation.html#Cross_link_anchor_537">orientation</A> of the defining points, i.e., <I><A HREF="Function_orientation.html#Cross_link_anchor_537">orientation</A>(A)</I>.
<P>

<H3>Types</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;::R
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    the representation type.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;::RT
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    the ring type.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;::FT
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    the field type.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;::LA
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    the linear algebra layer.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;::point_iterator
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    a read-only iterator for points defining
the sphere.
<P>

</TD></TR>
        </TABLE>
<P>

<H3>Creation</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; S;
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    introduces a variable <I>S</I>
of type <I><A HREF="Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;</I>.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    template &lt;class ForwardIterator&gt;
        </I></NOBR>
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; S ( int d,  ForwardIterator first,  ForwardIterator last);
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    introduces a variable
<I>S</I> of type <I><A HREF="Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;</I>. <I>S</I> is initialized to the
sphere through the points in <I>A = tuple [first,last)</I>.<BR>

<EM>Precondition: </EM><MATH><I>A</I></MATH> consists of <MATH><I>d+1</I></MATH> <MATH><I>d</I></MATH>-dimensional points.<BR>

<EM>Requirement: </EM>The value type of ForwardIterator is <I><A HREF="Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;</I>.
<P>

</TD></TR>
        </TABLE>
<P>

<H3>Operations</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_int_dimension69;"></A>
int
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    S.dimension ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the dimension of the ambient space.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_d6Kernel9_point6int_i9_;"></A>
<A HREF="Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    S.point ( int i)
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the <MATH><I>i</I></MATH>th defining
point.<BR>

<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> <I>dim</I></I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_point_iterator_points_begin69_;"></A>
point_iterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    S.points_begin ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns an iterator
  pointing to the first defining point.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_point_iterator_points_end69_;"></A>
point_iterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    S.points_end ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns an iterator pointing
  beyond the last defining point.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_degenerate69;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    S.is_degenerate ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns true iff the defining points
  are not full dimensional.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_legal69_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    S.is_legal ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns true iff the set of defining
  points is legal.  A set of defining points is legal iff their
  <A HREF="Function_orientation.html#Cross_link_anchor_537">orientation</A> is non-zero or if they are all equal.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_d6Kernel9_center69_;"></A>
<A HREF="Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    S.center ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the center of <I>S</I>.<BR>

<EM>Precondition: </EM><I>S</I> is legal.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_FT_squared_radius69_;"></A>
FT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    S.<A HREF="../Kernel_23_ref/Function_squared_radius.html#Cross_link_anchor_267">squared_radius</A> ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the squared radius of the
  sphere.<BR>

<EM>Precondition: </EM><I>S</I> is legal.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Orientation_orientation69_;"></A>
<A HREF="../Kernel_23_ref/Enum_Orientation.html#Cross_link_anchor_114">Orientation</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    S.<A HREF="Function_orientation.html#Cross_link_anchor_537">orientation</A> ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the <A HREF="Function_orientation.html#Cross_link_anchor_537">orientation</A> of
  <I>S</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Oriented_side_oriented_side6const_Point_d6Kernel9__p9_;"></A>
<A HREF="../Kernel_23_ref/Enum_Oriented_side.html#Cross_link_anchor_116">Oriented_side</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    S.oriented_side (  <A HREF="Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns
  either the constant <I><A HREF="../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side">ON_ORIENTED_BOUNDARY</A></I>,
  <I><A HREF="../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side">ON_POSITIVE_SIDE</A></I>, or <I><A HREF="../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side">ON_NEGATIVE_SIDE</A></I>, iff p lies on the
  boundary, properly on the positive side, or properly on the negative
  side of sphere, resp.<BR>

<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Bounded_side_bounded_side6const_Point_d6Kernel9__p9_;"></A>
<A HREF="../Kernel_23_ref/Enum_Bounded_side.html#Cross_link_anchor_99">Bounded_side</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    S.bounded_side (  <A HREF="Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns
  <I><A HREF="../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side">ON_BOUNDED_SIDE</A></I>, <I><A HREF="../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side">ON_BOUNDARY</A></I>, or <I><A HREF="../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side">ON_UNBOUNDED_SIDE</A></I>
  iff p lies properly inside, on the boundary, or properly outside of
  sphere, resp.<BR>

<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_has_on_positive_side_6const_Point_d6Kernel9__p9_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    S.has_on_positive_side (  <A HREF="Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns
  <I>S.oriented_side(p)==<A HREF="../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side">ON_POSITIVE_SIDE</A></I>.<BR>

<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_has_on_negative_side_6const_Point_d6Kernel9__p9_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    S.has_on_negative_side (  <A HREF="Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns
  <I>S.oriented_side(p)==<A HREF="../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side">ON_NEGATIVE_SIDE</A></I>.<BR>

<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_has_on_boundary_6const_Point_d6Kernel9__p9_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    S.has_on_boundary (  <A HREF="Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns
  <I>S.oriented_side(p)==<A HREF="../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side">ON_ORIENTED_BOUNDARY</A></I>, which is the same as
  <I>S.bounded_side(p)==<A HREF="../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side">ON_BOUNDARY</A></I>.<BR>

<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_has_on_bounded_side_6const_Point_d6Kernel9__p9_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    S.has_on_bounded_side (  <A HREF="Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns
  <I>S.bounded_side(p)==<A HREF="../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side">ON_BOUNDED_SIDE</A></I>.<BR>

<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_has_on_unbounded_side_6const_Point_d6Kernel9__p9_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    S.has_on_unbounded_side (  <A HREF="Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns
  <I>S.bounded_side(p)==<A HREF="../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side">ON_UNBOUNDED_SIDE</A></I>.<BR>

<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Sphere_d6Kernel9_opposite69_;"></A>
<A HREF="Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    S.<A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A> ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the sphere with the same
  center and squared radius as <I>S</I> but with <A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A> <A HREF="Function_orientation.html#Cross_link_anchor_537">orientation</A>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A HREF="Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
     S +  <A HREF="Class_Vector_d.html#Cross_link_anchor_489">Vector_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; v<A NAME="Function_Sphere_d6Kernel9_operator+6const_Vector_d6Kernel9__v9_;"></A>

        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the
  sphere translated by <I>v</I>.<BR>

<EM>Precondition: </EM><I>S.dimension()==v.dimension()</I>.
        </TD></TR>
        </TABLE>
<P>

<H3>Non-Member Functions</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_weak_equality6const_Sphere_d6Kernel9__S1+_const_Sphere_d6Kernel9__S29_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    weak_equality (  S1,  S2)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    Test for equality as unoriented spheres.<BR>

<EM>Precondition: </EM><I>S1.dimension()==S2.dimension()</I>.
        </TD></TR>
        </TABLE>
<P>

<H3>Implementation</H3>
<P>

Spheres are implemented by a vector of points as a handle type.  All
operations like creation, initialization, tests, input and output of a
sphere <MATH><I>s</I></MATH> take time <MATH><I>O(<I>s.dimension()</I>)</I></MATH>. <I>dimension()</I>,
point access take constant time.  The <I>center()</I>-operation takes
time <MATH><I>O(d<SUP>3</SUP>)</I></MATH> on its first call and constant time thereafter. The
sideness and <A HREF="Function_orientation.html#Cross_link_anchor_537">orientation</A> tests take time <MATH><I>O(d<SUP>3</SUP>)</I></MATH>.  The space
requirement for spheres is <MATH><I>O(<I>s.dimension()</I>)</I></MATH> neglecting the
storage room of the points.
<P>

<div class="NavNext"><hr> <b>Next:</b> <a href="Class_Iso_box_d.html"><I>Iso_box_d&lt;Kernel&gt;</I></a> 


    
<div class="NavBottom">
<hr><!-- Bottom Navigation --------------------------------------------- -->
  <strong>Navigation:</strong>
<!Up_chapter_link_5!>
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<!-- End of Bottom Navigation ------------------------------------------ -->


<hr><!-- --------------------------------------------------------------- -->
<div class="NavAddress">

The <A HREF=http://www.cgal.org>CGAL Project</A> .

Tue, December 21, 2004 .
<hr></div>
</body>  </html>  
