<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="../../course.css" type="text/css" />

<title>ICS 46 Spring 2016, Notes and Examples: Comparison-Based Sorting</title>

</head>

<body>

<div class="navbar">

<p>
ICS 46 Spring 2016 |
<a href="../../index.html">News</a> |
<a href="../../CourseReference.html">Course Reference</a> |
<a href="../../Schedule.html">Schedule</a> |
<a href="../../ProjectGuide">Project Guide</a> |
<a href="../../Notes">Notes and Examples</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 46 Spring 2016<br />
   Notes and Examples: Comparison-Based Sorting</p>

</div>

<div class="section">

<hr />

<p class="title">The sorting problem</p>

<p>We'll be spending some time learning, analyzing, and comparing several different ways of solving the <i>sorting problem</i>.  Before we do that, it's not a bad idea for us all to agree on what the problem actually is.  What are we looking for?  How do we know we've solved it?  Does it matter what types of data we're sorting?  Even if you may think that it sounds silly to start there &mdash; that you <i>must</i> know already what it means to sort things &mdash; by understanding the problem more thoroughly, we'll discover that we can solve it in a wider variety of cases (and ways) than you might have first thought.</p>

<p class="subtitle">What does it mean to be sorted?</p>

<p>Suppose you have a sequence of items of some type &mdash; they might be integers, they might be strings, they might be calendar dates.  We say that this sequence can be <i>sorted</i> if there exists a <i>total ordering</i> for the items.  Total ordering is a term from mathematics with a particular meaning, which we should be sure we understand.  A total ordering exists if there is a relation, which you might refer to by the symbol &le;, that can be used to provide that ordering.  Colloquially, we could say that &le; is the way that we decide "which item comes first" in a sorted version of the sequence.  But there are a few details we have to get right; for &le; to form the basis of a total ordering, though, it has to have a few properties:</p>

<ul>
  <li>For any two items <i>i</i> and <i>j</i>, at least one of these two things will always be true: <i>i</i> &le; <i>j</i> or <i>j</i> &le; <i>i</i>.  (This just means that there is always a way to decide, given any two items, which one should come first; the relation isn't indifferent about any pair of items.)</li>
  <li>If <i>i</i> &le; <i>j</i> and <i>j</i> &le; <i>i</i>, then <i>i</i> = <i>j</i>.  (In other words, there will never be two items in which either could come first, unless they're <i>equivalent</i>, in the sense that we don't care which one comes first.)</li>
  <li>If <i>i</i> &le; <i>j</i> and <i>j</i> &le; <i>k</i>, then <i>i</i> &le; <i>k</i>.  (This is what's often called <i>transitivity</i> in mathematics, which just means, in this case, that decisions we make about various items can safely be combined to produce a final sorted ordering that makes sense.)</li>
</ul>

<p>These properties, taken together, mean that our &le; relation can make meaningful decisions about which items come before which others, and that those decisions, taken together, will lead to a sequence that is sorted meaningfully.  If our &le; relation has these properties, we can use it to sort elements into a meaningful order.</p>

<p>There is another wrinkle worth considering here, as well.  It's important not to take the use of &le; too literally here.  It's certainly true that the &le; relation on integers, for example, has the properties described above and, thus, can be used to provide a total ordering of the elements.  If you literally used &le; to sort integers, you would be sorting them into <i>ascending order</i>, which is to say that they'd be arranged from smallest to largest.</p>

<p>However, the &ge; relation on integers has the properties described above, as well.  For any two items <i>i</i> and <i>j</i>, <i>i</i> &ge; <i>j</i>.  If <i>i</i> &ge; <i>j</i> and <i>j</i> &ge; <i>i</i>, that means <i>i</i> = <i>j</i>.  The &ge; relation is transitive.  So we can just as well use the &ge; relation to sort integers, in which case we'd have sorted them into <i>descending order</i>, arranged from largest to smallest.</p>

<p>You could also sort elements that aren't numbers.  Strings, for example, can be sorted, as long as you have a total ordering relation.  One way to do that is to use a <i>lexicographical</i> comparison, which compares the character codes of the first character of each string using &le;, then the second character if the first characters are equal, and so on.  But you could also sort strings by comparing their lengths, or counting how many times the letter A appears in them.  Any of these relations are total orderings, so any of them would be potential ways you could sort strings.  By the same token, you could sort calendar dates by year, then month (if the years are equal), and day (if the years and months are equal); you could sort students by student ID#; and so on.</p>

<p>Regardless of which relation you choose, the sorting algorithms themselves will be the same, and we'll generally learn about these algorithms by sorting integers into ascending order.  But be aware that the same algorithms can be used to sort other kinds of things, simply by using a different means of comparing them.  (For example, if implemented in C++, you could pass a function or a function object as a parameter to your sort algorithm, which is what built-in sorting functions like <b>std::sort</b> allow.)</p>

<p class="subtitle">Comparison-based sorting</p>

<p>Many sorting algorithms do their work by comparing pairs of elements, then rearranging them based on the result of those comparisons.  We call these algorithms <i>comparison-based sorting algorithms</i>.  There are a variety of such algorithms, with wildly different performance characteristics.  Some perform better than others in one circumstance, while performing worse than others in different circumstances.  Some are generally solid, if not the best in every case.  Some really are irredeemable.</p>

<p>Below, we'll discuss some of the most commonly-studied comparison-based sorting algorithms, focusing on both <i>how</i> each of the algorithms works, as well as <i>how well</i> each of them works.</p>

</div>

<div class="section">

<hr />

<p class="title">Insertion sort</p>

<p>The first comparison-based sorting algorithm we'll look at is called <i>insertion sort</i>.  Suppose we have the following list of elements that we'd like to sort.  (We'll think of this as an array, though, as we'll see, this algorithm could be implemented to work just as well on a linked list, since it mainly accesses elements sequentially.)</p>

<table class="normal">
  <tr>
    <td>6</td>
    <td>3</td>
    <td>5</td>
    <td>7</td>
    <td>2</td>
    <td>8</td>
    <td>1</td>
    <td>4</td>
  </tr>
</table>

<p>Insertion sort begins by conceptually dividing these elements into two sections, a <i>sorted</i> section and an <i>unsorted</i> section.  The elements in the sorted section are sorted with respect to one another; the elements in the unsorted section can be in any order.  Initially, the first element of the array is considered sorted, while the rest are considered unsorted.  Our initial state, then, looks like this &mdash; the sorted section is denoted as <i>s</i> and the unsorted section is denoted as <i>u</i>.</p>

<table class="normal">
  <tr>
    <td>6</td>
    <td>3</td>
    <td>7</td>
    <td>1</td>
    <td>2</td>
    <td>8</td>
    <td>5</td>
    <td>4</td>
  </tr>
  <tr class="divider">
    <td colspan="1">s</td>
    <td colspan="7">u</td>
  </tr>
</table>

<p>We then proceed through a number of steps, with each step having the job of inserting the first element in the unsorted section into the appropriate place in the sorted section.  If there are <i>n</i> elements total, after <i>n</i> &minus; 1 steps, the sorted section will comprise all of the elements in the array, i.e., the array will be sorted.</p>

<p>At each step, the insertion is done by comparing the element we're inserting to the element directly to its left.  If it's in the right place already, we'll leave it alone and we're done; if not, we'll swap it with the element directly to its left, then do the same thing again, continuing until we've found the right place to insert the element.</p>

<p>In this example, our first step will have us compare 3 to 6.  3 is smaller than 6, so it belongs to 6's left, which means we'll swap the elements.  There's nowhere left to look; 3 is now at the beginning of the array, so we're done.</p>

<table class="normal">
  <tr>
    <td>3</td>
    <td>6</td>
    <td>7</td>
    <td>1</td>
    <td>2</td>
    <td>8</td>
    <td>5</td>
    <td>4</td>
  </tr>
  <tr class="divider">
    <td colspan="2">s</td>
    <td colspan="6">u</td>
  </tr>
</table>

<p>Next, we compare 7 to the element to its left, which is 6.  7 is fine with respect to 6 already, so we're done.  7 is now part of the sorted section.</p>

<table class="normal">
  <tr>
    <td>3</td>
    <td>6</td>
    <td>7</td>
    <td>1</td>
    <td>2</td>
    <td>8</td>
    <td>5</td>
    <td>4</td>
  </tr>
  <tr class="divider">
    <td colspan="3">s</td>
    <td colspan="5">u</td>
  </tr>
</table>

<p>In the next step, we need to insert 1 into the appropriate position in the sorted sequence.  It's smaller than all the other elements in the sorted sequence, so we'll swap 1 with 7, then swap 1 with 6, then swap 1 with 3.  1 is now in the appropriate place in the sorted section.</p>

<table class="normal">
  <tr>
    <td>1</td>
    <td>3</td>
    <td>6</td>
    <td>7</td>
    <td>2</td>
    <td>8</td>
    <td>5</td>
    <td>4</td>
  </tr>
  <tr class="divider">
    <td colspan="4">s</td>
    <td colspan="4">u</td>
  </tr>
</table>

<p>The algorithm proceeds this way until the unsorted section is empty, which leads to four more steps:</p>

<table class="normal">
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
    <td>5</td>
    <td>4</td>
  </tr>
  <tr class="divider">
    <td colspan="5">s</td>
    <td colspan="3">u</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
    <td>5</td>
    <td>4</td>
  </tr>
  <tr class="divider">
    <td colspan="6">s</td>
    <td colspan="2">u</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
    <td>4</td>
  </tr>
  <tr class="divider">
    <td colspan="7">s</td>
    <td colspan="1">u</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="8">s</td>
  </tr>
</table>

<p>At this point, our entire array is sorted; our insertion sort is complete.</p>

<p class="subtitle">Analysis</p>

<p>One nice thing about insertion sort is that it's dead simple to implement.  All things being equal, simple is better than complex.  A basic insertion sort algorithm that sorts a vector of integers in C++ might look something like this.  (It wouldn't be a stretch to turn this into a function template capable of sorting an arbitrary collection of arbitrary things using an arbitrary comparison function, but I'll stick with this version to keep it simple.)</p>

<blockquote><pre>
void insertionSort(std::vector&lt;int&gt;&amp; v)
{
    for (int i = 1; i &lt; v.size(); ++i)
        for (int j = i; j &gt; 0 &amp;&amp; v[j] &lt; v[j - 1]; --j)
            std::swap(v[j], v[j - 1]);
}
</pre></blockquote>

<p>Still, simple isn't good enough if we have performance requirements that aren't being met, so we'll need to understand how well this algorithm performs.  And, as with many algorithms, the answer is "it depends".</p>

<p><i>Best case.</i>  At each step, the best outcome is that the element is already in the right place, in which case we compare it to the element to its left, determine that there's nothing more to do, and move on.  If the array is already sorted, this will happen at every step, so that's the best possible situation we can be in.  In that case, we'll run <i>n</i> &minus; 1 steps, and each one will require &Theta;(1) time (to do a single comparison and no swaps), for a total of &Theta;(<i>n</i>) time.  This is a very nice outcome indeed!</p>

<p><i>Worst case.</i>  At each step, the worst outcome is that the element has to be inserted at the beginning of the sorted sequence, which means it needs to be swapped all the way through the sorted sequence.  If the array is reverse-sorted to begin with, this will happen at every step, so that's the worst possible situation we can be in.  In that case, the first step will do <i>n</i> &minus; 1 comparisons and swaps; the second swap will do <i>n</i> &minus; 2; and so on.  This leads us back to some math we've seen before:</p>

<blockquote><pre>
   (n - 1) + (n - 2) + ... + 1
=  (n- 1)n / 2
</pre></blockquote>

<p>Each comparison and swap takes &Theta;(1) time and we'd need to do (n - 1)n / 2 of them, for a total of &Theta;(<i>n</i><sup><small>2</small></sup>) time, which is a whole lot worse than the best case.  What would the average be?</p>

<p><i>Average case.</i>  The average case would see us insert the elements, on average, at the middle of the sorted sequence.  While it's difficult to describe an array that would lead to this, that would be the overall average.  In that case, we would do this many comparisons and swaps:</p>

<blockquote><pre>
   (n - 1) / 2 + (n - 2) / 2 + ... + 1 / 2
=  ((n - 1) + (n - 2) + ... + 1) / 2
=  ((n - 1)n / 2) / 2
=  (n - 1)n / 4
</pre></blockquote>

<p>Sadly, the average case is still &Theta;(<i>n</i><sup><small>2</small></sup>).</p>

<p class="subtitle">The reality of the situation</p>

<p>What can we conclude from our analysis?  There are two circumstances where insertion sort excels:</p>

<ul>
  <li>The elements are already sorted or nearly sorted.  This isn't as rare of a case as you might think.  For example, suppose you were implementing a user interface for displaying a user's emails, and that the user had already sorted the emails (by clicking a column in a grid where they were displayed).  Let's say the user had 3,000 emails already.  Now they download new emails, with five new messages being added to the collection.  These would need to be sorted into the existing collection.  Insertion sort would do this job quite well, since there are essentially 3,000 sorted elements with five unsorted ones on the end.  (We could even skip the 3,000 steps for the existing ones, since we know already that they're sorted.)</li>
  <li>The number of elements is fairly small to big with.  It's certainly true that insertion sort can take &Theta;(<i>n</i><sup><small>2</small></sup>) time to run, though because the implementation is short and simple, it's <i>n</i><sup><small>2</small></sup> with a small constant and low overhead.  Many fancier sorting algorithms that have better worst-case performance will actually run slower until there are thousands or even tens of thousands of elements to sort, since they have a higher overhead associated with them.  (Remember that asymptotic analysis isn't the end of the conversation.  Just because one algorithm runs in &Theta;(<i>n</i><sup><small>2</small></sup>) time and another runs in &Theta;(<i>n</i>) time, that doesn't mean the former will be slower than the latter in every case; it just means as <i>n</i> grows that there's a point at which the latter algorithm will start winning and never stop.)</li>
</ul>

<p>Outside of those scenarios, insertion sort is not a great choice.  <i>O</i>(<i>n</i><sup><small>2</small></sup>) overall is a disappointing result, and we should want to do better if we can.  Where insertion sort spends its time is in the insertion.  What if we could avoid some of that work by being smarter about how we do the insertions?</p>

</div>

<div class="section">

<hr />

<p class="title">Binary insertion sort</p>

<p>One way to improve insertion sort would be to make the observation that the insertion step isn't taking advantage of the fact that the sorted sequence is, in fact, sorted.  At each step, we're essentially doing a linear search to find an insertion point, walking backward one element at a time until we find it.  What if we did a binary search at each step instead?  That's what an algorithm called <i>binary insertion sort</i> does.  It's otherwise identical to insertion sort.  The question is how much of an improvement this really is.</p>

<p class="subtitle">Analysis</p>

<p>The first thing to realize is that the movements of the elements are still going to have to happen the same way they did in insertion sort.  Suppose we're at this point in a binary insertion sort:</p>

<table class="normal">
  <tr>
    <td>2</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
    <td>1</td>
  </tr>
  <tr class="divider">
    <td colspan="7">s</td>
    <td colspan="1">u</td>
  </tr>
</table>

<p>Even if binary searching for an insertion point will reduce the number of comparisons it takes to discover that 1 should be inserted before all the others, we'll still have to do all the same movements we did before; if this is an array, we still have to slide elements out of the way to make room for 1.  (And if we're sorting a linked list, we can't do the binary search in the first place, rendering this whole algorithm moot!)</p>

<p>This tells us that the worst case hasn't changed; part of what it made it take &Theta;(<i>n</i><sup><small>2</small></sup>) time is the need to do &Theta;(<i>n</i><sup><small>2</small></sup>) movements of elements.  That hasn't gone away, so the worst case here will still be &Theta;(<i>n</i><sup><small>2</small></sup>).</p>

<p>What's worse is that we've actually hurt our best-case performance.  Suppose we're in this situation:</p>

<table class="normal">
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="7">s</td>
    <td colspan="1">u</td>
  </tr>
</table>

<p>Insertion sort would quickly determine that 8 is in the right place relative to 7 and be done.  Binary insertion sort, on the other hand, will binary search for an insertion point before coming to the same conclusion.  When there are <i>i</i> elements in the sorted section, this will take &Theta;(log <i>i</i>) time.  In total, how long would be spent on the binary searches?  A little math gives us our answer.</p>

<blockquote><pre>
   log<sub><small>2</small></sub>1 + log<sub><small>2</small></sub>2 + log<sub><small>2</small></sub>3 + ... + log<sub><small>2</small></sub>n
=  log<sub><small>2</small></sub>(1 * 2 * 3 * ... * n)
=  log<sub><small>2</small></sub>(n!)
=  &Theta;(n log n)        <i>This last step is thanks to something called Stirling's approximation</i>
</pre></blockquote>

<p>So, even if the array is already sorted, we'll spend a total of &Theta;(<i>n</i> log <i>n</i>) doing comparisons and deciding where to insert the elements.  Reviewing the two scenarios where insertion sort is a good choice, we find that binary insertion sort is worse in both of them:</p>

<ul>
  <li>When the array is nearly sorted, we'll spend &Theta;(<i>n</i> log <i>n</i>) time instead of something much closer to &Theta;(<i>n</i>).</li>
  <li>For a relatively small number of elements, the overhead associated with the binary search will likely dwarf whatever gains we're making by skipping some of the comparisons.</li>
</ul>

<p>The moral of the story, in other words, is that a "smart" optimization isn't always all that smart; it takes some analysis to decide whether our ideas are actually any good.</p>

</div>

<div class="section">

<hr />

<p class="title">Selection sort</p>

<p>Where insertion spends a lot of its time, ultimately, is in the actual inserting of elements into the sorted section.  Whether we do a linear search or a binary search to decide where to insert them, the reality is that we still have to move elements around to make space for the inserted element, which is where a lot of the cost is in an insertion sort.  But what if we just made better choices about which elements to insert?  Couldn't we lessen the cost of doing the insertions if we inserted the "right" elements into the sorted section at each step?  That's the idea behind an algorithm called <i>selection sort</i>.</p>

<p>Like insertion sort, selection sort begins by dividing the elements into two sections: a sorted section and an unsorted section.  Unlike insertion sort, the sorted section starts out empty, and all of the elements are considered unsorted.  For example, we might start out this way:</p>

<table class="normal">
  <tr>
    <td>6</td>
    <td>3</td>
    <td>7</td>
    <td>1</td>
    <td>2</td>
    <td>8</td>
    <td>5</td>
    <td>4</td>
  </tr>
  <tr class="divider">
    <td colspan="8">u</td>
  </tr>
</table>

<p>At each step, selection sort involves finding the largest element in the unsorted section.  That element is then swapped to the end of the unsorted section and becomes part of the sorted section instead.  In the example above, we'd start by determining that 8 is the largest element, then swap it to the end of the array.</p>

<table class="normal">
  <tr>
    <td>6</td>
    <td>3</td>
    <td>7</td>
    <td>1</td>
    <td>2</td>
    <td>4</td>
    <td>5</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="7">u</td>
    <td colspan="1">s</td>
  </tr>
</table>

<p>Note that 8 is where it ultimately belongs; it'll never need to move again.</p>

<p>Next, we'd select the largest remaining element, which is 7, then swap it to the end of the unsorted section (i.e., swapping it with 5).  The sorted section, again, grows by one element.</p>

<table class="normal">
  <tr>
    <td>6</td>
    <td>3</td>
    <td>5</td>
    <td>1</td>
    <td>2</td>
    <td>4</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="6">u</td>
    <td colspan="2">s</td>
  </tr>
</table>

<p>The algorithm proceeds in this way; each step causes the sorted section to grow by one element.</p>

<table class="normal">
  <tr>
    <td>4</td>
    <td>3</td>
    <td>5</td>
    <td>1</td>
    <td>2</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="5">u</td>
    <td colspan="3">s</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>4</td>
    <td>3</td>
    <td>2</td>
    <td>1</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="4">u</td>
    <td colspan="4">s</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>1</td>
    <td>3</td>
    <td>2</td>
    <td>4</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="3">u</td>
    <td colspan="5">s</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="2">u</td>
    <td colspan="6">s</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="1">u</td>
    <td colspan="7">s</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="8">s</td>
  </tr>
</table>

<p>When we've completed <i>n</i> steps &mdash; one for each element we're sorting &mdash; the entire array is sorted.</p>

<p class="subtitle">Analysis</p>

<p>The most important part of this algorithm is finding the largest element in the unsorted section.  This requires us to look through the entire unsorted section; only then can we be sure we have the largest one.  (There is one narrow circumstance where this isn't true, which is when we find an element equal to the last element we swapped into the sorted section, but this is unlikely in most cases, so we'll ignore that detail going forward.)</p>

<p>So how many elements do we end up looking at?  In the first step, we look at all <i>n</i> of them.  In the second step, one of the elements is already in the correct position, but we'll have to look at the remaining <i>n</i> &minus; 1.  So, in total, we'll look at this many elements:</p>

<blockquote><pre>
   n + (n - 1) + (n - 2) + ... + 1
=  n(n + 1) / 2
</pre></blockquote>

<p>Generally, then, we'll be doing a total of &Theta;(<i>n</i><sup><small>2</small></sup>) comparisons.  We'll only do <i>n</i> swaps, but the total time we'll spend will still be &Theta;(<i>n</i><sup><small>2</small></sup>).  And note that this is always how long it'll take; even if the array is sorted already, we'll be finding maximums and swapping them into place at each step.</p>

<p>Again, we've attempted to be clever, but ended up making things worse; insertion sort still wins.  Is insertion sort as good as it gets?  Absolutely not, but we'll need to consider other approaches.</p>

</div>

<div class="section">

<hr />

<p class="title">Properties of sorting algorithms</p>

<p>Thus far, we've seen three sorting algorithms: insertion sort, binary insertion sort, and selection sort.  While they each do their job somewhat differently, they share some similar characteristics.  When comparing sorting algorithms, it's a good idea to stop and observe the things that make them similar and the things that make them different.</p>

<p class="subtitle">In-place algorithms</p>

<p>We say that an <i>in-place algorithm</i> is one that is able to do its work using &Theta;(1) additional memory &mdash; above and beyond the memory used for its initial parameters.  So, for example, a sorting algorithm would be in-place if it could be done using &Theta;(1) memory, not counting the elements that we're sorting.  So, which of these algorithms we've seen so far are in-place?</p>

<ul>
  <li>Insertion sort is in-place, because it only needs a couple of loop control variables; the only other memory you need is the collection you're sorting.</li>
  <li>Binary insertion sort is in-place, because it similarly needs only a handful of variables &mdash; to track how many elements are in the sorted section, as well as the "low" and "high" values used during the binary search.</li>
  <li>Selection sort is in-place, as well, for similar reasons.  You'd need a couple of loop control variables, along with one to keep track of the maximum at each step.</li>
</ul>

<p>As we'll see, some sorting algorithms do their work using ancillary data structures, and that offers us one way to potentially improve on the algorithms we've seen.</p>

<p class="subtitle">Stable sorting algorithms</p>

<p>A sorting algorithm is <i>stable</i> if it maintains the relative ordering of elements that are considered equivalent.  If you were sorting strings by their length, for example, any two strings with the same length would be considered equivalent.  Suppose we're sorting these strings:</p>

<table class="normal">
  <tr>
    <td>Boo</td>
    <td>is</td>
    <td>happy</td>
    <td>to</td>
    <td>see</td>
    <td>me</td>
  </tr>
</table>

<p>The strings <b>is</b>, <b>to</b>, and <b>me</b> are the same length; the strings <b>Boo</b> and <b>see</b> are also the same length.  A stable sorting algorithm is one that would give this result:</p>

<table class="normal">
  <tr>
    <td>is</td>
    <td>to</td>
    <td>me</td>
    <td>Boo</td>
    <td>see</td>
    <td>happy</td>
  </tr>
</table>

<p>Since <b>is</b> was listed before <b>to</b> and <b>to</b> before <b>me</b> originally, they remain in that same relative order when we're finished.  Similarly, <b>Boo</b> and <b>see</b> remain in the same relative order.</p.

<p>As we'll see, stability can be a useful property for a sorting algorithm to have, though not all sorting algorithms have it.  Of the algorithms we've seen so far, which ones are stable?</p>

<ul>
  <li>Insertion sort is stable, for two reasons:
    <ol>
      <li>We don't swap elements if they're equal, so they'll remain in the same position relative to each other.</li>
      <li>The elements are considered in the order they were originally listed.</li>
     </ol>
  </li>
  <li>Binary insertion sort is stable for the same reasons as insertion sort; it does all the same movements that insertion sort does, and the only thing that affects the stability of a sorting algorithm is the way elements are moved.</li>
  <li>Selection sort, on the other hand, is not stable, because the way we swap elements with other far-away elements can rearrange equivalent elements relative to each other.</li>
</ul>

<p>Sorting algorithms don't have to be stable to be useful, but stable sorting algorithms can be used in ways that non-stable ones can't.  In particular, you can run stable sorting algorithms more than once using different comparison functions and get a sensible result.  For example, if you sorted people by first name using a stable sorting algorithm, then sorted them again by last name using a stable sorting algorithm, the people would now be sorted primarily by last name with first name breaking any ties.  With a non-stable sorting algorithm, the result might not be this way; once you sorted by last name, the relative order of the people by first name might be changed.</p>

</div>

<div class="section">

<hr />

<p class="title">Treesort</p>

<p>If we give up on the idea that a sorting algorithm needs to be in-place (i.e., if we allow ourselves to use an ancillary data structure whose size varies with the number of elements we're sorting), we might be able to achieve things we couldn't acheive otherwise.</p>

<p>Recall that binary search trees have one property that turns out to be interesting if your goal is to sort some elements: If you have a binary search tree containing a set of keys, it's possible to iterate through those keys in ascending order in &Theta;(<i>n</i>) time, by doing something called an <i>inorder traversal</i>.  That leads to a potentially good idea for a sorting algorithm:</p>

<blockquote><pre>
Treesort(items):
    let t be an empty binary search tree

    for each item in items:
        insert into into t

    perform an inorder traversal of t
</pre></blockquote>

<p>The order in which the items are traversed will be ascending order; if we use the same &le; relation to organize the items in the binary search tree as the one we want to sort by, this will certainly sort the elements.  (There is one wrinkle here, which is that binary search trees are generally required to have unique keys; there are a couple of ways we could work around that, such as storing multiple items in the same node if they're considered equivalent.)</p>

<p class="subtitle">Analysis</p>

<p><i>Worst case.</i>  We saw previously that a binary search tree is susceptible to performance problems in the cases that they can become degenerate.  If the elements were already sorted or were already reverse-sorted, for example, we'd end up with a binary search tree that's degenerate, and we'd end up spending &Theta;(<i>n</i><sup><small>2</small></sup>) time building it.  Note, though, that we can mitigate this problem by using a balancing technique such as AVL.</p>

<p><i>Best-case.</i>  Binary search trees behave very well when their height remains logarithmic &mdash; and their balanced brethren, like AVL trees, guarantee this.  How long does it take to build a balanced binary search tree?  At each step, we have <i>i</i> keys in the tree already and its height is &Theta;(log <i>i</i>).  Adding that up for <i>n</i> steps is quite similar to some math we saw earlier:</p>

<blockquote><pre>
   log<sub><small>2</small></sub>1 + log<sub><small>2</small></sub>2 + log<sub><small>2</small></sub>3 + ... + log<sub><small>2</small></sub>n
=  &Theta;(n log n)
</pre></blockquote>

<p><i>Conclusion.</i>  As long as the height of the tree remains logarithmic at each step, the algorithm will run in &Theta;(<i>n</i> log <i>n</i>).  If we keep three balanced, using a technique like AVL, this will be true even in the worst case.</p>

<p>However, the algorithm is not in-place &mdash; it requires a separate data structure &mdash; and it may or may not be stable, depending on how we handle multiple equivalent keys.</p>

</div>

<div class="section">

<hr />

<p class="title">Heapsort</p>

<p>Let's consider again the selection sort algorithm we saw earlier, which boils down to this:</p>

<ul>
  <li>Find the largest key and swap it into the last position in the array</li>
  <li>Find the second-largest key and swap it into the second-to-last position in the array</li>
  <li>Continue until all elements have been swapped into place</li>
</ul>

<p>The problem with this algorithm is that it needs to spend a linear amount of time choosing the largest key at each step.  If we could avoid that somehow, we might have a much better algorithm.</p>

<p>Previously, we learned about <a href="../PriorityQueues">priority queues</a> and how to implement them efficiently using a data structure called a binary heap.  Binary heaps have two properties that can really help us here.</p>

<ul>
  <li>Their job is to efficiently arrange elements to make the smallest/largest one easy to find, and to make it efficient to remove the smallest/largest one while still preserving its basic ordering.</li>
  <li>Their implementation is array-based, i.e., any array can be made into a binary heap by simply rearranging its elements.</li>
</ul>

<p>There's one change we could make to selection sort that might have a positive effect on its performance.  What if we organized the unsorted section as a binary max heap &mdash; one whose largest element is at the root &mdash; instead?  We could then remove the largest element using the algorithm we already know, then move it to the end of the unsorted section.  The unsorted section would then be one element smaller (i.e., one fewer element would now be part of the binary max heap).  If we did this at every step, eventually the unsorted section would be empty, but the sorted section would be a sorted version of the elements we started with.</p>

<p>This algorithm has a name: It's called <i>heapsort</i>.  Suppose we wanted to sort these elements:</p>

<table class="normal">
  <tr>
    <td>6</td>
    <td>3</td>
    <td>7</td>
    <td>1</td>
    <td>2</td>
    <td>8</td>
    <td>5</td>
    <td>4</td>
  </tr>
</table>

<p>The algorithm begins by rearranging the elements so they form a binary max heap, a step that is sometimes called <i>heapifying</i>.  That can be done using the following algorithm, which I'm describing conceptually, based around the idea that the elements of the array form a complete binary tree.  (See the <a href="../PriorityQueues">Priority Queues</a> notes for a refresher on how that works.)</p>

<blockquote><pre>
Heapify(Array a):
    for each element with at least one child, in reverse level-order:
        swap that element with the larger of its two children until it is larger than both its children
</pre></blockquote>

<p>We'd start at the element 1, because it's the last one that has children (a left child, whose value is 4, and no right child).  Since its left child is larger than it is, we swap them.</p>

<table class="normal">
  <tr>
    <td>6</td>
    <td>3</td>
    <td>7</td>
    <td>4</td>
    <td>2</td>
    <td>8</td>
    <td>5</td>
    <td>1</td>
  </tr>
</table>

<p>Moving backward in level order, we now want to swap 7 into place.  Its two children are 8 and 5.  8 is the larger child and is larger than 7, so we swap 7 with 8.</p>

<table class="normal">
  <tr>
    <td>6</td>
    <td>3</td>
    <td>8</td>
    <td>4</td>
    <td>2</td>
    <td>7</td>
    <td>5</td>
    <td>1</td>
  </tr>
</table>

<p>Next, we want to swap 3 into place.  Its two children are 4 and 2.  4 is the larger child and is larger than 3, so we swap 3 and 4.</p>

<table class="normal">
  <tr>
    <td>6</td>
    <td>4</td>
    <td>8</td>
    <td>3</td>
    <td>2</td>
    <td>7</td>
    <td>5</td>
    <td>1</td>
  </tr>
</table>

<p>3 now has one child, the element 1.  1 is smaller than 3, so 3 is fine where it is.  Continuing, we now want to swap 6 into place.  Its two children are 4 and 8.  8 is the larger child and is larger than 6, so swap 6 and 8.</p>

<table class="normal">
  <tr>
    <td>8</td>
    <td>4</td>
    <td>6</td>
    <td>3</td>
    <td>2</td>
    <td>7</td>
    <td>5</td>
    <td>1</td>
  </tr>
</table>

<p>6's two children are now 7 and 5.  7 is the larger child and is larger than 6, so swap 6 and 7.</p>

<table class="normal">
  <tr>
    <td>8</td>
    <td>4</td>
    <td>7</td>
    <td>3</td>
    <td>2</td>
    <td>6</td>
    <td>5</td>
    <td>1</td>
  </tr>
</table>

<p>And now 6 has no children, so it's fine where it is.  At this point, our array has been rearranged so that it's a binary max heap.  (Draw the complete binary tree if you want to verify this.)</p>

<p>Of course, the array isn't sorted yet, but we've now got a collection of unsorted elements that are a binary max heap.  We'll denote that as <b>h</b>.</p>

<table class="normal">
  <tr>
    <td>8</td>
    <td>4</td>
    <td>7</td>
    <td>3</td>
    <td>2</td>
    <td>6</td>
    <td>5</td>
    <td>1</td>
  </tr>
  <tr class="divider">
    <td colspan="8">h</td>
  </tr>
</table>

<p>From here, the algorithm proceeds similarly to selection sort, removing the maximum element from the heap and placing it at the end, the rearranging the remaining elements so they're again a heap; this is identical to dequeuing from a priority queue.</p>

<p>In our example, the first step would be to relocate 8 to the end of the heapby swapping it with 1, then restructure the remaining elements by moving 1 down until the remaining cells are a binary max heap.</p>

<table class="normal">
  <tr>
    <td>7</td>
    <td>4</td>
    <td>6</td>
    <td>3</td>
    <td>2</td>
    <td>1</td>
    <td>5</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="7">h</td>
    <td colspan="1">s</td>
  </tr>
</table>

<p>Next, we do the same with 7.</p>

<table class="normal">
  <tr>
    <td>6</td>
    <td>4</td>
    <td>5</td>
    <td>3</td>
    <td>2</td>
    <td>1</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="6">h</td>
    <td colspan="2">s</td>
  </tr>
</table>

<p>Execution continues in this manner, with each step moving one element from the heap into the sorted section.</p>

<table class="normal">
  <tr>
    <td>5</td>
    <td>4</td>
    <td>1</td>
    <td>3</td>
    <td>2</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="5">h</td>
    <td colspan="3">s</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>4</td>
    <td>3</td>
    <td>1</td>
    <td>2</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="4">h</td>
    <td colspan="4">s</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>3</td>
    <td>2</td>
    <td>1</td>
    <td>4</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="3">h</td>
    <td colspan="5">s</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>2</td>
    <td>1</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="2">h</td>
    <td colspan="6">s</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="1">h</td>
    <td colspan="7">s</td>
  </tr>
</table>

<br />

<table class="normal">
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="8">s</td>
  </tr>
</table>

<p class="subtitle">Analysis</p>

<p>The algorithm is comprised of two parts, which we can analyze separately:</p>

<ul>
  <li>Heapify the array</li>
  <li>Remove each of the <i>n</i> elements from the heap and relocate into the sorted section</li>
</ul>

<p>Heapifying the array, surprisingly, can be done in &Theta;(<i>n</i>) time.  Even though elements sometimes have to move further down the heap than just one level, it turns out that the work we do early on makes some of the work we have to do later easier.  The proof of this is beyond the scope of our work here, but suffice it to say that this is a linear-time operation.</p>

<p>From there, we run one step for each of the <i>n</i> elements, which will involve removing one element from the heap and restructuring it.  As we saw in the <a href="../PriorityQueues">priority queue</a> implementation, removing from a heap-based priority queue with <i>i</i> elements takes &Theta;(log <i>i</i>) time.  We'll need to do this on a heap with <i>n</i> elements, then on one with <i>n</i> &minus; 1 elements, and so on, while leads us back to this sum again.</p>

<blockquote><pre>
   log<sub><small>2</small></sub>1 + log<sub><small>2</small></sub>2 + log<sub><small>2</small></sub>3 + ... + log<sub><small>2</small></sub>n
=  &Theta;(<i>n</i> log <i>n</i>)
</pre></blockquote>

<p>So, in total, heapsort spends &Theta;(<i>n</i>) time heapifying, then &Theta;(<i>n</i> log <i>n</i>) time removing the elements.  The total time is &Theta;(<i>n</i> log <i>n</i>).</p>

<p>Heapsort is an in-place sort.  What appears to be an ancillary data structure, the binary max heap, is actually stored within the array we're sorting.  Heapsort is not stable, though, because binary max heaps can move equivalent elements around in a way that may change their relative order.</p>

</div>

<div class="section">

<hr />

<p class="title">Divide and conquer algorithms</p>

<p>A <i>divide and conquer algorithm</i> is one that solves its problem, broadly, using the following technique:</p>

<ol>
  <li>Divide the problem into two or more smaller subproblems, each of which is a smaller instance of the same problem.</li>
  <li>Separately solve the subproblems recursively.</li>
  <li>Combine the solutions to the subproblems to yield an overall solution to the whole problem.</li>
</ol>

<p>In the case of a sorting algorithm, we divide the problem of sorting all of the elements into two or more subproblems, each of which has the goal of sorting a subset of them.  Combining the solutions involves taking the two or more sorted subsets of the elements and putting them together so that they comprise a sorted version of the entire set.</p>

<p>As we'll see, there is often a tradeoff between the time we spend dividing the problem and the time we spend combining the solutions to the subproblems.  In other words, if we're more careful about how we divide, combining becomes easier; if we're less careful about how we divide, combining involves more work.</p>

</div>

<div class="section">

<hr />

<p class="title">Quicksort</p>

<p>One divide-and-conquer approach to sorting is called <i>quicksort</i>.  Quicksort is based around the notion of <i>partitioning</i> the array, by choosing one of the elements as a <i>pivot</i>, then rearranging the elements so that any elements smaller than the pivot are moved to its left and others are moved to its right.  The two partitions are then quicksorted recursively.</p>

<p>The partitioning algorithm doesn't have the goal of sorting the elements; it just has the goal of ensuring that the pivot is placed between elements on its left that are smaller and elements on its right that aren't.  Here's one such algorithm:</p>

<blockquote><pre>
Partition(Array a):
    pivot = <i>choose the index of the pivot; see below</i>

    last = a.length - 1

    i = 0
    j = last

    swap(a[pivot], a[j])                       <i>swap the pivot to the end temporarily</i>

    loop:
        while i &le; last and a[i] &lt; a[last]:     <i>move i forward until it reaches an element &ge; the pivot</i>
            i++

        while j &ge; i and a[j] &ge; a[last]:        <i>move j forward until it reaches an element &lt; the pivot</i>
            j++

        if i &ge; j:                              <i>if i has reached j, we're done</i>
            break

        swap(a[i], a[j])                       <i>swap mismatched elements</i>
        i++
        j--

    swap(a[end], a[j])                         <i>put pivot in between the partitions</i>
</pre></blockquote>

<p>This algorithm moves two indexes/pointers toward each other, looking for pairs of elements that are mismatched (i.e., the one of the left is larger than the pivot and the one on the right is smaller).  Whenever it finds such a pair, it swaps them, then we continue looking for more pairs.  When the two indexes/pointers reach one another, we're done, so we can place the pivot at that position &mdash; everything to the left of that position will now be smaller, everything to the right will not.  One important thing to note at this point is that the pivot will be in its correct final position in the sorted order; even if we sort everything smaller than the pivot and everything larger, the pivot will be in the right place.</p>

<p>By way of example, let's suppose that we have the folowing sequence of elements that we're interested in partitioning.</p>

<table class="normal">
  <tr>
    <td>8</td>
    <td>6</td>
    <td>11</td>
    <td>5</td>
    <td>13</td>
    <td>7</td>
    <td>2</td>
    <td>10</td>
    <td>1</td>
    <td>9</td>
    <td>4</td>
    <td>12</td>
    <td>3</td>
  </tr>
</table>

<p>We'll talk later about how best to choose a pivot.  Let's say for the sake of this example that our pivot is 8.  The first thing the partitioning algorithm does is swap 8 to the far right, then set up our <i>i</i> and <i>j</i> counters, respectively.</p>

<table class="normal">
  <tr class="top">
    <td>i<br />&darr;</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td>j<br />&darr;</td>
    <td></td>
  </tr>
  <tr>
    <td>3</td>
    <td>6</td>
    <td>11</td>
    <td>5</td>
    <td>13</td>
    <td>7</td>
    <td>2</td>
    <td>10</td>
    <td>1</td>
    <td>9</td>
    <td>4</td>
    <td>12</td>
    <td>8</td>
  </tr>
</table>

<p>Now, we march <i>i</i> forward until it points to an element larger than the pivot, then march <i>j</i> backward until it points to an element smaller.</p>

<table class="normal">
  <tr class="top">
    <td></td>
    <td></td>
    <td>i<br />&darr;</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td>j<br />&darr;</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>3</td>
    <td>6</td>
    <td>11</td>
    <td>5</td>
    <td>13</td>
    <td>7</td>
    <td>2</td>
    <td>10</td>
    <td>1</td>
    <td>9</td>
    <td>4</td>
    <td>12</td>
    <td>8</td>
  </tr>
</table>

<p>These elements are mismatched &mdash; whether we put the pivot before, between, or after them, at least one will be in the wrong place with respect to the pivot &mdash; so we'll swap them and then inch <i>i</i> and <i>j</i> closer to each other.</p>

<table class="normal">
  <tr class="top">
    <td></td>
    <td></td>
    <td></td>
    <td>i<br />&darr;</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td>j<br />&darr;</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>3</td>
    <td>6</td>
    <td>4</td>
    <td>5</td>
    <td>13</td>
    <td>7</td>
    <td>2</td>
    <td>10</td>
    <td>1</td>
    <td>9</td>
    <td>11</td>
    <td>12</td>
    <td>8</td>
  </tr>
</table>

<p>Repeating this process, we find that 13 and 1 are mismatched:</p>

<table class="normal">
  <tr class="top">
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td>i<br />&darr;</td>
    <td></td>
    <td></td>
    <td></td>
    <td>j<br />&darr;</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>3</td>
    <td>6</td>
    <td>4</td>
    <td>5</td>
    <td>13</td>
    <td>7</td>
    <td>2</td>
    <td>10</td>
    <td>1</td>
    <td>9</td>
    <td>11</td>
    <td>12</td>
    <td>8</td>
  </tr>
</table>

<p>So we swap them and move <i>i</i> and <i>j</i> yet closer together.</p>

<table class="normal">
  <tr class="top">
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td>i<br />&darr;</td>
    <td></td>
    <td>j<br />&darr;</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>3</td>
    <td>6</td>
    <td>4</td>
    <td>5</td>
    <td>1</td>
    <td>7</td>
    <td>2</td>
    <td>10</td>
    <td>13</td>
    <td>9</td>
    <td>11</td>
    <td>12</td>
    <td>8</td>
  </tr>
</table>

<p>Finally, we move <i>i</i> forward, looking for an element larger than the pivot.  By the time we find one, <i>i</i> and <i>j</i> are equal.</p>

<table class="normal">
  <tr class="top">
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td>i j<br />&darr;&darr;</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>3</td>
    <td>6</td>
    <td>4</td>
    <td>5</td>
    <td>1</td>
    <td>7</td>
    <td>2</td>
    <td>10</td>
    <td>13</td>
    <td>9</td>
    <td>11</td>
    <td>12</td>
    <td>8</td>
  </tr>
</table>

<p>At this point, all that's left is to swap the pivot into the position where <i>i</i> and <i>j</i> met.</p>

<table class="normal">
  <tr>
    <td>3</td>
    <td>6</td>
    <td>4</td>
    <td>5</td>
    <td>1</td>
    <td>7</td>
    <td>2</td>
    <td><b><u>8</u></b></td>
    <td>13</td>
    <td>9</td>
    <td>11</td>
    <td>12</td>
    <td>10</td>
  </tr>
  <tr class="divider">
    <td colspan="7">left</td>
    <td>&nbsp;</td>
    <td colspan="5">right</td>
  </tr>
</table>

<p>Notice that all of the elements to the left of the pivot are smaller and all of the elements to the right are larger; we got the outcome we were looking for.  And remember the important outcome: 8 is where it belongs in the final sorted order.</p>

<p>From there, we simply quicksort the two partitions recursively, leading to this overall algorithm.</p>

<blockquote><pre>
Quicksort(Array a):
    Partition a into a left and right partition
    Quicksort the left partition
    Quicksort the right partition
</pre></blockquote>

<p class="subtitle">Analysis</p>

<p>Most of the work in a quicksort is done by the partitioning algorithm, so the first question is how long it takes to partition an array of <i>n</i> elements.  Note that <i>i</i> and <i>j</i> begin <i>n</i> &minus; 1 steps away from each other.  We then compare the <i>i</i><sup><small>th</small></sup></i> or <i>j</i><sup><small>th</small></sup></i> element to the pivot, each time moving either <i>i</i> or <i>j</i> one step closer to each other.  So, in total, partitioning takes &Theta;(<i>n</i>) time by the time <i>i</i> and <i>j</i> have reached each other and the algorithm is finished.</p>

<p>The remaining question is the effect that the recursion has.  As it turns out, it matters very much where the pivot ends up.</p>

<p><i>Worst case.</i>  Suppose each time we selected a pivot, we selected the largest or smallest element in the partition.  In that case, we'd be left with an empty partition on one side of the pivot and a partition containing <i>n</i> &minus; 1 elements on the other side.  We'd then recursively sort one of the partitions, and could skip the other.  How long would this take?  The following recurrence captures the notion pretty well.</p>

<blockquote>
T(1) = 0<br />
T(<i>n</i>) = <i>n</i> + T(<i>n</i> - 1)
</blockquote>

<p>We can use the repeated substitution technique to solve this recurrence:</p>

<blockquote><pre>
T(n) = n + T(n - 1)
     = n + (n + T(n - 2))
     = 2n + T(n - 2)
     = 2n + (n + T(n - 3))
     = 3n + T(n - 3)
     ...
     = jn + T(n - j)

  let j = n - 1

     = n(n - 1) + T(1)
     = n<sup><small>2</small></sup> - n + T(1)
     = n<sup><small>2</small></sup> - n
</pre></blockquote>

<p>And we see that, in this case, the running time of quicksort would be &Theta;(<i>n</i><sup><small>2</small></sup>), a disappointing result.</p>

<p><i>Best case.</i>  Suppose instead that each time we selected a pivot, it was the exact middle of the partition, so that an equal number of elements would be in the left and right partitions.  We'd then have to recursively quicksort the two partitions.  How would this change the outcome?  Here's a recurrence that describes this scenario.</p>

<blockquote>
T(1) = 0<br />
T(n) = n + 2T(n / 2)
</blockquote>

<p>Once again, repeated substitution gives us a better idea of how long this will actually take.</p>

<blockquote><pre>
T(n) = n + 2T(n / 2)
     = n + 2((n / 2) + 2T(n / 4))
     = 2n + 4T(n / 4)
     = 2n + 4((n / 4) + 2T(n / 8))
     = 3n + 8T(n / 8)
     ...
     = jn + 2<sup><small>j</small></sup>T(n / 2<sup><small>j</small></sup>)

  let j = log<sub><small>2</small></sub>n

     = n log<sub><small>2</small></sub>n + nT(n / n)
     = n log<sub><small>2</small></sub>n + nT(1)
     = n log<sub><small>2</small></sub>n + n
</pre></blockquote>

<p>This is a much better outcome.  If we choose our pivots well, quicksort will run in &Theta;(<i>n</i> log <i>n</i>) time.</p>

<p>There are a couple of other things worth noting.  Quicksort is an in-place algorithm, because the partitioning can be done within the array itself, and the recursive calls can be done by passing pointers or indices into the existing array.  On the other hand, quicksort is not stable, because the partitioning algorithm will have a tendency to reverse the relative order of equivalent elements during partitioning if they get swapped across the array.</p>

<p class="subtitle">Choosing pivots carefully</p>

<p>The remaining question is how we choose the pivot each time.  As we've seen, quicksort is susceptible to poor worst-case performance if we repeatedly choose the largest or smallest element in a partition as the pivot.  So how should we choose the pivot to avoid that scenario?</p>

<p>The simplest mechanism for choosing a pivot is to choose the first or last element of the partition as the pivot.  The problem is that this is susceptible to worst-case behavior when the array is already sorted or is already reverse-sorted.  That's not such a rare scenario, so best not to choose the pivot this way.</p>

<p>There are a couple of options that work pretty well:</p>

<ul>
  <li><i>Choose the pivot randomly.</i>  Assuming you have a reasonably good random number generator, choosing the pivot at random makes the worst-case performance exceptionally unlikely &mdash; and much less likely the larger your array is.</li>
  <li><i>The "median of three" approach.</i>  This approach looks at the first, last, and middle element of the partition, and selects the median of these three &mdash; whichever fits in between the others &mdash; as the pivot.  This cheaply and simply avoids the worst-case behavior in the case when the array is already sorted.</li>
</ul>

</div>

<div class="section">

<hr />

<p class="title">Mergesort</p>

<p>Quicksort is a divide and conquer algorithm that spends most of its time doing the dividing &mdash; by partitioning the elements around a pivot &mdash; so that it can do essentially no work in combining the solutions to the subproblems.  Once the elements are partitioned, the pivot is in the right place; once we've sorted the two partitions, the entire array will be sorted.</p>

<p>Another algorithm, called <i>mergesort</i>, makes the opposite choice, spending little or no time dividing the problem, but having to spend more time combining the solutions to the subproblems instead.  The mergesort algorithm, simply stated, is as follows.</p>

<blockquote><pre>
Mergesort(Array a):
    divide a in half (i.e., calculate the index of the middle)
    Mergesort(left half of a)
    Mergesort(right half of a)
    merge the sorted halves of a together so they're one sorted array
</pre></blockquote>

<p>Suppose that you wanted to mergesort the following array:</p>

<table class="normal">
  <tr>
    <td>6</td>
    <td>3</td>
    <td>7</td>
    <td>1</td>
    <td>2</td>
    <td>8</td>
    <td>5</td>
    <td>4</td>
  </tr>
</table>

<p>We would begin by dividing the array in half, with the first four elements being in the left half and the last four elements being in the right half.</p>

<table class="normal">
  <tr>
    <td>6</td>
    <td>3</td>
    <td>7</td>
    <td>1</td>
    <td>2</td>
    <td>8</td>
    <td>5</td>
    <td>4</td>
  </tr>
  <tr class="divider">
    <td colspan="4">left</td>
    <td colspan="4">right</td>
  </tr>
</table>

<p>We would then recursively mergesort the two halves.  Let's fast-forward to the point where that's done.  Here's what we would have at that point:</p>

<table class="normal">
  <tr>
    <td>1</td>
    <td>3</td>
    <td>6</td>
    <td>7</td>
    <td>2</td>
    <td>4</td>
    <td>5</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="4">left</td>
    <td colspan="4">right</td>
  </tr>
</table>

<p>Just as the partitioning algorithm was the most important part of quicksort, the merging algorithm is the most important part of mergesort; the merging is where the work is actually done.  So how do we merge these two halves into a sorted whole?  The answer is to use two counters, one pointing to an element in the left half, and another pointing to an element in the right.</p>

<table class="normal">
  <tr class="top">
    <td>i<br />&darr;</td>
    <td></td>
    <td></td>
    <td></td>
    <td>j<br />&darr;</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>1</td>
    <td>3</td>
    <td>6</td>
    <td>7</td>
    <td>2</td>
    <td>4</td>
    <td>5</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="4">left</td>
    <td colspan="4">right</td>
  </tr>
</table>

<p>At each step, we'll want to decide which element is smaller, the <i>i</i><sup><small>th</small></sup> or the <i>j</i><sup><small>th</small></sup>.  That will be the next element in our final sorted order.  The problem is that we're going to need an extra array to move the answers into.</p>

<p>Initially, <i>i</i> points to the element 1 and <i>j</i> points to the element 2.  1 is smaller, so we'll move 1 into our merged array and then move <i>i</i> forward.</p>

<table class="normal">
  <tr class="top">
    <td></td>
    <td>i<br />&darr;</td>
    <td></td>
    <td></td>
    <td>j<br />&darr;</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>3</td>
    <td>6</td>
    <td>7</td>
    <td>2</td>
    <td>4</td>
    <td>5</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="4">left</td>
    <td colspan="4">right</td>
  </tr>
  <tr>
    <td>1</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</table>

<p>Next, we'll do the same with 2.</p>

<table class="normal">
  <tr class="top">
    <td></td>
    <td>i<br />&darr;</td>
    <td></td>
    <td></td>
    <td></td>
    <td>j<br />&darr;</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>3</td>
    <td>6</td>
    <td>7</td>
    <td>&nbsp;</td>
    <td>4</td>
    <td>5</td>
    <td>8</td>
  </tr>
  <tr class="divider">
    <td colspan="4">left</td>
    <td colspan="4">right</td>
  </tr>
  <tr>
    <td>1</td>
    <td>2</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</table>

<p>And the merging operation continues in this fashion until all of the elements have been moved into the merged array.  At this point, they can be moved back &mdash; or there are clever implementations that swap back and forth between arrays to avoid some of this overhead.</p>

<p class="subtitle">Analysis</p>

<p>One thing to realize right away about mergesort is that there is no best or worst case.  This algorithm does the same amount of work regardless; whether the array is sorted already, reverse-sorted already, or a random mish-mash of elements, the dividing and merging processes are always the same.</p>

<p>Merging <i>n</i> elements &mdash; two sorted halves of size <i>n</i> / 2 &mdash; together takes &Theta;(<i>n</i>) time.  At each step, we choose an element from one half or the other, which can be done in &Theta;(1) time; there are a total of <i>n</i> steps required.</p>

<p>But, of course, we have to do more than one merge.  So how much time do we spend?  A recurrence can be used to capture the idea:</p>

<blockquote>
T(1) = 0<br />
T(n) = n + 2T(n / 2)
</blockquote>

<p>Note that this is the same as the best-case time required to perform a quicksort.  The total time required would be &Theta;(<i>n</i> log <i>n</i>).</p>

<p>Because of the need for the extra array used in merging, mergesort is not an in-place algorithm.  However, it is a stable algorithm, as long as we always prefer an element in the left partition over an element in the right partition when we're merging and the two elements we're looking at are equivalent.</p>

<p>One way that mergesort excels is in situations where accessing elements sequentially is beneficial.  Mergesort, for example, can be used quite nicely to sort very large collections of information stored on disk for this reason, because disks tend to perform much better when you access their data in sequence.</p>

</div>

</body>
</html>
