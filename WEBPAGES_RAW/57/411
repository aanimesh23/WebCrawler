<HTML>
<!-- $Id: redesigning_abstract.html,v 1.1 1995/04/11 23:38:11 kari Exp $ -->
<HEAD>
<TITLE>Arcadia Collected Papers: ABSTRACT</TITLE>
<META http-equiv="Owner" content="Arcadia">
<META http-equiv="Reply-To" content="arcadia-www@ics.uci.edu">
<LINK rev="made" href="mailto:arcadia-www@ics.uci.edu">
</HEAD><BODY>
<H1><img align=middle src="http://www.ics.uci.edu/~arcadia/Icons/arcadia-logo.gif">
Arcadia Papers: ABSTRACT</H1>
<HR>

<A HREF="http://www.cs.purdue.edu/homes/young/papers/redesign.ps">
"<b>Re-designing Tasking Structures of Ada Programs for Analysis:
A Case Study</b>"</A>, by Wei Jen Yeh and Michal Young in
Technical Report TR-148-P, Software Engineering Research Center,
1398 Computer Sciences, Purdue University, West Lafayette, IN
47907-1398, December 1993.
(To appear in <i>Journal of Software Testing, Verification, and Reliability</i>,
December 1994)

<H2> Abstract </H2>

In previous publications the authors described a compositional (hierarchical) 
approach to reachability analysis of Ada tasking programs based on process 
algebra. The abstraction capabilities of process algebra provide an effective 
means to control state explosion in automated state-space analysis, but 
only if a design is carefully modularized to encapsulate details of
behavior. This paper reports experience modifying an existing design (a 
remote temperature sensor system described by Sanden) to make it more 
amenable to hierarchical analysis. Redesign for analysis was effective in 
improving the design in other ways as well: Flaws uncovered in the analysis 
(and present in the original design) were easy to understand and correct 
because of the increased understandability of the revised design. This 
also suggests that these flaws might have been avoided, and the design 
generally improved, had ``design for analysis'' been applied from the
start. 

<HR>
<ADDRESS>
<A HREF="http://www.ics.uci.edu/Arcadia/">The Arcadia Project
&lt;arcadia-www@ics.uci.edu&gt;</A><BR>
Last modified: Thu Jan 27 13:36:13 1995
</ADDRESS>
</BODY></HTML>

