<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="../../course.css" type="text/css" />

<title>ICS 46 Spring 2016, Project #3: Set the Controls for the Heart of the Sun</title>
</head>

<body>

<div class="navbar">

<p>
ICS 46 Spring 2016 |
<a href="../../index.html">News</a> |
<a href="../../CourseReference.html">Course Reference</a> |
<a href="../../Schedule.html">Schedule</a> |
<a href="../../ProjectGuide">Project Guide</a> |
<a href="../../Notes">Notes and Examples</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 46 Spring 2016<br />
   Project #3: <i>Set the Controls for the Heart of the Sun</i></p>

</div>

<div class="section">

<p class="center"><b>Due date and time:</b> <i>Monday, May 23, 11:59pm</i></b></p>

</div>

<div class="section">

<hr />

<p class="title">Introduction</p>

<p class="subtitle">Search structures</p>

<p>In recent lectures, we've discussed several different data structures that can be used for the purposes of searching.  Each of these data structures is organized differently, and each has different performance characteristics (measured in terms of time and memory usage).  But they all share one goal: given a <i>key</i> that we're searching for, find that key and any information that's been associated with it.</p>

<p>Broadly, we say that a <i>set</i> is a kind of data structure that stores a collection of unique keys, allowing us to add new keys, remove existing keys, and determine whether a particular key is stored.  We say that a <i>map</i> is a similar kind of data structure, except that we associate a value with each key, so that keys function as the tool that lets us identify other information uniquely and find it easily.  In lecture, we discussed several approaches to solving the problems of implementing search structures like sets and maps.</p>

<ul>
  <li>We talked about using single-dimension search structures like <i>arrays</i>, <i>vectors</i>, and <i>linked lists</i>, but all had significant limitations.  Either they required linear time to search (by looking at every element in sequence), or they could be searched more quickly (e.g., using binary search) but required linear time to add or remove a key.</li>
  <li>We discovered that <i>binary search trees</i> offer the ability to do searches, insertions, and removals in logarithmic time, which is a significant improvement on the linear-time bound on at least some operations on single-dimension search structures.  But there was a catch: we only got logarithmic-time operations if the tree stayed balanced, but it could fall out of balance in circumstances that weren't necessarily rare in practice (such as adding keys in ascending or descending order).</li>
  <li>We found that all was not lost, because there are well-known algorithms for detecting and correcting binary search trees that have fallen out of balance.  In particular, we learned about a binary search tree variant called <i>AVL trees</i>, which guarantee logarithmic-time searches, adds, and removals, by rearranging the nodes in the tree whenever a significant imbalance is detected.</li>
  <li>We explored <i>skip lists</i>, a very different solution that allows a variant of binary search to be performed on a linked list.  It employs randomness to achieve its goal of providing logarithmic-time searches, adds, and removals, by storing some keys in two places, a few others in three places, a handful of others in four places, and so on.  While skip lists don't actually guarantee logarithmic-time operations, if a good random number generator is used, skip lists have an extremely high probability of performing their operations in logarithmic-time, especially for large collections of keys.</li>
  <li>Finally, we discussed how <i>hash tables</i> offer the possibility of not having to search.  Every key has a place where it "belongs," so if we only ever store keys where they belong, we'll never have to look anywhere except there.  Of course, in practice, it doesn't turn out be quite as magical as that in practice, but it can perform very well, provided that we spread keys around so not too many of them belong in any one place.</li>
</ul>

<p>As we often see when there are multiple solutions to the same kind of problem, there are important tradeoffs here.  At first blush, hash tables with "good" hash functions appear to be the clear winner, as their search times tend toward &Theta;(1).  But it's not always that simple.  For example, you might not want to choose a hash table if you don't know enough about your keys to choose a suitable hash function.  There's another reason, too, why you might prefer a balanced binary search tree or a skip list over a hash table: since they impose ordering on their keys, binary search trees and skip lists can be iterated in ascending order of their keys in linear time.  Hash tables can't, since they impose no meaningful ordering on their keys.</p>

<p class="subtitle">Spell checkers, as a case study of search structures</p>

<p>In this project, you'll build portions of a <i>spell checker</i>, similar to one you might find in a word processor, a text editor, or an email client.  A spell checker's job is relaively simple: Given a list of correctly-spelled words (which we'll call a <i>word set</i>) and the input text, a spell checker reports all of the <i>misspellings</i> (i.e., words that are not found in the word set) in the input.  When a misspelling is found in the input, a good spell checker will also suggest words appearing in the word set that are somewhat like each of the misspelled words, since there's a reasonably good chance that one of them will be the word the writer intended.</p>

<p>As an example, suppose that the word set contains the following words:</p>

<blockquote><pre>
bake  cake  main  rain  vase
</pre></blockquote>

<p>If the input text contains the word <b>vake</b>, a good spell checker will state that <b>vake</b> is misspelled, since it does not appear in the word set, and will suggest that perhaps <b>bake</b>, <b>cake</b>, or <b>vase</b> was the word that was actually intended, since all three of these words are reasonably similar to the word <b>vake</b>, differing by only one letter each.  (An even smarter spell checker might employ contextual clues to guess the word that is most appropriate in the sentence that surrounds it, but this is beyond the scope of our work here.)</p>

<p>Of course, a spell checker's task is centered around searching for words in a potentially large word set.  An efficient search structure is critical to the performance of the spell checker, since it will be necessary to search not only for the words in the input, but possibly hundreds of potential suggestions that it might like to make for each misspelling.  As you will see, a poor technique can render a spell checker &mdash; or any system that requires a large number of insertions and searches to be performed on a large search structure &mdash; effecively useless.</p>

</div>

<div class="section">

<hr />

<p class="title">Getting started</p>

<p>Before you begin work on this project, there are a couple of chores you'll need to complete on your ICS 46 VM to get it set up to proceed.</p>

<p class="subtitle">Refreshing your ICS 46 VM environment</p>

<p>Even if you previously downloaded your ICS 46 VM, you will probably need to refresh its environment before proceeding with this project.  Log into your VM and issue the command <b>ics46 version</b> to see what version of the ICS 46 environment you currently have stored on your VM.  Note, in particular, the timestamp; if you see a version with a timestamp older than the one listed below, you'll want to refresh your environment by running the command <b>ics46 refresh</b> to download the latest one before you proceed with this project.</p>

<blockquote><pre>
2016-05-03 20:47:08
Project #3 template added 
</pre></blockquote>

<p class="subtitle">Creating your project directory on your ICS 46 VM</p>

<p>A project template has been created specifically for this project, containing a similar structure to the <b>basic</b> template you saw in <a href="../Project0">Project #0</a>, but including a fair amount of code (both source code and compiled libraries) that is being provided as a starting point.  So you'll absolutely need to use the <b>project3</b> template for this project, as opposed to the <b>basic</b> one.</p>

<p>Decide on a name for your project directory, then issue the command <b>ics46 start <i>YOUR_CHOSEN_PROJECT_NAME</i> project3</b> to create your new project directory using the <b>project3</b> template.  (For example, if you wanted to call your project directory <b>p3</b>, you would issue the command <b>ics46 start p3 project3</b> to create it.)  Now you're ready to proceed!</p>

</div>

<div class="section">

<hr />

<p class="title">The project directory</p>

<p>Change into your project directory and take a look around.  Having already completed earlier projects, what you will see will look somewhat familiar, though there are a couple of differences.</p>

<p>Once again, your project directory is capable of building (any or all of) three separate programs that you can run by issuing the commands <b>./run app</b>, <b>./run exp</b>, or <b>./run gtest</b>.  A <b>provided</b> directory contains a set of source code for a mostly-complete spell checker; you will not be allowed to modify this code in any way, but you might find it instructive to read through as you work.  An <b>include</b> directory contains declarations of ancillary tools that we needed to build the program, but that you are not likely to need yourself.  The usual <b>app</b>, <b>core</b>, <b>exp</b>, and <b>gtest</b> directories are present, as well, and serve the same purpose as previously; <b>app</b> contains a <b>main.cpp</b> (and may not need anything else), <b>core</b> is where you'll do your primary work, <b>exp</b> is a place for you to write any experiments you need along the way, and <b>gtest</b> is where you can write Google Tests to validate that your code works as intended.</p>

</div>

<div class="section">

<hr />

<p class="title">The program</p>

<p>Your work on this project begins with a partially-working spell checker.  It allows a user to specify some configuration via the standard input (i.e., <b>std::cin</b>) and writes its output to standard output (i.e., <b>std::cout</b>).  In short, it is capable of doing two different things:</p>

<ol>
  <li>Given a file containing a word set and another file containing input text, it can check spelling in the input text and report on misspellings, along with suggestions about potentially correct spellings.</li>
  <li>Given a file containing a word set and another file containing input text, it can do the work of a spell checker without displaying a result, instead displaying the CPU time required to perform the task.  This allows us to test different search structures to see what effect they have on performance.</li>
</ol>

<p>Much of the program is already written and its complete source code has been provided.  I will only be requiring you to implement two relatively small parts of it:</p>

<ul>
  <li>A class called <b>WordChecker</b> that checks the spelling of words and makes appropriate suggestions when they're misspelled.</li>
  <li>Three class templates that derive from an existing class template <b>Set&lt;T&gt;</b>, which implements the concept of a <i>set</i> (i.e., a collection of search keys).  Only a handful of operations is supported in each, and you are not required to implement anything not declared in <b>Set&lt;T&gt;</b>.  There are actually four different class templates that you can write, but you are only required to choose three of them &mdash; you can choose any three of the four you'd like.
    <ul>
      <li><b>BSTSet&lt;T&gt;</b>, which is a binary search tree with no attempt made to maintain balance.</li>
      <li><b>AVLSet&lt;T&gt;</b>, which is an AVL tree.</li>
      <li><b>SkipListSet&lt;T&gt;</b>, which is a skip list.</li>
      <li><b>HashSet&lt;T&gt;</b>, which is a hash table with separate chaining, implemented as a dynamically-allocated array of linked lists.</li>
    </ul>
  Note that there is a member function called <b>isImplemented</b> in each of these class templates.  For each of the class templates that you choose to implement, you'll need to modify this member function so that it returns <b>true</b>, so our test automation tools can easily detect which ones you chose to implement.  Note, also, that there are some specific requirements and limitations in each class template; the comments in their header files specify them in detail.</li>
</ul>

<p>If you're interested in seeing an example implementation of the <b>Set&lt;T&gt;</b> class template, check out <b>ListSet.hpp</b> in the <b>provided</b> directory in your project directory, which is a set implemented using an unsorted singly-linked list with head pointer.</p>

<p class="subtitle">Insurance</p>

<p>You are also welcome to implement all four of the class templates, even though only three of them are required.  If you do, we'll offer you additional credit for it, which can be used to offset credit lost elsewhere in <i>this project</i>.  In that sense, you can think of the fourth implementation as a form of "insurance" that can help you maintain a higher score on this project.  But this is not an open offer of extra credit, so (a) your score on this project can't exceed 30 points out of 30, and (b) a fourth implementation in this project will not affect your scores on other projects.</p>

</div>

<div class="section">

<hr />

<p class="title">The input and output, in detail</p>

<p>The program takes input in a particular format and writes its output in particular formats, as well, though the code for this has already been written.  Still, you'll need to understand these formats in order to complete your work, so they are described below.</p>

<p class="subtitle">The input</p>

<p>The program reads four lines of input from the standard input (i.e., <b>std::cin</b>), without printing any kind of prompts; it simply waits until each line of input arrives before proceeding.</p>

<ol>
  <li>The first line selects a search structure.  It can be any of the following:
    <ul>
      <li><b>EMPTY</b>, which specifies an "empty set", a search structure that stores no keys and for which all searches return <b>false</b>.  (This is used primarily in performance testing.)</li>
      <li><b>LIST</b>, whicih specifies a linked list implementation (which has been provided already).</li>
      <li><b>HASH ZERO</b>, which specifies a hash table implementation using a hash function that always returns zero.</li>
      <li><b>HASH SUM</b>, which specifies a hash table implementation using a hash function that sums the character codes for every character of a word.</li>
      <li><b>HASH PRODUCT</b>, which specifies a hash table implementation using a hash function that includes multiplication by prime numbers in its calculation.</li>
      <li><b>BST</b>, which specifies a binary search tree with no balancing techniques used.</li>
      <li><b>AVL</b>, which specifies an AVL tree.</li>
      <li><b>SKIPLIST</b>, which specifies a skip list.</li>
    </ul>
  </li>
  <li>The second line specifies the path to a file that contains the word set (i.e., the set of correctly-specified words).  The word set file will be assumed to have one correctly-spelled word on each line.
    <ul>
      <li>You'll find a file called <b>wordset.txt</b> in your project directory, which is a large set of English words obtained from an open source wordlist project called <a href="http://wordlist.sourceforge.net/">wordlist.sourceforge.net</a>.</li>
      <li>You might also want to create one or more smaller word sets to test with, since the provided word set has over 60,000 words.</li>
    </ul>
  </li>
  <li>The third line specifies the path to a file that contains the input text for which you want to check spelling.  The file will be tokenized (i.e., broken into words, with punctuation and spaces ignored) and the words will be checked by your <b>WordChecker</b> class.
    <ul>
      <li>You'll find a file called <b>biginput.txt</b> in your project directory, which is one very large test case that contains a combination of words that are spelled correctly and incorrectly.  This, too, was obtained from the open source wordlist project at <a href="http://wordlist.sourceforge.net/">wordlist.sourceforge.net</a>.</li>
      <li>You'll almost certainly want to create one or more smaller test inputs, so you can determine whether your implementations of the various <b>Set&lt;T&gt;</b> class templates and your <b>WordChecker</b> class are correct.</li>
    </ul>
  </li>
  <li>The fourth line specifies the format of the output you'd like to see, which allows you to choose between seeing a display of the misspellings and suggestions, or whether you're just interested in seeing how much time the spell-checking process takes.  This line needs to say either:
    <ul>
      <li><b>DISPLAY</b>, if you want a display of misspellings and suggestions.</li>
      <li><b>TIME</b>, if you want to see only timing results.</li>
    </ul>
  </li>
</ol>

<p class="subtitle">Display output</p>

<p>When you ask for a display of misspellings and suggestions, for each misspelling, you'll see the line of text, what word was misspelled, and suggested correct spellings.  For example, if the input text is this:</p>

<blockquote><pre>
This is a lne of text that has a missspelling in it.
</pre></blockquote>

<p>you would see the following output:</p>

<blockquote><pre>
This is a lne of text that has a missspelling in it.
     word not found: LNE
  perhaps you meant: 
      LANE 
      LEE 
      LIE 
      LINE 
      LONE 
      ONE 

This is a lne of text that has a missspelling in it.
     word not found: MISSSPELLING
  perhaps you meant: 
      MISS SPELLING 
      MISSPELLING
</pre></blockquote>

<p class="subtitle">Timing output</p>

<p>When you ask for timing output, the following experiment is run:</p>

<ul>
  <li>The word set is loaded from the file and added into your chosen search structure.</li>
  <li>The input text is parsed, all words are compared against the word set, and all suggestions are generated.  However, none of the misspellings or suggestions are displayed to he user.</li>
  <li>The word set is loaded from the file again, and instead added into the <i>empty set</i> search structure (i.e., one that doesn't store any keys and for which all searches return <b>false</b>).</li>
  <li>The input text is parsed again, all words again compared against the empty set, and suggestions generated.</li>
</ul>

<p>Finally, three sets of times are shown: for everything (i.e., all of the work done using both the chosen search structure and the empty set), for just the empty set, and the difference.  (The latter of these three timings is a reasonably good estimate of how much time was spent just in your chosen search structure, not including the time spent parsing the input or generating suggestions.)  Each set of times indicates how much time was spent loading the word set and adding the words into the search structure, how much time was spent performing the spell checking, and the total of these times.</p>

<p>The results, which are indicated as CPU time measured in seconds, look like this:</p>

<blockquote><pre>
RESULTS
                LoadTime     SpellCheckTime     TotalTime
Everything      4.040888           0.109778      4.150666
Empty Set       0.036817           0.000130      0.036947
Set Only        4.004071           0.109648      4.113719 
</pre></blockquote>

<p>This will give you some insight about how the various search structures perform relative to one another.  Try your program using different search structures, word sets of different sizes and different organizations (e.g., sorted randomly, listed in ascending order), and input text of different kinds, and see what kind of insight you can gain about how the search structures compare to each other.</p>

</div>

<div class="section">

<hr />

<p class="title">Generating suggestions for misspelled words</p>

<p>There are two popular text-mode spell checkers on Unix/Linux systems.  One is called <i>ispell</i>; the other is a GNU "free software" program called <i>aspell</i>.  They both use similar techniques for generating suggestions for misspelled words.  While checking the spelling of an input file, if a word is not found in the word set, five techniques are used to generate possible suggestions.  Each suggestion is looked up in the word set; any suggestion found in the word set is added to the list of suggestions, and no word should appear in the list of suggestions twice.  The five techniques used are:</p>

<ul>
  <li>Swapping each adjacent pair of characters in the word.</li>
  <li>In between each adjacent pair of characters in the word (also before the first character and after the last character), each letter from 'A' through 'Z' is inserted.</li>
  <li>Deleting each character from the word.</li>
  <li>Replacing each character in the word with each letter from 'A' through 'Z'.</li>
  <li>Splitting the word into a pair of words by adding a space in between each adjacent pair of characters in the word.  It should be noted that this will only generate a suggestion if <i>both</i> words in the pair are found in the word set.</li>
</ul>

<p>Your WordChecker class will need to generate suggestions using all five of these techniques, as well.  (It should be noted that there are other ways to generate suggestions, including using algorithms that pay attention not only to the letters, but what the letters actually sound like.  One such well-known algorithm is called the Soundex algorithm.  You are not required to implement such algorithms for this project.)</p>

</div>

<div class="section">

<hr />

<p class="title">Limitations</p>

<p>You are not permitted to modify any of the code in the <b>provided</b> directory, and note that the <b>gather</b> script (which gathers up your C++ source and header files for submission) will not include any of this code in your submission.  What you submit must be compatible with what was already provided.</p>

<p>Note, too, that some of the search structures have limitations on how you're permitted to implement them: portions of the C++ Standard Library that are off-limits, certain techniques that must be used, or performance guarantees (say, certain operations that must run in <i>O</i>(log <i>n</i>) time).  See the comments in each of the files (e.g., <b>core/BSTSet.hpp</b>) for more details.</p>

</div>

<div class="section">

<hr />

<p class="title">Deliverables</p>

<p>After using the <b>gather</b> script in your project directory to gather up your C++ source and header files into a single <b>project3.tar.gz</b> file (as you did in <a href="../Project0">Project #0</a>, submit that file (and only that file) to Checkmate.  Refer back to <a href="../Project0">Project #0</a> if you need instructions on how to do that.</p>

<p>Follow <a href="../SubmittingProjects.html">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're reponsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.  (It's not a bad idea to look at the contents of your tarball before submitting it; see <a href="../Project0">Project #0</a> for instructions on how to do that.)</p>

<p class="subtitle">Can I submit after the deadline?</p>

<p>Yes, it is possible, subject to the late work policy for this course, which is described in the section titled <i>Late work</i> at <a href="../index.html">this link</a>.</p>

</div>

<div class="history">

<hr />

<ul class="nomarker">
  <li>Several tweaks and fixes by Alex Thornton, Spring 2016.</li>
  <li>Originally written by Alex Thornton, Spring 2015, with some influence from <i>Lost for Words</i> by Alex Thornton.</li>
</ul>

</div>

</body>
</html>
