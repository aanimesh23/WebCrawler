<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1" />
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay" />
<META HTTP-EQUIV="UPDATED" CONTENT="Friday, October 28, 2005 9:47 AM" />
<TITLE>Lab Assignment 5</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="D235E05F" />
<META HTTP-EQUIV=KEYWORDS CONTENT="CS 1, CS1, assignment, Scheme" />
<META HTTP-EQUIV="DESCRIPTION" CONTENT="An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al." />
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2001 by David G. Kay.  All rights reserved." />
<link href="/~kay/courses/i41/code.css" rel="stylesheet" type="text/css" />
<style type="text/css">
<!--
.style1 {font-size: 10pt}
.style2 {
	font-size: 10pt;
	font-family: "Courier New", Courier, monospace;
}
.style4 {
	font-family: "Courier New", Courier, monospace;
	font-weight: bold;
	font-size: 10pt;
}
-->
</style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<P><FONT size="2" FACE="Goudy Old Style">INFORMATICS 41 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2011</FONT></P>
<P><FONT FACE="Goudy Old Style" SIZE=6><B>Lab Assignment 5</B></FONT></P>
<P>
<FONT FACE="Goudy Old Style">This assignment is due at the end of lab on
Friday, October 28.</FONT></P>
<P>
<FONT FACE="Goudy Old Style">Choose a partner for this assignment, someone
you haven&#39;t worked with already. If you're thinking about doing more software development after this course, try to find a partner with similar interests.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(a) </B>In class we described how to change our restaurant
structure so that instead of just one best dish and its price, each restaurant
has a menu of dishes.  So a (new) </FONT><span class="style1"><FONT FACE="Courier New">rrant</FONT></span><FONT FACE="Goudy Old Style">
is now</FONT></P>
<P class="style1"><FONT FACE="Courier New">(make-rrant
name cuisine phone menu)</FONT></P>
<P>
<FONT FACE="Goudy Old Style">where name is a string, cuisine is a string,
phone is a string, and menu is a list of dish structures (see below).  We
defined the new structure more or less like this:</FONT></P>
<P class="style1"><FONT FACE="Courier New">(define-struct
rrant (name cuisine phone menu))</FONT></P>
<P>
<FONT FACE="Goudy Old Style">The menu was a list of dishes&mdash;that is,
the </FONT><code>rrant</code></span><FONT FACE="Goudy Old Style">
structure contains a list as one of its fields.  Each dish on the list has a name and a price.  So a </FONT><span class="style1"><FONT FACE="Courier New">dish</FONT></span><FONT FACE="Goudy Old Style">
is</FONT></P>
<P class="style1"><FONT FACE="Courier New">(make-dish
name price)</FONT></P>
<P>
<FONT FACE="Goudy Old Style">where name is a string and price is a number,
defined with</FONT></P>
<P class="style1">
  <FONT FACE="Courier New">(define-struct dish (name price))</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(a.1)</B> To the restaurant definition below,
add a third dish:  Paht Woon Sen at $7.95.<A NAME="_14_2366"></A>
<BR />
</FONT><span class="style2">(define R1 (make-rrant &quot;Thai
Touch&quot; &quot;Thai&quot; &quot;949-640-0123&quot; <BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(list (make-dish &quot;Mee Krob&quot; 8.50) <BR />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(make-dish &quot;Larb Gai&quot; 10.25))))</span></P>
<P>
<FONT FACE="Goudy Old Style">Write a Scheme expression that defines R2 as
a (new) </FONT><span class="style1"><FONT FACE="Courier New">rrant</FONT></span><FONT FACE="Goudy Old Style">
structure for the French restaurant Pascal whose phone number is 940-752-0107;
they serve escargots for $12.95, poached salmon for $18.50, rack of lamb
for $24.00 and marjolaine cake for $8.50.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(a.2)  </B>Write the function </FONT><span class="style1"><FONT FACE="Courier New">rrant-first-dish-name</FONT></span><FONT FACE="Goudy Old Style">
that takes a </FONT><span class="style1"><FONT FACE="Courier New">rrant</FONT></span><FONT FACE="Goudy Old Style">
as its argument and returns the name of the first dish on the restaurant&#39;s
menu.  Remember to write the test cases and examples before you write the
function.  You should include code to check whether the menu has zero dishes
and return empty if so.</FONT></P>
<P>
<FONT FACE="Goudy Old Style">You may find yourself needing to extract the
menu from the argument twice; use </FONT><span class="style1"><FONT FACE="Courier New">local</FONT></span><FONT FACE="Goudy Old Style">
to avoid that.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(a.3)</B>  Write the function </FONT><span class="style1"><FONT FACE="Courier New">dish-cheap?</FONT></span><FONT FACE="Goudy Old Style">
that takes a dish structure and a number and returns true if (and only if)
the price of the dish is less than the specified number.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(a.4)</B>  Write the function </FONT><span class="style1"><FONT FACE="Courier New">menu-all-cheap?</FONT></span><FONT FACE="Goudy Old Style">
that takes a menu (i.e., a list of dish structures) and a number and returns
true if (and only if) all the dishes on the menu have a price less than
the specified number. You may write your code to return true if the menu
doesn&#39;t have any dishes; don&#39;t produce an error message.  Of course
you should use </FONT><span class="style1"><FONT FACE="Courier New">dish-cheap?</FONT></span><FONT FACE="Goudy Old Style">
in your definition.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(a.5) </B> Write the function </FONT><span class="style1"><FONT FACE="Courier New">rrant-all-cheap?</FONT></span><FONT FACE="Goudy Old Style">
that takes a </FONT><span class="style1"><FONT FACE="Courier New">rrant</FONT></span><FONT FACE="Goudy Old Style">
and a number and returns true if all the dishes the restaurant serves cost
less than the specified number.  Of course you should use </FONT><span class="style1"><FONT FACE="Courier New">menu-all-cheap?</FONT></span><FONT FACE="Goudy Old Style">
in your definition.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(a.6)</B>  Write the function </FONT><span class="style1"><FONT FACE="Courier New">menu-prices</FONT></span><FONT FACE="Goudy Old Style">
that takes a menu and returns a list of numbers where each number is the
price of a dish on the menu.  That is, your function will collect all the
prices of the dishes into a list and return that list. (This is an alternative approach to what we did in class.)</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(a.7)</B>  Write the function </FONT><span class="style1"><FONT FACE="Courier New">menu-average</FONT></span><FONT FACE="Goudy Old Style">
that takes a menu and returns the average price of the dishes on that menu.
 Think about how you compute an average, what quantities you need, and how
to get them.  The predefined function </FONT><span class="style1"><FONT FACE="Courier New">length</FONT></span><FONT FACE="Goudy Old Style">
will be helpful; it will also be helpful to write a function </FONT><span class="style1"><FONT FACE="Courier New">sum</FONT></span><FONT FACE="Goudy Old Style">
that returns the sum of a list of numbers.  Note also that you&#39;ll need
to check for an empty menu and return zero in that case, so you don&#39;t
divide by zero.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(a.8)</B>  Write the function </FONT><span class="style1"><FONT FACE="Courier New">rrant-cheap?</FONT></span><FONT FACE="Goudy Old Style">
that takes a </FONT><span class="style1"><FONT FACE="Courier New">rrant</FONT></span><FONT FACE="Goudy Old Style">
and a number and returns true if the average price of the restaurant&#39;s
menu is less than the specified number.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(a.9) </B> Write the function </FONT><span class="style1"><FONT FACE="Courier New">rrant-keep-cheap</FONT></span><FONT FACE="Goudy Old Style">
that takes a </FONT><span class="style1"><FONT FACE="Courier New">rrant</FONT></span><FONT FACE="Goudy Old Style">
and a number and returns (a newly constructed copy of) that restaurant with
all the menu items that aren&#39;t cheap removed.  The right way to go about
this is to follow the pattern of the functions above:  Start by writing
a function to operate on a menu, and then call that function from your </FONT><span class="style1"><FONT FACE="Courier New">rrant-keep-cheap</FONT></span><FONT FACE="Goudy Old Style">
function.  The actual removal task follows the pattern of some of the functions
we&#39;ve already seen.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(a.10)</B>  Write the function </FONT><span class="style1"><FONT FACE="Courier New">cheap-rrants</FONT></span><FONT FACE="Goudy Old Style">
that takes a list of </FONT><span class="style1"><FONT FACE="Courier New">rrant</FONT></span><FONT FACE="Goudy Old Style">
structures and a number and returns a list containing only the cheap restaurants&mdash;the
ones whose average menu price is less than the number.  Use </FONT><span class="style1"><FONT FACE="Courier New">rrant-cheap?</FONT></span><FONT FACE="Goudy Old Style">
in your definition, of course. </FONT></P>
<P>
<FONT FACE="Goudy Old Style">Collect all of these definitions and submit
them via Checkmate.</FONT></P>
<P><FONT FACE="Goudy Old Style"><B>(b)</B> In class, we did an &quot;inorder traversal&quot; of a BST; we called it <code>BST-&gt;list</code>.  We also did the insertion of an item into a BST; we called it <code>BST-insert</code>.  And we wrote a function to take a list of items and insert each item into a BST; we called it <code>list-&gt;BST</code>.  You should know how to recognize these functions and how to write them.</font></P>
<p><font face="Goudy Old Style"><strong>(b.1) </strong>At the end of class, we reimplemented (rebuilt) our BST to keep track of duplicate items by storing a count of how many times each item occurred. We redefined the <code>node</code> structure and we defined an insertion function to increase the count each time we find a duplicate item.  But we didn't finish rewriting <code>BST-&gt;list</code> to produce, for example, three 19s on the sorted list if there were three 19s in the input.  The skeleton is at the bottom of Thursday afternoon's class transcript (available in the course Email archive); complete that definition (including enough <code>check-expect</code> tests to demonstrate that your definition is correct). </font></p>
<p><FONT FACE="Goudy Old Style"><strong>(b.2) </strong>In class we did not write a function to search for an item in a binary tree.  So we'll give you a chance to do it now.  Write the function <font face="Courier New, Courier, monospace">BST-member?</font> as described below.  Write it to process BSTs as we defined them in class (with counts or without, your choice).</FONT></P>
<pre><font size="2" face="Courier New, Courier, monospace">;; BST-member?: number  BST  -&gt;  boolean
;; Return true if number appears in BST and false otherwise
(check-expect (BST-member? 17 empty) false)
(check-expect (BST-member? 17 (list-&gt;BST (list 17))) true)
(check-expect (BST-member? 17 (list-&gt;BST (list 34 43 28 16 17 24 134 34))) true)
(check-expect (BST-member? 17 (list-&gt;BST (list 34 3 23 2 25 26 24))) false)</font></pre>
<p><FONT FACE="Goudy Old Style">Here are some hints if you'd like them: You have the contract, purpose statement, and examples above. Next, write the function header (define and lambda). Since a tree is either empty or not, have a cond to distinguish. Now, what do you return if the tree's empty? If it's not empty, what two things do you have to look at? What if they're equal, what do you return? If they're not equal, you're going to have to keep looking (recursively) in either the left subtree or the right subtree; how do you decide which?</FONT></P>
<p><FONT FACE="Goudy Old Style">Submit your definitions
  via Checkmate. </FONT></P>
<p>
<FONT FACE="Goudy Old Style"><B>(c)</B> This part is optional. If you don't get to it, that's fine. But if you think your interests might be in the area of software development or software engineering, then we highly recommend giving it a try.</FONT></P>
<p><FONT FACE="Goudy Old Style">Reimplement the collection class in the restaurants program to store
  the restaurants in a binary search tree ordered by the restaurants&#39;
  names.  This will involve changing all the definitions in the collection
  part of the code, but none of the definitions elsewhere. [In fact, you'd do exatly the same thing whether the restaurant structures are old-style (with one dish and price) or new-style (with a menu of dishes).]</FONT></P>
<P>
<FONT FACE="Goudy Old Style">Your data definition will be as follows:</FONT></P>
<P><code>;; A treenode is either<br />
  ;; 1. empty<br />
  ;; 2. (make-treenode rootvalue left right), where rootvalue is a rrant and left<br />
  ;; and right are treenodes, representing the left subtree and right subtree,<br />
  ;; and (this is the BST property) where all of the restaurant names in the left<br />
  ;; subtree are earlier alphabetically than the name of the rootvalue restaurant,<br />
;; all names in the right subtree are greater, and both subtrees are BSTs.</code></P>
<P>
<FONT FACE="Goudy Old Style">Here are some tips, hints, and simplifications:</FONT></P>
<ul>
  <li>
    <FONT FACE="Goudy Old Style">The BST code you wrote earlier and the code we did in class should
    be a useful guide. </FONT></li>
  <li>
    <FONT FACE="Goudy Old Style">To compare strings alphabetically, use </FONT><FONT FACE="Courier New" SIZE=2>string=?</FONT><FONT FACE="Goudy Old Style">,
      </FONT><FONT FACE="Courier New" SIZE=2>string&gt;?</FONT><FONT FACE="Goudy Old Style">,
        or </FONT><FONT FACE="Courier New" SIZE=2>string&lt;?</FONT><FONT FACE="Goudy Old Style">.
        </FONT></li>
  <li>
    <FONT FACE="Goudy Old Style">The </FONT><FONT FACE="Courier New" SIZE=2>collection-&gt;list</FONT><FONT FACE="Goudy Old Style">
    function should do an inorder traversal of the tree, so it produces a sorted
    list.  </FONT></li>
  <li>
    <FONT FACE="Goudy Old Style">Assume that every restaurant in the collection
      will have a unique name.  Under that assumption, there will be no duplications,
    so that </FONT><FONT FACE="Courier New" SIZE=2>collection-search</FONT><FONT FACE="Goudy Old Style">
    will always return a one-element collection or an empty collection.</FONT></li>
  <li>
    <FONT FACE="Goudy Old Style">Deleting items from a BST is very tricky
      if the item has two children, because you can&#39;t leave holes and you
      need to maintain the BST property.  We&#39;ll learn the algorithm for this
    some day, but for now, you can skip it:  </FONT><FONT FACE="Courier New" SIZE=2>collection-remove</FONT><FONT FACE="Goudy Old Style">
  can just return the same collection unchanged.</FONT></li>
</ul>
<p><FONT FACE="Goudy Old Style">What's the point of this exercise? The restaurant collection in our program is an interchangeable part. We can change how we build it internally (from a list to a BST) without affecting the rest of the program (i.e., without requiring the authors of those parts of the program to make any changes in their code). This interchangeability is a key aspect of any well-designed modern software system and it's a fundamental principle of object-oriented programming.</FONT></p>
<P><FONT FACE="Goudy Old Style"><B>(d)</B>  Remember that each partner must
  complete a partner evaluation form via the Survey tool on <code>eee.uci.edu</code>.</FONT><BR />
</P>
<P>
<FONT FACE="Helvetica" SIZE=1>Based in part on ICS H21assignments by David
G. Kay; modified by David G. Kay for the Informatics Core Course, Fall 2004, Fall 2005, Fall 2008, Fall 2009, Fall 2011.</FONT></P>
<HR />
<FONT FACE="Goudy Old Style"><A HREF="http://www.ics.uci.edu/~kay/">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />
<font size="2" face="Goudy Old Style">
<!-- #BeginDate format:fcAm1a -->Saturday, October 22, 2011 10:35 AM<!-- #EndDate -->
</font></span>
</BODY>
</HTML>
