<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 14">
<meta name=Originator content="Microsoft Word 14">
<link rel=File-List href="faq_files/filelist.xml">
<title>CS 295--Run-time Techniques for Efficient and Reliable Program Execution</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>harrygxu</o:Author>
  <o:LastAuthor>harrygxu</o:LastAuthor>
  <o:Revision>28</o:Revision>
  <o:TotalTime>672</o:TotalTime>
  <o:Created>2013-01-03T23:55:00Z</o:Created>
  <o:LastSaved>2013-03-28T20:28:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>2029</o:Words>
  <o:Characters>11567</o:Characters>
  <o:Lines>96</o:Lines>
  <o:Paragraphs>27</o:Paragraphs>
  <o:CharactersWithSpaces>13569</o:CharactersWithSpaces>
  <o:Version>14.00</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]-->
<link rel=themeData href="faq_files/themedata.thmx">
<link rel=colorSchemeMapping href="faq_files/colorschememapping.xml">
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>80</w:Zoom>
  <w:TrackMoves/>
  <w:TrackFormatting/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DoNotPromoteQF/>
  <w:LidThemeOther>EN-US</w:LidThemeOther>
  <w:LidThemeAsian>X-NONE</w:LidThemeAsian>
  <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:SplitPgBreakAndParaMark/>
   <w:DontVertAlignCellWithSp/>
   <w:DontBreakConstrainedForcedTables/>
   <w:DontVertAlignInTxbx/>
   <w:Word11KerningPairs/>
   <w:CachedColBalance/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
  <m:mathPr>
   <m:mathFont m:val="Cambria Math"/>
   <m:brkBin m:val="before"/>
   <m:brkBinSub m:val="&#45;-"/>
   <m:smallFrac m:val="off"/>
   <m:dispDef/>
   <m:lMargin m:val="0"/>
   <m:rMargin m:val="0"/>
   <m:defJc m:val="centerGroup"/>
   <m:wrapIndent m:val="1440"/>
   <m:intLim m:val="subSup"/>
   <m:naryLim m:val="undOvr"/>
  </m:mathPr></w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"
  DefSemiHidden="true" DefQFormat="false" DefPriority="99"
  LatentStyleCount="267">
  <w:LsdException Locked="false" Priority="0" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Normal"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="heading 1"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="heading 2"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="heading 3"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="heading 4"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 1"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 2"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 3"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 4"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 5"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 6"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 7"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 8"/>
  <w:LsdException Locked="false" Priority="39" Name="toc 9"/>
  <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption"/>
  <w:LsdException Locked="false" Priority="10" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Title"/>
  <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font"/>
  <w:LsdException Locked="false" Priority="11" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Subtitle"/>
  <w:LsdException Locked="false" Priority="22" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Strong"/>
  <w:LsdException Locked="false" Priority="20" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Emphasis"/>
  <w:LsdException Locked="false" Priority="59" SemiHidden="false"
   UnhideWhenUsed="false" Name="Table Grid"/>
  <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text"/>
  <w:LsdException Locked="false" Priority="1" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="No Spacing"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 1"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 1"/>
  <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision"/>
  <w:LsdException Locked="false" Priority="34" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="List Paragraph"/>
  <w:LsdException Locked="false" Priority="29" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Quote"/>
  <w:LsdException Locked="false" Priority="30" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Intense Quote"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 1"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 1"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 2"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 2"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 2"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 3"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 3"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 3"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 4"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 4"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 4"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 5"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 5"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 5"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="60" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="61" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light List Accent 6"/>
  <w:LsdException Locked="false" Priority="62" SemiHidden="false"
   UnhideWhenUsed="false" Name="Light Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="63" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="64" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="65" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="66" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium List 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="67" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="68" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="69" SemiHidden="false"
   UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="70" SemiHidden="false"
   UnhideWhenUsed="false" Name="Dark List Accent 6"/>
  <w:LsdException Locked="false" Priority="71" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="72" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful List Accent 6"/>
  <w:LsdException Locked="false" Priority="73" SemiHidden="false"
   UnhideWhenUsed="false" Name="Colorful Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="19" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis"/>
  <w:LsdException Locked="false" Priority="21" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis"/>
  <w:LsdException Locked="false" Priority="31" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference"/>
  <w:LsdException Locked="false" Priority="32" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Intense Reference"/>
  <w:LsdException Locked="false" Priority="33" SemiHidden="false"
   UnhideWhenUsed="false" QFormat="true" Name="Book Title"/>
  <w:LsdException Locked="false" Priority="37" Name="Bibliography"/>
  <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading"/>
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:\5B8B\4F53;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 680460288 22 0 262145 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:-536870145 1107305727 0 0 415 0;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 680460288 22 0 262145 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;}
h2
	{mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-link:"Heading 2 Char";
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:18.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;
	font-weight:bold;}
h3
	{mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-link:"Heading 3 Char";
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:3;
	font-size:13.5pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;
	font-weight:bold;}
h4
	{mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-link:"Heading 4 Char";
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;
	font-weight:bold;}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-noshow:yes;
	mso-style-priority:99;
	color:purple;
	text-decoration:underline;
	text-underline:single;}
p
	{mso-style-noshow:yes;
	mso-style-priority:99;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{mso-style-noshow:yes;
	mso-style-priority:34;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-add-space:auto;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{mso-style-noshow:yes;
	mso-style-priority:34;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-type:export-only;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-add-space:auto;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{mso-style-noshow:yes;
	mso-style-priority:34;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-type:export-only;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-add-space:auto;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{mso-style-noshow:yes;
	mso-style-priority:34;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-type:export-only;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-add-space:auto;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-noshow:yes;
	mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Heading 2";
	mso-ansi-font-size:13.0pt;
	mso-bidi-font-size:13.0pt;
	font-family:"Cambria","serif";
	mso-ascii-font-family:Cambria;
	mso-ascii-theme-font:major-latin;
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:major-fareast;
	mso-hansi-font-family:Cambria;
	mso-hansi-theme-font:major-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:major-bidi;
	color:#4F81BD;
	mso-themecolor:accent1;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-noshow:yes;
	mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Heading 3";
	mso-ansi-font-size:12.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Cambria","serif";
	mso-ascii-font-family:Cambria;
	mso-ascii-theme-font:major-latin;
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:major-fareast;
	mso-hansi-font-family:Cambria;
	mso-hansi-theme-font:major-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:major-bidi;
	color:#4F81BD;
	mso-themecolor:accent1;
	font-weight:bold;}
span.Heading4Char
	{mso-style-name:"Heading 4 Char";
	mso-style-noshow:yes;
	mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Heading 4";
	mso-ansi-font-size:12.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Cambria","serif";
	mso-ascii-font-family:Cambria;
	mso-ascii-theme-font:major-latin;
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:major-fareast;
	mso-hansi-font-family:Cambria;
	mso-hansi-theme-font:major-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:major-bidi;
	color:#4F81BD;
	mso-themecolor:accent1;
	font-weight:bold;
	font-style:italic;}
.MsoChpDefault
	{mso-style-type:export-only;
	mso-default-props:yes;
	font-size:10.0pt;
	mso-ansi-font-size:10.0pt;
	mso-bidi-font-size:10.0pt;
	mso-fareast-font-family:SimSun;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 @list l0
	{mso-list-id:69012255;
	mso-list-template-ids:-1422632950;}
@list l0:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l1
	{mso-list-id:753358344;
	mso-list-template-ids:1968625824;}
@list l1:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l1:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l1:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l1:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l1:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l1:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l1:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l1:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l1:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2
	{mso-list-id:834493817;
	mso-list-type:hybrid;
	mso-list-template-ids:688655602 959475852 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l2:level1
	{mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:14.0pt;}
@list l2:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2:level3
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:none;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l2:level4
	{mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2:level5
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2:level6
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:none;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l2:level7
	{mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2:level8
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2:level9
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:none;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l3
	{mso-list-id:955872462;
	mso-list-template-ids:-1781382022;}
@list l3:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l3:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4
	{mso-list-id:1099180005;
	mso-list-template-ids:-1866566366;}
@list l4:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l5
	{mso-list-id:1331519623;
	mso-list-template-ids:-1062941028;}
@list l5:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l5:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l5:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l5:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l5:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l5:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l5:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l5:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l5:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6
	{mso-list-id:1831287282;
	mso-list-template-ids:-2046888204;}
@list l6:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l6:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7
	{mso-list-id:2061006366;
	mso-list-template-ids:1600061266;}
@list l7:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1026"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body bgcolor=white lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=WordSection1>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='font-size:14.0pt;mso-fareast-font-family:"Times New Roman"'>The Project
FAQ (Thanks to Dr. Mason Chang for providing the following project information)</span></b><b><span
style='mso-fareast-font-family:"Times New Roman"'>:<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='font-size:14.0pt;mso-fareast-font-family:"Times New Roman"'>More
information will be added as the class progresses</span></b><b><span
style='mso-fareast-font-family:"Times New Roman"'>.<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span
style='mso-fareast-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='font-size:14.0pt;mso-fareast-font-family:"Times New Roman"'>Parsing the
constant pool / .class file:</span></b><span style='font-size:14.0pt;
mso-fareast-font-family:"Times New Roman"'><o:p></o:p></span></p>

<ol start=1 type=1>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo3;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>My fread is weird even though I haven't reached the end
     of file or I get an ferror!&nbsp;- </span></b><span style='mso-fareast-font-family:
     "Times New Roman"'>Make sure you open the file in &quot;binary&quot;
     mode.&nbsp;<a
     href="http://www.cplusplus.com/reference/clibrary/cstdio/fopen/">Add a b
     to the open mode</a>. - Read the first line of the paragraph.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo3;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What are the file operations on C/C++?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>&nbsp;Google fopen,
     fread, fclose, ferror, feof.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo3;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>The print and other memory operations?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>&nbsp;printf, scanf,
     memcpy, memset, sprintf, malloc<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo3;tab-stops:list .5in'><span style='mso-fareast-font-family:
     "Times New Roman"'>I<b>'m getting a crazy big number / negative number
     when reading a byte!</b> A byte, when casted to an int, will sign extend
     the value. So if the byte value read is greater than 127, you need to chop
     off the bottom 8 bits. You can do this by bitwise ANDING the value with
     0xFF.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo3;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What's the function to get the size of a data type</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>? sizeof<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo3;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>Do you have an example?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> Sure!<br>
     Consider the beginning of a .out file:<br>
     <br>
     &nbsp;&nbsp; &nbsp; Magic &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CP Entries
     &nbsp; &nbsp; &nbsp; E1 &nbsp; E2 &nbsp; &nbsp; &nbsp; &nbsp;NameLen1
     &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;NameChars &nbsp; &nbsp; &nbsp;
     &nbsp; &nbsp;E3 &nbsp; &nbsp;E4 &nbsp; &nbsp; &nbsp;NameLen2<br>
     FF EE CD AB | 1E 00 00 00 | 00 | 02 | 06 00 00 00 |3C 69 6E 69 74 3E | 00
     | 02 | 07 00 00 00<br>
     * | Denotes a logical separation of data as defined in the .out file spec.<br>
     <br>
     First parse the magic numbers as an integer. Then parse the constant pool
     size as an integer. The constant pool size refers to the number of ENTRIES
     in the constant pool, not the actual byte length of the constant pool. Then
     for each entry, the constant pool is either NONE (0), an integer (1), or a
     method (2). So the FIRST entry in the constant pool (E1), is the type
     NONE. The SECOND entry of the constant pool (E2) is a method (2). Then we
     parse a method constant pool entry.<br>
     <br>
     The method constant pool entry starts with an integer that tells you how
     many bytes a method name is. Parse that integer (NameLen1). Then we parse
     (6) * the number of bytes which is in (NameChars). We have finished
     parsing ONE method constant pool entry.<br>
     <br>
     Now we parse the THIRD entry (E3) of the constant pool which is NONE. The
     fourth entry of the constant pool (E4) is a method (2), so we parse
     another method using the same technique we used in the previous paragraph.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo3;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>When will I see a CP_INT?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> You need a really big
     constant integer. For example, int x = 323878237; This should turn into
     the Java bytecode ldc, which then references the constant pool.<o:p></o:p></span></li>
</ol>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='font-size:14.0pt;mso-fareast-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='font-size:14.0pt;mso-fareast-font-family:"Times New Roman"'>JVM
Interpreter</span></b><b><span style='mso-fareast-font-family:"Times New Roman"'>:</span></b><span
style='mso-fareast-font-family:"Times New Roman"'><o:p></o:p></span></p>

<ol start=1 type=1>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l7 level1 lfo4;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How do I know when to call a method? </span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>Just do a name compare.
     If the method you need to call is the correct method name, call it. We can
     assume all method names are unique.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l7 level1 lfo4;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How do I implement system.out.println or the print
     function?</span></b><span style='mso-fareast-font-family:"Times New Roman"'>&nbsp;Whenever
     you see the method name println or printInt or whatever your print
     function is, call the C method printf.<o:p></o:p></span></li>
</ol>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='mso-fareast-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='font-size:14.0pt;mso-fareast-font-family:"Times New Roman"'>Building SSA</span></b><b><span
style='mso-fareast-font-family:"Times New Roman"'>:</span></b><span
style='mso-fareast-font-family:"Times New Roman"'><o:p></o:p></span></p>

<ol start=1 type=1>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What are the three steps again!? </span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>1) Create Basic Blocks.
     2) Link Basic Blocks with successors / predecessors. 3) Create
     Instructions. To do steps 1 and 2 DO NOT require you to implement
     Instructions yet.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How do I know what pc represents which block?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> You need a MAP that
     maps program counter locations in the bytecode (pc) to the basic block.
     This PC location represents the&nbsp;BEGINNING&nbsp;of the block, not the
     RANGE of a block. For example, if the first basic block represents PC 0 -
     9, your map should only contain one entry for pc 0 -&gt; Basic Block 0.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What are the instruction types I need?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> Instruction,
     BinaryInstruction, ConditionInstruction, ConstantInt, PhiInstruction,
     CallInstruction, UnconditionalBranch, ConditionalBranch,
     ReturnInstruction. If you do arrays, you need a NewArrayInstruction,
     SetArrayElementInstruction, and GetArrayElementInstruction. If you do
     methods, you need a ParameterInstruction for method parameters.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How should I represent everything? </span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>A <i>Method</i> object
     has a List&lt;BasicBlock*&gt;. Each <i>BasicBlock </i>is an object. A <i>BasicBlock
     </i>has a List&lt;BasicBlock*&gt; for it's successors, and another list
     for it's predecessors. Each <i>BasicBlock </i>has a List&lt;<i>Instruction</i>*&gt;.
     Each <i>Instruction </i>points to its operands.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What's in a PhiInstruction?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>&nbsp;A phi should have
     a List&lt;BasicBlock*&gt; and a List&lt;Instruction*&gt;. Phi's really
     have an operand that represents a pair [BasicBlock*, Instruction*], that
     says if control flow comes from a basic block BB1, the phi represents this
     Instruction I1. A nice trick is to map each element in the
     List&lt;BasicBlock*&gt; and List&lt;Instruction*&gt; at the same index. So
     if a Phi ( [BB2, ConstantValueInstruction(42]), the 0 element of the
     List&lt;BasicBlock*&gt; can point to BB2 and the 0 element of the
     List&lt;Instruction*&gt; can point to the ConstantValueInstruction(42).<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>I'm getting loop headers that have forward GOTOs!</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> Make sure you build
     your .java files with javac from the command line, not eclipse.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What are these state objects?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> The state keeps track
     of what instruction each local variable points to at this current point in
     time. You will have MULTIPLE state objects. You always operate on one,
     that you keep updating. However, the begin states and end states of each
     basic block are CLONED states. If you have one basic block, you have three
     state objects: The current one you modify, and the begin/end states which
     are independent states. They may POINT to the same instruction, but they
     are different state objects.<o:p></o:p></span></li>
</ol>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='mso-fareast-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='font-size:14.0pt;mso-fareast-font-family:"Times New Roman"'>Register
Allocator</span></b><b><span style='mso-fareast-font-family:"Times New Roman"'>:</span></b><span
style='mso-fareast-font-family:"Times New Roman"'><o:p></o:p></span></p>

<ol start=1 type=1>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l5 level1 lfo6;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What's the basic block order? </span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>You need to build your
     blocks in <a
     href="http://en.wikipedia.org/wiki/Depth-first_search#Vertex_orderings">reverse
     post order</a>. A sketch of the algorithm is located on wikipedia under <a
     href="http://en.wikipedia.org/wiki/Topological_sorting">topological
     sorting</a>. Use the version that uses the depth first search. The only
     kicker is that when you add a node to the list, add it to
     the&nbsp;BEGINNING&nbsp;of the list, rather than the end of the
     list.&nbsp;<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l5 level1 lfo6;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What order do I register allocate in? </span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>You iterate backwards
     from the Reverse post order list.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l5 level1 lfo6;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What are the four steps</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>? 1) Get blocks in
     reverse post order. 2) Build live ranges. 3) Build interference graph. 4)
     Allocate registers.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l5 level1 lfo6;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>Which registers do we NEVER use again?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> ESP, EBP<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l5 level1 lfo6;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How are phis treated?</span></b><span style='mso-fareast-font-family:
     "Times New Roman"'> The OPERANDS of a phi, get their live ranges added up
     to the current phi instruction id. The Operands of the phi DO NOT get
     added into the live set.<o:p></o:p></span></li>
</ol>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='mso-fareast-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='font-size:14.0pt;mso-fareast-font-family:"Times New Roman"'>Assembler</span></b><b><span
style='mso-fareast-font-family:"Times New Roman"'>:</span></b><span
style='mso-fareast-font-family:"Times New Roman"'><o:p></o:p></span></p>

<ol start=1 type=1>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How do I read the table of doom / assemble
     something!&nbsp;- </span></b><span style='mso-fareast-font-family:"Times New Roman"'>The
     mod r/m table is freakishly confusing. The whole point of the mod r/m
     table is to build 1 byte, 8 bits total. It is segmented into three parts.
     The top 2 bits represent the &quot;MOD&quot; or how to access the
     register. The next 3 bits represent the destination register and is a
     value of 0 - 7. The bottom 3 bits&nbsp;represent&nbsp;the source register
     and is a value of 0 - 7. So the mod r/m byte looks like:<br>
     <br>
     MOD BIT &nbsp; &nbsp;dst reg &nbsp; &nbsp; &nbsp;src register<br>
     &nbsp;&nbsp; &nbsp;00 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000 &nbsp;
     &nbsp; &nbsp; &nbsp; 000&nbsp;<br>
     <br>
     Let's say we wanted to move EBX to EDX. The opcode for mov is 0x8b. Since
     we are using the actual registers rather than referring to the value IN
     the register, the MOD bit is 0b11 (or 3 in decimal). EBX is 3 (0b011) in
     the table and is our src register. EDX is register 2 (0b010). So in total
     you need to write two bytes:<br>
     <br>
     0x8b; -- The mov opcode<br>
     0xd3 = 0b11 010 011 (MOD 11, dst EDX, src EBX)<br>
     <br>
     You can build it by lots of bit shifting. Ala ( (3 &lt;&lt; 6) | (2
     &lt;&lt; 3) | (3) ). Shift the number &quot;3&quot; six bits left, or with
     (&quot;2&quot; shift three bits left&quot;) or with &quot;3&quot;.&nbsp;<br>
     <br>
     0b = binary. 0x = hex.&nbsp;<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What x86 instructions should we use?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>&nbsp;add, sub, idiv,
     imul, mov, call, push, pop, return, jump, cmp, jcc. Remember, idiv and
     imul put the result in certain registers. idiv puts the quotient in EAX,
     and the remainder in EDX. imul can sometimes put certain results in
     certain registers if you want. jccs must occur immediatley after a cmp.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What am I looking for in the intel manual? How do I
     know which opcode to use?</span></b><span style='mso-fareast-font-family:
     "Times New Roman"'>&nbsp;Look for instructions that use R32/MODRM
     requests. For example, add, use 0x3 which has the destination (left value)
     saying ADD r32, r/m32. CMP should use 3b. (CMP r32, r/m32 - the r32 should
     be the left. Do not use CMP r/m32, r32).<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How do I debug this with GDB?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> Lookup info registers,
     display /i $pc, si, x commands. Info registers gives you the values in
     registers. display /i $pc single steps x86 and si. Checkout <a
     href="http://www.delorie.com/gnu/docs/gdb/gdb_56.html">examining memory</a>
     here. Or the <a href="http://davis.lbl.gov/Manuals/GDB/gdb_9.html">overall
     using gdb</a>. GDB is painful.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What happens between a call?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> You need to save all
     the registers, perform the call, then restore them. You can do this by
     pushing all the registers onto the stack, make the call, then pop them off
     the stack again.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How do I call the print method?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> Create a C method that
     calls into printf and takes an integer. Get the address of that method,
     move it into EAX, and perform a call indirect near. 0xFF /2. The 2 here
     means the mod/rm bit for the destination register is set to 2. So: (3
     &lt;&lt; 6) | (2 &lt;&lt; 3) | EAX; (EAX here is where we stored the
     address of printInt, but you can choose any register.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How do I make debugging easier?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> Between each
     instruction you generate x86 for, you can insert a nop. The nop opcode
     does nothing. It will help you deliniate which instructions emitted what
     x86 code.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How do I resolve Phis?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> When you reach a jump instruction,
     check which block you are jumping to. If the target block has phis, get
     the phi instructions for the target block. Insert moves in your current
     block from the phi operand register to the phi instruction register.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>I'm getting a permission denied when I try to execute
     jit compiled code</span></b><span style='mso-fareast-font-family:"Times New Roman"'>&nbsp;-
     Make sure you mark the page as executable. This is&nbsp;<a
     href="http://opengroup.org/onlinepubs/007908799/xsh/mprotect.html">mprotect
     on OSX/Linux</a>&nbsp;and&nbsp;<a
     href="http://msdn.microsoft.com/en-us/library/aa366898%28VS.85%29.aspx">VirtualProtect
     on Windows</a>. Include &lt;sys/mman.h&gt; on Unix/ OSX and
     &quot;Windows.h&quot; on Windows.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What do I do for a constant int instruction?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> Constants are known as
     &quot;immediates&quot; in assembly. So look for mov r32, immi32. 0xb8 +
     rd. The +rd means 0xb8 + the destination register. So let's say you wanted
     to move the number 10 into register EBX (011 - 3). Remember, the
     Registers.h file has the registers in the order as the table of doom. So
     you need to do 0xb8 + EBX (0xb8 + 3) in one byte. Then 32 bit integer for
     the number 10:<br>
     byte1: 0xb8 + 3.<br>
     byte2 - 6 = 0x0000000A. <o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What does it mean opcode +rd? Like push/pop
     instructions?</span></b><span style='mso-fareast-font-family:"Times New Roman"'>
     The rd stands for the destination register. So if you want to push EDX,
     EDX is 010 (2), so the opcode is opcode + 2. Checkout question #11 for a
     concrete example.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How do you deal with this CDECL stuff</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>? Here is a <a
     href="http://eli.thegreenplace.net/2011/02/04/where-the-top-of-the-stack-is-on-x86/">really
     good tutorial</a> on it.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How do I generate jump offsets?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> Your jcc / jmp requires
     a 4 byte offset. This offset is from the location of the jump instruction
     TO the memory address of the jump target. So let's say your jump
     instruction exists at memory location 0x100. And you wanted to jump to
     address 0x400. You don't fill the 4 byte offset with 0x400. You have to do
     0x400 - 0x100 = 0x300.&nbsp;<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>Which jump and return instructions should we use?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> Use the jcc/jmp/ret
     NEAR instructions, not the FAR ones.&nbsp;<o:p></o:p></span></li>
</ol>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='mso-fareast-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='font-size:14.0pt;mso-fareast-font-family:"Times New Roman"'>General
C/C++:</span></b><span style='font-size:14.0pt;mso-fareast-font-family:"Times New Roman"'><o:p></o:p></span></p>

<ol start=1 type=1>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>Where do I get containers (lists, vectors, hashmaps) in
     C++?&nbsp;</span></b><span style='mso-fareast-font-family:"Times New Roman"'>You
     can roll your own by making wrappers around the vector class, or use
     the&nbsp;<a href="http://www.cplusplus.com/reference/stl/">std containers
     here</a>.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What's the syntax to cast a void* to a function
     pointer?</span></b><span style='mso-fareast-font-family:"Times New Roman"'>&nbsp;<br>
     void* compiledCode = assembler.assemble(method); // the location of jit
     compiled code<br>
     int (*fp)(); // Declare a function pointer to a method that returns an int
     and takes no parameters<br>
     fp = (int (*)())(compiledCode); // cast the void* to the function pointer<br>
     fp(); // Actually execute it<br>
     <a href="http://www.newty.de/fpt/index.html"><br>
     Heres more on C and C++ function pointers</a>.&nbsp;<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>I'm making a template class but it says the class
     doesn't exist!</span></b><span style='mso-fareast-font-family:"Times New Roman"'>&nbsp;Template
     classes must be defined in the header file, not .cpp file.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What's the order for C++ include files?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>&nbsp;.cpp Files should
     always only include other header files. .h files should NEVER include
     other header files unless they are standard files (&lt;iostream&gt;, etc).
     If you are getting a type not defined, you have to forward declare it. In
     the header file, just type &quot;class SomethingElse&quot; and have
     pointers to those structures.&nbsp;<a
     href="http://www.eventhelix.com/RealtimeMantra/HeaderFileIncludePatterns.htm">Here's
     more info</a>. Another student <a
     href="http://cplusplus.com/forum/articles/10627/">found this resource more
     helpful</a>.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What are some C string methods?</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'> strncmp, strncpy,
     strncat. You can convert a C++ string to a C string by calling the data()
     method on a C++ string.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What is a null terminated string, or how do C strings
     work (not C++ std::string)?</span></b><span style='mso-fareast-font-family:
     "Times New Roman"'> - <a href="http://www.cplusplus.com/doc/tutorial/ntcs/">Check
     this out</a>.&nbsp;<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>Why does it say a type isn't recognized</span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>! You need to forward
     declare types. When you use the type, you must use a POINTER to the type,
     not the type itself. For example, if I want to have a list of
     &lt;BasicBlock&gt; in the Method object, in the Method.h file, you have to
     have a list of BasicBlock*, NOT BasicBlock. And forward declare
     BasicBlock. Then in the Method.cpp file, you need to include basicBlock.h.<o:p></o:p></span></li>
</ol>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='mso-fareast-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span
style='font-size:14.0pt;mso-fareast-font-family:"Times New Roman"'>Uncategorized</span></b><b><span
style='mso-fareast-font-family:"Times New Roman"'>:</span></b><span
style='mso-fareast-font-family:"Times New Roman"'><o:p></o:p></span></p>

<ol start=1 type=1>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo9;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>Javap doesn't exist - </span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>Install the Java JDK,
     not the JRE.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo9;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>How do I see the bytecodes in a javac generated .class
     file (Not our .out file)</span></b><span style='mso-fareast-font-family:
     "Times New Roman"'>? javap -v TestClass<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo9;tab-stops:list .5in'><b><span style='mso-fareast-font-family:
     "Times New Roman"'>What language features do we need to support? </span></b><span
     style='mso-fareast-font-family:"Times New Roman"'>if statements, while,
     for, only local variables that are integers. Arithmetic operators (+, -,
     *, /).&nbsp;<o:p></o:p></span></li>
</ol>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='mso-fareast-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='mso-fareast-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
