<HTML><HEAD>
<TITLE>Game Programming</TITLE>
<META name="Owner" value="eppstein">
<META name="Reply-To" value="eppstein@ics.uci.edu">
</HEAD><BODY>
<IMG SRC="icslogo2.gif" WIDTH=472 HEIGHT=72 ALT=""><P>
<A HREF="index.html">
<H1>ICS 180: Strategy and board game programming</H1></A>

<H2>Project Components</H2>

Your <A HREF="project.html">course project</A> will likely include the
following components.

<P><B>Phase I</B>
<UL>
<LI><B>Board representation</B>.  This is a data structure that
represents all the information needed to store a single position in a game.
(E.g. in chess, it would include not just the position of each of the pieces,
but also a bit indicating whose turn it is, and some extra information
about whether either player can castle or capture en passant.)
You should define a concise way of inputting and outputting moves;
e.g. in chess a typical method is computer algebraic notation:
the move e2e4 means to move the piece currently on square e2 (row 2,
column e) to square e4. Your board representation code will include
code to input these codes and update the position. It should also detect
illegal move codes, and represent the position in a form convenient for
move generation and evaluation.

<LI><B>Move generation</B>.  This code should look at a board position,
and output a list of all the moves that are legal to make from that position.

<LI><B>Basic user interface</B>. A fancy graphical interface would be nice,
but I won't mark you down if you just do Unix stdio-based text input and
output.  For phase I of the projects, your user interface should
allow a sequence of moves to be input (either in the concise form
described above or using the mouse), test whether those moves are legal,
and if so output the list of possible moves available at the resulting
position.
</UL>

<P><B>Phase II</B>
<UL>
<LI><B>Evaluation function</B>. This component examines a board position,
and returns a numerical score indicating which player is likely to win.
A large positive score should mean that one player has a very good
position, a large negative score should mean that the other player has a
very good position, and a score near zero should indicate a game that's
either likely to lead to a draw or too close to decide who is likely to win.
For instance, in chess the following very simple "materialistic"
evaluation works pretty well: sum up +1 for each white pawn, +3 for each
white knight or bishop, +5 for each white rook, and +9 for each white queen.
Subtract the corresponding values for each black piece.
However in other games (e.g. Othello) counting pieces is much worse than
other more careful evaluations.

<LI><B>Search strategy</B>. Typically this will be alpha-beta or a
variant on it. We will discuss this part of the program extensively in
the course lectures.

<LI><B>Advanced user interface</B>. Add features to reset the board,
decide which side the computer is going to play, and call the search
strategy when the computer needs to make a move.
</UL>

<P><B>Phase III</B>
<UL>
<LI><B>Testing</B>. Playing many games against your computer will reveal
its strengths and weaknesses.
<LI><B>Evaluation function</B>. The more time you spend on this,
the better your computer will play. You should work on making it more
intelligent and faster.
<LI><B>Search strategy</B>. There are many sophisticated enhancements to
alpha-beta, which you can try implementing once you have the basic
search working.
<LI><B>Write final report of project accomplishments</B>.
</UL>

<HR>
<A HREF="/~eppstein/">David Eppstein,
<A HREF="/">Dept. Information & Computer Science</A>,
<A HREF="http://www.uci.edu/">UC Irvine</A>,
<!--#flastmod file="components.html" -->.
</BODY></HTML>
