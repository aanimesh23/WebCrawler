<html><head><meta http-equiv="Content-Type"content="text/html; charset=iso-8859-1"><meta name="GENERATOR" content="Microsoft FrontPage Express 2.0"><title>Alternative approaches</title></head><body bgcolor="#FFFFFF"><div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="100%"bgcolor="#0000FF">    <tr>        <td align="center" width="100%"><h1><font color="#FFFFFF"        size="5">Alternatives to Dynamic<br>        Software Architectures</font></h1>        </td>    </tr></table></center></div><p>There are a wide variety of techniques for supporting runtimesoftware change. Some of the most popular techniques are listedbelow. It should be noted, however, that designers havetraditionally sought alternatives to runtime change altogether.Several reasons account for this:</p><ol>    <li><em>It is usually avoidable</em>. Runtime change is not a        critical aspect of many software systems and several        techniques have been devised to circumvent the need for        runtime change altogether. Regularly scheduled downtimes,        functional redundancy or clustering, and manual overrides        are all examples of such techniques.</li>    <li><em>It increases risk</em>. System integrity,        reliability, and robustness are more difficult to ensure        in light of runtime change.</li>    <li><em>It increases cost</em>. There is typically a marked        performance overhead associated with supporting runtime        change. Additionally, few techniques have limited        expertise and a lack of proven techniques for supporting        runtime change exasperate engineering costs.</li></ol><h3>Programming Language Based Approaches</h3><p><a href="references.html#GJB96">[GJB96]</a> describe anapproach to modeling changes at the statement- andprocedure-level for a simple imperative programming language.</p><h3>Dynamic Programming Languages</h3><p>Many dynamic programming languages, such as Lisp, Smalltalk,and Haskel <a href="references.html#PHL97">[PHL97]</a> havesupported runtime software change for decades. </p><h3>Dynamic Linking Mechanisms</h3><p>Dynamic link libraries have been available in operatingsystems such as UNIX, Microsoft Windows, and the Apple Macintoshfor some time. New approaches to dynamic linking <ahref="references.html#Fra97">[Fra97]</a> hope to significantlyreduce the runtime performance overhead associated with usingsuch mechanisms.</p><h3>Dynamic Object Technology</h3><p>CORBA <a href="references.html#OMG96">[OMG96]</a> and COM <ahref="references.html#Broc94">[Broc94]</a> support the runtimelocations, loading, and binding of software objects orcomponents.</p><p>Also see the <ahref="http://www.acm.org/pubs/contents/journals/cacm/1997-40#5">May1997 special issue of Communications of the ACM</a>.</p><hr size="0" noshade><p>Return to the <a href="index.html">Dynamic SoftwareArchitectures home page</a>.<br>These pages are maintained by <a href="../">Peyman Oreizy</a>.Send comments via <a href="mailto:peymano at ics.uci.edu">e-mail</a>.</p></body></html>ï¿½