<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head>
<title>David Eppstein - Publications</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body bgcolor="#ffffff" text="#000000">
<h1>David Eppstein - Publications</h1>
<hr><p>
<h2>
Minimum spanning trees
</h2>
<ul>
<li><b>Maintenance of a minimum spanning forest in a dynamic plane graph</b>.<br>
D. Eppstein, 
<a href="//www.info.uniroma2.it/~italiano/">G.F. Italiano</a>, 
<a href="//www.cs.brown.edu/people/rt/home.html">R. Tamassia</a>, 
<a href="//www.cs.Princeton.EDU/~ret/">R.E. Tarjan</a>,
J. Westbrook,
and M. Yung.<br>
<a href="//portal.acm.org/citation.cfm?id=320177">
<i>1st ACM-SIAM Symp. Discrete Algorithms,</i>
San Francisco, 1990, pp. 1&ndash;11</a>.<br>
<i>J. Algorithms</i> 13 (1): 33&ndash;54, 1992
(special issue for 1st Symp. Discrete Algorithms).<br>
Corrigendum, <i>J. Algorithms</i> 15: 173, 1993.
<p>
The complement of a
<a href="mst.html">minimum spanning tree</a> is a maximum spanning tree in
the dual graph.  By applying this fact we can use a modified form of
Sleator and Tarjan's dynamic tree data structure to update the MST in
logarithmic time per update.
<p>(<a href="/~eppstein/bibs/eppstein.html#Maintenance of a minimum spanning forest in a dynamic planar graph">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Maintenance-of-a-minimum-spanning-forest-in-a-dynamic-planar-graph.html">Citations</a> --
<a href="//citeseer.ist.psu.edu/eppstein92maintenance.html">CiteSeer</a> --
<a href="//portal.acm.org/citation.cfm?id=139668">ACM DL</a>)
<p>
<li><b>Approximating the minimum weight Steiner triangulation</b>.<br>
D. Eppstein.<br>
<a href="Epp-TR-91-55.pdf">Tech. Rep. 91-55</a>, ICS, UCI, 1991.<br>
<a href="//portal.acm.org/citation.cfm?id=139415"><i>3rd ACM-SIAM Symp. Discrete Algorithms,</i> Orlando, 1992, pp. 48&ndash;57</a>.<br>
<a href="Epp-DCG-94.pdf"><i>Disc. Comp. Geom.</i> 11: 163&ndash;191, 1994</a>.
<p>
<a href="geom-qt.html">Quadtree</a> based
<a href="geom-tri.html">triangulation</a> gives a large but constant factor
<a href="geom-approx.html">approximation</a>
to the minimum weight triangulation of a point set or
convex polygon, allowing extra Steiner points to be added as vertices.
Includes proofs of several bounds on triangulation weight relative to
the <a href="mst.html">minimum spanning tree</a> or non-Steiner
triangulation, and a conjecture
that for convex polygons the only points that need to be added are on
the polygon boundary.
<p>(<a href="/~eppstein/bibs/eppstein.html#Approximating the minimum weight Steiner triangulation">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Approximating-the-minimum-weight-Steiner-triangulation.html">Citations</a> --
<a href="//citeseer.ist.psu.edu/eppstein92approximating.html">CiteSeer</a>)
<p>
<li><b>Tree-weighted neighbors and geometric <i>k</i> smallest spanning trees</b>.<br>
D. Eppstein.<br>
<a href="Epp-TR-92-77.pdf">Tech. Rep. 92-77</a>, ICS, UCI, 1992.<br>
<i>Int. J. Comp. Geom. &amp; Appl.</i> 4: 229&ndash;238, 1994.
<p>
"<a href="p-kmst.html">Finding the <i>k</i> smallest spanning trees</a>"
used higher order Voronoi diagrams to reduce the geometric
<a href="kbest.html"><i>k</i> smallest</a>
<a href="mst.html">spanning tree</a> problem to the graph problem.
Here I instead use nearest neighbors for a modified
distance function where the bottleneck shortest path length
is subtracted from the true distance between points.
The result improves the planar time bounds and extends
more easily to higher dimensions.
<p>(<a href="/~eppstein/bibs/eppstein.html#Tree-weighted neighbors and geometric $k$ smallest spanning trees">BibTeX</a> --
<a href="//citeseer.ist.psu.edu/eppstein92treeweighted.html">CiteSeer</a>)

<p>
<li><b>On the number of minimal 1-Steiner trees</b>.<br>
<a href="//cis.poly.edu/~aronov/">B. Aronov</a>,
<a href="//www.parc.xerox.com/csl/members/bern/">M. Bern</a>,
and D. Eppstein.<br>
<a href="AroBerEpp-DCG-94.pdf"><i>Disc. &amp; Comp. Geom.</i> 12: 29&ndash;34, 1994</a>.
<p>
Given a <i>d</i>-dimensional set of <i>n</i> points,
the number of combinatorially different
<a href="mst.html">minimum spanning trees</a> that can be formed
by adding one more point is within a polylogarithmic factor of
<i>n<sup>d</sup>.</i>
<p>(<a href="/~eppstein/bibs/eppstein.html#On the number of minimal 1-Steiner trees">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/On-the-number-of-minimal-1-Steiner-trees.html">Citations</a> --
<a href="//citeseer.ist.psu.edu/aronov94number.html">CiteSeer</a>)
<p>
<li><b>Dynamic Euclidean minimum spanning trees and extrema of binary functions</b>.<br>
D. Eppstein.<br>
<a href="tr.html">Tech. Rep. 92-05</a>, ICS, UCI, 1992.<br>
<a href="tr.html">Tech. Rep. 92-88</a>, ICS, UCI, 1992.<br>
<a href="Epp-DCG-95.pdf"><i>Disc. Comp. Geom.</i> 13: 111&ndash;122, 1995</a>.
<p>
Shows that bichromatic nearest neighbors can be maintained under point
insertion and deletion essentially as quickly as known solutions to the
post office problem, and that the
<a href="mst.html">minimum spanning tree</a> can be
maintained in the same time except for an additive O(sqrt <i>n</i>) needed for
solving the corresponding graph problem.
TR 92-88's title was actually "Fully dynamic maintenance of Euclidean
minimum spanning trees and maxima of decomposable functions".
TR 92-05's title left out the part about maxima; that version gave a slower
algorithm superseded by the result in 92-88.
<p>(<a href="/~eppstein/bibs/eppstein.html#Dynamic Euclidean minimum spanning trees and extrema of binary functions">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Dynamic-Euclidean-minimum-spanning-trees-and-extrema-of-binary-functions.html">Citations</a> --
<a href="/~eppstein/projects/pairs/">Closest pair project page</a> --
<a href="//citeseer.ist.psu.edu/eppstein95dynamic.html">CiteSeer</a>)
<p>
<li><b>Dynamic algorithms for half-space reporting, proximity problems, and
geometric minimum spanning trees</b>.<br>
<a href="//www.cs.duke.edu/~pankaj/">P.K. Agarwal</a>,
D. Eppstein, and
<a href="//www.ms.mff.cuni.cz/acad/kam/matousek/">J. Matou&#353;ek</a>.<br>
<a href="AgaEppMat-FOCS-92.pdf"><i>33rd IEEE Symp. Foundations of
Comp. Sci.,</i> Pittsburgh, 1992, pp. 80&ndash;89</a>.
<p>
This conference paper merged my results from
"<a href="p-dynmst.html">Dynamic Euclidean minimum
spanning trees</a>" with results of my co-authors on nearest neighbors
and halfspace range searching.
<p>(<a href="/~eppstein/bibs/eppstein.html#Dynamic algorithms for half-space reporting, proximity problems, and geometric minimum spanning trees">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Dynamic-algorithms-for-half-space-reporting-proximity-problems-and-geometric-minimum-spanning-trees.html">Citations</a>)
<p>
<li><b>Sparsification--A technique for speeding up dynamic graph algorithms</b>.<br>
D. Eppstein,
<a href="//www.scs.gatech.edu/people/zvi-galil">Z. Galil</a>, 
<a href="//www.info.uniroma2.it/~italiano/">
G.F. Italiano</a>, and A. Nissenzweig.<br>
<i>33rd IEEE Symp. Foundations of Comp. Sci.,</i> Pittsburgh, 1992, pp. 60&ndash;69.<br>
Tech. Rep. RC 19272 (83907), IBM, 1993.<br>
Tech. Rep. CS96-11, Univ. Ca' Foscari di Venezia, Oct. 1996.<br>
<a href="//doi.org/10.1145/265910.265914"><i>J. ACM</i> 44 (5): 669&ndash;696, 1997</a>.
<p>
Uses a divide and conquer on the edge set of a graph, together with the
idea of replacing subgraphs by sparser certificates, to make various
dynamic algorithms as fast on dense graphs as they are on sparse graphs.
Applications include random generation of spanning trees
as well as finding the <i>k</i>
<a href="mst.html">minimum weight spanning trees</a>
for a given parameter <i>k.</i>
<p>(<a href="/~eppstein/bibs/eppstein.html#Sparsification --- A technique for speeding up dynamic graph algorithms">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Sparsification-A-technique-for-speeding-up-dynamic-graph-algorithms.html">Citations</a> --
<a href="//theory.lcs.mit.edu/~dmjones/FOCS/References/eppsteingin1992:60.html">MIT hypertext bibliography</a> --
<a href="//portal.acm.org/citation.cfm?id=265914">ACM DL</a>)
<p>
<li><b>Improved sparsification</b>.<br>
D. Eppstein,
<a href="//www.scs.gatech.edu/people/zvi-galil">Z. Galil</a>, and 
<a href="//www.info.uniroma2.it/~italiano/">
G.F. Italiano</a>.<br>
<a href="EppGalIta-TR-93-20.pdf">Tech. Rep. 93-20</a>, ICS, UCI, 1993.
<p>
Saves a log factor over dynamic graph algorithms in
"<a href="p-sparsification.html">Sparsification</a>"
and their applications, by dividing vertices instead of edges.
Merged into the journal version of "Sparsification".
<p>(<a href="/~eppstein/bibs/eppstein.html#Improved sparsification">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Improved-sparsification.html">Citations</a> --
<a href="//citeseer.ist.psu.edu/eppstein93improved.html">CiteSeer</a>)
<p>
<li><b>Separator based sparsification for dynamic planar graph algorithms</b>.<br>
D. Eppstein,
<a href="//www.scs.gatech.edu/people/zvi-galil">Z. Galil</a>, 
<a href="//www.info.uniroma2.it/~italiano/">
G.F. Italiano</a>, and T. Spencer.<br>
<a href="//portal.acm.org/citation.cfm?id=167159"><i>25th ACM Symp. Theory of Computing,</i> San Diego, 1993, pp. 208&ndash;217.</a>
<p>
Replaces portions of a hierarchical separator decomposition with smaller
certificates to achieve fast update times for various dynamic planar graph problems.  Applications include finding the <i>k</i>
<a href="mst.html">best spanning trees</a> of a planar graph.
<p>
(<a href="/~eppstein/bibs/eppstein.html#Separator based sparsification for dynamic planar graph algorithms">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Separator-based-sparsification-for-dynamic-planar-graph-algorithms.html">Citations</a> --
<a href="//theory.lcs.mit.edu/~dmjones/STOC/References/eppsteingis1993:208.html">MIT hypertext bibliography</a>)
<p>
<li><b>Separator based sparsification I:
planarity testing and minimum spanning trees</b>.<br>
D. Eppstein,
<a href="//www.scs.gatech.edu/people/zvi-galil">Z. Galil</a>, 
<a href="//www.info.uniroma2.it/~italiano/">
G.F. Italiano</a>, and T. Spencer.<br>
<a href="//doi.org/10.1006/jcss.1996.0002">
<i>J. Comp. Sys. Sci.</i> 52: 3&ndash;27, 1996
(special issue for 25th STOC)</a>.
<p>
First half of journal version of
<a href="p-egis.html">Separator based sparsification for dynamic planar graph algorithms</a>.
<p>
(<a href="//fano.ics.uci.edu/cites/Document/Separator-based-sparsification-I-planarity-testing-and-minimum-spanning-trees.html">Citations</a> --
<a href="//portal.acm.org/citation.cfm?id=227486">ACM DL</a>)
<p>
<li><b>Average case analysis of dynamic geometric optimization</b>.<br>
D. Eppstein.<br>
<a href="Epp-TR-93-18.pdf">Tech. Rep. 93-18</a>, ICS, UCI, 1993.<br>
<a href="//portal.acm.org/citation.cfm?id=314481">
<i>5th ACM-SIAM Symp. Discrete Algorithms,</i> Arlington, 1994, pp. 77&ndash;86</a>.<br>
<a href="//doi.org/10.1016/0925-7721(95)00018-6">
<i>Comp. Geom. Theory &amp; Applications</i> 6: 45&ndash;68, 1996</a>.
<p>
The Tech. Report used the more informative title
"Updating widths and maximum spanning trees using the rotating caliper graph",
which I also used for the journal submission,
but the referees made me change it back.
Dynamic geometry in a model of Mulmuley and Schwarzkopf in which insertions
and deletions are chosen randomly among a worst-case pool of points.
This paper introduces several fundamental techniques
including the <a href="/~eppstein/junkyard/rcg.html">rotating caliper
graph</a> of a point set and a method for performing
decomposible range queries in the average case setting.
It has also since inspired the use of a similar model in dynamic graph
algorithms.
<p>(<a href="/~eppstein/bibs/eppstein.html#Average case analysis of dynamic geometric optimization">BibTeX</a> --
<a href="Epp-SODA-94-dyngeom.pdf">SODA paper</a> --
<a href="Epp-CGTA-96.pdf">Full paper</a> --
<a href="//fano.ics.uci.edu/cites/Document/Average-case-analysis-of-dynamic-geometric-optimization.html">Citations</a> --
<a href="//citeseer.ist.psu.edu/eppstein96average.html">CiteSeer</a> --
<a href="//portal.acm.org/citation.cfm?id=228291">ACM DL</a>)
<p>
<li><b>Faster circle packing with application to nonobtuse triangulation</b>.<br>
D. Eppstein.<br>
<a href="Epp-TR-94-33.pdf">Tech. Rep. 94-33</a>, ICS, UCI 1994.<br>
<i>Int. J. Comp. Geom. &amp; Appl.</i> 7 (5): 485&ndash;491, 1997.
<p>
Speeds up a triangulation algorithm of Bern et al.
["<a href="//www.nas.nasa.gov/Pubs/TechReports/RNRreports/jruppert/RNR-94-003/RNR-94-003.html">Linear-Size
Nonobtuse Triangulation of Polygons</a>"] by finding a
collection of disjoint circles
which connect up the holes in a non-simple polygon.
The method is to use a
<a href="mst.html">minimum spanning tree</a> to find a collection of
overlapping circles, then shrink them one by one to reduce the number of
overlaps, using Sleator and
Tarjan's dynamic tree data structure to keep track of the
connectivity of the shrunken circles.
<p>(<a href="/~eppstein/bibs/eppstein.html#Faster circle packing with application to nonobtuse triangulation">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Faster-circle-packing-with-application-to-nonobtuse-triangulation.html">Citations</a>)
<p>
<li><b>Worst-case bounds for subadditive geometric graphs</b>.<br>
<a href="//www.parc.xerox.com/csl/members/bern/">M. Bern</a>
and D. Eppstein.<br>
<a href="//portal.acm.org/citation.cfm?id=161018"><i>9th ACM Symp. Comp. Geom.,</i> San Diego, 1993, pp. 183&ndash;188.</a>
<p>
For many geometric graph problems for points in the unit square,
such as <a href="mst.html">minimum spanning trees</a>,
<a href="graph-match.html">matching</a>, and
<a href="tsp.html">traveling salesmen</a>,
the sum of edge lengths is O(sqrt <i>n</i>) and the sum of
<i>d</i>th powers of edge lengths is O(log <i>n</i>).
We provide a "gap theorem" showing that if these bounds do not hold
for a class of graphs, both sums will instead be Omega(<i>n</i>).
For traveling salesmen the O(log <i>n</i>) bound is tight
but for some other graphs the sum of
<i>d</i>th powers of edge lengths is O(1).
<p>(<a href="/~eppstein/bibs/eppstein.html#Worst-case bounds for subadditive geometric graphs">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Worst-case-bounds-for-subadditive-geometric-graphs.html">Citations</a> --
<a href="BerEpp-SCG-93.pdf">Preprint of SCG version</a> --
<a href="//citeseer.ist.psu.edu/bern93worstcase.html">CiteSeer</a>)
<p>
<li><b>Geometric lower bounds for parametric matroid optimization</b>.<br>
D. Eppstein.<br>
<a href="tr.html">Tech. Rep. 95-11</a>, ICS, UCI, 1995.<br>
<a href="//portal.acm.org/citation.cfm?id=225284"><i>27th ACM Symp. Theory of Computing,</i> Las Vegas, 1995, pp. 662&ndash;671</a>.<br>
<a href="Epp-DCG-98.pdf"><i>Disc. Comp. Geom.</i> 20: 463&ndash;476, 1998</a>.
<p>
Considers graphs in which edge weights are linear functions of time.
Shows nonlinear lower bounds on the number of different
<a href="mst.html">minimum spanning trees</a> appearing
over time by translation from geometric problem of lower envelopes of line segments.
A matroid generalization has a better lower bound coming from many faces
in line arrangements, and the uniform matroid problem is
equivalent to the geometric <i>k</i>-set problem.
<p>(<a href="/~eppstein/bibs/eppstein.html#Geometric lower bounds for parametric matroid optimization">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Geometric-lower-bounds-for-parametric-matroid-optimization.html">Citations</a> --
<a href="//citeseer.ist.psu.edu/eppstein98geometric.html">CiteSeer</a> --
<a href="//theory.lcs.mit.edu/~dmjones/STOC/References/eppstein1995:662.html">MIT hypertext bibliography</a>)
<p>
<li><b>Faster geometric <i>k</i>-point MST approximation</b>.<br>
D. Eppstein.<br>
<a href="Epp-TR-95-13.pdf">Tech. Rep. 95-13</a>, ICS, UCI, 1995.<br>
<i>Comp. Geom. Theory &amp; Applications</i> 8: 231&ndash;240, 1997.
<p>
Various authors have looked at a variant of geometric clustering
in which one must select <i>k</i> points that can be connected by a
small
<a href="mst.html">spanning tree</a>.  The problem is NP-complete (for
variable <i>k</i>);
good approximations are known based on dynamic programming techniques
but the time dependence on <i>n</i> is high.  This paper describes
a faster approximation algorithm based on dynamic programming in
quadtrees, and a general technique
based on that in "<a href="p-inn.html">Iterated nearest neighbors</a>"
for reducing the dependence
on <i>n</i> in any approximation algorithm.
<p>(<a href="/~eppstein/bibs/eppstein.html#Faster geometric $k$-point MST approximation">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Faster-geometric-k-point-MST-approximation.html">Citations</a> --
<a href="//citeseer.ist.psu.edu/eppstein95faster.html">CiteSeer</a> --
<a href="//portal.acm.org/citation.cfm?id=264740">ACM DL</a>)
<p>
<li><b>Representing all minimum spanning trees with applications to
counting and generation</b>.<br>
D. Eppstein.<br>
<a href="Epp-TR-95-50.pdf">Tech. Rep. 95-50</a>, ICS, UCI, 1995.
<p>
Shows how to find for any edge weighted graph G an equivalent
graph EG such that the <a href="mst.html">minimum spanning trees</a>
of G correspond one-for-one with the spanning trees of EG.
The equivalent graph can be
constructed in time O(m+n log n) given a single minimum spanning tree of
G.  As a consequence one can find fast algorithms for counting, listing,
and randomly generating MSTs.
Also discusses similar
equivalent graph constructions for
<a href="graph-path.html">shortest paths</a>, minimum cost flows,
and <a href="graph-match.html">bipartite matching</a>.
<p>(<a href="/~eppstein/bibs/eppstein.html#Representing all minimum spanning trees with applications to counting and generation">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Representing-all-minimum-spanning-trees-with-applications-to-counting-and-generation.html">Citations</a>)
<p>
<li><b>Using sparsification for parametric minimum spanning tree problems</b>.<br>
<a href="//www.cs.iastate.edu/~fernande/">
D. Fern&aacute;ndez-Baca</a>,
<a href="//www.cs.iastate.edu/faculty/slutzki.html">
G. Slutzki</a>, and D. Eppstein.<br>
<a href="FerSluEpp-SWAT-96.ps.gz"><i>5th Scand. Worksh. Algorithm Theory,</i> Reykjavik, 1996</a>.<br>
Springer, <i>Lecture Notes in
Comp. Sci.</i> 1097, 1996, pp. 149&ndash;160.<br>
<a href="FerSluEpp-NJC-96.pdf"><i>Nordic J. Computing</i>
3 (4): 352&ndash;366, 1996 (special issue for 5th SWAT).</a>
<p>
Given a graph with edge weights that are linear functions of a parameter,
finds the sequence of
<a href="mst.html">minimum spanning trees</a> produced as the parameter varies,
in total time O(mn log n), by combining ideas
from "<a href="p-sparsification.html">Sparsification</a>"
and "<a href="p-geomlb.html">Geometric lower bounds</a>".
Also solves various problems of optimizing the parameter value,
including one closely related to that in
"<a href="p-maxwtavg.html">Choosing subsets with maximum weighted average</a>".
<p>(<a href="/~eppstein/bibs/eppstein.html#Using sparsification for parametric minimum spanning tree problems">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Using-sparsification-for-parametric-minimum-spanning-tree-problems.html">Citations</a> --
<a href="//www.cs.helsinki.fi/njc/References/fernandez-bacase1996:352.html">MIT hypertext bibliography</a> --
<a href="//portal.acm.org/citation.cfm?id=672282">ACM DL (SWAT)</a> --
<a href="//portal.acm.org/citation.cfm?id=763883">ACM DL (NJC)</a>)
<p>
<li><b>On the parity of graph spanning tree numbers</b>.<br>
D. Eppstein.<br>
<a href="Epp-TR-96-14.pdf">Tech. Rep. 96-14</a>, ICS, UCI, 1996.
<p>
Any bipartite Eulerian graph, any Eulerian graph with evenly many vertices,
and any bipartite graph with evenly many vertices and edges, has an even
number of
<a href="mst.html">spanning trees</a>.
More generally, a graph has evenly many spanning trees if and only if it
has an Eulerian edge cut.
<p>(<a href="/~eppstein/bibs/eppstein.html#On the parity of graph spanning tree numbers">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/On-the-parity-of-graph-spanning-tree-numbers.html">Citations</a> --
<a href="//citeseer.ist.psu.edu/eppstein96parity.html">CiteSeer</a>)
<p>
<li><b>Parametric and kinetic minimum spanning trees</b>.<br>
<a href="//www.cs.duke.edu/~pankaj/">P. K. Agarwal</a>,
D. Eppstein,
<a href="//robotics.stanford.edu/users/guibas/bio.html">L. J. Guibas</a>,
and
<a href="//www.henzinger.com/monika/">M. R. Henzinger</a>.<br>
<a href="AgaEppGui-FOCS-98.pdf">
<i>39th IEEE Symp. Foundations of Comp. Sci.</i>, 1998, pp. 596&ndash;605.</a>.
<p>
We describe algorithms for maintaining the
<a href="mst.html">minimum spanning tree</a> in a graph
in which the edge weights are piecewise linear functions of time that
may change unpredictably.  We solve the problem in time
O(n<sup>2/3</sup> polylog n)
per combinatorial change to the tree for general graphs, and in time
O(n<sup>1/4</sup> polylog n) per combinatorial change to the tree for planar graphs.
<p>(<a href="/~eppstein/bibs/eppstein.html#Parametric and kinetic minimum spanning trees">BibTeX</a> --
<a href="AgaEppGui-FOCS-98-slides.pdf">FOCS '98 talk slides</a> --
<a href="//fano.ics.uci.edu/cites/Document/Parametric-and-kinetic-minimum-spanning-trees.html">Citations</a> --
<a href="//citeseer.ist.psu.edu/agarwal98parametric.html">CiteSeer</a> --
<a href="//portal.acm.org/citation.cfm?id=796402">ACM DL</a>)
<p>
<li><b>Setting parameters by example</b>.<br>
D. Eppstein.<br>
<a href="//arXiv.org/abs/cs.DS/9907001">arXiv:cs.DS/9907001</a>.<br>
<a href="//www.computer.org/proceedings/focs/0409/04090309abs.htm"><i>40th
IEEE Symp. Foundations of Comp. Sci.</i>, 1999, pp. 309&ndash;318</a>.<br>
<a href="//doi.org/10.1137/S0097539700370084">
<i>SIAM J. Computing</i> 32 (3): 643&ndash;653, 2003</a>.
<p>
We introduce a class of "inverse parametric optimization"
problems, in which one is given both a parametric optimization problem
and a desired optimal solution; the task is to determine parameter
values that lead to the given solution.  We use
<a href="geom-lp.html">low-dimensional linear programming</a>
and geometric sampling techniques to solve
such problems for
<a href="mst.html">minimum spanning trees</a>,
<a href="graph-path.html">shortest paths</a>, and
other optimal subgraph problems, and discuss applications in
multicast routing, vehicle path planning, resource allocation, and board
game programming.
<p>(<a href="/~eppstein/bibs/eppstein.html#Setting parameters by
example">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Setting-parameters-by-example.html">Citations</a> --
<a href="//portal.acm.org/citation.cfm?id=796502">ACM DL (FOCS)</a> --
<a href="//portal.acm.org/citation.cfm?id=639091">ACM DL (SJC)</a>)
<p>
<li><b>Testing bipartiteness of geometric intersection graphs</b>.<br>
D. Eppstein.<br>
<a href="//arxiv.org/abs/cs.CG/0307023">arXiv:cs.CG/0307023</a>.<br>
<i>15th ACM-SIAM Symp. Discrete Algorithms,</i>
New Orleans, 2004, pp. 853&ndash;861.<br>
<a href="//doi.org/10.1145/1497290.1497291"><i>ACM Trans. Algorithms</i> 5(2):15, 2009</a>.
<p>
We consider problems of partitioning sets of geometric objects into two
subsets, such that no two objects within the same subset intersect each
other.  Typically, such problems can be solved in quadratic time by
constructing the intersection graph and then applying a graph
bipartiteness testing algorithm; we achieve subquadratic times for
general objects, and O(n log n) times for balls in R^d or simple
polygons in the plane, by using geometric data structures, separator
based divide and conquer, and plane sweep techniques, respectively.
We also contrast the complexity of bipartiteness testing with that of
connectivity testing, and provide evidence that for some classes of
object, connectivity is strictly harder due to a computational
equivalence with Euclidean
<a href="mst.html">minimum spanning trees</a>.
<p>
(<a href="//www.ics.uci.edu/~eppstein/bibs/eppstein.html#Testing bipartiteness of geometric intersection graphs">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Testing-bipartiteness-of-geometric-intersection-graphs.html">Citations</a> --
<a href="Epp-SODA-04-tbgig.pdf">SODA talk slides</a>)
<p>
</ul>

<hr><p>
<a href="/~eppstein/pubs/">Publications</a> --
<a href="/~eppstein/">David Eppstein</a> --
<a href="/~theory/">Theory Group</a> --
<a href="/">Inf. &amp; Comp. Sci.</a> --
<a href="//www.uci.edu/">UC Irvine</a>
<p>
<small>Semi-automatically <a href="filter.html">filtered</a>
from a common source file.</small>
</body></html>
