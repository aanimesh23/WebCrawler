<HTML>
<HEAD><TITLE> AVL and Splay Trees </TITLE></HEAD>
<BODY>

<H2>Dynamic Binary Search Trees</H2>

<H3>Rotations</H3>

Rotating right or left in a binary search tree is illustrated below.
Note that the tree maintains its characteristics as a binary search tree.
<pre>

     y       rotate (xy) R        x
    / \            ====>         / \
   x   3                        1   y
  / \        rotate (xy) L         / \
 1   2             <====          2   3


            DOUBLE ROTATE (xyz) L
    x        1. rotate (yz) R   
     \       2. rotate (xz) L       z
      y          =======>          / \
     /                            x   y
    z       DOUBLE ROTATE (xzy) R
             1. rotate (xz) R        
             2. rotate (yz) L   
                 <=======
</pre>

<H3>AVL Trees (height-balanced trees) </H3>

An AVL (Adelson-Velskii, Landis) tree is a binary search tree
in which the heights of the right and left subtrees of each node
differ by at most 1.
<P>
The height of a leaf (no children) is defined to be 0.&nbsp;
The height of an empty tree (no nodes) is defined to be -1.
<P>
It can be shown by induction that the height, <I>H</I>, of an AVL tree with <I>n</I> nodes
satisfies &nbsp;lg(<I>n</I>+1)-1 <U>&lt;</U> <I>H</I> <U>&lt;</U> 1.44&nbsp;lg(<I>n</I>+2)-1.
<P>
The <I>balance factor</I> of a node is defined to be
Height(RightSubtree) - Height(LeftSubtree).&nbsp;
Thus, in an AVL tree, the balance factor of each node will be
in {-1,&nbsp;0,&nbsp;+1}.
<P>
Insertion into an AVL tree may change change the balance factors of
some nodes on the path from the inserted node to the root.&nbsp;
Any balance factor will change by at most 1 and the resulting
value might become illegal (i.e., -2 or +2).&nbsp;
After determining the deepest node that is "illegal",
one single or one double rotation suffices to fix up the entire tree.&nbsp;
<a href="avl.html">Details</a>.
<P>
Deletion from an AVL tree is handled similarly,
but <I>O</I>(lg&nbsp;<I>n</I>) rotations may be required.

<H3>Weight-balanced Trees</H3>

Instead of height, weight (number of nodes) is balanced.&nbsp;
Balance can be maintained using rotations in a similar manner.

<H3>Splay Trees</H3>

A splay tree is a binary search tree with no explicit balance condition,
in which a special operation called a <I>splay</I> is done after each
search or insertion operation.&nbsp;  Splaying at node <I>x</I> causes
node <I>x</I> to become the root of the binary search tree through
a specific series of <I>rotations</I> as follows.
<P>
Three cases:
<P>
<OL>
<LI> <I>x</I> has no grandparent (<I>zig</I>)
   <UL>
   <LI> If <I>x</I> is left child of root <I>y</I>, then rotate (<I>xy</I>)R.
   <LI> Else if <I>x</I> is right child of root <I>y</I>, then rotate (<I>yx</I>)L.
   </UL>
   <P>
<LI> <I>x</I> is LL or RR grandchild (<I>zig-zig</I>)
   <UL>
   <LI> If <I>x</I> is left child of <I>y</I>, and <I>y</I> is left child of <I>z</I>,
   <BR> then rotate at grandfather (<I>yz</I>)R and then rotate at father (<I>xy</I>)R.
   <LI> Else if <I>x</I> is right child of <I>y</I>, and <I>y</I> is right child of <I>z</I>,
   <BR> then rotate at grandfather (<I>yz</I>)L and then rotate at father (<I>xy</I>)L.
   </UL>
   If <I>x</I> has not become the root, then continue splaying at <I>x</I>.
   <P>
<LI> <I>x</I> is LR or RL grandchild (<I>zig-zag</I>)
   <UL>
   <LI> If <I>x</I> is right child of <I>y</I>, and <I>y</I> is left child of <I>z</I>,
   <BR> then rotate at father (<I>yx</I>)L and then rotate at grandfather (<I>xz</I>)R.
   <LI> Else if <I>x</I> is left child of <I>y</I>, and <I>y</I> is right child of <I>z</I>,
   <BR> then rotate at father (<I>yx</I>)R and then rotate at grandfather (<I>xz</I>)L.
   </UL>
   If <I>x</I> has not become the root, then continue splaying at <I>x</I>.
</OL>

<HR>
</BODY></HTML>
