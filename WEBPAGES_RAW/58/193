<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- Page automatically generated from latex_to_html converter. -->
<!-- by cc_extract_html, $Revision: 3.19 $ -->
<!-- LaTeX source file: './Optimisation_ref/spec_oops.tex' -->
<html> <head>  
<title>min_rectangle_2</title>
</head>  
<link href="../latex_to_html.css" rel="STYLESHEET">
<body bgcolor="white">
<!-- ------------------------------------------------------------------- -->


<!-- Top Navigation ---------------------------------------------------- -->
<div class="NavTop">
<hr>
  <strong>Navigation:</strong>
<a href="Chapter_intro.html">Up</a>, 
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<hr><!-- End of Top Navigation ----------------------------------------- -->
</div>


<A NAME="Cross_link_anchor_1148"></A>

<A NAME="Cross_link_anchor_1149"></A>

      
     
     
     
<A NAME="Index_anchor_1107"></A> 

   
<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC="cc_Function.gif"></TD></TR></TABLE>


    <A NAME="ccRef_CGAL::min_rectangle_2"></A>
<h2><I>CGAL::min_rectangle_2</I></h2>


  
   
     
     
<A NAME="Index_anchor_1108"></A> 

   

  
   
     
     
<A NAME="Index_anchor_1109"></A>
<P>

<H3>Definition</H3>The function computes a minimum <A HREF="../Kernel_23_ref/Function_area.html#Cross_link_anchor_159">area</A> enclosing rectangle
  <MATH><I>R(P)</I></MATH> of a given convex point set <MATH><I>P</I></MATH>. Note that <MATH><I>R(P)</I></MATH> is not
  necessarily axis-<A HREF="../Kernel_23_ref/Function_parallel.html#Cross_link_anchor_249">parallel</A>, and it is in general not unique. The focus
  on convex sets is no restriction, since any rectangle enclosing <MATH><I>P</I></MATH>
  - as a convex set - contains the convex hull of <MATH><I>P</I></MATH>. For general
  point sets one has to compute the convex hull as a preprocessing step.
<P>

<I>#include &lt;<A HREF="../../../include/CGAL/min_quadrilateral_2.h">CGAL/min_quadrilateral_2.h</A>&gt;</I>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    template &lt; class ForwardIterator, class OutputIterator, class Traits &gt;
        </I></NOBR>
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_OutputIterator_min_rectangle_26_ForwardIterator_points_begin+_ForwardIterator_points_end+_OutputIterator_o+_Traits__t_=_Default_traits9;"></A>
OutputIterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP COLSPAN=2><I>
    <A HREF="Function_min_rectangle_2.html#Cross_link_anchor_1149">min_rectangle_2</A> ( </I></TD></TR><TR><TD WIDTH=50 NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    ForwardIterator points_begin,<BR>

ForwardIterator points_end,<BR>

OutputIterator o,<BR>

Traits&amp; t = Default_traits)</I></TD></TR></TABLE>
    
        </I></NOBR>
        
    
        </TR>
        </TABLE>
<P>

computes a minimum <A HREF="../Kernel_23_ref/Function_area.html#Cross_link_anchor_159">area</A> enclosing rectangle of the point set described
  by [<I>points_begin</I>, <I>points_end</I>), writes its vertices
  (counterclockwise) to <I>o</I>, and returns the past-the-end iterator
  of this sequence.<BR>

If the input range is empty, <I>o</I> remains unchanged.<BR>

If the input range consists of one element only, this point is written
  to <I>o</I> four times.
<P>

<BR>

<EM>Precondition: </EM>The points denoted by the range [<I>points_begin</I>,
  <I>points_end</I>) form the boundary of a simple convex polygon <MATH><I>P</I></MATH>
  in counterclockwise <A HREF="../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247">orientation</A>.
<P>

The geometric types and operations to be used for the computation are
  specified by the traits class parameter <I>t</I>. The parameter can be
  omitted, if <I>ForwardIterator</I> refers to a two-dimensional point
  type from one the C<SMALL>GAL</SMALL> Kernels. In this case, a default traits class
  (<I><A HREF="Class_Min_quadrilateral_default_traits_2.html#Cross_link_anchor_1155">Min_quadrilateral_default_traits_2</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;</I>) is used.
<P>

<BR>

<EM>Requirement: </EM><OL>
  <LI>If <I>Traits</I> is specified, it is a model for
    <I><A HREF="Concept_MinQuadrilateralTraits_2.html#Cross_link_anchor_1156">MinQuadrilateralTraits_2</A></I> and the value type <I>VT</I> of
    <I>ForwardIterator</I> is <I>Traits::<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A></I>. Otherwise <I>VT</I>
    is <I><A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_51">CGAL::Point_2</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;</I> for some kernel <I><A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A></I>.
  <LI><I>OutputIterator</I> accepts <I>VT</I> as value type.
  </OL>
<P>

<H3>See Also</H3><I><A HREF="Function_min_parallelogram_2.html#Cross_link_anchor_1150">CGAL::min_parallelogram_2</A></I><BR>

<I><A HREF="Function_min_strip_2.html#Cross_link_anchor_1152">CGAL::min_strip_2</A></I><BR>

<I><A HREF="Concept_MinQuadrilateralTraits_2.html#Cross_link_anchor_1156">MinQuadrilateralTraits_2</A></I><BR>

<I><A HREF="Class_Min_quadrilateral_default_traits_2.html#Cross_link_anchor_1154">CGAL::Min_quadrilateral_default_traits_2</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;</I>
<P>

<H3>Implementation</H3>We use a rotating caliper
  
<A NAME="Index_anchor_1110"></A> 
 algorithm&nbsp;[<A HREF="../biblio.html#Biblio_t-sgprc-83">Tou83</A>]
  with worst case running time linear in the number of input points.
<P>

<H3>Example</H3>The following code generates a random convex polygon
  <I>P</I> with 20 vertices and computes the minimum enclosing
  rectangle of <I>P</I>.
<P>

<pre class="ExampleCode">#include &lt;CGAL/<A HREF="../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6">Cartesian</A>.h&gt;
#include &lt;CGAL/<A HREF="../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672">Polygon_2</A>.h&gt;
#include &lt;CGAL/point_generators_2.h&gt;
#include &lt;CGAL/<A HREF="../Generator_ref/Function_random_convex_set_2.html#Cross_link_anchor_1684">random_convex_set_2</A>.h&gt;
#include &lt;CGAL/min_quadrilateral_2.h&gt;
#include &lt;iostream&gt;

struct <A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A> : public <A HREF="../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5">CGAL::Cartesian</A>&lt;double&gt; {};

typedef <A HREF="../Kernel_23_ref/Concept_Kernel--Point_2.html#Cross_link_anchor_459">Kernel::Point_2</A>                           <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>;
typedef <A HREF="../Kernel_23_ref/Concept_Kernel--Line_2.html#Cross_link_anchor_450">Kernel::Line_2</A>                            <A HREF="../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50">Line_2</A>;
typedef <A HREF="../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_671">CGAL::Polygon_2</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;                   <A HREF="../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672">Polygon_2</A>;
typedef <A HREF="../Generator_ref/Class_Random_points_in_square_2.html#Cross_link_anchor_1699">CGAL::Random_points_in_square_2</A>&lt;<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&gt;  Generator;

int main()
{
  // build a random convex 20-gon p
  <A HREF="../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672">Polygon_2</A> p;
  <A HREF="../Generator_ref/Function_random_convex_set_2.html#Cross_link_anchor_1683">CGAL::random_convex_set_2</A>(20, std::back_inserter(p), Generator(1.0));
  std::cout &lt;&lt; p &lt;&lt; std::endl;

  // compute the minimal enclosing rectangle p_m of p
  <A HREF="../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672">Polygon_2</A> p_m;
  <A HREF="Function_min_rectangle_2.html#Cross_link_anchor_1148">CGAL::min_rectangle_2</A>(
    p.vertices_begin(), p.vertices_end(), std::back_inserter(p_m));
  std::cout &lt;&lt; p_m &lt;&lt; std::endl;

  return 0;
} 
</pre>
<P>

<div class="NavNext"><hr> <b>Next:</b> <a href="Function_min_parallelogram_2.html"><I>min_parallelogram_2</I></a> 


    
<div class="NavBottom">
<hr><!-- Bottom Navigation --------------------------------------------- -->
  <strong>Navigation:</strong>
<!Up_chapter_link_52!>
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<!-- End of Bottom Navigation ------------------------------------------ -->


<hr><!-- --------------------------------------------------------------- -->
<div class="NavAddress">

The <A HREF=http://www.cgal.org>CGAL Project</A> .

Tue, December 21, 2004 .
<hr></div>
</body>  </html>  
