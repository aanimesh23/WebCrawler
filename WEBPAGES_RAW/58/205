<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="author" content="Vijay Krishna Palepu" />
  <link rel="shortcut icon" href="http://www.ics.uci.edu/~vpalepu/images/favicon.gif" />
  <title>Lets Make an Exception</title>
  
  <!-- <link rel="stylesheet" href="http://www.ics.uci.edu/~vpalepu/css/bootstrap.min.css" type="text/css" /> -->
  <!-- <link rel="stylesheet" href="http://www.ics.uci.edu/~vpalepu/css/bootstrap-theme.min.css" type="text/css" /> -->
  <link rel="stylesheet" href="http://www.ics.uci.edu/~vpalepu/css/screen.css" type="text/css" />
  <!-- syntax highlighting CSS -->
  <link rel="stylesheet" href="http://www.ics.uci.edu/~vpalepu/css/syntax.css" type="text/css" />
  <link href='http://fonts.googleapis.com/css?family=Andada' rel='stylesheet' type='text/css'>
  <!-- <link rel="stylesheet" href="http://www.ics.uci.edu/~vpalepu/css/pygments.css" type="text/css" > -->
</head>
<body >   
  <!-- <img id="hover1" class="pos" src="http://www.ics.uci.edu/~vpalepu/images/brain.png"> -->
  <div class="container">

    <div class="plain stretch">
      
      <span class="regular">
        
          <a href="http://www.ics.uci.edu/~vpalepu/research.html" style="margin:20px;margin-left:0">Research</a>
        

        
          <a href="http://www.ics.uci.edu/~vpalepu/projects.html" style="margin:20px">Projects</a>
        
        
        
          <a href="http://www.ics.uci.edu/~vpalepu/news.html" style="margin:20px">News</a>
        

        
          <a href="http://www.ics.uci.edu/~vpalepu/blog.html" style="margin:20px">Notes</a>
        

        
          <a href="http://www.ics.uci.edu/~vpalepu/cv.html" style="margin:20px">CV</a>
        
      </span>
      <!-- <hr class="thinblue" /> -->
      <br>
    </div>

    <div class="plain stretch" style="padding-bottom:5px">  
      
        <span class="huge">
          <a href="http://www.ics.uci.edu/~vpalepu/index.html" class="icon-home"></a> /
          
            <a href="http://www.ics.uci.edu/~vpalepu/blog.html">Notes</a> / Lets Make an Exception
          
        </span>
                 

    </div>

<!--     <div class="plain stretch" >
      <span class="huge"> 
      
        Vijay Krishna <a href="http://www.ics.uci.edu/~vpalepu/index.html"><b>Palepu</b></a>
      
        
      </span>
      <small>
        vpalepu [at] uci [dot] edu &bull;
        5243 Bren Hall,
        <a href="http://www.spideruci.org" target="_blank">Spider Lab</a>,
        <a href="http://www.uci.edu/" target="_blank">University of California, Irvine</a>, CA 92697-3440

      </small>      

      



    

    
      
        <hr class="thinblue" />

        
          <a href="http://www.ics.uci.edu/~vpalepu/research.html" style="margin:20px;margin-left:0">Research</a>
        

        
          <a href="http://www.ics.uci.edu/~vpalepu/projects.html" style="margin:20px">Projects</a>
        
        
        
          <a href="http://www.ics.uci.edu/~vpalepu/news.html" style="margin:20px">News</a>
        

        
          <a href="http://www.ics.uci.edu/~vpalepu/blog.html" style="margin:20px">Notes</a>
        

        <a href="http://www.ics.uci.edu/~vpalepu/cv.html" style="margin:20px">CV</a>
            
    

    </div> -->
    
    <title>Lets Make an Exception</title>
<div class="plain stretch">
<!-- <p>
	
    <a href="http://www.ics.uci.edu/~vpalepu/index.html" class="icon-home"></a> /  
		<a href="http://www.ics.uci.edu/~vpalepu/blog.html">Notes</a> /
    Lets Make an Exception
		<br/> 
	
</p> -->

<div id="post"> 
  <span class="tags">
    Date: 16 Oct 2010
  </span>
  
  <p>Just out of college, a computer engineer, a thinker. Wanted to write some real code. Did write it. Took my 1st snippet of code on to a live production environment. It ran well. Phew!!! No issues there. And then i got my first ever app to write. You know, the one with the user interface. That is when i had my tryst with the end user, the customer, the purpose and the fool.</p>

<p>It was running smoothly! Flawless was the word. Then all the weird cases start to crop up. Things you would have never imagined, would stare you in the eye and say, “I dare you to get past me.” That is when you realize that the 1st step to writing good production code is being exceptionally good at Exceptional Handling. There is no point in calling yourself a good coder if you can not even think of the assumptions and errors the end user will make while running your application all by himself and then blame it all on you for not handling things so very trivial. I would like to trade places with him and then watch the fun. But, the customer is always right, primarily because he is paying me good money to write the code. So, i might as well take the blame, or not, by writing good code.</p>

<p>So here are a few pointers i got over this last one week’s experience at work on exceptions and their handling:</p>

<h3 id="beware-of-the-null">Beware of the Null:</h3>
<p>Now many people have this issue. And one has to be careful of this monstrous void which comes back to plague us time and time again. Understand the distinction between null and zero. Think of null as an empty bowl. (The bowl being the variable) It contains nothing. Can a chef make soup if he was given just the empty container? I don’t think so. He will ask you to pour at least water in it, so that he can begin his cooking, right? Similarly, even a function or method in a program will want you to fill the variable argument with something more than null, even if it is a zero.</p>

<p>Make up your own custom values which mean null to you, but not to the program. For numerics a 0 or -1 serve very well to that end. The same is taken care of by zero length strings(“”) and characters(‘’) when it comes to textual data. Remember they are not null. They do have some value.</p>

<p>In summary, a NULL is the absence of a value. They might be useful at some places, however, most functions cannot use them. So take care of those variable values before passing them as arguments to functions. If you feel that the user might just forget to enter the value for any field, then make it mandatory for him to fill it. If you cannot do that and you think that there is a chance, even a small one, that one of the inputs is going to be null, convert it to a Zero or an Empty String with a simple ternary operator:</p>

<div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">int</span> <span class="n">userAge</span> <span class="p">=</span> <span class="n">getUserAge</span><span class="p">()</span> <span class="p">==</span> <span class="k">null</span><span class="p">?</span> <span class="m">0</span> <span class="p">:</span> <span class="n">getUserAge</span><span class="p">();</span> <span class="c1">//getUserAge() returns an int</span>
<span class="kt">string</span> <span class="n">userAddress</span> <span class="p">=</span> <span class="n">getUserAddress</span><span class="p">()</span> <span class="p">==</span> <span class="k">null</span> <span class="p">?</span> <span class="s">&quot;&quot;</span> <span class="p">:</span> <span class="n">getUserAddress</span><span class="p">();</span> <span class="c1">//getUserAddress() returns a string</span></code></pre></div>

<p>Trust me half your bugs will be sorted out this way. Mind you even an Empty string or a Zero might create issues. It all depends on the logic of your code. So the best thing to do is to take care of these cases while thinking of the logic of the program itself.</p>

<h3 id="understand-the-theory-of-the-datetime-continuum">Understand the theory of the DateTime Continuum:</h3>
<p>This is another area of programing which most fall prey to. Understand this and you will have a better command on the pockets of your customer. The reason is simple, time is money. It becomes really important for you to understand the nuances of international time conversions, especially if your customer is on the other side of the planet. In a difference of a single second the date changes, and your users are left wondering as to how the weekend disappeared, the season changed and the financial year ended. Nonetheless, like most complicated problems this too has a simple solution: Coordinated Universal Time or popularly known as the UTC, Universal Time Coordinated. Keep this as the reference. It will solve most of your problems. You cannot keep everyone happy. Do not try to. Show and deal with time in UTC and you will realize that life is much more simpler. There are many functions and utilities in the modern programming languages that take care of these issues. DateTime.UTCNow() is one such popular example from C#.</p>

<p>That was one dimension of the continum. :D. There is another aspect which needs care. The Date Format. The whole conflict between MMddyyyy and ddMMyyyy is a real mess. With client side technologies like Silverlight (atleast this is one place where i faced such an issue) which renders a lot of code on the users’ machine, it is important to clearly specify the DateTime format in your code. Imagine January 12th on your machine will become 1st December for end user or vice versa. It leaves the user wondering if you created a time machine which can easily port you through the ages, talk about expectations!</p>

<h3 id="respect-the-decimal">Respect the Decimal:</h3>
<p>This is the ultimate nemesis for any programmer. STOP ROUNDING OFF FRACTIONS!!! Look, it is really that simple. You can be in your safe zone by working with integers. But, if you really care about the meals you eat at night, show some patience towards float and double. They are there for a reason. I used to curse the engineers of the Math Co-processor(8087) back in my third year days when i had to make complicated floating point programs in assembly language classes. But today, when i see how particular people are about saving the last cent of their hard earned money, and rightly so, i respect the efforts that went into the 8087.</p>

<p>Do not use int when you are dealing with money, weight, scientific calculations or anything dealing with fractions. 
Do not round off fractional values until you have to show it on the UI, this keeps the precision alive all the way till the end. 
Do not type cast to int unless you really really must. 
Let the user decide the kind of precision he wants, till then keep it very precise.
Learn a little of percentages and ratios, it will make life simpler when you make complicated programs including money and profits.</p>

<h3 id="try-catching-them-at-the-eod">Try Catching them at the e.o.d.:</h3>
<p>You are not brilliant. Accept that fact. You cannot preempt and handle every single bug that your code will face. There is no shame in that. That is the reason why exceptional handling is such an integral part of programming languages these days. It is a good practice to have an issue tracker in place. Spawn those try..catch blocks everywhere in your code. And log all those exceptions in CSVs or text files. Review and handle them everyday. This is the ultimate line of defense against exceptions.</p>

<p>In conclusion, all i have to say is this: preempt as much as possible when you think of the logic of an application. Try and tackle those foreseeable bugs in your logic. Handle the rest while you code. Do not stop thinking of them while you write your code. Tweak the logic at places if required, while maintaining the essence. And log all the exceptions you encounter while running the code. Be fearless about those bugs. Face them! They are nothing but trivial pests waiting to be squashed.</p>
 
</div>

<div style="margin-bottom: 10px">
	<br>
	<b class="label">Tags:</b>
	
		<span class="tags">exception-handling</span>
		
	
</div>
</div>

<div class="plain stretch">
  <h2>Related Posts</h2>
  <ul class="posts">
    
      <li><span>07 Oct 2015</span> &raquo; <a href="http://www.ics.uci.edu/~vpalepu/index.html">Spider SENSE: Software-Engineering, Networked, System Evaluation</a></li>
    
      <li><span>07 Oct 2015</span> &raquo; <a href="http://www.ics.uci.edu/~vpalepu/index.html">Revealing Runtime Features and Constituent Behaviors within Software</a></li>
    
      <li><span>01 Oct 2015</span> &raquo; <a href="http://www.ics.uci.edu/~vpalepu/2015/10/01/Attended-VISSOFT-2015.html">Attended VISSOFT 2015</a></li>
    
  </ul>
</div>

    <div class="plain stretch" style="background:rgba(255, 255, 255, 0.85)">  
      <small>
        <a href="http://www.ics.uci.edu/~vpalepu/index.html">home</a> &bull;
        <a href="https://bitbucket.com/vpalepu"><b>bitbucket</b>.com</a> &bull;
        <a href="http://www.linkedin.com/in/palepuvijaykrishna" target="_blank">Linked<b>in</b></a> &bull;
        <a href="http://instagram.com/vpalepu" target="_blank">Instagram</a> &bull;
        <a href="https://medium.com/@vkrishnapalepu" target="_blank">medium</a> &bull;
        <a href="http://stackoverflow.com/users/1481262/vijay">stack<b>overflow</b></a> &bull;
        <a href="https://github.com/VijayKrishna"><b>github</b>.com</a>  &bull;
        <a href="http://www.ics.uci.edu/~vpalepu/archives.html"><b>arch</b>ives</a>
        &bull;
        Background: <a href="http://www.ics.uci.edu/~vpalepu/images/mt-rainier.JPG" target="_blank">Mt. Ranier</a>, © Vijay Krishna Palepu, 2015
        <!-- Background Photo Credit: <a href="http://sudhapalepu.wordpress.com/" target="_blank">Sudha Palepu</a> -->
      </small>
    </div>    
  </div>
  </div> <!-- end of main -->
  <!-- <div class="header"></div> -->
</body>
</html>
