---------------------------------------------------------------------
 RACCOON: A Peer-Based System for Data Integration and Sharing 
      The RACCOON Project, http://www.ics.uci.edu/~raccoon/
                Release v 2.0
                November 29, 2004

Copyright (c) 2004 by Database Group
Department of Computer Science 
University of California, Irvine
Irvine, CA 92697
  
   o Sharad Mehrotra  (Faculty)
   o Nalini Venkatasubramanian (Faculty)
   o Chris Davison (Technology Manager)
   o Qi Zhong (Ph.D. Student)
   o Vidhya Balasubramanian (Ph.D. Student) 
   o Daniel Massaguer (Ph.D. Student) 
   o Earth Chandrruangphen (Ph.D. Student) 
   o Thomas Chen (Undergraduate Student)
   
   University of California, Irvine

   This project is generously supported by the National Science Foundation under  Award Numbers 0331707 and  0331690

   Please send technical questions about this release to simulator@ics.uci.edu .
---------------------------------------------------------------------

This software was created by members of the RESCUE (RESponding to Crisis and Unexpected Events) projects at University of California at 
Irvine and is distributed free of charge. It is placed in the public
domain and permission is granted for anyone to use, duplicate, modify
and redistribute it provided this notice is attached.
  
There is absolutely NO WARRANTY OF ANY KIND with respect to this
software; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT WILL ANY PARTY BE LIABLE
TO ANYONE FOR ANY DAMAGES ARISING OUT OF THE USE OF THIS SOFTWARE,
INCLUDING, WITHOUT LIMITATION, DAMAGES RESULTING FROM LOST DATA OR
LOST PROFITS, OR FOR ANY SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES.

The package complies to the GNU copyright terms at
http://www.gnu.org/copyleft/gpl.html. We include a copy of the terms
in gpl.txt in this distribution package. It also complies to the
copyright terms of University of California, Irvine.
  
The information in this software is subject to change without notice
and should not be construed as a commitment by any employees of the
Database Group or any other employee of University of California.
---------------------------------------------------------------------


- Introduction

 The roles of IT solutions are closely related to crisis response 
 process. When an unexpected event happens, the response is an 
 interrelated set of activities that play out in the same space and 
 time. For each activity, there are a set of decisions, which are made 
 based on variety of criterion, such as damage assessment, etc. 
 Therefore, information is the driver for the decisions and the more 
 accurate and timely the information, the more successful the response.
 The role of the IT solutions we are developing is to get the relevant 
 information accurately and quickly to the decision makers. Currently we
 are mainly focus on the following four fields: 1) information 
 collection; 2) information analysis; 3) information sharing; 4) 
 information dissemination.
 
 At the micro level, the simulator simulates agents corresponding to 
 humans. Agents could either be controlled by computer programs or 
 alternatively by human participants. To certain extend, a simulator, 
 which is simulating the response activity at the mixture of micro and 
 macro level, is similar to immersive environments. As in computer games
 where players are immersed in the virtual environment, human 
 participants are also immersed in the simulation in a similar way. We
 refer to such agents as human agents. Human agents could participate 
 along multiple roles. They may play the role of being victims, or first
 responders, response planners, or commanders.  The purpose for human 
 controlled agents is to allow for dynamic calibration of the simulation
 

- Platform Requirements:

  Any Java-compatible environment with a Java 2 SDK.  (We tested the code on Java(TM) 2 Runtime Environment, Standard Edition, version "1.4.1_01".)

- Installation

 1. Download the source code from http://www.ics.uci.edu/~projects/drillsim.
 There are three executable files available and they are for running on Windows, Unix and Mac respectively.

 2. Run the source code.

 3. Select default for all questions during the installation.

 For an example, on a Windows environment:

 1. Download Simeva_windows_1_0.exe from http://www.ics.uci.edu/~projects/drillsim.
 
 2, Double click the downloaded .exe file
 
 3, Choose default options for all questions asked during the installation.
 
- Contents

  In the home folder of the installed software, there are 4 sub-folders:
  
  + (HOME)
    + Simeva_windows__20050329.exe (The executable file)
    + uninstall.exe (The uninstall file)
    + readme.txt (The instruction file)
    + error.log (The log of errors happened during installation)
  +---- class/  (Java Byte Code )
  +---- example_map/ (Example map files)
  +---- lib/ (Java Library)
  +---- src/ (Java Source Code)
 
- Used Libraries:

 o JADE : Java Agent Development Environment
 
For the latest information about the Raccoon Project, visit its home page:

  http://www.ics.uci.edu/~raccoon
  
- How to use the simulator:

1, find a floor map in GIF format (e.g. "map_original.gif" in our "example_map" folder)

2, convert the map into the right size so that it can be displayed nicely in the computer screen. 
(E.g. "map.gif" in the "example_map" folder)

3, covert the map into some text reperesentation

3.1 convert map into the right size. In our simulator, a 80x60(pixel) image will be represented as a 80x60 matrix. 
o A very large matrix will certainly researve more information of the original map, but it is computational expensive.
o A small matrix will make the simulator run faster, but it may lose information from the original map. 
o In our test, a 100x100 matrix is considered reasonable. (e.g. "map_tiny.gif" in "example_map" folder).

3.2 edit it the map using graphics tool (Photoshop, MS paint)
o accessible regions are represented using white color
o inaccessible regions are represented using non-white color, e.g. black, gray, etc


3.3 use class/test/simeva/Viewer.class to convert background image into a text file
For an example, if the map is called "map_tiny.gif", we can convert it using the following commands:

o on Windows/Unix environment (at home folder of the installation):
Java test.simeva.Viewer map_tiny.gif
The output will be automatically written to a file called "map_tiny.gif.txt"

3.4 put easy/tough/assembly area in text file
o Open the txt representation file, you will find that accessible regions are presented as '0's and inaccessible regions are presented as '1's. 
o We also have other legends.   
  - Normal Accessible Region (0)
  - Blocked Region (1)  
  - Easy Region (2)  
  - Assembly Area (3). In our current version, only one assembly area is allowed. If multuple areas are defined, when the file is read into the simulator, the later one will overwrite the previous ones.

o User can alter the map representation freely.

4, Run the simulator by executing the executable file in the installed software.

4.1 before you press start, you have to choose the map to load. For an example, "map.gif".
o Please note that, due to some not yet known reasons, you need to change the size of the simulator window frame after loading a map. 

4.2 after loading the map, you can change the map at real time
o select the type of region you want to add by clicking "Build Map -> Easy/Tough/Very Tough"
o Clicking 

4.3 set an assembly area if it is not yet defined 

4.4 picking parameters, such as agent number

4.5 start the simulator by clicking "simulate->start"

4.6 suspend/resume/terminate while running the simulator

4.7 After the simulator is terminated, either manually (click the terminate botton) or automatically (no agent in the building), goto step 4.1 if you want.

- To-do list for a later version:

1, make path computation multi-thread safe
2, real-time decision making
3, multiple assembly area
4, load initial scenario (location of people) from a file
5, add a different role, such as floor warden
6, add multiple floor simulation, i.e. when an agent exit floor 2, he is added to floor 1. 
The entire simulation ends when all agents exit the ground floors.
  

Enjoy.


Last updated: March 30, 2005.