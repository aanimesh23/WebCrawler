<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1">
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay">
<META HTTP-EQUIV="UPDATED" CONTENT="Saturday, January 18, 2003 11:01 AM">
<TITLE>Third Homework</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="D7FCEB3E">
<META HTTP-EQUIV=KEYWORDS CONTENT="CS 2, CS2, assignment, performance measurement">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="An assignment involving measuring and analyzing the performance of alternative search algorithms for ICS H22, an honors second-quarter course in computer science in Information and Computer Science, UC Irvine.">
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2000, 2003 by David G. Kay.  All rights reserved.">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<A NAME="_top"></A>
<P>
<IMG SRC="Third_Homework_files/Sidebar_123.gif" WIDTH=575 HEIGHT=77>
<BR>
<FONT FACE="AGaramond" SIZE=4> &#160; <A NAME="_14_26"></A></FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>We&#39;re all back together this week; everyone
will do the same thing.  This assignment is due on Friday, January 24. </FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(a)</B> In Chapter 3 of the Goodrich and
Tamassia book, do these problems: </FONT></P>
<UL>
<LI>
<FONT FACE="AGaramond" SIZE=4>R-3.8.  Unless you have already completed
this by hand, use a spreadsheet to help with the calculations; Excel is
available on the machines in the lab.  Every computer scientist should have
some spreadsheet experience, so take this opportunity.</FONT></LI>
<BR><BR>
<LI>
<FONT FACE="AGaramond" SIZE=4>C-3.1.  A sentence or two is all that&#39;s
required here; numerical examples or pictures are also welcome.</FONT></LI>
<BR><BR>
<LI>
<FONT FACE="AGaramond" SIZE=4>P-3.1.  Treat the linear-log scale as extra
credit.  Also for some extra credit, plot your results as a chart in Excel
(which does allow log scales if you poke around the various options).</FONT></LI>
</UL>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(b)</B>  Look at Alex Thornton&#39;s Project
#1 from ICS 22, available on the web at </FONT><FONT FACE="Courier New"><A HREF="http://www.ics.uci.edu/~thornton/ics22/LabManual/Money/">http://www.ics.uci.edu/~thornton/ics22/LabManual/Money/</A></FONT><FONT FACE="AGaramond" SIZE=4>
. </FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(b.1)</B>  Code the problem as specified.
 The coding here should be pretty easy, but pay particular attention to
the discussion about testing and to designing and carrying out a thorough
test plan.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(b.2)  </B>Change the program to handle
dollars and cents rather than just integer dollars.  As the write-up points
out, this is tricky because floating-point numbers (floats and doubles in
Java) aren&#39;t exact (think of 1/3 or 2/7) and that inexactness can be
compounded in repeated calculations.  </FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>The right way to handle this is to treat each
balance as an integer number of cents.  You then have two problems:  How
to print the quantities with a decimal point and two digits to the right,
and how to let the user specify dollar-and-cents quantities.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>For the output, you&#39;ll want to write a
method called </FONT><FONT FACE="Courier New">toCurrencyString</FONT><FONT FACE="AGaramond" SIZE=4>
that takes an integer and returns a string including a decimal point, so
that </FONT><FONT FACE="Courier New">toCurrencyString(12345)</FONT><FONT FACE="AGaramond" SIZE=4>
would return </FONT><FONT FACE="Courier New">&quot;123.45&quot;</FONT><FONT FACE="AGaramond" SIZE=4>.
 The algorithm for this isn&#39;t hard if you use both division and the
mod (remainder) operator (</FONT><FONT FACE="Courier New">%</FONT><FONT FACE="AGaramond" SIZE=4>--so
that </FONT><FONT FACE="Courier New">12345 % 100</FONT><FONT FACE="AGaramond" SIZE=4>
is </FONT><FONT FACE="Courier New">45</FONT><FONT FACE="AGaramond" SIZE=4>)
to extract the dollars, dimes and cents.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>For the input, you may do it the easy but
clumsy way:  Prompt the user separately for the dollars and for the cents,
combining them in your program.  For a little extra credit, parse the input
string containing a decimal point.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Redraft (and re-apply) your test plan to include
tests of dollars-and-cents amounts (thinking carefully about what those
amounts can look like).</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(b.3)</B>  For some extra credit, try one
or more of these:</FONT></P>
<UL>
<LI>
<FONT FACE="AGaramond" SIZE=4>Allow each person to have a collection of
accounts (creating an AccountCollection class that you could implement as
an array, or even as a linked list).  You&#39;d probably want to give each
account a number and think about what interface changes you&#39;d need.</FONT></LI>
<BR><BR>
<LI>
<FONT FACE="AGaramond" SIZE=4>Have (at least) two subclasses of accounts,
Checking and Savings; each class could have a different associated interest
rate (that applies to every account of that class, not one for each instance),
and allow each person&#39;s account collection to include any combination
of accounts.  (A clever thing to do would be to use a static field in the
Account class so that every new account, of whatever type, gets a unique
account number.)</FONT></LI>
<BR><BR>
<LI>
<FONT FACE="AGaramond" SIZE=4>The &quot;Additional Challenges&quot; listed
in Alex Thornton&#39;s write-up.</FONT></LI>
</UL>
<BR>
<P>
<FONT FACE="AGaramond" SIZE=4><B>What to turn in:</B>  </FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>For part <B>(a)</B>, paste all your answers
into a single Word document and submit it via Checkmate.  (If you&#39;d
prefer another format besides Word, let us know and we&#39;ll see about
alternate arrangements.  Likewise, if you already completed this part before
reading about the Excel requirement, you may turn in a paper version in
class on Tuesday.)</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>For part <B>(b)</B>, turn in via Checkmate
a Word document containing your test plan and a Java file for each class
from part <B>(b.2)</B>.  As indicated by Checkmate, turn in the main, required
part separately from any enhanced, extra credit version from <B>(b.3)</B>.
</FONT></P>
<BR>
<P>
<FONT FACE="Helvetica" SIZE=1>Written by David G. Kay, Winter 2003 to build
on &quot;Money (That&#39;s What I Want),&quot; an ICS 22 lab by Alex Thornton.</FONT></P>
<BR CLEAR=ALL>
<P>
</P>
<HR>
<P>
<address>
<FONT FACE="Palatino"><A HREF="http://www.ics.uci.edu/~kay/">David G. Kay</A>,
<I>406B Computer Science
<BR>
</I><A HREF="http://www.uci.edu/">University of California, Irvine</A>
<BR>
</FONT><FONT FACE="AGaramond">Irvine, CA  92697-3425</FONT><FONT FACE="Palatino">
 --  </FONT><FONT FACE="AGaramond"><B>(949) 824-5072</B></FONT><FONT FACE="Palatino">
 --  Fax </FONT><FONT FACE="AGaramond"><B>(949) 824-4056</B></FONT><FONT FACE="Palatino">
 --  Email  <a href=mailto:kay@uci.edu>
</FONT><FONT FACE="Courier"><TT><A HREF="mailto:kay@uci.edu">kay@uci.edu</A></a>
<BR>
</address>
</TT></FONT></P>
<P>
<FONT FACE="Palatino" SIZE=1>Saturday, January 18, 2003 -- 11:01 AM</FONT></P>
</BODY>
</HTML>
