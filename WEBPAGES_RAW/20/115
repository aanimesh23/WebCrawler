<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1" />
<META HTTP-EQUIV="UPDATED" CONTENT="Tuesday, November 22, 2005 9:30 AM" />
<TITLE>ICS 31 Lab 9</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="33CB8976" />
<META HTTP-EQUIV="DESCRIPTION" CONTENT="Homework Assignments for Informatics 41, the Informatics Core Course, using How to Design Programs by Felleisen, Findler, Flatt, and Krishnamurthi and Fluency by Snyder, at UC Irvine." />
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved." />
<link href="http://www.ics.uci.edu/~kay/courses/31/mainstyle.css" rel="stylesheet" type="text/css" />
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<p><FONT size="2"  >ICS 31 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2016</FONT></p>
<p><FONT   SIZE=6><B>Lab Assignment 9 </B></FONT>
</p>
<P>This assignment is due <font  >by 10:00 p.m.</font> on Wednesday, November 30.
This  will be our last lab assignment this quarter. Having it due Wednesday of the tenth week will give you a couple of extra days after that to go back and review what you need for the final.</P>
<P>&nbsp;</P>
<P><font  ><strong>Preparation</strong></font> (Do this part individually):
<!-- <P><font  ><strong>(Zyante readers) </strong></font>Read sections 6.5–6.7, and 2.11.</P> -->
Read sections 6.1, 6.2, and 6.4, doing the practice problems as you go (but you can skip problem 6.10).</P>
<p>&nbsp;</p>
<p><font  ><strong>Lab Work</strong></font> (Do this part with your partner in lab)</p>
<p><strong>(a)</strong> Choose a partner for this assignment and register your partnership using the <a href="http://ics31-partner-app.appspot.com/">partner app</a>, ideally by Monday. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only on this assignment. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab.</p>
<!--
<p>You should choose a partner whose Thanksgiving schedule is compatible with yours; if you won't be here for lab on the day before Thanksgiving, pick someone who's able to work with you for a few extra out-of-lab hours before then. If you can't meet in person, collaborate on line using Skype or Google Hangouts or some other tool.</p> -->
<p>But <em>do not</em> engage in any of the following practices; they are not acceptable and may result in reduced scores or worse: (i) working solo (this lab, like all labs in this course, is a pair programming assignment); (ii) splitting the lab with your partner (&quot;You do (c), I'll do (d) and (e)&quot; and just pasting the the parts together and turning them in—this is not pair programming and both partners won't learn the concepts (which of course may show up on exams or in later courses); (iii) working with someone other than your official partner. Parts (ii) and (iii) could land you in academic honesty trouble, too: If you don't participate in the development of everything you turn in, you don't know whether your partner might have gotten code from an illegitimate source, and since you're responsible for code submitted by your partner, you could get into hot water for what your partner did. Too many people landed in trouble just this way in last winter's class. You and your official partner should collaborate on your own joint work. If collaborating means you don't get quite as far as you might have gotten by one of these other impermissible strategies, your score will still be higher than if you're detected doing something impermissible.</p>
<p><strong>(b)</strong> Prepare your <code>lab9.py</code> file as in previous labs, including a line like this: </p>
<pre>
#  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab asst 9.
</pre>

<p><strong>(c)</strong> Suppose a class  takes a multiple-choice test. We're going to experiment with alternative scoring mechanisms. For this problem you'll want to  say <code>from random import *</code> (and use the methods  <code>randrange</code> and  <code>choice</code>, which you can look up in the text or using  <code>help(random)</code>.)</p>
<p>Let's say you have these three global constants defined (a complete program might determine these values from reading a file; we're just doing it this way for convenience):</p>
<pre><code>NUMBER_OF_STUDENTS = 200
NUMBER_OF_QUESTIONS = 20
NUMBER_OF_CHOICES = 4  # 3 choices is A/B/C, 4 choices is A/B/C/D, 5 is A/B/C/D/E</code>
</pre>
<p><strong>(c.1)</strong> Write a function called <code>generate_answers</code> that generates and returns a string of letters representing the correct answers to the test. (Of course answers to real tests aren't chosen randomly! We're just doing it this way to produce some test data to use when we score students' answers.) The length of the string should be the number of questions; each character in the string should be chosen randomly from the first <em>n</em> letters of the alphabet (where <em>n</em> is the number of choices). [Use the <code>choice()</code> method.]</p>
<p>Call <code>generate_answers</code> to generate the answers we'll use; assign the result to another global constant called <code>ANSWERS</code>.</p>
<p><strong>(c.2) </strong>Ideally, we'd read  the students and their exam answers from a file. But to save you some time, we'll skip the file-reading part and just generate a random list of students and their answers. To start with, let's say that each student is represented by a string for the student's name or ID and a string representing the student's answers to each question. [Are you thinking of a namedtuple with two fields? You should be.]</p>
<pre><code>Student = namedtuple('Student', 'name answers')
s1 = Student('Jones, Jane', 'ABCCDAABAABCBBCACCAD')
</code><code>s2 = Student('Smith, Sam',  'BADACCABADCCABDDCBAB')</code>
</pre>
<p>Write the function  <code>random_students</code> that uses the global constants above to generate and return a list of Student namedtuples. The size of the list is the number of students. The names can be randomly generated as you did in an earlier lab or, to save time, you can just generate a random ID number using <code>randrange()</code>. The string representing the student's answers should be generated precisely the same way as you generated the correct answers (so don't duplicate any code!).</p>
<p><strong>(c.3)</strong> Modify the <code>Student</code> namedtuple to add two fields, one containing a list of scores on each question (1 if the student's answer matches the correct answer and 0 otherwise) and the other a number representing the sum of the list of question scores:</p>
<pre><code>Student = namedtuple('Student', 'name answers scores total')
s1 = Student('Jones, Jane', 'ABCCDAABAABCBBCACCAD', [1, 0, 1, 1, 1, 0, ...], 10)
</code><code>s2 = Student('Smith, Sam',  'BADACCABADCCABDDCBAB', [0, 1, 0, 0, 0, 1, ...], 5)</code></pre>
<p>Then modify your   <code>random_students</code> function to generate these student records with scores.</p>
<p>Generate your list of random students and then sort it by total, highest total to lowest, and print the top 10 students' names. (You can print them all; we're just trying to save paper and screen space here.) Also print the mean (average) score for all the students.</p>
<p><strong>(c.4) </strong>This previous part used a conventional way to score multiple-choice exams. But you should expect the scores on this exam to be lower than on a typical exam: On a typical exam, students on the average are likelier to choose the correct answers than the wrong ones, but we generated our data completely at random. So let's think about how to generate more realistically distributed random data.</p>
<p>We chose each student's answer to each question above by choosing randomly from (let's say) A, B, C, and D. If the correct answer is C, we can bias the selection towards C by choosing randomly from A, B, C, D, and C—adding another copy of the correct answer to the possible choices will increase the likelihood that a random choice from that group will be the correct answer. A group of A, B, C, D, C, and C should produce the correct answer about half the time, since half the choices in the group are correct. So every time we generate a student's answer to a question, we can add to the group of answer choices a few extra copies of the correct answer—let's say between 0 and twice the number of choices, so that with four choices we'd add from 0 to 8 copies of the correct choice—and choose the student's answer randomly from that enhanced group of answer choices.</p>
<p>We can do this by defining a function called   <code>generate_weighted_student_answer</code> that takes a string (one character, the correct answer) and returns a string (one character, the student answer chosen randomly from the enhanced group of alternatives as described above). Write a new function called   <code>random_students2</code> that's based on your   <code>random_students</code> function but that generates each student's answer to each question by calling <code>generate_weighted_student_answer</code>.</p>
<p>Generate a new list of students using <code>random_students2</code> and then sort it, highest total to lowest, and print the top 10 students' names. Also print the mean (average) score; it should be higher than in part (c.3).</p>
<p><strong>(c.5)</strong> An unconventional way to score this exam would be to assign different weights to different questions. The instructor might assign those weights in advance, based on his or her judgement of which questions are harder or more important. But an even more unconventional way to assign the weights would be to derive them from the students' answers: The questions that were harder (i.e., that fewer people answered correctly) are worth more points than the easier ones.</p>
<p>One way to implement this would be to assign a number of points to each problem, that number being equal to the number of students who missed the problem. Write a function called <code>question_weights</code> that takes a list of Student records and returns a list of numbers, one number for each question on the test, where each number is the number of students who answered that question incorrectly. [Hint: It's helpful to attack complex data structures layer by layer. Try writing code that counts the number of wrong answers to a single question; then apply that in turn to all the questions.] Create another global constant that consists of the results of calling <code>question_weights</code> on your list of students from part (c.4).</p>
<p>Then write a function called<code> Student_weighted_score</code> that takes a Student record and the list of question weights and returns that Student record with its total field changed to reflect that student's score based on his or her correct answers and the corresponding question weights. Then apply <code> Student_weighted_score</code> to each student on your list of students from part (c.4). Finally, sort the result, highest total to lowest, and print the top 10 students' names along with the mean (average) score for all the students.</p>
<p><strong>(d)</strong> Do these Python exercises:
<!-- Replacement for Exercise 6.12

Solution:
def calculate_GPA(list_of_grades: list) -> float:
	GPA = 0
	for grade in list_of_grades:
		if grade == 'A':
			GPA += 4
		elif grade == 'B':
			GPA += 3
		elif grade == 'C':
			GPA += 2
		elif grade == 'D':
			GPA += 1
		elif grade == 'F':
			GPA += 0
	return GPA / len(list_of_grades)

def calculate_GPA2(list_of_grades: list) -> float:
	GPA = 0
	weights = {'A': 4, 'B': 3, 'C': 2, 'D': 1, 'F': 0}
	for grade in list_of_grades:
		GPA += weights[grade]
	return GPA / len(list_of_grades)
-->

<p><strong>(d.1a)</strong> Implement the function <code>calculate_GPA</code> that takes as input a list of strings representing letter grades and returns the grade point average (out of 4 with A=4, B=3, C=2, D=1, and F=0) computed from the list. Assume there are no plus or minus grades.

<p><strong>(d.1b) </strong>Implement a new function <code>calculate_GPA2</code> that also computes a GPA from a list of grades.  But where you (probably) used a series of if-statements the first time, this time you should use a dictionary (and no if-statements).  Your dictionary should map each letter grade to the number of grade points it's worth, including plus and minus grades that are 0.3 points above and below the base letter grade.
</p>

<code>
<pre>
assert calculate_GPA(['A', 'C', 'A', 'B', 'A', 'F', 'D']) == 2.5714285714285716
assert calculate_GPA2(['A', 'C', 'A', 'B', 'A', 'F', 'D']) == 2.5714285714285716</pre></code>


<!-- Replacement for Exercise 6.13
Exercise is on dictionaries so I am replacing it with a two-dimensional
list exercise
Solution:
def flatten_2D_list(two_d: list) -> list:
	answer = []
	for row in two_d:
		for entry in row:
			answer.append(entry)
	return answer
-->

<p><strong>(d.2)</strong> Implement the function <code>flatten_2D_list</code> that takes as input a two-dimensional table (a list containing lists) and returns the input as a single list containing, in order, all the elements on the original nested list.
</p>

<code>
<pre>
assert flatten_2D_list([[1, 3, 2], [3, 5, 1], [7, 5, 1], [3, 2], [9, 4]]) == 
	[1, 3, 2, 3, 5, 1, 7, 5, 1, 3, 2, 9, 4]</pre></code>


<!-- Replacement for Exercise 6.15
def skip_every_third_entry(lst: list) -> None:
	counter = 0
	for entry in lst:
		if counter == 2:
			counter = 0 # reset counter
			continue
		print(entry)
		counter += 1
-->

<p><strong>(d.3a)</strong> Implement the function <code>skip_every_third_item</code> that takes as input a list and prints out each item on the list, except that it skips every third item (so it prints L[0] and L[1], skips L[2], prints L[3] and L[4], skips L[5], and so on).
</p>

<code>
<pre>
>>> L = ['If', 'you', '432234', 'did', 'the', '9834234', 'exercise', 'correctly', '534523423', 
		 'this', 'should', '1044323', 'be', 'readable']
>>> skip_every_third_item(L)
If
you
did
the
exercise
correctly
this
should
be
readable.</pre></code>


<p><strong>(d.3b)</strong> Now write <code>skip_every_nth_item</code> that takes as input a list and an int (call it n) and prints out each item on the list, except that it skips every nth item. Thus a call to <code>skip_every_nth_item(L, 3)</code> would produce the same result as <code>skip_every_third_item(L)</code>.
</p>

<!-- Misc replacements on concepts on dictionaries
Solutions:

def extract_days_worked(days_worked: list) -> dict:
	employee_dict = {}
	for employee in days_worked:
		if employee not in employee_dict.keys(): # check if employee is already in dictionary
		
	employee_dict[employee] = 0 # initialize employee's day's worked
		employee_dict[employee] += 1
	return employee_dict

def pay_employees(wages: dict, days_worked: dict) -> None:
	for employee in days_worked.keys():
		hours_worked = 8 * days_worked[employee]
		hourly_wage = wages[employee]
		pay = hours_worked * hourly_wage
		print('Employee {} will be paid ${:.2f} for {} hours of work at the rate of ${:.2f} dollars per hour.'.format(employee, pay, hours_worked, hourly_wage))
-->
<p><strong>(d.4)</strong> We are writing an application to process a company's weekly payroll.  Every time an employee "clocks out" (leaves after a day's work), the employee's name is added to a list.  Thus, at the end of a week, the name of an employee who worked five days will appear five times in this list.</p>

<p><strong>(d.4a)</strong> Implement the function <code>tally_days_worked</code> that takes as input the list described above and returns a dictionary where every key is a name of an employee and the value is the number of days that employee worked in the given week, according to the list. (Do this by processing the list, item by item; don't use the <code>count()</code> method.) You may use the following list for testing your code; remember that the order of items in a dictionary is unpredictable:</p>
<code>
<pre>
work_week = ['Bob', 'Jane', 'Kyle', 'Larry', 'Brenda', 'Samantha', 'Bob', 
             'Kyle', 'Larry', 'Jane', 'Samantha', 'Jane', 'Jane', 'Kyle', 
             'Larry', 'Brenda', 'Samantha']

>>> workers = tally_days_worked(work_week)
>>> workers
{'Kyle': 3, 'Larry': 3, 'Bob': 2, 'Brenda': 2, 'Samantha': 3, 'Jane': 4}</pre>
</code>
<p><strong>(d.4b)</strong> 
We can determine how much each employee earned this week if we start with: (i) the dictionary produced by <code>tally_days_worked()</code>, (ii) an assumption that each employee who works, works an 8-hour day [we could relax this assumption by collecting clock-in and clock-out times for each employee each day, but we'll skip that for now], and (iii) a dictionary giving each employee's hourly rate: 
<code>hourly_wages = {'Kyle': 13.50, 'Brenda': 8.50, 'Jane': 15.50, 'Bob': 30.00, 'Samantha': 8.50, 'Larry': 8.50, 'Huey': 18.00}</code></p>

<p>Implement the function <code>pay_employees</code> that takes as input the two dictionaries described above and prints out how much each employee will be paid, in the format shown below. </p>
<code>
<pre>
>>> pay_employees(workers, hourly_wages)
Kyle will be paid $324.00 for 24 hours of work at $13.50 per hour.
Brenda will be paid $136.00 for 16 hours of work at $8.50 per hour.
Larry will be paid $204.00 for 24 hours of work at $8.50 per hour.
Bob will be paid $480.00 for 16 hours of work at $30.00 per hour.
Samantha will be paid $204.00 for 24 hours of work at $8.50 per hour.
Jane will be paid $496.00 for 32 hours of work at $15.50 per hour.</pre></code>

<!-- 
Solution:
def reverse_dict(a_dict: dict) -> dict:
	answer = {}
	for key, value in a_dict.items():
		answer[value] = key
	return answer

	# alternative solution
def reverse_dict(a_dict: dict) -> dict:
	return {value: key for key, value in a_dict.items()}
-->
<p><strong>(d.5)</strong> Implement the function <code>reverse_dict</code> that takes as a parameter a dictionary and returns a new dictionary with the keys and values of the original dictionary reversed:</p>
<code>
<pre>
>>> reverse_dict({'a': 'one', 'b': 'two', 'c': 'three', 'd': 'four', 'e': 'five', 'f': 'six'})
{'one': 'a', 'three': 'c', 'five': 'e', 'six': 'f', 'two': 'b', 'four': 'd'}</pre></code>
<p>You may assume that both the keys and the values are unique and are immutable types (so it's possible for them to serve as either keys or values in a dictionary).
</p>

<!-- Some of the exercises in this section use <a href="http://bcs.wiley.com/he-bcs/Books?action=resource&bcsId=7001&itemId=0470618469&resourceId=26649">external files</a> provided by the author, which you can download from the <a href="http://bcs.wiley.com/he-bcs/Books?action=index&bcsId=7001&itemId=0470618469">textbook web site</a>.
<p>Do exercise 6.21.
<p>Choose one exercise from 6.24 or 6.26.
<p>Choose two exercises from 6.23, 6.25, 6.27, 6.30, and 6.32.
-->
<p><strong>(e)</strong> Develop a program to solve the <a href="http://www.ics.uci.edu/~kay/courses/31/hw/BandB.html">Anteater Bed and Breakfast</a> problem. You may start with either partner's Stage I solution from the previous lab, or you may decide to start from the beginning this week.
<p>Develop this code in its own <code>BandB.py</code> file. Pay very close attention to the instructions, especially about developing the program in incremental stages.
<p>[If you find yourself printing menus or calling <code>input()</code>, for example, you are doing it wrong: You did not read and understand the problem description. This is serious; this is the big time, relatively speaking. You have to follow the methodology we've been teaching all quarter long.]
<p>And have some perspective here: This is one part of one assignment in the course. People will probably get full credit on this assignment without completing the entire B&amp;B program. And even one slightly lower score on one lab assignment isn't likely to have a major effect on your ultimate grade in the course. But if you turn in code with bugs, or even worse, if you turn in code that was developed through impermissible collaboration, that could be a serious problem.
<p><strong>(f)</strong> (optional) If you have some extra time after completing the previous parts of the lab, try one or more of the following.  In fact, if you're continuing to ICS 32 you might try some of these over the break to keep your skills up.
<ul>
  <li>Add a menu-style user interface to ICStunes, similar to the interface we used for the restaurants program. </li>
  <li>Add external files to ICStunes, along the same lines as we did with the restaurants program. We didn't require this or the user interface because you've done similar things before, but they're bread-and-butter everyday programming skills, so it wouldn't hurt to have more practice.</li>
  <li>Implement a weighted scoring scheme that's less extreme than the one in (c.4): A problem is worth 1 point if over 75% of the class answer it correctly; it's worth 2 points if over 50% (but not over 75%) answer it correctly; it's worth 3 points if over 25% (but not over 50%) answer it correctly; it's worth 4 points otherwise. Score the same list of students using this scheme.</li>
  <li>Devise some kind of visualization (perhaps a two-dimensional plot) to show how the same student scores using the three different scoring schemes. Try to produce a graphical answer to the question, Do the same students score highly under all three schemes?</li>
  <li>Develop an interactive interface for the Anteater BandB, as discussed in the problem writeup.</li>
</ul>
<p><strong>(g)</strong> <span style="font-variant:normal; letter-spacing:normal; line-height:normal; orphans:2; text-align:start; text-indent:0px; text-transform:none; white-space:normal; widows:2; word-spacing:0px; -webkit-text-size-adjust:auto; -webkit-text-stroke-width:0px; background-color:rgb(255, 255, 255); display:inline !important; float:none; font-family:AGaramond, Garamond, 'Times New Roman', serif; font-size:medium; color:rgb(0, 0, 0); font-style:normal; font-weight:normal;"> Remember that each partner must complete a partner evaluation form and submit it individually. Do this using the <a href="http://ics31-partner-app.appspot.com/">partner app</a>. Make sure you know your partner's name, first and last, so you can evaluate the right person.
    <!-- Some students have been forgetting to specify their partner's name on the survey; from now on, if you forget your partner's name we won't give you credit for completing the evaluation.-->
Please complete your evaluation by the end of the day on Friday, or Saturday morning at the latest. It only takes a couple of minutes and not doing it hurts your participation score.</span></p>
<p><strong>What to turn in:</strong> Submit via Checkmate your  <code>lab9.py</code> file containing your solutions to parts (c), (d), and (f), and a separate <code>BandB.py</code> file with your code from part (e). Remember what we've said in previous labs about rereading the assignment and rerunning your Python files.</p>
<p>Also remember that each student must complete a partner evaluation form by responding to the partner evaluation Email; these evaluations contribute to your class participation score. </p>
<p>&nbsp;</p>
<p><font face="Helvetica" size="1">Written by David G. Kay in Fall 2012 for ICS 31, based in part on assignments from ICS H21 and Informatics 41. Modified by David G. Kay, Fall 2013, Winter 2014, Fall 2014, Winter 2015, Fall 2015. Python exercises by David Lepe, edited by David G. Kay.</font></p>
<p>&nbsp;</p>
<br class="Apple-interchange-newline">
<HR />
<FONT  ><A HREF="http://www.ics.uci.edu/~kay/">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />
<font size="2"  >
<!-- #BeginDate format:fcAm1a -->Tuesday, September 13, 2016 10:18 AM<!-- #EndDate -->
</font></span>
</BODY>
</HTML>
