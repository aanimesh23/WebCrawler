<HTML>
<HEAD>
<TITLE> Data Compression </TITLE>
</HEAD><BODY>

<H1> Data Compression </H1>

<H3> Debra A. Lelewer and Daniel S. Hirschberg </H3>

<H2> Table of Contents </H2>

 Abstract <br>
 INTRODUCTION <br>
1.  <a href="DC-Sec1.html#Sec_1">    FUNDAMENTAL CONCEPTS</a><br>
1.1 <a href="DC-Sec1.html#Sec_1.1">  Definitions</a><br>
1.2 <a href="DC-Sec1.html#Sec_1.2">  Classification of Methods</a><br>
1.3 <a href="DC-Sec1.html#Sec_1.3">  A Data Compression Model</a><br>
1.4 <a href="DC-Sec1.html#Sec_1.4">  Motivation</a><br>
2.  <a href="DC-Sec2.html#Sec_2">    SEMANTIC DEPENDENT METHODS</a><br>
3.  <a href="DC-Sec3.html#Sec_3">    STATIC DEFINED-WORD SCHEMES</a><br>
3.1 <a href="DC-Sec3.html#Sec_3.1">  Shannon-Fano Coding</a><br>
3.2 <a href="DC-Sec3.html#Sec_3.2">  Static Huffman Coding</a><br>
3.3 <a href="DC-Sec3.html#Sec_3.3">  Universal Codes and Representations of the Integers</a><br>
3.4 <a href="DC-Sec3.html#Sec_3.4">  Arithmetic Coding</a><br>
4.  <a href="DC-Sec4.html#Sec_4">    ADAPTIVE HUFFMAN CODING</a><br>
4.1 <a href="DC-Sec4.html#Sec_4.1">  Algorithm FGK</a><br>
4.2 <a href="DC-Sec4.html#Sec_4.2">  Algorithm V</a><br>
5.  <a href="DC-Sec5.html#Sec_5">    OTHER ADAPTIVE METHODS</a><br>
5.1 <a href="DC-Sec5.html#Sec_5.1">  Lempel-Ziv Codes</a><br>
5.2 <a href="DC-Sec5.html#Sec_5.2">  Algorithm BSTW</a><br>
6.  <a href="DC-Sec678.html#Sec_6">  EMPIRICAL RESULTS</a><br>
7.  <a href="DC-Sec678.html#Sec_7">  SUSCEPTIBILITY TO ERROR</a><br>
7.1 <a href="DC-Sec678.html#Sec_7.1">Static Codes</a><br>
7.2 <a href="DC-Sec678.html#Sec_7.2">Adaptive Codes</a><br>
8.  <a href="DC-Sec678.html#Sec_8">  NEW DIRECTIONS</a><br>
9.  <a href="DC-Sec678.html#Sec_9">  SUMMARY</a><br>
    <a href="DC-references.html">    REFERENCES</a><br>
<P>

<H2> Abstract </H2>

This paper surveys a variety of data compression methods
spanning almost forty years of research, from
the work of Shannon, Fano and Huffman in the late 40's to a 
technique developed in 1986.  
	The aim of data compression is to reduce redundancy 
in stored or communicated data, thus increasing effective
data density.  Data compression has important application in 
the areas of file storage and distributed systems.
<P>
	Concepts from information theory, as they relate to the goals 
and evaluation of data compression methods, are discussed briefly. 
A framework 
for evaluation and comparison of methods is constructed and applied 
to the algorithms presented.  Comparisons of both theoretical and 
empirical natures are reported and possibilities for future research 
are suggested.

<H2> INTRODUCTION </H2>

	Data compression is often referred to as coding, where
coding is a very general term encompassing any special representation
of data which satisfies a given need.  Information
theory is defined to be the study of efficient coding and its 
consequences, in the form of speed of transmission and probability
of error [Ingels 1971].  Data compression may be viewed as a
branch of information theory in which the primary objective is
to minimize the amount of data
to be transmitted.  The purpose of this paper is to present and
analyze a variety of data compression algorithms.
<P>
A simple characterization of data compression is that it involves
transforming a string of characters in some representation (such
as ASCII) into a new string (of bits, for example) which contains the same information 
but whose length is as small as possible.  Data compression has
important application in the areas of data transmission and data
storage.   Many data processing applications require storage of
large volumes of data, and the number of such applications is
constantly increasing as the use of computers extends to new
disciplines.  At the same time, the proliferation of computer 
communication networks is resulting in massive transfer of 
data over communication links.
Compressing data to be stored or transmitted reduces storage
and/or communication costs.  When the amount of data to be transmitted
is reduced, the effect is that of increasing the capacity of
the communication channel.  Similarly, compressing a file to half of
its original size is equivalent to doubling the capacity of the
storage medium.  It may then become feasible to store the data
at a higher, thus faster, level of the storage hierarchy and reduce
the load on the input/output channels of the computer system. 
<P>
Many of the methods to be discussed in this paper are implemented
in production systems.  The UNIX utilities <EM>compact</EM> and 
<EM>compress</EM> are based on methods to be discussed in
<a href="DC-Sec4.html#Sec_4">Sections 4</a> and
<a href="DC-Sec5.html#Sec_5">5</a> respectively [UNIX 1984].  Popular file archival 
systems such as <EM>ARC</EM> and <EM>PKARC</EM> employ techniques presented
in <a href="DC-Sec3.html#Sec_3">Sections 3</a>
and <a href="DC-Sec5.html#Sec_5">5</a> [ARC 1986; PKARC 1987].  The savings achieved
by data compression can be dramatic; reduction as high as 80%
is not uncommon [Reghbati 1981].  Typical values of compression provided
by <EM>compact</EM> are:  text (38%), Pascal source (43%),
C source (36%) and binary (19%).  <EM>Compress</EM> generally
achieves better compression (50-60% for text such as
source code and English), and takes less time to compute [UNIX 1984].
Arithmetic coding (<a href="DC-Sec3.html#Sec_3.4">Section 3.4</a>)
has been reported to reduce
a file to anywhere from 12.1 to 73.5% of its original size
[Witten et al. 1987].  Cormack reports that data compression
programs based on Huffman coding
(<a href="DC-Sec3.html#Sec_3.2">Section 3.2</a>) reduced the size
of a large student-record database by 42.1% when only some of
the information was compressed.  As a consequence
of this size reduction, the number of disk operations required
to load the database was reduced by 32.7% [Cormack 1985].  
Data compression
routines developed with specific applications in mind have
achieved compression factors as high as 98% [Severance 1983].
<P>
While coding for purposes of data security
(cryptography) and codes which guarantee a certain level of 
data integrity (error detection/correction) are topics worthy of 
attention, these do not fall
under the umbrella of data compression.  With the exception of a 
brief discussion of the susceptibility to error of the methods 
surveyed (<a href="DC-Sec678.html#Sec_7">Section 7</a>), a discrete noiseless channel is assumed.  
That is, we assume a system in which a sequence of symbols chosen from
a finite alphabet can be transmitted from one point to another without the 
possibility of error.  Of course, the coding schemes described here 
may be combined with data security or error correcting codes.  
<P>
	Much of the available literature on data compression
approaches the topic from the point of view of data transmission.
As noted earlier, data compression is of value in
data storage as well.  Although this discussion 
will be framed in the terminology of data transmission, compression
and decompression of data files for storage is essentially the same task
as sending and receiving compressed data over a communication channel.
	The focus of this paper is on algorithms for data
compression; it does not deal with hardware aspects of
data transmission.  The reader is referred to Cappellini
for a discussion of techniques with natural 
hardware implementation [Cappellini 1985].  
<P>
	Background concepts in the form of terminology and a
model for the study of data compression are provided
in <a href="DC-Sec1.html#Sec_1">Section 1</a>.  Applications of data compression
are also discussed in <a href="DC-Sec1.html#Sec_1">Section 1</a>,
to provide motivation for the material which follows.
<P>
While the primary focus of this
survey is data compression methods of general utility,
<a href="DC-Sec2.html#Sec_2">Section 2</a>
includes examples from the literature in which ingenuity applied
to domain-specific problems has yielded interesting coding
techniques.
These techniques are referred to as <EM>semantic dependent</EM> since they
are designed to exploit the context and semantics of the data to 
achieve redundancy reduction.  Semantic dependent techniques include 
the use of quadtrees, run length encoding, or difference mapping 
for storage and transmission of image data [Gonzalez and Wintz 1977; 
Samet 1984].  
<P>
	General-purpose techniques, which assume no knowledge of the
information content of the data, are described in
<a href="DC-Sec3.html#Sec_3">
Sections 3-5</a>.  These descriptions are sufficiently detailed to
provide an understanding of the techniques.  The reader will need
to consult the references for implementation details.  In most 
cases, only worst-case analyses of the
methods are feasible.  To provide a more realistic picture
of their effectiveness, empirical data is presented in
<a href="DC-Sec678.html#Sec_6">Section 6</a>.  The susceptibility to error of the algorithms surveyed
is discussed in
<a href="DC-Sec678.html#Sec_7">Section 7</a> and possible directions for future
research are considered in
<a href="DC-Sec678.html#Sec_8">Section 8</a>.

<P>
<A HREF="DC-Sec1.html"><IMG SRC="next.gif" ALT="NEXT section"></A>
<P>
</BODY></HTML>
