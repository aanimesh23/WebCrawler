<?xml version='1.1'?>
<!DOCTYPE html
     PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
     'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
<head>
  <title>XML Schemas</title>
  <meta name='Author' content='Thomas A. Alspaugh'/>
  <meta name='Description' content="XML Schemas"/>
  <meta http-equiv='content-type' content='text/html; charset=ISO-8859-1'/>
  <meta http-equiv='Content-Style-Type' content='text/css'/>
  <link href='../../alspaugh-uci.css' rel='stylesheet' type='text/css'/>
  <!-- <link href='../alspaugh-uci-cls.css' rel='stylesheet' type='text/css'/> -->
  <style type='text/css'>

    .egList      {  list-style-type: lower-alpha;  }
    dl.code      {  padding-left: 0.75em;  }
    dl.code dt   {  font-family: monospace;  font-style: normal;  }
    dl.code dd   {  margin-left: 1.5em;  }
    code dfn,
    dfn code     {  font-style: normal;  }
    span.comment {  color: olive;  }

    @media screen {
      body     {  background: url("img/bg-xmlSchema.png") repeat-y;  }
      #TMain   {  margin-left: 10.00em;  }
    }
  </style>
</head>
<body>

<div id='TBg'>

<div id='THeader'>
XML Schemas
</div>

<div id='TLinks1' class='Links'> <!-- - - - - - - - - - - - - - - - - - - - -->
<p>  <a class='sc' href='../../index.html'>Home</a>
</p>
<div class='hr'> </div>
<p>  <a href='index.html'>Foundations home</a>
</p>
<div class='hr'> </div>
<p>
<a href='set.html'>Sets</a><br/>
<a href='relation.html'>Relations</a><br/>
<a href='correspondence.html'>Correspondences</a><br/>
<a href='orderedSet.html'>Ordered Sets</a><br/>
<a href='lattice.html'>Lattices</a><br/>
<a href='graph.html'>Graphs</a><br/>
<a href='powerset.html'>Powersets</a><br/>
<a href='binaryString.html'>Binary Strings</a><br/>
<a href='logicConcepts.html'>Logic</a><br/>
<a href='allen.html'>AIA</a><br/><!-- -spell AIA -->
<a href='greek.html'>Greek</a><br/>
</p>
<div class='hr'> </div>
<p>
<a href='glossaryExternal.html'>Glossary</a><br/>
<a href='goodAbstract.html'>Abstracts</a><br/>
<a href='argument.html'>Argument</a><br/>
<a href='ontology.html'>Glossaries</a><br/>
<a href='inquiryCycle.html'>Inquiry Cycle</a><br/>
<a href='hohfeld.html'>Legal Relations</a><br/>
<a href='goodPresentation.html'>Presentations</a><br/>
</p>
<div class='hr'> </div>
<p>
<a href='quickStart.html'>Elicitation</a><br/>
<a href='ontology.html'>Glossaries</a><br/>
<a href='goal.html'>Goals</a><br/>
<a href='istar.html'>i*</a><br/>
<a href='SCR.html'>SCR</a><br/>
<a href='tracing.html'>Tracing</a><br/>
</p>
<div class='hr2'> </div>
<p>
<a href='alloy.html'>Alloy</a><br/>
<a href='msc.html'>MSCs</a><br/>
<a href='regularExpression.html'>Regular Exprs.</a><br/>
</p><!-- -spell MSCs Exprs -->
<div class='hr2'> </div>
<p>
<a href='java-designPattern.html'>Design Patterns</a><br/>
<a href='javadoc.html'>Javadoc</a><br/>
<a href='java-package.html'>Java Packages</a><br/>
<a href='java-type.html'>Java Types</a><br/>
</p>
<div class='hr2'> </div>
<p>
<a href='html.html'>(X)HTML</a><br/>
<a href='xmlSchema.html'>XML Schemas</a><br/>
<a href='xslt.html'>XSLT</a><br/>
</p><!-- -spell XSLT -->
</div>


<!-- No right column -->
<div id='TMain'><!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!--xhtml -y -->


<!--spell AnyNumber AtLeastOnce CCYY DDThh Datatypes IDREF IDREFS NCName -->
<!--spell NMTOKEN NMTOKENS NaN OccursExample OnceOrTwice PnYnMnDTnHnMnS QName -->
<!--spell SameAsDefault SubtractiveColorsWithLanguage URIs UTF XMLBeans -->
<!--spell XMLSchema XSL Za ZeroOrOneTimes aeiou anElement annotatedElement -->
<!--spell anyAttribute anySimpleType anyType anyURI apos appinfo attr -->
<!--spell attributeFormDefault attributeGroup attributeGroups carLicense -->
<!--spell carOwner carPhoneNumber complexContent complexType complexTypes -->
<!--spell datatype dateTime elementFormDefault emptyComplexType -->
<!--spell emptySimpleType gDay gMonth gMonthDay gYear gYearMonth -->
<!--spell groupSubtractiveColorsWithLanguage hexBinary html http keyref -->
<!--spell keyref's lang licenseNumber localname lt maxLength maxOccurs -->
<!--spell memberTypes minLength minOccurs nX namespace namespaces -->
<!--spell negativeInteger noNamespaceSchemaLocation nonNegativeInteger -->
<!--spell nonPositiveInteger normalizedString paren positiveInteger -->
<!--spell qname schemaLocation simpleContent simpleType simpleTypes -->
<!--spell smallSquares speciol ss stringElement stringElementSimpleType -->
<!--spell stringLangElement stringLangElementComplexType stringLangType -->
<!--spell subtractiveColor subtractiveColorAndLanguage subtractiveColors -->
<!--spell supertype targetNamespace threeChars threeToFiveChars unique's -->
<!--spell unmarshal unsignedByte unsignedInt unsignedLong unsignedShort -->
<!--spell validator validators vowelString vowelStringInLanguage -->
<!--spell vowelsOrColors xhtml xml xmlns xpath xs xsd xsi -->
<!--spell attribute's -->


<h1>Table of contents</h1>

<div id='ToC'>
  <h1><a href='#Introduction'>Introduction and context</a></h1>
  <h1><a href='#Basics'>Basics</a></h1>
  <h2><a href='#Elements'>An element</a></h2>
  <h2><a href='#schema'>Schema</a></h2>
  <h2><a href='#UsingASchema'>Referencing a schema in an XML file</a></h2>
  <h2><a href='#ElementsAndTypes'>Elements and types in a schema</a></h2>
  <h2><a href='#SimpleAndComplexType'>Simple and complex types</a></h2>
  <h2><a href='#SimpleAndComplexContent'>Empty, simple, complex, and mixed content</a></h2>
  <h2><a href='#character-data'>Character data</a></h2>
  <h2><a href='#AttributeTypes'>Attribute types</a></h2>
  <h1><a href='#element'>Element</a></h1>
  <h1><a href='#simpleType'>Simple type</a></h1>
  <h2><a href='#restriction'>Restriction (of a simple type)</a></h2>
  <h2><a href='#list'>List</a></h2>
  <h2><a href='#union'>Union</a></h2>
  <h2><a href='#PredefinedTypes'>Predefined types</a></h2>
  <h1><a href='#complexType'>Complex type</a></h1>
  <h2><a href='#simpleContent'>Simple content</a></h2>
  <h2><a href='#complexContent'>Complex content</a></h2>
  <h2><a href='#extension'>Extension</a></h2>
  <h2><a href='#ComplexRestriction'>Restriction (of a complex type)</a></h2>
  <h2><a href='#Compositor'>Compositors <code>all</code>, <code>choice</code>, and <code>sequence</code></a></h2>
  <h2><a href='#Particle'>Particles <code>any</code> and <code>group</code></a></h2>
  <h2><a href='#attribute'>Attribute for a complex type</a></h2>
  <h2><a href='#attributeGroup'>Attribute group</a></h2>
  <h2><a href='#anyAttribute'>Any attribute allowed</a></h2>
  <h1><a href='#CommonAttributes'>Attributes common to several schema elements</a></h1>
  <h1><a href='#MoreElement'>More on <code>element</code></a></h1>
  <h1><a href='#MoreSchema'>More on <code>schema</code></a></h1>
  <h1><a href='#Comments'>Comments</a></h1>
  <h1><a href='#UniqueValues'>Uniqueness constraints</a></h1>
  <h1><a href='#NotRecommended'>Advanced</a></h1>
  <h2><a href='#LexicalAndValue'>The distinction between lexical and value spaces</a></h2>
</div> <!-- id='ToC' -->


<h1 id='Introduction'>Introduction and context</h1>

<p>
This is a partial description of the XML Schema language.&nbsp;
It is provided because the W3C specification and published descriptions
of the language
are difficult to follow, especially for a novice.&nbsp;
For a variety of reasons,
the XML Schema language is complex, apparently arbitrary,
and difficult to explain or understand in its entirety.&nbsp;
This description does not give every feature of XML Schema
nor every way of doing things,
but rather a (relatively) straightforward approach
for defining most XML languages.&nbsp;
</p>

<p>
The W3C documents current at this writing
are available online:&nbsp;
the <a href='http://www.w3.org/XML/Schema'>XML Schema home page</a>
and the XML Schema specification,
consisting of
<a href='http://www.w3.org/TR/xmlschema-0/'>XML Schema Part 0: Primer</a>,
<a href='http://www.w3.org/TR/xmlschema-1/'>XML Schema Part 1: Structures</a>, and
<a href='http://www.w3.org/TR/xmlschema-2/'>XML Schema Part 2: Datatypes</a>.&nbsp;
</p>

<p>
A useful Java package is
Apache <a href='http://xmlbeans.apache.org/'>XMLBeans</a>,
which provides methods to marshal and unmarshal XML to/from Java objects
and also a most useful verification tool (<code>validate</code>)
for schemas and for XML files intended to match a particular schema.&nbsp;
All examples in this page were checked using <code>validate</code>.&nbsp;
</p>


<h1 id='Basics'>Basics</h1>

<h2 id='Elements'>An element</h2>

<p>
An <dfn>element</dfn> consists of
a start tag and end tag and everything in between,
or an empty-element tag.&nbsp;
A pair of start and end tags have the same name.&nbsp;
A <dfn>start tag</dfn> consists of an initial &lt;, the name,
possibly some attributes, and a terminal &gt;.&nbsp;
An <dfn>end tag</dfn> has no attributes,
and consists only of an initial &lt;/,
the tag name, and a terminal &gt;.&nbsp;
The material between an element's start tag and end tag
are its <dfn>contents</dfn>.&nbsp;
The contents may contain elements, and if so they must be
either empty-element tags
or paren-nested start and end tags.&nbsp;
An <dfn id='EmptyElement'>empty-element tag</dfn> starts with &lt; and its name,
may have attributes following its name,
and ends with /&gt;.&nbsp;
</p>

<p>
A tag's name may be
</p>

<ul>
  <li id='localname'>
    a <dfn>localname</dfn> such as <code>item</code>
    with no namespace prefix,
    corresponding to the
    <a href='#NCName'><code>xs:NCName</code></a> predefined type;&nbsp;
    or
  </li>
  <li id='qname'>
    a <dfn>qualified name</dfn> or <dfn>qname</dfn>  such as <code>xs:QName</code>
    with a namespace prefix,
    corresponding to the
    <a href='#QName'><code>xs:QName</code></a> predefined type.&nbsp;
    The prefix must have been defined in an
    <code><a href='#xmlns_'>xmlns:*</a></code> attribute
    such as <code>xmlns:xs='http://www.w3.org/2001/XMLSchema'</code>
    of the current element or a parent element.&nbsp;
  </li>
</ul>

<p>
Examples:&nbsp;
</p>

<ol class='egList'>
  <li> An empty-element tag:&nbsp; <pre>&lt;name attr='value'/&gt;</pre>
  </li>
  <li> Matched start and end tags:&nbsp;

<pre>
&lt;name attr='value'&gt;
  <i>... <a href='#character-data'>character data</a> or other elements can appear here ...</i>
&lt;/name&gt;
</pre>
  </li>
</ol>

<h2 id='schema'>Schema</h2>

<p>
A <dfn>schema</dfn> is a file defining a grammatical form for XML files.&nbsp;
The schema itself is in XML of a particular grammatical form described here.&nbsp;
The schema file defines a single <code><dfn>schema</dfn></code> element,
and looks something like this:
</p>

<pre>
&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;xs:schema xmlns:xs='http://www.w3.org/2001/XMLSchema'
    elementFormDefault='qualified'
    attributeFormDefault='unqualified'
    xml:lang='en'&gt;
    ...
&lt;/xs:schema&gt;
</pre>

<p>
with the <b>...</b> representing the schema.&nbsp;
</p>

<p>
The line
&lt;?xml&nbsp;version='1.0'&nbsp;encoding='UTF-8'?&gt;
is the <dfn id='declaration'>XML declaration</dfn>.&nbsp;
</p>

<p>
In this schema,
the attribute <code>xmlns:xs='http://www.w3.org/2001/XMLSchema'</code>
of the <code>schema</code> element
makes <code>xs</code> represent the namespace of the XMLSchema definition,
so that a prefix of <code>xs:</code> identifies the schema elements
(such as <code>xs:<a href='#simpleType'>simpleType</a></code>);&nbsp;
We will use <code>xs:</code> throughout this document.&nbsp;
Any prefix can be used (<code>xsd:</code> is also common)
as long as it is defined in the <code>schema</code> element.&nbsp;
</p>

<p id='TopLevel'>
An element is at the <dfn>top level</dfn>
if it is a child element of the schema element
(rather than a child of a child, or a child of a child of a child, etc).&nbsp;
</p>

<p>
<a href='#MoreSchema'>More on the schema element ...</a>
</p>


<h2 id='UsingASchema'>Referencing a schema in an XML file</h2>

<p>
An XML element can identify its schema(s)
in the <code>xsi:<a href='#schemaLocation'>schemaLocation</a></code> and
<code>xsi:<a href='#noNamespaceSchemaLocation'>noNamespaceSchemaLocation</a></code>
attributes.&nbsp;
These two attributes are in the
<code>http://www.w3.org/2001/XMLSchema-instance</code> namespace.&nbsp;
</p>

<p id='schemaLocation'>
The <code>xsi:<a href='#schemaLocation'>schemaLocation</a></code> attribute's
value is a list of whitespace-separated
namespaces and URIs for corresponding schemas.&nbsp;
</p>

<pre>
  &lt;anElement xmlns='http://www.w3.org/1999/XSL/Transform'
             xmlns:html='http://www.w3.org/1999/xhtml'
             xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
             xsi:schemaLocation='http://www.w3.org/1999/XSL/Transform
                                 http://www.w3.org/1999/XSL/Transform.xsd
                                 http://www.w3.org/1999/xhtml
                                 http://www.w3.org/1999/xhtml.xsd'&gt;
   ...
  &lt;/anElement&gt;
</pre>

<p>
(example adapted  from the W3C XML Schema Structures document)&nbsp;
</p>

<p id='noNamespaceSchemaLocation'>
The
<code>xsi:<a href='#noNamespaceSchemaLocation'>noNamespaceSchemaLocation</a></code>
attribute's
value is a single URI for the schema for elements and attributes
with no namespace.&nbsp;
</p>


<h2 id='ElementsAndTypes'>Elements and types in a schema</h2>

<p>
Each XML element defined in a schema has a <i>type</i>.&nbsp;
The type is defined either
as part of the element definition,
or elsewhere as a named type
(with the <code><a href='#name'>name</a></code> attribute)
and referred to by that name in the element definition
(with the <code><a href='#type'>type</a></code> attribute).&nbsp;
Each type definition consists of a
<code><a href='#simpleType'>simpleType</a></code> or a
<code><a href='#complexType'>complexType</a></code> element.&nbsp;
Each attribute of an element has a type as well;&nbsp;
attribute types are restricted to be
<code><a href='#simpleType'>simpleType</a></code>s.&nbsp;
</p>

<p>
The element definition itself is made using an
<code>element</code> element
(which is confusing to say, but natural to do).&nbsp;
</p>

<p>
Examples:&nbsp;
</p>

<ol class='egList'>

  <li> An element containing a string;&nbsp;
    its type is the basic XML type <code><a href='#string'>string</a></code>
    and is referred to in the element definition.&nbsp;
<pre>
  &lt;xs:element name='stringElement' type='xs:string'/&gt;
</pre>
  </li>

  <li> An element containing a string;&nbsp;
    this example's type is defined as part of the element definition.&nbsp;
    (In practice, one would simply define the element
    as in the preceding example.)&nbsp;
<pre>
  &lt;xs:element name='stringElementSimpleType'&gt;
    &lt;xs:simpleType&gt;
      &lt;xs:restriction base='xs:string'/&gt;
    &lt;/xs:simpleType&gt;
  &lt;/xs:element&gt;
</pre>
  </li>

  <li> An element containing a string and with an attribute.&nbsp;
    The element type is defined as part of the element definition.&nbsp;
<pre>
  &lt;xs:element name='stringLangElementComplexType'&gt;
    &lt;xs:complexType&gt;
      &lt;xs:simpleContent&gt;
        &lt;xs:extension base='xs:string'&gt;
          &lt;xs:attribute name='language' type='xs:string'/&gt;
        &lt;/xs:extension&gt;
      &lt;/xs:simpleContent&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
</pre>
  </li>

  <li> An element containing a string and with an attribute.&nbsp;
    The element type is defined separately as <code>stringLangType</code>
    and referred to in the element definition.&nbsp;
<pre>
  &lt;xs:element name='stringLangElement' type='stringLangType'/&gt;
  
  &lt;xs:complexType name='stringLangType'&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base='xs:string'&gt;
        &lt;xs:attribute name='language' type='xs:language'/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
</pre>
  </li>

</ol>

<p>
Although the same XML Schema constructs
are used to define element and attribute types,
those types are interpreted in different ways.&nbsp;
An attribute type is simply
a definition of the set of values that attribute can be given.&nbsp;
An element type, on the other hand,
gives the values that the element can contain
(and possibly the names and types of the element's attributes).&nbsp;
In example (a) above,
<code>xs:<a href='#string'>string</a></code>
is the type of the contents of the element,
while in example (c)
the same type <code>xs:<a href='#string'>string</a></code>
is the type of the values of
the attribute <code>language</code>.&nbsp;
</p>

<p>
Rather than separating the definitions of
element and attribute types,
XML Schema divides types into
<code><a href='#simpleType'>simpleTypes</a></code> and
<code><a href='#complexType'>complexTypes</a></code>.&nbsp;
Attribute types are restricted to be
<code><a href='#simpleType'>simpleTypes</a></code>,
while element types can be either
<code><a href='#simpleType'>simpleTypes</a></code>
(interpreted as element contents) or
<code><a href='#complexType'>complexTypes</a></code>.&nbsp;
</p>


<h2 id='SimpleAndComplexType'>Simple and complex types</h2>

<p>
A <dfn>simple type</dfn> may contain only
<a href='#character-data'>character data</a>,
and may not have attributes.&nbsp;
All other types are <dfn>complex</dfn>.&nbsp;
A simple type is defined using a
<code><a href='#simpleType'>simpleType</a></code> element,
and
a complex type is defined using a
<code><a href='#complexType'>complexType</a></code> element.&nbsp;
</p>

<table>
<tbody>
  <tr>
    <th>Type</th>
    <th>Element may contain</th>
    <th>Element may have attributes</th>
  </tr>
  <tr>
    <td>simple</td>
    <td><a href='#character-data'>Character data</a> only</td>
    <td>No</td>
  </tr>
  <tr>
    <td>complex</td>
    <td><a href='#character-data'>Character data</a>, other elements, or both</td>
    <td>Yes</td>
  </tr>
</tbody>
</table>


<h2 id='SimpleAndComplexContent'>Empty, simple, complex, and mixed content</h2>

<p>
Element content may be <i>empty, simple, complex,</i> or <i>mixed</i>.&nbsp;
</p>

<table>
<tbody>
  <tr>
    <th>Content</th>
    <th>Element may contain</th>
    <th>Indicated by</th>
  </tr>
  <tr>
    <td id='EmptyContent'>empty</td>
    <td>Nothing</td>
    <td><code><a href='#simpleType'>simpleType</a></code>
          containing no <a href='#character-data'>character data</a>
          (<a href='#emptySimpleType'>example</a>)
          or<br/>
          <code><a href='#complexType'>complexType</a></code>
          containing no <a href='#character-data'>character data</a> and no elements
          (easier <a href='#emptyComplexType'>example</a>)</td>
  </tr>
  <tr>
    <td id='SimpleContent'>simple</td>
    <td><a href='#character-data'>Character data</a> only</td>
    <td><code><a href='#simpleType'>simpleType</a></code> or<br/>
          <code><a href='#complexType'>complexType</a></code>
          containing <code><a href='#simpleContent'>simpleContent</a></code></td>
  </tr>
  <tr>
    <td id='ComplexContent'>complex\n</td>
    <td>Other elements</td>
    <td><code><a href='#complexContent'>complexContent</a></code>
        declaring those subelements</td>
  </tr>
  <tr>
    <td id='MixedContent'>mixed</td>
    <td><a href='#character-data'>Character data</a> and other elements</td>
    <td><code><a href='#complexContent'>complexContent</a></code>
        declaring those subelements,
        with attribute <code>mixed='true'</code></td>
  </tr>
</tbody>
</table>

<p>
Simple types must have simple or empty content;&nbsp;
complex types may have any kind of content, .&nbsp;
</p>


<h2 id='character-data'>Character data</h2>

<p>
Character data may consist of
any characters except &lt; or literal &amp;.&nbsp;
A &lt; may be represented as <code>&amp;lt;</code>,
and an &amp; as <code>&amp;amp;</code>.&nbsp;
</p>

<p>
Within an attribute value,
character data may not contain the quote characters bracketing it.&nbsp;
A ' may be represented as <code>&amp;apos;</code>,
and a " as <code>&amp;quot;</code>.&nbsp;
</p>


<h2 id='AttributeTypes'>Attribute types</h2>

<p>
Attribute types must be defined separately from the element that uses them,
and they must be simple types containing simple content.&nbsp;
</p>


<h1 id='element'>Element</h1>

<p>
An <code><dfn>element</dfn></code> element
defines an element that may appear in an XML file.&nbsp;
If the <code><a href='#element'>element</a></code> is defined at the top level,
then the XML file may contain an instance of the element
as its sole contents;&nbsp;
otherwise, the XML file may contain an instance of the element
as part of another element.&nbsp;
</p>

<p>
Every <code><a href='#element'>element</a></code> must have a name,
specified by its <code><a href='#name'>name</a></code> attribute.&nbsp;
</p>

<p>
An <code><a href='#element'>element</a></code> element may specify its type in one of these ways:
</p>

<ul>
  <li> by naming the type in its <a href='#type'>type</a> attribute,
  </li>
  <li> by containing a <code><a href='#simpleType'>simpleType</a></code> element, or
  </li>
  <li> by containing a <code><a href='#complexType'>complexType</a></code>
      element.&nbsp;
  </li>
</ul>

<p>
An element with <a href='#SimpleContent'>simple content</a>
may have either (but not both) of these attribute:
</p>

<ul>
  <li> <code><a href='#default'>default</a></code>
    giving the value that is assumed if the element is empty, or
  </li>
  <li> <code><a href='#fixed'>fixed</a></code>
    giving the only value the element is allowed to have.&nbsp;
  </li>
</ul>

<p>
An element may also have its contents restricted using either of these elements:
</p>

<ul>
  <li> <code><a href='#key'>key</a></code>
  </li>
  <li> <code><a href='#keyref'>keyref</a></code>
  </li>
  <li> <code><a href='#unique'>unique</a></code>
  </li>
</ul>


<h1 id='simpleType'>Simple type</h1>

<p>
A <code><dfn>simpleType</dfn></code> element must contain
an element of one of these kinds:&nbsp;
</p>

<ul>
  <li> <code><a href='#restriction'>restriction</a></code>,
  </li>
  <li> <code><a href='#list'>list</a></code>, or
  </li>
  <li> <code><a href='#union'>union</a></code>.&nbsp;
  </li>
</ul>


<h2 id='restriction'>Restriction (of a simple type)</h2>

<p>
A <code><dfn>restriction</dfn></code> element
defines a new type by restricting an already-existing type
to produce a smaller set of values.&nbsp;
The already-existing type is named in the
<code><a href='#restriction'>restriction</a></code> element's
<code><a href='#base'>base</a></code> attribute.&nbsp;
There are many ways of restricting a type,
some of which are listed below.&nbsp;
</p>

<p>
(Note that a complex type can also be defined by
<code><a href='#ComplexRestriction'>restriction</a></code>,
using the same tag but with additional possibilities.)&nbsp;
</p>


<h3   id='ByRegularExpression'>By a regular expression</h3>

<p id='pattern'>
Perl notation is used for the regular expression.&nbsp;
The set of values are all those that completely match the pattern.&nbsp;
</p>

<pre>
  &lt;xs:simpleType name='vowelString'&gt;
    &lt;xs:restriction base='xs:string'&gt;
      &lt;xs:pattern value='[aeiou]+'/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
</pre>

<h3   id='byEnumeration'>By enumeration of the restricted set of values</h3>

<p id='enumeration'>
The values are given in the <code>value</code> attribute of
<code><a href='#enumeration'>enumeration</a></code> elements.&nbsp;
</p>

<pre id='emptySimpleType'>
  &lt;xs:simpleType name='emptySimpleType'&gt;
    &lt;xs:restriction base='xs:string'&gt;
      &lt;xs:enumeration value=''/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;

  &lt;xs:simpleType name='subtractiveColors'&gt;
    &lt;xs:restriction base='xs:string'&gt;
      &lt;xs:enumeration value='blue'/&gt;
      &lt;xs:enumeration value='brown'/&gt;
      &lt;xs:enumeration value='green'/&gt;
      &lt;xs:enumeration value='orange'/&gt;
      &lt;xs:enumeration value='purple'/&gt;
      &lt;xs:enumeration value='red'/&gt;
      &lt;xs:enumeration value='yellow'/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;

  &lt;xs:simpleType name='smallSquares'&gt;
    &lt;xs:restriction base='xs:integer'&gt;
      &lt;xs:enumeration value='0'/&gt;
      &lt;xs:enumeration value='1'/&gt;
      &lt;xs:enumeration value='4'/&gt;
      &lt;xs:enumeration value='9'/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
</pre>

<h3   id='byLength'>By length</h3>

<ul>
  <li id='minLength'> The length may be limited by a minimum;
  </li>
  <li id='maxLength'> or by a maximum;
  </li>
  <li id='length'>or to a single value.&nbsp;
  </li>
</ul>

<pre>
  &lt;xs:simpleType name='threeChars'&gt;
    &lt;xs:restriction base='xs:string'&gt;
      &lt;xs:length value='3'/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;

  &lt;xs:simpleType name='threeToFiveChars'&gt;
    &lt;xs:restriction base='xs:string'&gt;
      &lt;xs:minLength value='3'/&gt;
      &lt;xs:maxLength value='5'/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
</pre>


<h2 id='list'>List</h2>

<p>
List types describe lists of elements of simple type;&nbsp;
the lists are represented with whitespace between the elements.&nbsp;
Definition of list types is not discussed here.&nbsp;
</p>


<h2 id='union'>Union</h2>

<p>A <code><dfn>union</dfn></code> element defines a new simple type
that is the union of two or more other simple types.&nbsp;
The new type consists of everything that the component types comprise.&nbsp;
The types may be listed by name in the <code>memberTypes</code> attribute,
or defined in the contents of the
<code><a href='#union'>union</a></code> element,
or both.&nbsp;
</p>

<pre>
  &lt;xs:simpleType name='vowelsOrColors'&gt;
    &lt;xs:union memberTypes='vowelString subtractiveColors'/&gt;
  &lt;/xs:simpleType&gt;
</pre>

<pre>
  &lt;xs:simpleType name='vowelsOrColors2'&gt;
    &lt;xs:union memberTypes='subtractiveColors'&gt;
     &lt;xs:simpleType&gt;
        &lt;xs:restriction base='xs:string'&gt;
          &lt;xs:pattern value='[aeiou]+'/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:union&gt;
  &lt;/xs:simpleType&gt;
</pre>



<h2 id='PredefinedTypes'>Predefined types</h2>

<p>
All predefined types are simple content
except for <code>anyType</code>, the supertype of all types.&nbsp;
</p>

<dl class='code'>
  <dt id='anySimpleType'><code>xs:<dfn>anySimpleType</dfn></code></dt>
    <dd>The supertype of all simple types,
      provided for use when deriving a type
      if no other supertype will do.&nbsp;
    </dd>
  <dt id='string'><code>xs:<dfn>string</dfn></code></dt>
    <dd>Strings of printable <a href='#character-data'>character data</a>.&nbsp;
      <dl class='code'>
        <dt id='normalizedString'><code>xs:<dfn>normalizedString</dfn></code></dt>
          <dd>Like <code>xs:<a href='#string'>string</a></code>, but
            the only whitespace characters are spaces
            (on input, other whitespace is replaced by spaces).
            <dl class='code'>
              <dt id='token'><code>xs:<dfn>token</dfn></code></dt>
                <dd>Like <code>xs:<a href='#normalizedString'>normalizedString</a></code>,
                  but
                  leading spaces,
                  sequences of two or more spaces,
                  and trailing spaces
                  are not allowed
                  (on input, sequences are collapsed to single spaces
                  and leading and trailing space is removed),
                </dd>
            </dl>
          </dd>
        <dt id='NMTOKEN'><code>xs:<dfn>NMTOKEN</dfn></code></dt>
          <dd>Like <code>xs:<a href='#string'>string</a></code>
            but restricted to name characters
            <code>[-_:.A-Za-z0-9]*</code>.
            <dl class='code'>
              <dt id='Name'><code>xs:<dfn>Name</dfn></code></dt>
                <dd>Like <code>xs:<a href='#NMTOKEN'>NMTOKEN</a></code>
                  but restricted to begin with a letter, colon, or underscore
                  <code>[_:A-Za-z][-_:.A-Za-z0-9]*</code>.&nbsp;
                  <br/>(If you want a name in the usual sense,
                  you probably want an
                  <code>xs:<a href='#NCName'>NCName</a></code>.)&nbsp;
                  <dl class='code'>
                    <dt id='QName'><code>xs:<dfn>QName</dfn></code></dt>
                      <dd>A qualified name.&nbsp;
                        Like <code>xs:<a href='#Name'>Name</a></code> but
                        can't start with a colon,
                        and at most one colon is allowed.&nbsp;
                        For example, the string
                        '<code>xs:<a href='#QName'>QName</a></code>'
                        is an <code>xs:<a href='#QName'>QName</a></code>.&nbsp;
                      </dd>
                    <dt id='NCName'><code>xs:<dfn>NCName</dfn></code></dt>
                      <dd>Like <code>xs:<a href='#Name'>Name</a></code> but
                        no colons allowed
                        <code>[_A-Za-z][-_.A-Za-z0-9]*</code>.&nbsp;
                        <br/>(This datatype is closest to
                        what one ordinarily thinks of as a name.)&nbsp;
                        <dl class='code'>
                          <dt id='ID'><code>xs:<dfn>ID</dfn></code></dt>
                            <dd>Like <code>xs:<a href='#NCName'>NCName</a></code>
                              but programs processing an XML file must check that
                              each attribute value and simple type element value
                              of this type
                              is unique within the document containing them.&nbsp;
                            </dd>
                          <dt id='IDREF'><code>xs:<dfn>IDREF</dfn></code></dt>
                            <dd>Like <code>xs:<a href='#NCName'>NCName</a></code>
                              but programs processing an XML file must check that
                              each attribute value and simple type element value
                              of this type
                              is also an attribute or simple type element value
                              of type <code>xs:<a href='#ID'>ID</a></code>
                              in the same file.&nbsp;
                            </dd>
                        </dl>
                      </dd>
                  </dl>
                </dd>
            </dl>
          </dd>
        <dt id='language'><code>xs:<dfn>language</dfn></code></dt>
          <dd>Like <code>xs:<a href='#string'>string</a></code>
            but restricted to be language codes
            (such as <code>en</code>, <code>fr</code>, etc.).
          </dd>
        <dt id='anyURI'><code>xs:<dfn>anyURI</dfn></code></dt>
          <dd>Like <code>xs:<a href='#string'>string</a></code>
            but restricted to be URIs;&nbsp;
            for example '<code>http://www.w3.org/2001/XMLSchema</code>'.&nbsp;
          </dd>
      </dl>
    </dd>
  <dt id='boolean'><code>xs:<dfn>boolean</dfn></code></dt>
    <dd>A boolean value.&nbsp;
      'true', 'false', '1', or '0'.&nbsp;
    </dd>

  <dt id='decimal'><code>xs:<dfn>decimal</dfn></code></dt>
    <dd>A decimal number.&nbsp;
      Like <code>xs:<a href='#string'>string</a></code>
      but restricted to be
      <code>[-+]?[0-9]+(.[0-9]+)</code> or
      <code>[-+]?[0-9]*.[0-9]+</code>.&nbsp;
      <dl class='code'>
        <dt id='integer'><code>xs:<dfn>integer</dfn></code></dt>
          <dd>A decimal number with no fractional digits.&nbsp;
            Like <code>xs:<a href='#decimal'>decimal</a></code>
            but restricted to be
            <code>[-+]?[0-9]+</code>.&nbsp;
            Has these self-explanatory subtypes:&nbsp;
            <code id='byte'>xs:<dfn>byte</dfn></code>,
            <code id='int'>xs:<dfn>int</dfn></code>,
            <code id='long'>xs:<dfn>long</dfn></code>,
            <code id='negativeInteger'>xs:<dfn>negativeInteger</dfn></code>,
            <code id='nonNegativeInteger'>xs:<dfn>nonNegativeInteger</dfn></code>,
            <code id='nonPositiveInteger'>xs:<dfn>nonPositiveInteger</dfn></code>,
            <code id='positiveInteger'>xs:<dfn>positiveInteger</dfn></code>,
            <code id='short'>xs:<dfn>short</dfn></code>,
            <code id='unsignedByte'>xs:<dfn>unsignedByte</dfn></code>,
            <code id='unsignedInt'>xs:<dfn>unsignedInt</dfn></code>,
            <code id='unsignedLong'>xs:<dfn>unsignedLong</dfn></code>,
            <code id='unsignedShort'>xs:<dfn>unsignedShort</dfn></code>.&nbsp;
          </dd>
        <dt id='float'><code>xs:<dfn>float</dfn></code></dt>
          <dd>Like <code>xs:<a href='#decimal'>decimal</a></code>
            but with an optional <code>E[-+]?[0-9]+</code> on the end,
            plus also the speciol values
            <code>INF</code>,
            <code>-INF</code>, and
            <code>NaN</code>.&nbsp;
            There is also <code id='double'>xs:<dfn>double</dfn></code>,
            just like <code>xs:<a href='#float'>float</a></code> but can be twice as long,&nbsp;
          </dd>
        <dt id='binary'><code>xs:<dfn>binary</dfn></code></dt>
          <dd>Values are <code>true</code>, <code>false</code>,
            <code>1</code>, and <code>0</code>.&nbsp;
          </dd>
      </dl>
    </dd>

  <dt id='dateTime'><code>xs:<dfn>dateTime</dfn></code></dt>
    <dd>A date and time of the form
      <code>CCYY<b>-</b>MM<b>-</b>DD<b>T</b>hh<b>:</b>mm<b>:</b>ss</code>.&nbsp;
      The hyphens, T, and colons are required.&nbsp;
      Fractional seconds and a time zone
      (Z or a time offset such as +05:00) are allowed.&nbsp;
      <dl class='code'>
        <dt id='date'><code>xs:<dfn>date</dfn></code></dt>
          <dd>Like <code>xs:<a href='#dateTime'>dateTime</a></code>
            but without hours, minutes, or seconds
            (time zone is still allowed).&nbsp;
          </dd>
        <dt id='gDay'><code>xs:<dfn>gDay</dfn></code></dt>
          <dd>Like <code>xs:<a href='#dateTime'>dateTime</a></code>
            but without century, year, month,
            hour, minute, or second
            (time zone is still allowed).&nbsp;
          </dd>
        <dt id='gMonth'><code>xs:<dfn>gMonth</dfn></code></dt>
          <dd>Like <code>xs:<a href='#dateTime'>dateTime</a></code>
            but without century, year, day,
            hour, minute, or second
            (time zone is still allowed).&nbsp;
          </dd>
        <dt id='gMonthDay'><code>xs:<dfn>gMonthDay</dfn></code></dt>
          <dd>Like <code>xs:<a href='#dateTime'>dateTime</a></code>
            but without century, year,
            hour, minute, or second
            (time zone is still allowed).&nbsp;
          </dd>
        <dt id='gYear'><code>xs:<dfn>gYear</dfn></code></dt>
          <dd>Like <code>xs:<a href='#gYearMonth'>gYearMonth</a></code>
            but without the month
            (time zone is still allowed).&nbsp;
          </dd>
        <dt id='gYearMonth'><code>xs:<dfn>gYearMonth</dfn></code></dt>
          <dd>A Gregorian year and month (thus the 'g').&nbsp;
            Like <code>xs:<a href='#date'>date</a></code> but without the day
            (time zone is still allowed).&nbsp;
          </dd>
        <dt id='time'><code>xs:<dfn>time</dfn></code></dt>
          <dd>Like <code>xs:<a href='#dateTime'>dateTime</a></code>
            but without century, year, month, or day
            (time zone is still allowed).&nbsp;
          </dd>
      </dl>
    </dd>

  <dt id='duration'><code>xs:<dfn>duration</dfn></code></dt>
    <dd>A duration of the form
      <code>xs:<b>P</b>nYnMnD<b>T</b>nHnMnS</code>.&nbsp;
      The P is required, and the T is required
      if any of the later elements are present.&nbsp;
      Each nX substring represents a number and a unit
      (years, months, days, etc.);&nbsp;
      the number of seconds can be <code>xs:<a href='#decimal'>decimal</a></code>,
      the number of any other unit must be
      <code>xs:<a href='#integer'>integer</a></code>.&nbsp;
    </dd>
</dl>

<p>
Not discussed here:&nbsp;
base64Binary, ENTITY, ENTITIES, hexBinary, IDREFS, NMTOKENS, NOTATION.&nbsp;
</p>


<h1 id='complexType'>Complex type</h1>

<p>
A <code><dfn>complexType</dfn></code> element must contain
an element of one of these kinds:&nbsp;
</p>

<ul>
  <li> <code><a href='#simpleContent'>simpleContent</a></code>,
  </li>
  <li> <code><a href='#complexContent'>complexContent</a></code>,
  </li>
  <li> any <a href='#Compositor'>compositor</a>
      (<code><a href='#all'>all</a></code>,
        <code><a href='#choice'>choice</a></code>, or
        <code><a href='#sequence'>sequence</a></code>), or
  </li>
  <li> a <code><a href='#group'>group</a></code>.&nbsp;
  </li>
</ul>

<p>
In addition,
a <code><a href='#complexType'>complexType</a></code> element may contain
elements of these kinds:&nbsp;
</p>

<ul>
  <li> <code><a href='#attribute'>attribute</a></code> (any number of these),
  </li>
  <li> <code><a href='#attributeGroup'>attributeGroup</a></code>
      (any number of these), and/or
  </li>
  <li> <code><a href='#anyAttribute'>anyAttribute</a></code>.
  </li>
</ul>

<table>
<tbody>
  <tr>
    <th>A <code><a href='#complexType'>complexType</a></code>
        may <br/>be defined to have:</th>
    <th>by giving it:</th>
  </tr>
  <tr>
    <th><a href='#EmptyContent'>empty content</a></th>
    <td>an empty
        <code><a href='#complexContent'>complexContent</a></code> element
        with no <code>mixed='true'</code> attribute
        (<a href='#emptyComplexType'>example</a>)</td>
  </tr>
  <tr>
    <th><a href='#SimpleContent'>simple content</a></th>
    <td>a <code><a href='#simpleContent'>simpleContent</a></code> element</td>
  </tr>
  <tr>
    <th><a href='#ComplexContent'>complex content</a></th>
    <td>a non-empty
        <code><a href='#complexContent'>complexContent</a></code> element,
        or a <a href='#Compositor'>compositor</a>
        or <a href='#Particle'>particle</a></td>
  </tr>
  <tr>
    <th><a href='#MixedContent'>mixed content</a></th>
    <td><a href='#complexContent'>complex content</a> and
        the <code>mixed='true'</code> attribute.&nbsp;</td>
  </tr>
</tbody>
</table>

<p>
For simplicity,
we will say a complex type is
</p>

<ul>
  <li id='Complex-Simple'> <dfn>complex-simple</dfn>
      if it has empty or simple content,
      and
  </li>
  <li id='Complex-Complex'> <dfn>complex-complex</dfn>
      if it has complex or mixed content.&nbsp;
  </li>
</ul>

<h2 id='simpleContent'>Simple content</h2>

<p>
A
<code><dfn>simpleContent</dfn></code>
element of a
<code><a href='#complexType'>complexType</a></code> element must contain
an element of either of these kinds:&nbsp;
 </p>

<ul>
  <li> an <code><a href='#extension'>extension</a></code>
      of a <a href='#simpleType'>simple type</a>
      (without adding child elements), or
  </li>
  <li> a <code><a href='#ComplexRestriction'>restriction</a></code>
      of a <a href='#simpleType'>simple type</a>.&nbsp;
  </li>
</ul>

<h2 id='complexContent'>Complex content</h2>

<p>
A
<code><dfn>complexContent</dfn></code>
element of a
<code><a href='#complexType'>complexType</a></code> element must contain
an element of either of these kinds:&nbsp;
</p>

<ul>
  <li> an <code><a href='#extension'>extension</a></code>
      of a <a href='#simpleType'>simple</a>
      or <a href='#complexType'>complex type</a>, or
  </li>
  <li> a <code><a href='#ComplexRestriction'>restriction</a></code>
      of a <a href='#simpleType'>simple</a>
      or <a href='#complexType'>complex type</a>.&nbsp;
  </li>
</ul>

<p>
If the <code>mixed='true'</code> attribute is given,
the contents may include <a href='#character-data'>character data</a>
as well as child elements;&nbsp;
otherwise,
it may only include child elements.&nbsp;
</p>


<h2 id='extension'>Extension</h2>

<p>
An <code><dfn>extension</dfn></code> element
creates a new type by adding elements and/or attributes to
a <a href='#simpleType'>simple</a> or <a href='#complexType'>complex type</a>.&nbsp;
</p>

<ul>
  <li> The type to extend must be defined at the <a href='#TopLevel'>top level</a>
      and have a <code><a href='#name'>name</a></code>.&nbsp;
  </li>
  <li> The type to extend is identified using the
      <code><a href='#extension'>extension</a></code> element's
      <code><a href='#base'>base</a></code> attribute.&nbsp;
  </li>
  <li> Elements are added using a
      <code><a href='#group'>group</a></code>,
      <code><a href='#all'>all</a></code>,
      <code><a href='#choice'>choice</a></code>, or
      <code><a href='#sequence'>sequence</a></code> element
      in the contents of the <code><a href='#extension'>extension</a></code>.&nbsp;
  </li>
  <li> Attributes are added using
      <code><a href='#attribute'>attribute</a></code> and/or
      <code><a href='#attributeGroup'>attributeGroup</a></code> elements or an
      <code><a href='#anyAttribute'>anyAttribute</a></code> element
      in the contents of the <code><a href='#extension'>extension</a></code>.&nbsp;
  </li>
</ul>

<p id='emptyComplexType'>
Example:&nbsp;
</p>

<pre>
  &lt;xs:complexType name='emptyComplexType'/&gt;

  &lt;xs:complexType name='vowelStringInLanguage'&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:extension base='emptyComplexType'&gt;
        &lt;xs:attribute name='vowels' type='vowelString'&lt;/a&gt;/&gt;
        &lt;xs:attribute name='language' type='xs:language'/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
</pre>


<h2 id='ComplexRestriction'>Restriction (of a complex type)</h2>

<p>
A new complex type may be derived by from an existing
<a href='#Complex-Simple'>complex-simple type</a> by
<a href='#ComplexRestrictionSimpleContent'>restriction</a>,
in all the ways that
a simple type can be derived from an existing simple type
(see <code><a href='#restriction'>restriction</a></code> for simple types).&nbsp;
</p>

<p>
In addition,
a new complex type may be derived by from an existing
<a href='#Complex-Complex'>complex-complex type</a> by
a <a href='#ComplexRestrictionComplexContent'>restriction</a>
that reduces the child elements allowed
or the type of a child element.&nbsp;
</p>

<p>
In either case,
the restriction of a complex type
can reduce the scope of one or more attributes of the type.&nbsp;
</p>


<h3   id='ComplexRestrictionSimpleContent'>Restriction (of a complex-simple type)</h3>

<p>
The <a href='#character-data'>character data</a>
allowed for a complex type with simple content
may be restricted in all the ways that a simple type can
(see <code><a href='#restriction'>restriction</a></code> of simple types).&nbsp;
In addition,
the types of attributes for the complex type
may be restricted.&nbsp;
</p>

<ul>
  <li> The <code><a href='#ComplexRestrictionSimpleContent'>restriction</a></code>
    may contain
    <code><a href='#attribute'>attribute</a></code> elements (any number of these),
    <code><a href='#attributeGroup'>attributeGroup</a></code> elements (any number of these),
    and/or an
    <code><a href='#anyAttribute'>anyAttribute</a></code> element.&nbsp;
  </li>
  <li> The attributes named in these elements
    must be attributes of the base type being restricted.&nbsp;
  </li>
  <li> The type assigned to an attribute by these elements
    must be the same or a restriction
    of the type assigned to that attribute by the base type.&nbsp;
  </li>
  <li> Any attribute of the base type
    that is not named in the
    <code><a href='#ComplexRestrictionSimpleContent'>restriction</a></code>
    is assumed to have the same type as it did in the base type.&nbsp;
  </li>
  <li> To exclude a base type attribute,
    give it the <code><a href='#UseProhibited'>use=prohibited</a></code>
    attribute in the restricted type.&nbsp;
  </li>
</ul>

<p>
Examples:&nbsp; <span class='FW'>(under construction)</span>
</p>


<h3   id='ComplexRestrictionComplexContent'>Restriction (of a complex-complex type)</h3>

<p>
The <a href='#character-data'>character data</a>
and attributes allowed for a complex type with complex content
may be restricted in all the ways that a simple type
or complex type with simple content can
(see
<code><a href='#restriction'>restriction</a></code> of simple types and
<code><a href='#ComplexRestrictionSimpleContent'>restriction</a></code>
of simple content).&nbsp;
In addition,
the child elements of the type may be restricted.&nbsp;
</p>

<ul>
  <li> The <code><a href='#ComplexRestrictionComplexContent'>restriction</a></code>
    may contain
    <code><a href='#group'>group</a></code>,
    <code><a href='#all'>all</a></code>,
    <code><a href='#choice'>choice</a></code>, or
    <code><a href='#sequence'>sequence</a></code> elements.&nbsp;
  </li>
  <li> These elements must be the same or a subset
    of the ones appearing in the base type.&nbsp;
  </li>
  <li> The type assigned to each element must be the same
    or a restriction of the type assigned to that element in the base type.&nbsp;
  </li>
  <li> An element of the base type
    may be excluded from the restricted type (unlike attributes).&nbsp;
    If an element is not listed in the restriction,
    that element may not appear in instances of the new type.&nbsp;
  </li>
</ul>

<p>
Examples:&nbsp; <span class='FW'>(under construction)</span>
</p>

<h2 id='Compositor'>Compositors <code>all</code>, <code>choice</code>, and <code>sequence</code></h2>

<p>
<code><a href='#all'>all</a></code>,
<code><a href='#choice'>choice</a></code>, and
<code><a href='#sequence'>sequence</a></code>
are the XML Schema <dfn>compositors</dfn>,
useful in that they allow a composition of more than one
<a href='#Particle'>particle</a>
where a single <a href='#Particle'>particle</a> could otherwise appear.&nbsp;
</p>


<h3   id='all'><code>all</code></h3>

<p>
<code><dfn>all</dfn></code> is not discussed here;&nbsp;
it does not appear useful in ordinary situations.&nbsp;
</p>


<h3   id='choice'><code>choice</code></h3>

<p>
A <code><dfn>choice</dfn></code> compositor
lists mutually exclusive child elements
that may appear where the compositor does.&nbsp;
</p>

<ul>
  <li> A  <code><a href='#choice'>choice</a></code> may contain
    <code><a href='#element'>element</a></code>,
    <code><a href='#any'>any</a></code>,
    <code><a href='#group'>group</a></code>,
    <code><a href='#choice'>choice</a></code>, and/or
    <code><a href='#sequence'>sequence</a></code> elements.&nbsp;
  </li>
  <li> These sub-elements may be given
    <code><a href='#minOccurs'>minOccurs</a></code> and/or
    <code><a href='#maxOccurs'>maxOccurs</a></code> attributes
    to indicate how many instances of them
    must appear if that sub-element is chosen.&nbsp;
  </li>
  <li> If the <code><a href='#choice'>choice</a></code> is not
    an element of a <code><a href='#group'>group</a></code>,
    it may itself be given <code><a href='#minOccurs'>minOccurs</a></code>
    and <code><a href='#maxOccurs'>maxOccurs</a></code>
    attributes, so that it can represent
    a range of numbers of choices from the sub-elements
    rather than a single choice.&nbsp;
  </li>
</ul>

<p>
Examples:&nbsp; <span class='FW'>(under construction)</span>
</p>


<h3   id='sequence'><code>sequence</code></h3>

<p>
A <code><dfn>sequence</dfn></code> compositor
lists child elements
that must appear where the compositor does
in the sequence in which they are listed.&nbsp;
</p>

<ul>
  <li> A  <code><a href='#sequence'>sequence</a></code> may contain
    <code><a href='#element'>element</a></code>,
    <code><a href='#any'>any</a></code>,
    <code><a href='#group'>group</a></code>,
    <code><a href='#choice'>choice</a></code>, and/or
    <code><a href='#sequence'>sequence</a></code> elements.&nbsp;
  </li>
  <li> These sub-elements may be given
    <code><a href='#minOccurs'>minOccurs</a></code> and/or
    <code><a href='#maxOccurs'>maxOccurs</a></code> attributes
    to indicate how many instances of them
    must appear there in the sequence.&nbsp;
  </li>
  <li> If the <code><a href='#sequence'>sequence</a></code> is not
    an element of a <code><a href='#group'>group</a></code>,
    it may itself be given <code><a href='#minOccurs'>minOccurs</a></code>
    and <code><a href='#maxOccurs'>maxOccurs</a></code>
    attributes, so that it can represent
    a range of numbers of sequences of the elements
    rather than a single sequence.&nbsp;
  </li>
</ul>

<p>
Examples:&nbsp; <span class='FW'>(under construction)</span>
</p>


<h2 id='Particle'>Particles <code>any</code> and <code>group</code></h2>

<p>
<code><a href='#element'>element</a></code>,
<code><a href='#any'>any</a></code>,
<code><a href='#group'>group</a></code>,
and the <a href='#Compositor'>compositors</a>
<code><a href='#choice'>choice</a></code> and
<code><a href='#sequence'>sequence</a></code>
are the XML Schema <dfn>particles</dfn>.&nbsp;
A particle is used in a <a href='#Compositor'>compositor</a>
to define a part of a <a href='#complexType'>complexType</a>.&nbsp;
</p>

<p>
Any particle can have a
<code><a href='#minOccurs'>minOccurs=</a></code> and/or
<code><a href='#maxOccurs'>maxOccurs=</a></code> attribute,
as long as it is not appearing in a <code><a href='#group'>group</a></code>.&nbsp;
</p>


<h3   id='any'><code>any</code></h3>

<p>
The <code><dfn>any</dfn></code> element
represents any element in a specified namespace.&nbsp;
</p>

<p id='namespace'>
Its <code>namespace</code> attribute
has several possible values:
</p>

<ul>
  <li> A whitespace-separated list of one or more URIs,
      possibly including the special values
      <code>##targetNamespace</code> for the
      <a href='#targetNamespace'>target namespace</a> specified in
      the schema element, and/or
      <code>##local</code> for elements defined in the schema
      but not appearing with a namespace prefix.&nbsp;
  </li>
  <li> <code>##any</code>, which causes the
      <code><a href='#any'>any</a></code> element to represent
      elements from any namespace
      (this is the default).&nbsp;
  </li>
  <li> <code>##other</code>, which causes the
      <code><a href='#any'>any</a></code> element to represent
      elements from namespaces other than the
      <a href='#targetNamespace'>target namespace</a>,
      or from any namespace if the schema specifies no target namespace.&nbsp;
  </li>
</ul>

<p>
An <code><a href='#any'>any</a></code> element
must be empty.&nbsp;
</p>

<p>
There is also <code><a href='#anyAttribute'>anyAttribute</a></code>
for attributes.&nbsp;
</p>

<p>
Examples:&nbsp; <span class='FW'>(under construction)</span>
</p>


<h3   id='group'><code>group</code></h3>

<p>
A <code><dfn>group</dfn></code> is a named set of
<code><a href='#element'>elements</a></code>.&nbsp;
A named <code><a href='#group'>group</a></code> must be defined
at the <a href='#TopLevel'>top level</a> (contained only by the
<code><a href='#schema'>schema</a></code> element)
and given a name using its <code><a href='#name'>name</a></code> attribute,
as in this examples:
</p>

<pre>
  &lt;xs:group name='groupSubtractiveColorsWithLanguage'&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name='subtractiveColor' type='subtractiveColors'/&gt;
      &lt;xs:element name='language' type='xs:language'/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:group&gt;
</pre>

<p>
The named <code><a href='#group'>group</a></code>
can then be referenced by an <a href='#EmptyElement'>empty-element</a>
<code><a href='#group'>group</a></code> tag
using its <code><a href='#ref'>ref</a></code> attribute,
and the effect is as if
the contents of the group appeared at that point.&nbsp;
</p>

<p>
This example defines two equivalent complex types,
the first using a group and the second directly:
</p>

<pre>
  &lt;xs:complexType name='SubtractiveColorsWithLanguage'&gt;
    &lt;xs:group ref='groupSubtractiveColorsWithLanguage'/&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name='subtractiveColorAndLanguage'&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name='subtractiveColor' type='subtractiveColors'/&gt;
      &lt;xs:element name='language' type='xs:language'/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
</pre>

<ul>
  <li> A <code><a href='#group'>group</a></code> may contain
    <code><a href='#element'>element</a></code>,
    <code><a href='#group'>group</a></code>,
    <code><a href='#all'>all</a></code>,
    <code><a href='#choice'>choice</a></code>, and
    <code><a href='#sequence'>sequence</a></code> elements.&nbsp;
  </li>
  <li> The child elements of a <code><a href='#group'>group</a></code>
    may not have either
    the <code><a href='#minOccurs'>minOccurs</a></code> or
    the <code><a href='#maxOccurs'>maxOccurs</a></code> attributes.&nbsp;
  </li>
  <li> A <code><a href='#group'>group</a></code> definition
    may not have either
    the <code><a href='#minOccurs'>minOccurs</a></code> or
    the <code><a href='#maxOccurs'>maxOccurs</a></code> attributes,
    but an empty-element <code><a href='#group'>group</a></code>
    referring to a named group may have them
    (unless it appears within a <code><a href='#group'>group</a></code> itself).&nbsp;
  </li>
</ul>

<p>
There are also
<a href='#attributeGroup'>attributeGroup</a>s.&nbsp;
</p>


<h2 id='attribute'>Attribute for a complex type</h2>

<p>
A <code><a href='#complexType'>complexType</a></code> is given an
attribute by giving it an <code><dfn>attribute</dfn></code> child element.&nbsp;
</p>

<p>
Attributes may be
<a href='#AttributeDefinition'>defined globally</a>,
<a href='#AttributeReference'>referenced</a>, or
<a href='#AttributeLocal'>defined locally</a>.&nbsp;
</p>


<h3   id='AttributeDefinition'>Global definition of an attribute</h3>

<p>
Attributes may be named and defined at the <a href='#TopLevel'>top level</a>,
and then referenced by name elsewhere.&nbsp;
Such definitions may contain these attributes:&nbsp;
</p>

<ul>
  <li> <code><a href='#default'>default</a></code> giving the default value
      (an <code>xs:<a href='#string'>string</a></code>)
      of the attribute
      that is used for any element in which the attribute can appear
      but does not.&nbsp;
  </li>
  <li> <code><a href='#fixed'>fixed</a></code> giving a single value
      (an <code>xs:<a href='#string'>string</a></code>)
      that is the only value the attribute may be given;&nbsp;
      the attribute then must either appear with that value,
      or not appear.&nbsp;
      <code>fixed</code> and <code>default</code>
      are mutually exclusive.&nbsp;
  </li>
  <li> <code><a href='#name'>name</a></code>,
      the name of the defined attribute in any element it is part of,
      and also the name by which this definition is referenced.&nbsp;
  </li>
  <li> <code><a href='#type'>type</a></code>,
      the type of the defined attribute's value.&nbsp;
      This attribute can't appear if a type is given in the body of the
      <code><a href='#attribute'>attribute</a></code> element.&nbsp;
  </li>
</ul>

<p>
The type of the attribute's value
is given either
by a <code><a href='#type'>type</a></code> attribute of the definition
or by a <code><a href='#simpleType'>simpleType</a></code> child element
of the definition.&nbsp;
</p>


<h3   id='AttributeReference'>Reference to a global definition of an attribute</h3>

<p>
A defined attribute may be given to an element or element type
by a child empty-element <code><a href='#attribute'>attribute</a></code>.&nbsp;
The empty-element <code><a href='#attribute'>attribute</a></code>
may have these attributes:
</p>

<ul>
  <li> <code><a href='#ref'>ref</a></code>
    specifying the attribute definition;&nbsp; required.&nbsp;
  </li>
  <li id='use'> <code>use</code>, which may have one of these values:&nbsp;
    <ul>
      <li id='UseProhibited'> <code>use=prohibited</code>,
        meaning the attribute may not appear
        (useful in
        <code><a href='#ComplexRestrictionSimpleContent'
        >restrictions</a></code>).&nbsp;
      </li>
      <li> <code>use=optional</code>:&nbsp; this is the default.&nbsp;
      </li>
      <li> <code>use=required</code>.&nbsp;
      </li>
    </ul>
  </li>
  <li id='AttributeForm'> <code>form=qualified</code> (if the attribute name
    must be qualified with the namespace when appearing in
    the element or type) or
    <code>form=unqualified</code> if not.&nbsp;
    The default is set by the <code><a href='#schema'>schema</a></code>
    element's
    <code><a href='#attributeFormDefault'>attributeFormDefault</a></code>
    attribute.&nbsp;
  </li>
</ul>


<h3   id='AttributeLocal'>Local definition of an attribute</h3>

<p>
An attribute may be given to an element or element type
by an <code><a href='#attribute'>attribute</a></code> element
that gives the name and type of the attribute directly.&nbsp;
The local definition can have these attributes:&nbsp;
</p>

<ul>
  <li> <code><a href='#default'>default</a></code>
  </li>
  <li> <code><a href='#fixed'>fixed</a></code>
  </li>
  <li> <code><a href='#AttributeForm'>form</a></code>
  </li>
  <li> <code><a href='#name'>name</a></code> giving the name of the attribute;&nbsp;
    a local definition can't be referenced elsewhere by its name.&nbsp;
  </li>
  <li> <code><a href='#type'>type</a></code>
  </li>
  <li> <code><a href='#use'>use</a></code>
  </li>
</ul>

<p>
It may not have a <code><a href='#ref'>ref</a></code> attribute.&nbsp;
</p>

<p>
The type of the attribute's value
is given either
by a <code><a href='#type'>type</a></code> attribute of the definition
or by a <code><a href='#simpleType'>simpleType</a></code> child element
of the definition.&nbsp;
</p>

<p>
Examples:&nbsp; <span class='FW'>(under construction)</span>
</p>


<h2 id='attributeGroup'>Attribute group</h2>

<p>
An <dfn>attribute group</dfn> is a named set of
<code><a href='#attribute'>attributes</a></code>.&nbsp;
Like a <code><a href='#group'>group</a></code>,
it must be defined at the <a href='#TopLevel'>top level</a>
and can be referenced elsewhere.&nbsp;
An <code><a href='#attributeGroup'>attributeGroup</a></code>
may contain
<code><a href='#attribute'>attribute</a></code> and/or
<code><a href='#attributeGroup'>attributeGroup</a></code>
elements.&nbsp;
An <code><a href='#attributeGroup'>attributeGroup</a></code>
definition must have a <code><a href='#name'>name</a></code> attribute,
and a <code><a href='#attributeGroup'>attributeGroup</a></code>
reference must be empty
and have a <code><a href='#ref'>ref</a></code> attribute.&nbsp;
</p>

<p>
Examples:&nbsp; <span class='FW'>(under construction)</span>
</p>

<p>
See <code><a href='#group'>group</a></code>.&nbsp;
</p>


<h2 id='anyAttribute'>Any attribute allowed</h2>

<p>
The <code><dfn>anyAttribute</dfn></code> element
represents any attribute in a specified namespace.&nbsp;
An <code><a href='#anyAttribute'>anyAttribute</a></code> element
may have a <code><a href='#namespace'>namespace</a></code> attribute,
and must be empty.&nbsp;
It is analogous to <code><a href='#any'>any</a></code>
for elements.&nbsp;
</p>

<p>
Examples:&nbsp; <span class='FW'>(under construction)</span>
</p>


<h1 id='CommonAttributes'>Attributes common to several schema elements</h1>

<p>
Many of the XML Schema elements
share the same attributes.&nbsp;
Some of those are described here.&nbsp;
</p>


<h2   id='base'><code>base</code></h2>

<p>
<code><dfn>base</dfn></code> is used to refer to
a simpleType or complexType
that is being extended or restricted.&nbsp;
It is similar to <code><a href='#ref'>ref</a></code>
and <code><a href='#type'>type</a></code>
but is only used to reference base types.&nbsp;
</p>

<p>
The type of a <code><a href='#base'>base</a></code> value
is <code>xs:<a href='#NCName'>NCName</a></code>.&nbsp;
</p>


<h2   id='default'><code>default</code></h2>

<p><code><dfn>default</dfn></code> indicates the default value
of an attribute or element;&nbsp;
the default value is assumed
for an attribute that does not appear,
or for an element with <a href='#EmptyContent'>empty content</a>.&nbsp;
The only elements for which it is allowed
are those with <a href='#SimpleContent'>simple content</a>,
as values of <a href='#ComplexContent'>complex content</a> cannot be given
in an attribute value.&nbsp;
</p>

<p>
<code><a href='#default'>default</a></code> and
<code><a href='#fixed'>fixed</a></code> may not appear together.&nbsp;
</p>


<h2   id='fixed'><code>fixed</code></h2>

<p><code><dfn>fixed</dfn></code> indicates an attribute or element
that can only have one value;&nbsp;
that value is given by the value of the
<code><a href='#fixed'>fixed</a></code> attribute.&nbsp;
The only elements for which it is allowed
are those with <a href='#SimpleContent'>simple content</a>,
as values of <a href='#ComplexContent'>complex content</a> cannot be given
in an attribute value.&nbsp;
</p>

<p>
<code><a href='#default'>default</a></code> and
<code><a href='#fixed'>fixed</a></code> may not appear together.&nbsp;
</p>


<h2   id='maxOccurs'><code>maxOccurs</code></h2>

<p><code><dfn>maxOccurs</dfn></code> indicates the maximum number of times
an instance represented by the element may appear.&nbsp;
If the <code><a href='#maxOccurs'>maxOccurs</a></code> attribute is not given,
1 is assumed.&nbsp;
<code><a href='#maxOccurs'>maxOccurs</a></code> may be given
any non-negative integer value,
and also the special value <code>unbounded</code>.&nbsp;
</p>

<p>
The value of <code><a href='#minOccurs'>minOccurs</a></code>
(assumed or explicit)
must not be greater than
the value of <code><a href='#maxOccurs'>maxOccurs</a></code>
(assumed or explicit).&nbsp;
</p>

<p>
Examples:
</p>

<pre>
  &lt;xs:group name='OccursExample'&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name='Default'/&gt;
      &lt;xs:element name='SameAsDefault'  minOccurs='1' maxOccurs='1'/&gt;
      &lt;xs:element name='ZeroOrOneTimes' minOccurs='0'/&gt;
      &lt;xs:element name='OnceOrTwice'                  maxOccurs='2'/&gt;
      &lt;xs:element name='AtLeastOnce'                  maxOccurs='unbounded'/&gt;
      &lt;xs:element name='AnyNumber'      minOccurs='0' maxOccurs='unbounded'/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:group&gt;
</pre>


<h2   id='minOccurs'><code>minOccurs</code></h2>

<p><code><dfn>minOccurs</dfn></code> indicates the minimum number of times
an instance represented by the element may appear.&nbsp;
If the <code><a href='#minOccurs'>minOccurs</a></code> attribute is not given,
1 is assumed.&nbsp;
<code><a href='#minOccurs'>minOccurs</a></code> may be given
any non-negative integer value.&nbsp;
</p>

<p>
The value of <code><a href='#minOccurs'>minOccurs</a></code>
(assumed or explicit)
must not be greater than
the value of <code><a href='#maxOccurs'>maxOccurs</a></code>
(assumed or explicit).&nbsp;
</p>


<h2   id='name'><code>name</code></h2>

<p>
<code><dfn>name</dfn></code> is used to give a name to a definition
that can then be referenced elsewhere using a
<code><a href='#ref'>base</a></code>,
<code><a href='#ref'>ref</a></code>,
<code><a href='#ref'>type</a></code>,
or other attribute.&nbsp;
</p>

<p>
It is also used to specify the names of elements and attributes
that can appear in an XML file matching the schema.&nbsp;
</p>

<p>
The type of a <code><a href='#name'>name</a></code> value
is <code>xs:<a href='#NCName'>NCName</a></code>.&nbsp;
</p>


<h2   id='ref'><code>ref</code></h2>

<p><code><dfn>ref</dfn></code> is used to reference
a named definition (see <code><a href='#name'>name</a></code>).&nbsp;
</p>

<p>
The type of a <code><a href='#ref'>ref</a></code> value
is <code>xs:<a href='#NCName'>NCName</a></code>.&nbsp;
</p>

<h2   id='type'><code>type</code></h2>

<p><code><dfn>type</dfn></code> is used to reference
a named type (see <code><a href='#name'>name</a></code>).&nbsp;
It is similar to <code><a href='#ref'>ref</a></code>
but is only used to reference types.&nbsp;
</p>

<p>
The type of a <code><a href='#type'>type</a></code> value
is <code>xs:<a href='#NCName'>NCName</a></code>.&nbsp;
</p>


<h1 id='MoreElement'>More on <code>element</code></h1>

<p>
Attributes:&nbsp;
</p>

<ul>
  <li id='ElementDefault'> <code><dfn>default</dfn></code>
    specifies a value that is assumed as
    the intended contents of an empty instance
    of this element.&nbsp;
    The value must be of <code><a href='#simpleContent'>simpleContent</a></code>
    because it is given in an attribute value.&nbsp;
    <code><a href='#default'>default</a></code> and
    <code><a href='#fixed'>fixed</a></code> cannot both appear.&nbsp;
  </li>
  <li id='ElementFixed'> <code><dfn>fixed</dfn></code>
    specifies a value that all instances of the element must have,
    and that is used as the default value of empty instances of this element.&nbsp;
    <code><a href='#default'>default</a></code> and
    <code><a href='#fixed'>fixed</a></code> cannot both appear.&nbsp;
  </li>
  <li id='ElementForm'> <code><dfn>form</dfn></code>
    specifies, for a local element definition only,
    whether the element name belongs to
    the target namespace (<code>form=qualified</code>)
    or to no namespace (<code>form=unqualified</code>).&nbsp;
    The default is set by the <code><a href='#schema'>schema</a></code>
    attribute <code><a href='#elementFormDefault'></a></code>.&nbsp;
    Compare <code><a href='#attribute'>attribute</a></code>'s
    <code><a href='#AttributeForm'>form</a></code> element,
    whose meaning is different although its syntax is identical.&nbsp;
  </li>
</ul>


<h1 id='MoreSchema'>More on <code>schema</code></h1>

<p>
Attributes:&nbsp;
</p>

<ul>
  <li id='attributeFormDefault'> <code><dfn>attributeFormDefault</dfn></code>
    specifies whether it is the default that
    attributes in XML files matching the schema
    must have a namespace prefix (<code>attributeFormDefault=qualified</code>)
    or need not (<code>attributeFormDefault=unqualified</code>, the default).&nbsp;
    See the <code><a href='#attribute'>attribute</a></code> attribute
    <code><a href='#AttributeForm'>form</a></code>.&nbsp;
  </li>
  <!-- <li id='blockDefault'> <code>blockDefault</code> -->
  <li id='elementFormDefault'> <code><dfn>elementFormDefault</dfn></code>
    specifies whether it is the default that
    elements in XML files matching the schema
    must have a namespace prefix (<code>elementFormDefault=qualified</code>)
    or need not (<code>elementFormDefault=unqualified</code>, the default).&nbsp;
    See the <code><a href='#element'>element</a></code> attribute
    <code><a href='#ElementForm'>form</a></code>.&nbsp;
  </li>
  <!-- <li id='final'> <code>final</code> -->
  <li id='lang'> <code><dfn>lang</dfn></code>
    gives the language in which the schema's text is written;&nbsp;
    its value is of type <code>xs:<a href='#language'>language</a></code>.&nbsp;
    This attribute is defined as part of XML
    and can be given for any XML element
    (often appearing as <code>xml:lang</code>).&nbsp;
  </li>
  <li id='targetNamespace'> <code><dfn>targetNamespace</dfn></code>
    specifies the namespace (if any) whose names
    the <code><a href='#schema'>schema</a></code> defines.&nbsp;
    <ul>
      <li>
        The attribute value must be a <a href='#anyURI'>URI</a>
        that is the value of one of the <code><a href='#schema'>schema</a></code>'s
        <code><a href='#xmlns'>xmlns</a></code> attributes.&nbsp;
      </li>
      <li>
        All qualified attributes and elements defined in the schema
        must be qualified with the prefix
        given to this namespace in that
        <code><a href='#xmlns'>xmlns</a></code> attribute.&nbsp;
      </li>
      <li>
        If no <a class='tt' href='#targetNamespace'>targetNamespace</a>
        attribute is given,
        the elements and attributes are not defined in a namespace.&nbsp;
      </li>
    </ul>
  </li>
  <li id='xmlns'> <code><dfn>xmlns</dfn></code>
    gives the default namespace,
    the namespace for unqualified elements
    (those whose names have no prefix).&nbsp;
    Its value is a <a href='#anyURI'>URI</a>.&nbsp;
    Example:&nbsp;
    <ul>
      <li> <code>xmlns='http://www.w3.org/2001/XMLSchema'</code>
        makes the XMLSchema namespace the default
        for unqualified element names
        (but not unqualified attribute names &mdash;
        those are assumed to be in the same namespace
        as the element containing them).&nbsp;
      </li>
    </ul>
  </li>
  <li id='xmlns_'> <code><dfn>xmlns:*</dfn></code>
    defines a prefix that refers to a specific namespace.&nbsp;
    The prefix is the <a href='#NCName'>xs:NCName</a>
    that appears instead of the <code>*</code> in the
    <code>xmlns:*</code> attribute.&nbsp;
    The attribute's value is a <a href='#anyURI'>URI</a>
    that gives the namespace for the prefix.&nbsp;
    Example:&nbsp;
    <ul>
      <li> <code>xmlns:xs='http://www.w3.org/2001/XMLSchema'</code>
        makes the <code>xs</code> prefix
        refer to the XMLSchema namespace.&nbsp;
        Any name preceded by <code>xs:</code> will be considered
        as a name in that namespace.&nbsp;
      </li>
    </ul>
  </li>
</ul>


<h1 id='Comments'>Comments</h1>

<p>
Ordinary XML comments may be used in XML schemas.&nbsp;
These comments may appear anywhere an element may.&nbsp;
</p>

<p>
Example:&nbsp;
</p>
<pre>
  <!-- Comment -->
</pre>

<p id='annotation'>
The <dfn><code>annotation</code></dfn> element
is provided specifically for commenting schemas.&nbsp;
An <code><a href='#annotation'>annotation</a></code>
may appear as the first element of almost any XML Schema element,
and may appear anywhere at the <a href='#TopLevel'>top level</a>
in a <code><a href='#schema'>schema</a></code> element.&nbsp;
(An <code><a href='#annotation'>annotation</a></code>
cannot appear within another <code><a href='#annotation'>annotation</a></code>
or its children.)&nbsp;
</p>

<p id='documentation'>
An <code><a href='#annotation'>annotation</a></code>
may contain a <code><dfn>documentation</dfn></code> element
containing a human-readable comment,
and/or an <code><dfn>appinfo</dfn></code> element
containing program-readable text.&nbsp;
</p>

<p>
Example:&nbsp;
</p>

<pre>
  &lt;xs:element name='annotatedElement'&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        Here is a comment for this schema element.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
  &lt;/xs:element&gt;
</pre>


<h1 id='UniqueValues'>Uniqueness constraints</h1>

<p>
XML Schema provides several ways of ensuring unique values
for attributes or elements
and using those values in references.&nbsp;
Of course,
it is always possible to
exercise discipline and ensure that certain values in an XML file are unique,
or to write a program to check the constraints you need.&nbsp;
Using the features described here
forces XML validators to check the uniqueness constraints
whenever an XML instance of your schema is read by a validator.&nbsp;
</p>

<p>
One way is through the predefined types
<code><a href='#ID'>ID</a></code> and
<code><a href='#IDREF'>IDREF</a></code>.&nbsp;
Schema processors are expected to check
that values of type <code><a href='#ID'>ID</a></code> in an XML file are unique,
and
that values of type <code><a href='#IDREF'>IDREF</a></code>
are also values of type <code><a href='#ID'>ID</a></code> in the same file.&nbsp;
</p>

<p>
A second way is to use
<code><a href='#unique'>unique</a></code>,
<code><a href='#key'>key</a></code>,
and/or
<code><a href='#keyref'>keyref</a></code>.&nbsp;
</p>

<p id='unique'>
A <code><dfn>unique</dfn></code> element
identifies elements
with unique field or element values.&nbsp;
These values are constrained to be unique within
each instance of <code><a href='#unique'>unique</a></code>'s
parent <code><a href='#element'>element</a></code>
(<code><a href='#unique'>unique</a></code> can only occur as
a child of an <code><a href='#element'>element</a></code>).&nbsp;
This parent <code><a href='#element'>element</a></code>
defines the scope of the constraint,
and is here termed the <dfn>scope node</dfn>.&nbsp;
</p>

<p>
The <code><a href='#unique'>unique</a></code> element must contain
two subelements:
</p>

<ul>
  <li> <code><a href='#selector'>selector</a></code>,
    whose <code>xpath</code> attribute identifies
    the <code><a href='#unique'>scope node</a></code>'s descendant elements
    that are uniquely distinguished
    (here termed the <code><a href='#selector'>selected elements</a></code>), and
  </li>
  <li> <code><a href='#field'>field</a></code>,
    whose <code>xpath</code> attribute identifies
    the element or field
    (here termed the <code><a href='#field'>distinguishing node</a></code>)
    whose value is unique
    for each of the <code><a href='#selector'>selected elements</a></code>.&nbsp;
  </li>
</ul>

<p>
The values are constrained to be unique among the
selected descendants of the <code><a href='#unique'>scope node</a></code>
(contrast <code><a href='#ID'>ID</a></code>s, which
are unique within the entire file).&nbsp;
The distinguishing field or element may be an optional one,
in which case only descendants that possess it
are constrained.&nbsp;
</p>

<p>
Each <code><a href='#unique'>unique</a></code> element is required
to have a <code><a href='#name'>name</a></code> field,
and the name values must be unique among
all <code><a href='#unique'>unique</a></code> and
<code><a href='#key'>key</a></code> elements in the schema.&nbsp;
</p>

<p id='selector'>
A <code><dfn>selector</dfn></code> element
identifies a set of <dfn>selected elements</dfn>.&nbsp;
Its <code>xpath</code> attribute
gives the <a href='xslt.html#Pattern'>pattern</a>
that selects those elements,
using the <code><a href='#unique'>scope node</a></code>
(the <code><a href='#selector'>selector</a></code> element's
<code><a href='#element'>element</a></code> grandparent)
as the context node.&nbsp;
In the most common case,
the pattern simply names the element type.&nbsp;
However, any pattern that selects a child of the
<code><a href='#unique'>scope node</a></code> is allowed.&nbsp;
</p>

<p id='field'>
A <code><dfn>field</dfn></code> element
identifies a <dfn>distinguishing node</dfn>,
an element or field of the
<code><a href='#selector'>selected elements</a></code>.&nbsp;
Its <code>xpath</code> attribute
gives the <a href='xslt.html#Pattern'>pattern</a>
that selects the element or field,
using each element selected by
the <code><a href='#selector'>selector</a></code> element
as the context node.&nbsp;
In the most common case,
the pattern simply names the field
(preceded by <code>@</code> to show it is a field).&nbsp;
However, any pattern that selects a child of the selected elements
or a field of a child is allowed.&nbsp;
It is possible to select several children as a composite field,
but that is not discussed further here.&nbsp;
</p>

<p id='key'>
A <code><dfn>key</dfn></code> element
is like a <code><a href='#unique'>unique</a></code> element,
except that its <code><a href='#field'>field</a></code> child element
may only select a
<code><a href='#field'>distinguishing node</a></code> that is required,
whereas for <code><a href='#unique'>unique</a></code>
the <code><a href='#field'>distinguishing node</a></code> may be
an element for which
<code><a href='#minOccurs'>minOccurs</a>=0</code>
or a field for which <code>use=optional</code>.&nbsp;
</p>

<p id='keyref'>
A <dfn><code>keyref</code></dfn> element
defines a reference to a
<code><a href='#selector'>selected element</a></code> of
a <code><a href='#key'>key</a></code>
or <code><a href='#unique'>unique</a></code> element.&nbsp;
The <code><a href='#keyref'>keyref</a></code> should be a sibling of the
<code><a href='#key'>key</a></code> or
<code><a href='#unique'>unique</a></code> element
(this is not required, but produces results that are more predictable).&nbsp;
</p>

<p>
The <code><a href='#keyref'>keyref</a></code> element must contain
two subelements:&nbsp;
</p>

<ul>
  <li> <code><a href='#selector'>selector</a></code>,
    whose <code>xpath</code> attribute identifies
    the <code><a href='#unique'>scope node</a></code>'s descendant elements
    that contain the key references, and
  </li>
  <li> <code><a href='#field'>field</a></code>,
    whose <code>xpath</code> attribute identifies
    the element or field whose value is the key reference.&nbsp;
  </li>
</ul>

<p>
Each <code><a href='#keyref'>keyref</a></code> element is required to have
two attributes:&nbsp;
</p>

<ul>
  <li> <code><a href='#name'>name</a></code>, and
  </li>
  <li> <code>refer</code>, whose value is
    the <code><a href='#name'>name</a></code> of the
    <code><a href='#key'>key</a></code> or
    <code><a href='#unique'>unique</a></code> element
    whose unique value is referenced by
    this <code><a href='#keyref'>keyref</a></code>'s
    <a href='#selector'>selected elements'</a>
    <code><a href='#field'>distinguishing nodes</a></code>.&nbsp;
  </li>
</ul>

<p>
Example:&nbsp;
</p>

<pre>
  &lt;xs:element name='world'&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name='state' maxOccurs='unbounded'&gt;
          &lt;xs:complexType&gt;
            &lt;xs:choice maxOccurs='unbounded'&gt;
              &lt;xs:element name='car'&gt;
                &lt;xs:complexType&gt;
                  &lt;!-- empty content --&gt;
                  &lt;xs:attribute name='licenseNumber'  type='xs:string'/&gt;
                  &lt;xs:attribute name='carPhoneNumber' type='xs:string' use='optional'/&gt;
                &lt;/xs:complexType&gt;
              &lt;/xs:element&gt;
              &lt;xs:element name='carOwner'&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:sequence&gt;
                    &lt;xs:element name='carLicense' type='xs:string' maxOccurs='unbounded'/&gt;
                  &lt;/xs:sequence&gt;
                  &lt;xs:attribute name='owner'  type='xs:string'/&gt;
                &lt;/xs:complexType&gt;
              &lt;/xs:element&gt;
            &lt;/xs:choice&gt;
          &lt;/xs:complexType&gt;
          &lt;xs:key name='car-licenseNumber-state'&gt;  &lt;!-- key --&gt;
            &lt;xs:annotation&gt;
              &lt;xs:documentation&gt;
                No two cars in the same state can have the same licenseNumber.
              &lt;/xs:documentation&gt;
            &lt;/xs:annotation&gt;
            &lt;xs:selector xpath='car'/&gt;
            &lt;xs:field xpath='@licenseNumber'/&gt;
          &lt;/xs:key&gt;
          &lt;xs:keyref name='owner-state' refer='car-licenseNumber-state'&gt;  &lt;!-- keyref --&gt;
            &lt;xs:selector xpath='carOwner'/&gt;
            &lt;xs:field xpath='carLicense'/&gt;
          &lt;/xs:keyref&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:unique name='car-carPhoneNumber-world'&gt;  &lt;!-- unique --&gt;
      &lt;xs:annotation&gt;
        &lt;xs:documentation&gt;
          No two cars in the world can have the same carPhoneNumber.
        &lt;/xs:documentation&gt;
      &lt;/xs:annotation&gt;
      &lt;xs:selector xpath='car'/&gt;
      &lt;xs:field xpath='@carPhoneNumber'/&gt;
    &lt;/xs:unique&gt;
  &lt;/xs:element&gt;
</pre>


<h1 id='NotRecommended'>Advanced</h1>

<p>
Following are descriptions of XML Schema features
that are more advanced,
and best avoided until needed.&nbsp;
</p>


<h2   id='Inclusion'>Inclusion of other schemas</h2>

<p>
There are several ways one schema can incorporate
types, elements, attributes, and groups defined in another schema
(besides simply copying the text, which always works).&nbsp;
</p>

<p id='include'>
<code><dfn>include</dfn></code>
has the effect of including all <a href='#TopLevel'>top-level</a> definitions of
another schema.&nbsp;
The other schema is named in the <code>schemaLocation</code>
attribute.&nbsp;
Its namespace (if any) must match the namespace
of the including schema (if any).&nbsp;
<code><a href='#include'>include</a></code> may only appear
at the <a href='#TopLevel'>top level</a>.&nbsp;
</p>

<p id='import'>
<code><dfn>import</dfn></code>
tells a program processing a schema
where to find definitions in another namespace
that are used in the schema.&nbsp;
The location of the definitions is given in the <code>schemaLocation</code>
attribute;&nbsp;
only definitions at the <a href='#TopLevel'>top level</a> can be imported.&nbsp;
The namespace of those definitions is given in the <code>namespace</code>
attribute.&nbsp;
(Compare <code><a href='#schema'>schema</a></code>'s
<code><a href='#xmlns'>xmlns</a></code> attribute.)&nbsp;
</p>


<h2   id='SubstitutionGroup'>Substitution groups</h2>

<p>
Substitution groups provide a way to 'type' elements
and allow them to appear interchangeably,
without creating a type.&nbsp;
They do something of the same thing that types and
<code><a href='#choice'>choice</a></code> do,
but can be extended elsewhere,
for example when a schema is <a href='#include'>included</a>.&nbsp;
</p>

<p>
We will not describe substitution groups here in any more detail,
as in most cases the same function can be provided more straightforwardly
by types and compositors,
and their description complicates the descriptions of other elements
by requiring details that are not otherwise needed.&nbsp;
</p>


<h2 id='LexicalAndValue'>The distinction between lexical and value spaces</h2>

<p>
Each type in XML Schema
can be considered as
a possibly infinite set of values of that type (the type's value space).&nbsp;
Each type can also be considered as
a possibly infinite set of strings representing the values of the type
(the type's lexical space).&nbsp;
Ordinarily there is no need to keep this distinction in mind.&nbsp;
But for many types,
a single value can be represented by more than one string;&nbsp;
for example,
a single <code>xs:<a href='#integer'>integer</a></code> is
represented by
'<code>1</code>', '<code>+1</code>', and '<code>01</code>',
and a single <code>xs:<a href='#normalizedString'>normalizedString</a></code>
is represented by
'<code>normalized&nbsp;string</code>' and
'<code>normalized&nbsp;&nbsp;string</code>'.&nbsp;
</p>

<p>
<code><a href='#ByRegularExpression'>Restriction by a regular expression</a></code>
acts on the lexical space, not the value space.&nbsp;
It is best to avoid deriving types by regular expression
for which the two spaces are not one-to-one,
as it makes confusion likely.&nbsp;
</p>


<!--xhtml -n -->
</div>

</div><!-- #TBg -->

<div id='TFooter'>
<div class='W3C'>
  <a href='http://validator.w3.org/check?uri=referer'><img class='W3C'
    src='../../img/valid-xhtml10-blue.png'
    alt='Valid XHTML 1.0 Strict'/></a>
  <br/>
  <a href='http://jigsaw.w3.org/css-validator/check/referer'><img class='W3C'
    src='../../img/vcss-blue.png'
    alt='Valid CSS!'/></a>
</div>
<div class='timestamp'>2010May16Su21:42</div>
<div style='padding-top:1px;'>
<a class='plain' href='./index.html' style='font-variant:small-caps;'
>Thomas A. Alspaugh</a>
<span style='padding-left:1em;'><span class='email ss sm'>alspaugh&nbsp;
    <span class='ss sc sm'>at</span> &middot; ics &middot; uci &middot; edu</span>
    <!-- -spell alspaugh uci edu --> </span>
</div>
</div>

<!-- Google Analytics code -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol)
  ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost +
  "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-15281497-1");
pageTracker._trackPageview();
} catch(err) {}
</script>

</body>
</html>

