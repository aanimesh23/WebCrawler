<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_01) on Tue Jul 03 14:38:37 PDT 2007 -->
<TITLE>
JFMLocalFile
</TITLE>

<META NAME="date" CONTENT="2007-07-03">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="JFMLocalFile";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/JFMLocalFile.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html" title="class in org.itr_rescue.dataGuard.localFileSystem"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFilesystem.html" title="class in org.itr_rescue.dataGuard.localFileSystem"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="JFMLocalFile.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_org.itr_rescue.dataGuard.localFileSystem.JFMFile">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.itr_rescue.dataGuard.localFileSystem</FONT>
<BR>
Class JFMLocalFile</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">org.itr_rescue.dataGuard.localFileSystem.JFMFile</A>
      <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>org.itr_rescue.dataGuard.localFileSystem.JFMLocalFile</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.lang.Comparable</DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>JFMLocalFile</B><DT>extends <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></DL>
</PRE>

<P>
TODO change me!!!
<P>

<P>
<DL>
<DT><B>Author:</B></DT>
  <DD>sergiu</DD>
</DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.itr_rescue.dataGuard.localFileSystem.JFMFile"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from class org.itr_rescue.dataGuard.localFileSystem.<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#data">data</A>, <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#displayName">displayName</A>, <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#marked">marked</A>, <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#multiPart">multiPart</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#JFMLocalFile(java.lang.Object)">JFMLocalFile</A></B>(java.lang.Object&nbsp;data)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructor of this file.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#canRead()">canRead</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the application can read the file denoted by the
 abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#canWrite()">canWrite</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the application can modify to the file denoted by the
 abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#compareTo(org.itr_rescue.dataGuard.localFileSystem.JFMFile)">compareTo</A></B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;pathname)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compares two abstract pathnames lexicographically.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#createFile(java.lang.String)">createFile</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates the file named by the abstract pathname denoted by the parameter.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#delete()">delete</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deletes the file or directory denoted by the abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#equals(java.lang.Object)">equals</A></B>(java.lang.Object&nbsp;obj)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests this abstract pathname for equality with the given object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#exists()">exists</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file or directory denoted by the abstract pathname
 exists.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getAbsoluteFile()">getAbsoluteFile</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the absolute form of this abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getAbsolutePath()">getAbsolutePath</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the absolute pathname string of this abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getCanonicalFile()">getCanonicalFile</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the canonical form of this abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getCanonicalPath()">getCanonicalPath</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the canonical pathname string of this abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.io.File</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getFile()">getFile</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gets the content of the JFMFile if it exists.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.Icon</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getIcon()">getIcon</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the filesystem's icon associated with this file, or null if it can't be determined.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.io.InputStream</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getInputStream()">getInputStream</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an InputStream to read from this file, or null if it can't be done (the filesystem doesn't support it)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getMimeType()">getMimeType</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the string that represents the mime-type of this file, or null if it can't be determined.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getName()">getName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This string represents the short name of the file (e.g.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.io.OutputStream</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getOutputStream()">getOutputStream</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an OutputStream to write to this file, or null if the write operation isn't supported
 (or doesn;t make sense from the filesystem's point of view).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getParent()">getParent</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the pathname string of this abstract pathname's parent, or
 <code>null</code> if this pathname does not name a parent directory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getParentFile()">getParentFile</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the abstract pathname of this abstract pathname's parent,
 or <code>null</code> if this pathname does not name a parent
 directory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getPath()">getPath</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Converts this abstract pathname into a pathname string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getSystemDisplayName()">getSystemDisplayName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the system display name as returned by the filesystem viewer, or null</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#hashCode()">hashCode</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Computes a hash code for this abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#isAbsolute()">isAbsolute</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether this abstract pathname is absolute.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#isDirectory()">isDirectory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file denoted by this abstract pathname is a
 directory.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#isFile()">isFile</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file denoted by this abstract pathname is a normal
 file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#isHidden()">isHidden</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file named by this abstract pathname is a hidden
 file.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#lastModified()">lastModified</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the time that the file denoted by this abstract pathname was
 last modified.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#length()">length</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the length of the file denoted by this abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#listFiles()">listFiles</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array of abstract pathnames denoting the files in the
 directory denoted by this abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#mkdir(java.lang.String)">mkdir</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates the directory named by the abstract pathname denoted by the parameter.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.itr_rescue.dataGuard.localFileSystem.JFMFile"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class org.itr_rescue.dataGuard.localFileSystem.<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#compareTo(java.lang.Object)">compareTo</A>, <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getDisplayName()">getDisplayName</A>, <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getMultiPart()">getMultiPart</A>, <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getRootDriveFile()">getRootDriveFile</A>, <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isMarked()">isMarked</A>, <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#setDisplayName(java.lang.String)">setDisplayName</A>, <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#setMarked(boolean)">setMarked</A>, <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#setMultiPart(java.util.Hashtable)">setMultiPart</A>, <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#toString()">toString</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, finalize, getClass, notify, notifyAll, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="JFMLocalFile(java.lang.Object)"><!-- --></A><H3>
JFMLocalFile</H3>
<PRE>
public <B>JFMLocalFile</B>(java.lang.Object&nbsp;data)</PRE>
<DL>
<DD>Constructor of this file.
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getInputStream()"><!-- --></A><H3>
getInputStream</H3>
<PRE>
public java.io.InputStream <B>getInputStream</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getInputStream()">JFMFile</A></CODE></B></DD>
<DD>Returns an InputStream to read from this file, or null if it can't be done (the filesystem doesn't support it)
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getInputStream()">getInputStream</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>an InputStream to read from the file<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getInputStream()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="listFiles()"><!-- --></A><H3>
listFiles</H3>
<PRE>
public <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>[] <B>listFiles</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#listFiles()">JFMFile</A></CODE></B></DD>
<DD>Returns an array of abstract pathnames denoting the files in the
 directory denoted by this abstract pathname.

 <p> If this abstract pathname does not denote a directory, then this
 method returns <code>null</code>.  Otherwise an array of
 <code>File</code> objects is returned, one for each file or directory in
 the directory.  Pathnames denoting the directory itself and the
 directory's parent directory are not included in the result.  Each
 resulting abstract pathname is constructed from this abstract pathname
 using the <code><CODE>File(File,&nbsp;String)</CODE></code> constructor.  Therefore if this pathname
 is absolute then each resulting pathname is absolute; if this pathname
 is relative then each resulting pathname will be relative to the same
 directory.

 <p> There is no guarantee that the name strings in the resulting array
 will appear in any specific order; they are not, in particular,
 guaranteed to appear in alphabetical order.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#listFiles()">listFiles</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>An array of abstract pathnames denoting the files and
          directories in the directory denoted by this abstract
          pathname.  The array will be empty if the directory is
          empty.  Returns <code>null</code> if this abstract pathname
          does not denote a directory, or if an I/O error occurs.<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#listFiles()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getOutputStream()"><!-- --></A><H3>
getOutputStream</H3>
<PRE>
public java.io.OutputStream <B>getOutputStream</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getOutputStream()">JFMFile</A></CODE></B></DD>
<DD>Returns an OutputStream to write to this file, or null if the write operation isn't supported
 (or doesn;t make sense from the filesystem's point of view).
 The way that this is implemented in every filesystem can vary.
 The call to this method might get the file to be emptied (as in the LocalFileSystem implementation)
 You have been warned.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getOutputStream()">getOutputStream</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>An OutputStream to write to this file<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getOutputStream()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getName()"><!-- --></A><H3>
getName</H3>
<PRE>
public java.lang.String <B>getName</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getName()">JFMFile</A></CODE></B></DD>
<DD>This string represents the short name of the file (e.g. foo.txt)
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getName()">getName</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getName()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getParent()"><!-- --></A><H3>
getParent</H3>
<PRE>
public java.lang.String <B>getParent</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getParent()">JFMFile</A></CODE></B></DD>
<DD>Returns the pathname string of this abstract pathname's parent, or
 <code>null</code> if this pathname does not name a parent directory.

 <p> The <em>parent</em> of an abstract pathname consists of the
 pathname's prefix, if any, and each name in the pathname's name
 sequence except for the last.  If the name sequence is empty then
 the pathname does not name a parent directory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getParent()">getParent</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The pathname string of the parent directory named by this
          abstract pathname, or <code>null</code> if this pathname
          does not name a parent<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getParent()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getMimeType()"><!-- --></A><H3>
getMimeType</H3>
<PRE>
public java.lang.String <B>getMimeType</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getMimeType()">JFMFile</A></CODE></B></DD>
<DD>This method returns the string that represents the mime-type of this file, or null if it can't be determined.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getMimeType()">getMimeType</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>the mime type of this file<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getMimeType()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getParentFile()"><!-- --></A><H3>
getParentFile</H3>
<PRE>
public <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A> <B>getParentFile</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getParentFile()">JFMFile</A></CODE></B></DD>
<DD>Returns the abstract pathname of this abstract pathname's parent,
 or <code>null</code> if this pathname does not name a parent
 directory.

 <p> The <em>parent</em> of an abstract pathname consists of the
 pathname's prefix, if any, and each name in the pathname's name
 sequence except for the last.  If the name sequence is empty then
 the pathname does not name a parent directory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getParentFile()">getParentFile</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The abstract pathname of the parent directory named by this
          abstract pathname, or <code>null</code> if this pathname
          does not name a parent<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getParentFile()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getPath()"><!-- --></A><H3>
getPath</H3>
<PRE>
public java.lang.String <B>getPath</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getPath()">JFMFile</A></CODE></B></DD>
<DD>Converts this abstract pathname into a pathname string.  The resulting
 string uses the <CODE>default name-separator character</CODE> to
 separate the names in the name sequence.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getPath()">getPath</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The string form of this abstract pathname<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getPath()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="isAbsolute()"><!-- --></A><H3>
isAbsolute</H3>
<PRE>
public boolean <B>isAbsolute</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isAbsolute()">JFMFile</A></CODE></B></DD>
<DD>Tests whether this abstract pathname is absolute.  The definition of
 absolute pathname is system dependent.  On UNIX systems, a pathname is
 absolute if its prefix is <code>"/"</code>.  On Microsoft Windows systems, a
 pathname is absolute if its prefix is a drive specifier followed by
 <code>"\\"</code>, or if its prefix is <code>"\\"</code>.
 Some other filesystems implementations (FTP, NFS, SMB, etc.) can have their own definition
 of the <i>absolute pathname</i>, ven though I would recommend sticking to the UNIX definition.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isAbsolute()">isAbsolute</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> if this abstract pathname is absolute,
          <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#isAbsolute()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getAbsolutePath()"><!-- --></A><H3>
getAbsolutePath</H3>
<PRE>
public java.lang.String <B>getAbsolutePath</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsolutePath()">JFMFile</A></CODE></B></DD>
<DD>Returns the absolute pathname string of this abstract pathname.

 <p> If this abstract pathname is already absolute, then the pathname
 string is simply returned as if by the <code><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getPath()"><CODE>JFMFile.getPath()</CODE></A></code>
 method.  If this abstract pathname is the empty abstract pathname then
 the pathname string of the current user directory, which is named by the
 system property <code>user.dir</code>, is returned.  Otherwise this
 pathname is resolved in a system-dependent way.  On UNIX systems, a
 relative pathname is made absolute by resolving it against the current
 user directory.  On Microsoft Windows systems, a relative pathname is made absolute
 by resolving it against the current directory of the drive named by the
 pathname, if any; if not, it is resolved against the current user
 directory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsolutePath()">getAbsolutePath</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The absolute pathname string denoting the same file or
          directory as this abstract pathname<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getAbsolutePath()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getAbsoluteFile()"><!-- --></A><H3>
getAbsoluteFile</H3>
<PRE>
public <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A> <B>getAbsoluteFile</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsoluteFile()">JFMFile</A></CODE></B></DD>
<DD>Returns the absolute form of this abstract pathname.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsoluteFile()">getAbsoluteFile</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The absolute abstract pathname denoting the same file or
          directory as this abstract pathname<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getAbsoluteFile()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getCanonicalPath()"><!-- --></A><H3>
getCanonicalPath</H3>
<PRE>
public java.lang.String <B>getCanonicalPath</B>()
                                  throws <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html" title="class in org.itr_rescue.dataGuard.localFileSystem">FSException</A></PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getCanonicalPath()">JFMFile</A></CODE></B></DD>
<DD>Returns the canonical pathname string of this abstract pathname.

 <p> A canonical pathname is both absolute and unique.  The precise
 definition of canonical form is system-dependent.  This method first
 converts this pathname to absolute form if necessary, as if by invoking the
 <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsolutePath()"><CODE>JFMFile.getAbsolutePath()</CODE></A> method, and then maps it to its unique form in a
 system-dependent way.  This typically involves removing redundant names
 such as <tt>"."</tt> and <tt>".."</tt> from the pathname, resolving
 symbolic links (on UNIX platforms), and converting drive letters to a
 standard case (on Microsoft Windows platforms).

 <p> Every pathname that denotes an existing file or directory has a
 unique canonical form.  Every pathname that denotes a nonexistent file
 or directory also has a unique canonical form.  The canonical form of
 the pathname of a nonexistent file or directory may be different from
 the canonical form of the same pathname after the file or directory is
 created.  Similarly, the canonical form of the pathname of an existing
 file or directory may be different from the canonical form of the same
 pathname after the file or directory is deleted.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getCanonicalPath()">getCanonicalPath</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The canonical pathname string denoting the same file or
          directory as this abstract pathname
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html" title="class in org.itr_rescue.dataGuard.localFileSystem">FSException</A></CODE> - If an filesystem error occurs, which is possible because the
          construction of the canonical pathname may require
          filesystem queries<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getCanonicalPath()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getCanonicalFile()"><!-- --></A><H3>
getCanonicalFile</H3>
<PRE>
public <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A> <B>getCanonicalFile</B>()
                         throws <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html" title="class in org.itr_rescue.dataGuard.localFileSystem">FSException</A></PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getCanonicalFile()">JFMFile</A></CODE></B></DD>
<DD>Returns the canonical form of this abstract pathname.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getCanonicalFile()">getCanonicalFile</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The canonical pathname string denoting the same file or
          directory as this abstract pathname
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html" title="class in org.itr_rescue.dataGuard.localFileSystem">FSException</A></CODE> - If an filesystem error occurs, which is possible because the
          construction of the canonical pathname may require
          filesystem queries<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getCanonicalFile()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="isDirectory()"><!-- --></A><H3>
isDirectory</H3>
<PRE>
public boolean <B>isDirectory</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isDirectory()">JFMFile</A></CODE></B></DD>
<DD>Tests whether the file denoted by this abstract pathname is a
 directory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isDirectory()">isDirectory</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> if and only if the file denoted by this
          abstract pathname exists <em>and</em> is a directory;
          <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#isDirectory()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="isFile()"><!-- --></A><H3>
isFile</H3>
<PRE>
public boolean <B>isFile</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isFile()">JFMFile</A></CODE></B></DD>
<DD>Tests whether the file denoted by this abstract pathname is a normal
 file.  A file is <em>normal</em> if it is not a directory and, in
 addition, satisfies other system-dependent criteria.  Any non-directory
 file created by a Java application is guaranteed to be a normal file.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isFile()">isFile</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> if and only if the file denoted by this
          abstract pathname exists <em>and</em> is a normal file;
          <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#isFile()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="isHidden()"><!-- --></A><H3>
isHidden</H3>
<PRE>
public boolean <B>isHidden</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isHidden()">JFMFile</A></CODE></B></DD>
<DD>Tests whether the file named by this abstract pathname is a hidden
 file.  The exact definition of <em>hidden</em> is system-dependent.  On
 UNIX systems, a file is considered to be hidden if its name begins with
 a period character (<code>'.'</code>).  On Microsoft Windows systems, a file is
 considered to be hidden if it has been marked as such in the filesystem.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isHidden()">isHidden</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> if and only if the file denoted by this
          abstract pathname is hidden according to the conventions of the
          underlying platform<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#isHidden()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="lastModified()"><!-- --></A><H3>
lastModified</H3>
<PRE>
public long <B>lastModified</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#lastModified()">JFMFile</A></CODE></B></DD>
<DD>Returns the time that the file denoted by this abstract pathname was
 last modified.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#lastModified()">lastModified</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>A <code>long</code> value representing the time the file was
          last modified, measured in milliseconds since the epoch
          (00:00:00 GMT, January 1, 1970), or <code>0L</code> if the
          file does not exist or if an I/O error occurs<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#lastModified()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="length()"><!-- --></A><H3>
length</H3>
<PRE>
public long <B>length</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#length()">JFMFile</A></CODE></B></DD>
<DD>Returns the length of the file denoted by this abstract pathname.
 The return value is unspecified if this pathname denotes a directory.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#length()">length</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The length, in bytes, of the file denoted by this abstract
          pathname, or <code>0L</code> if the file does not exist<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#length()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="compareTo(org.itr_rescue.dataGuard.localFileSystem.JFMFile)"><!-- --></A><H3>
compareTo</H3>
<PRE>
public int <B>compareTo</B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;pathname)</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#compareTo(org.itr_rescue.dataGuard.localFileSystem.JFMFile)">JFMFile</A></CODE></B></DD>
<DD>Compares two abstract pathnames lexicographically.  The ordering
 defined by this method depends upon the underlying system.  On UNIX
 systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
 systems it is not.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#compareTo(org.itr_rescue.dataGuard.localFileSystem.JFMFile)">compareTo</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pathname</CODE> - The abstract pathname to be compared to this abstract
                    pathname
<DT><B>Returns:</B><DD>Zero if the argument is equal to this abstract pathname, a
                value less than zero if this abstract pathname is
                lexicographically less than the argument, or a value greater
                than zero if this abstract pathname is lexicographically
                greater than the argument<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#compareTo(org.jfm.md.filesystems.JFMFile)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="equals(java.lang.Object)"><!-- --></A><H3>
equals</H3>
<PRE>
public boolean <B>equals</B>(java.lang.Object&nbsp;obj)</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#equals(java.lang.Object)">JFMFile</A></CODE></B></DD>
<DD>Tests this abstract pathname for equality with the given object.
 Returns <code>true</code> if and only if the argument is not
 <code>null</code> and is an abstract pathname that denotes the same file
 or directory as this abstract pathname.  Whether or not two abstract
 pathnames are equal depends upon the underlying system.  On UNIX
 systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
 systems it is not. With other filesystems implementation ... it's their responsability
 to decide wether it should be case sensitive or not.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#equals(java.lang.Object)">equals</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>obj</CODE> - The object to be compared with this abstract pathname
<DT><B>Returns:</B><DD><code>true</code> if and only if the objects are the same;
          <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>Object.equals(java.lang.Object)</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="hashCode()"><!-- --></A><H3>
hashCode</H3>
<PRE>
public int <B>hashCode</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#hashCode()">JFMFile</A></CODE></B></DD>
<DD>Computes a hash code for this abstract pathname.  Because equality of
 abstract pathnames is inherently system-dependent, so is the computation
 of their hash codes.  On UNIX systems, the hash code of an abstract
 pathname is equal to the exclusive <em>or</em> of its pathname string
 and the decimal value <code>1234321</code>.  On Microsoft Windows systems, the hash
 code is equal to the exclusive <em>or</em> of its pathname string,
 convered to lower case, and the decimal value <code>1234321</code>.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#hashCode()">hashCode</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>A hash code for this abstract pathname<DT><B>See Also:</B><DD><CODE>Object.hashCode()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="canRead()"><!-- --></A><H3>
canRead</H3>
<PRE>
public boolean <B>canRead</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#canRead()">JFMFile</A></CODE></B></DD>
<DD>Tests whether the application can read the file denoted by the
 abstract pathname.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#canRead()">canRead</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> if and only if the file specified by this
          abstract pathname exists <em>and</em> can be read by the
          application; <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#canRead()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="canWrite()"><!-- --></A><H3>
canWrite</H3>
<PRE>
public boolean <B>canWrite</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#canWrite()">JFMFile</A></CODE></B></DD>
<DD>Tests whether the application can modify to the file denoted by the
 abstract pathname.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#canWrite()">canWrite</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> if and only if the file system actually
          contains a file denoted by this abstract pathname <em>and</em>
          the application is allowed to write to the file;
          <code>false</code> otherwise.<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#canWrite()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="exists()"><!-- --></A><H3>
exists</H3>
<PRE>
public boolean <B>exists</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#exists()">JFMFile</A></CODE></B></DD>
<DD>Tests whether the file or directory denoted by the abstract pathname
 exists.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#exists()">exists</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> if and only if the file or directory denoted
          by this abstract pathname exists; <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#exists()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="mkdir(java.lang.String)"><!-- --></A><H3>
mkdir</H3>
<PRE>
public <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A> <B>mkdir</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#mkdir(java.lang.String)">JFMFile</A></CODE></B></DD>
<DD>Creates the directory named by the abstract pathname denoted by the parameter.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#mkdir(java.lang.String)">mkdir</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The new file object created or null otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#mkdir()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="createFile(java.lang.String)"><!-- --></A><H3>
createFile</H3>
<PRE>
public <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A> <B>createFile</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#createFile(java.lang.String)">JFMFile</A></CODE></B></DD>
<DD>Creates the file named by the abstract pathname denoted by the parameter.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#createFile(java.lang.String)">createFile</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The new file object created or null otherwise</DL>
</DD>
</DL>
<HR>

<A NAME="delete()"><!-- --></A><H3>
delete</H3>
<PRE>
public boolean <B>delete</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#delete()">JFMFile</A></CODE></B></DD>
<DD>Deletes the file or directory denoted by the abstract pathname.  If
 this pathname denotes a directory, then the directory must be empty in
 order to be deleted.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#delete()">delete</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD><code>true</code> if and only if the file or directory is
          successfully deleted; <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#delete()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getIcon()"><!-- --></A><H3>
getIcon</H3>
<PRE>
public javax.swing.Icon <B>getIcon</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getIcon()">JFMFile</A></CODE></B></DD>
<DD>Returns the filesystem's icon associated with this file, or null if it can't be determined.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getIcon()">getIcon</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The filesystem's icon associated with this file, or null if it can't be determined.<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getIcon()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getSystemDisplayName()"><!-- --></A><H3>
getSystemDisplayName</H3>
<PRE>
public java.lang.String <B>getSystemDisplayName</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getSystemDisplayName()">JFMFile</A></CODE></B></DD>
<DD>Returns the system display name as returned by the filesystem viewer, or null
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getSystemDisplayName()">getSystemDisplayName</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD></DL>
</DD>
</DL>
<HR>

<A NAME="getFile()"><!-- --></A><H3>
getFile</H3>
<PRE>
public java.io.File <B>getFile</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getFile()">JFMFile</A></CODE></B></DD>
<DD>gets the content of the JFMFile if it exists.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getFile()">getFile</A></CODE> in class <CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/JFMLocalFile.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html" title="class in org.itr_rescue.dataGuard.localFileSystem"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFilesystem.html" title="class in org.itr_rescue.dataGuard.localFileSystem"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="JFMLocalFile.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#fields_inherited_from_class_org.itr_rescue.dataGuard.localFileSystem.JFMFile">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
