<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Outline</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Outline for ICS-21 Written Midterm Exam</h1>
<p>
</center>
<hr align="left" width="100%">
<p>

I have collected together in this one handout the list of topics that we
  have covered in the first half of ICS-21.
This list is quite extensive (it is quite astounding how much material we
  have covered), and there is no way that I can ask questions covering all
  of it; likewise, there is  no way that you can learn all this material
  starting now (I'm assuming that you've been learning it during the entire
  quarter).
<p>
Therefore, you should concentrate on reviewing the most important analysis
  and synthesis skills that we have studied.
Use the quizzes (and to a lesser extent the programming assignments and daily
  homework assignments) as a guide for what material is of primary importance.
Understand the material on its own terms, and how to use this material when
  writing code.
<p>
My written exams are not designed to determine if you understand obscure
  material; instead, they are designed to determine if you understand
  important material, and can use your knowledge to understand and answer
  questions <b>quickly</b>.
My exams are long (some students will not finish them): it you don't
  immediately know the answer to a question, skip it, and come back to it
  later, if you have time (sometimes working problems later in the exam will
  remind you of something relevant to the answer to earlier questions).
<p>

<h2>Outline of Lecture Topics</h2>


<ul>
<li>Software<ul>
  <li>General Aspects of Software: Development & Costs
  </ul>

<li>EBNF<ul>
  <li>Understanding EBNF rules and descriptions: sequence, option, alternative repetition
  <li>Reading EBNF rules and classifying symbols
  <li>Determining whether EBNF descriptions are equivalent
  <li>Examining exemplars and writing EBNF rules that classify them accordingly
  <li>Translating between EBNF rules and EBNF diagrams
  </ul>

<li>Tokens<ul>
  <li>Understanding how Java reads and tokenizes programs
  <li>Tokens: Identifiers, Keywords, Separators, Operators, Literals, Comments
  <li>The syntax of literals: int, double, boolean, char, String
  </ul>

<li>Variables and Operators<ul>
  <li>Understanding variable declarations (drawing pictures)
  <li>Reading and writing prototypes; operator terminology
  <li>The prototypes and semantics of common Java operators
      (arithmetic, textual, relational, logical, state-change)
  <li>Implicit conversion
  <li>Methods for mathematical functions and standard input/output
  </ul>

<li>Expressions<ul>
  <li>Understanding how to form and evaluate expressions
  <li>Analyzing expressions for correctness and meaning with oval diagrams
  <li>Operator Precedence and Association Rules
  <li>Casting (explicit conversion)
  <li>Translating formulas (or English descriptions) to expressions<br>
        (with no redundant parentheses)
  </ul>

<li>Statements I<ul>
  <li>Local variable declaration statements
  <li>Expression statements
  <li>Block statements (and the scope of local variable declarations)
  <li>Understanding statements with boxing
  <li>Trace tables to illustrate state changes in statement sequences
  </ul>

<li>Statements II<ul>
  <li>if statements
  <li>for statements
  <li>break statements
  <li>General for, while, and do/while statements
  <li>Understanding statements with boxing
  <li>Compact trace tables to illustrate execution of statements
  <li>try-catch statements (simple uses; for prompting, with TypedBufferReader)
  </ul>

<li>Program Composition and Debugging<ul>
  <li>Program synthesis via iterative enhancement
  <li>Testing
  <li>Debugging syntax errors
  <li>Debugging execution errors
  <li>Using the Eclipse debugger: viewing state, execution via<br>
         single stepping/[conditional] breakpoints
  </ul>

<li>More Java/Coding Style<ul>
  <li>Constants via final
  <li>Conditional Operators
  <li>Short-Circuit Operators
  <li>Good Names, Alignment, Locality, Comments
  </ul>

<li>Simplification<ul>
  <li>Equivalence vs. Simplification
  <li>Proving boolean expression equivalence and truth tables
  <li>DeMorgan's law (and negating relational operators)
  <li>Proving Arithmetical/Relational expressions equivalent and the law of trichotomy
  <li>Changing the order of statements: proofs (stores/examines)
  <li>if equivalences (test-reversal, bottom/top factoring): proofs (modified truth tables)
  <li>Simple loop equivalences
  </ul>

<li>Class and Object Concepts<ul>
  <li>Illustrating reference variables (drawing pictures)
  <li>Dual-State: state of variable and state of object referred to
  <li>The semantics of the = , == , and != operators on references
  <li>The == operator vs. the .equals method 
  <li>Calling methods using variables referring to objects
  </ul>

<li>Reading Classes<ul>
  <li>Class members: constructors, methods (accessors/mutators), and fields
  <li>Definitions and access modifiers: public/private, static
  <li>Using constructors
  <li>Calling methods
  <li>Why using instance variables is not important (most are private)
  <li>Reading Javadoc
  <li>Packages: how to import/use classes defined in packages
  <li>Classes with have studied and used: <b>Math</b>, <b>Prompt</b>,
      <b>String</b>, <b>BigInteger</b>, <b>DiceEnsemble</b>,
      <b>StringTokenizer</b>, <b>Timer</b>, 
  </ul>

<li>File I/O Classes<ul>
  <li>TypedBufferReader/Writer constructors and methods
  <li>Patterns for file reading (for and try/catch) and writing
  <li>Error detection (exception handling)
  <li>Error correction
  </ul>

<p>
<hr align="left" width="100%">
</body>
</html>
