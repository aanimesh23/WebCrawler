<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<title>Theory Seminar, May 7, 2010</title>
</head>
<body>
<a href="/~theory/"><img src="/~theory/logo/shortTheory.gif" width="
521" height="82" border="0" alt="ICS Theory Group"></a>
<h2> May 7, Spring Quarter 2010: Theory Seminar </h2>
<h3>1:00pm in ICS 243</h3>

<h1> 
Selective Replicated Declustering for Arbitrary Queries
</h1>

<h2> 
Kerim Yasin Oktay
</h2>

<p>
Abstract: 
Data declustering is used to minimize query response times
in data intensive applications. In this technique, query retrieval
process 
is parallelized by distributing the data among several disks and it
is useful in applications such as geographic information systems that
access 
huge amounts of data. Declustering with replication is an extension
of 
declustering with possible data replicas in the system. Many
replicated 
declustering schemes have been proposed. Most of these schemes generate 
two or more copies of all data items. However, some applications
have 
very large data sizes and even having two copies of all data items
may 
not be feasible. In such systems selective replication is a
necessity. 
Furthermore, existing replication schemes are not designed to utilize
query 
distribution information if such information is available. In this
study 
we propose a replicated declustering scheme that decides both on the
data items to be replicated and the assignment of all data items to
disks 
when there is limited replication capacity. We make use of available
query 
information in order to decide replication and partitioning of the
data 
and try to optimize aggregate parallel response time. We propose and
implement a Fiduccia-Mattheyses-like iterative improvement algorithm
to obtain a two-way replicated declustering and use this algorithm in
a 
recursive framework to generate a multi-way replicated declustering.
Experiments conducted with arbitrary queries on real datasets show
that, 
especially for low replication constraints, the proposed scheme
yields 
better performance results compared to existing replicated
declustering 
schemes.
</body>
</html>
