<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1" />
<META HTTP-EQUIV="UPDATED" CONTENT="Tuesday, November 22, 2005 9:30 AM" />
<TITLE>ICS 31 Lab 6</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="33CB8976" />
<META HTTP-EQUIV="DESCRIPTION" CONTENT="Homework Assignments for Informatics 41, the Informatics Core Course, using How to Design Programs by Felleisen, Findler, Flatt, and Krishnamurthi and Fluency by Snyder, at UC Irvine." />
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved." />
<link href="http://www.ics.uci.edu/~kay/courses/31/mainstyle.css" rel="stylesheet" type="text/css" />
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<p><FONT size="2"  >ICS 31 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2016</FONT></p>
<p><FONT   SIZE=6><B>Lab Assignment 6 </B></FONT>
</p>
<P><font  >This assignment is due by 10:00 p.m. on Friday, November 4. There's a lot to do, so get an early start.</font></P>
<P><font  ><strong>Preparation</strong></font> (Do this part individually, before coming to lab):</P>
<!--<P><strong>(for Zyante) </strong>Read  sections 2.14 and 4.1-4.3. As always, do the interactive activities in the text. Section 2.16 covers how to produce precisely formatted output using the <code>format()</code> method. That's the method we'll be using in ICS 31, even though the Zyante text predominantly uses an older style involving the <code>%</code> operator (in a different meaning than we've seen as the remainder from a division). You're not forbidden from using the older style, but there may be lab or exam problems that require you to use the <code>format()</code> method so you have to be familiar with it.</P> -->
<P><!--<strong>(for Perkovic) </strong>-->Read  sections 4.1 and 4.2; some of this is material we've already seen. Do the practice problems and exercises  4.12, 4.15, 4.17, and 4.18. Everyone should be able to do these independently. They don't require creative algorithmic thinking; you just need to look at the sections in the text to see how various language features work. If you run into trouble, check with your TA right away.</P>
<P>Read the web page on <a href="http://www.ics.uci.edu/~kay/courses/31/string-formatting.html">String Formatting</a> and the <code>format()</code> method.</P>
<!--
<P><font  ><strong>(2) </strong></font>Some of these sections cover file processing (and the new kinds of errors that can occur when we work with files). (Feel free to read section 4.6 in Zyante or 4.4 in Perkovic, but we won't be covering them directly.)</P> -->
<P>&nbsp;</P>
<p><font  ><strong>Lab Work</strong></font> (Do this part with your partner in lab)</p>
<p><strong>(a) </strong>Choose a partner for this assignment and register your partnership using the <a href="http://ics31-partner-app.appspot.com/">partner app</a>, ideally by Monday. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this week. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab.</p>
<p><strong>(b)</strong> Prepare your <code>lab6.py</code> file as in previous labs, including a line like this: </p>
<pre>
#  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab asst 6.
</pre>
<p><strong>(c)</strong> Python exercises:

<!--
Exercise 4.13
Broad topic: Writing Python expressions from English
Specific topic: Writing boolean expressions and indexing strings
Problem domain: None; just mechanical
-->

<p><strong>(1)</strong> Implement the function <code>contains</code> that takes as input two strings. The function checks if
the second string occurs in the first string. If the second string does occur, the function
returns True; if not, it returns False. <code></code>Here are two <code>assert</code> statements to check your code, but you should
include at least two more:</p><pre><code>assert contains('banana', 'ana')
assert not contains('racecar', 'ck')</code></pre>
<em>[Note: It's possible to code this with one simple expression
in the <code>return</code> statement.]</em>
<!--
Solution:
def contains(s1: str, s2: str) -> bool:
    ''' Checks if string s2 exists in s1
    '''
    return s2 in s1
-->


<!--
Exercise 4.19
Broad topic: Writing Python expressions from English
Specific topic: Formatted output
Problem domain: Names
-->
<!--  This is similar to the Tycho Brahe problem in Lab 2 (give or take).
<p><strong>(2)</strong> Implement the function <code>convert_to_USD</code> that takes as input a float representing
a value of money and a string representing which currency the input is. The function
returns the inputted float converted to USD as a string. Use the string method, format. 
Your function should be able to convert from at least 2 different currencies.

Additionally, for now, it is okay if your cents in your return value isn't to 2 places (see the example
with the rupees below).
</p>

<pre><code>
convert_to_USD(5.00, 'euro')
>>> '$6.81'

convert_to_USD(600, 'rupees')
>>> '$9.634'
</code></pre>
-->
<!--
Solution:
def convert_to_USD(value: float, currency_str: str) -> str:
    if currency_str == 'euro':
	value *= 1.36
    elif currency_str == 'rupees':
	value *= .016
    else: # this is not required but shows good design
	value = 0
    return '$' + str(value)



<!--
Exercise 4.23
Broad topic: Writing Python functions from English
Specific topic: Length of strings
Problem domain: Sentences
-->

<p><strong>(2)</strong> Implement the function <code>sentence_stats</code> that takes in a
string as a parameter and prints out these statistics about the
string: its length in characters, its length in words, and the average length of each
word.  (We'll say that a word is any substring that's delimited by white space, after punctuation has been eliminated.  You might find it helpful to write a function
that translates all punctuation marks to blanks.)
</p>

<pre><code>>>> sentence_stats('I love UCI')
Characters: 10
Words: 3
Average word length: 2.66666666665

>>> sentence_stats('***The ?! quick brown fox:  jumps over the lazy dog.')
Characters: 52
Words: 9
Average word length: 3.888888888888889</code></pre>

<!--
Solution:  DOESN'T HANDLE PUNCTUATION

def sentence_stats(s: str) -> None:
    ''' Takes in a string and
	prints out the length of the string,
	the number of words in it,
	and the average length of each word.
    '''
    len_s = len(s)
    num_words = len(s.split(' '))
    total_chars = 0 # variable to hold the sum of the lengths of all words in the sentence
    for w in s.split(' '):
	total_chars += len(w)
    average_word_len = total_chars / num_words


    print('Length:', len_s) # alternatively: print('Length: {}'.format(len_s))
    print('Number of words:', num_words) # alternatively: print('Number of words: {}'.format(num_words))
    print('Average length of each word:', average_word_len) # alternatively: print('Average length of each word: {}'.format(average_word_len)
-->

<p><em>[Note: The two examples above show expressions (calls to <code>sentence_stats()</code>) evaluated in the Python Shell window, which you can tell by the <code>&gt;&gt;&gt;</code> prompt. You can do this if you've previously run the <code>.py</code> file containing the definition of <code>sentence_stats()</code> (or if you've typed that definition into the Python Shell window by hand, which isn't recommended because there's no easy way to edit out any typos). You could also produce the same results by defining and calling the function in your <code>.py</code> file and then running that file. (We're not using <code>assert</code> statements here because <code>sentence_stats()</code> has side effects, namely printing.)]</em></p>
<p><strong>(3)</strong> Implement the function <code>initials</code> that takes as input a string representing a full
  name (e.g.,  <code>Robert B. Qwerty</code>) and returns the initials of the name in all capital letters (e.g., <code>RBQ</code>).
</p>

<pre><code>assert initials('Bill Cody') == 'BC'
assert initials('Guido van Rossum') == 'GVR'
assert initials('alan turing') == 'AT'</code></pre>

<!--
Solution:
def find_initials(full_name: str) -> str:
    ''' Given a full name, returns the initials
    of the name. '''
    result = ''
    for n in full_name.split(' '):
        result += n[0].upper()
    return result
-->
<p><strong>(d)</strong> We've said that software models the real world. One aspect of the real world that we sometimes want to model is randomness. If we're writing software to play a card game, we don't want the same cards to come up every time we play. If we're designing a simulation (let's say of the flow of customers through a supermarket, to determine how many checkers we need on duty), we don't want one customer to arrive like clockwork every 30 seconds; we want a more realistic and less predictable flow of traffic.</p>
<p>We achieve randomness in software using a <strong>random number generator</strong>. Python has a library of functions dealing with randomness; it's called <code>random</code>. The <code>randrange</code> function generates random integers in a specified range, so that <code>randrange(5)</code> returns a number that's either 0, 1, 2, 3, or 4 (like <code>range()</code> in Python, <code>randrange()</code> refers to numbers starting at zero and going up to, but <em>not including,</em> its argument). When given two arguments, the <code>randrange</code> function uses the first as the lower bound of the range, so  <code>randrange(1,5)</code> returns a number that's either 1, 2, 3, or 4.</p>
<p><strong>(d.1)</strong> Start with the statement <code>from random import randrange</code>. Then write a simple for-loop that prints out 50 random numbers between 0 and 10 (inclusiveâ€”so you want some 10s in your results). Next, write a simple for-loop that prints out 50 random numbers between 1 and 6 inclusive (like rolling standard six-sided dice). Check your results carefully: With 50 numbers, you should have a few of each possibility; if one value (especially the first or the last) doesn't show up at all, your code isn't correct.</p>
<p><strong>(d.2)</strong> Many dice games roll two six-sided dice at once, resulting in totals ranging from 2 (sometimes called &quot;snake eyes&quot; because of the single dot on each of the dice) to 12 (sometimes called &quot;boxcars&quot; after the rectagular cars on freight trains).</p>
<p>Write a function called <code>roll2dice</code> that takes no parameters and returns a number that reflects the random roll of two dice. [Hint: It's not quite as simple as returning one random number between 2 and 12 inclusive. With two real dice, some results occur more frequently than others.] Test your function by calling it 50 times in a for-loop, printing the result each time. (You'll note that precise testing of code involving randomness is hard, because the whole point is that you have unpredictable data each time. But the next part of this problem shows one approach to this problem.)</p>
<p><strong>(d.3)</strong> Write a function called <code>distribution_of_rolls</code> that takes one numberâ€”the number of times to roll two diceâ€”and prints the distribution of the values of those rolls in the form shown below. The output below is a possible output from <code>distribution_of_rolls(200)</code>. </p>
<pre>Distribution of dice rolls

 2:     7 ( 3.5%)  *******
 3:    14 ( 7.0%)  **************
 4:    15 ( 7.5%)  ***************
 5:    19 ( 9.5%)  *******************
 6:    24 (12.0%)  ************************
 7:    35 (17.5%)  ***********************************
 8:    24 (12.0%)  ************************
 9:    28 (14.0%)  ****************************
10:    18 ( 9.0%)  ******************
11:     9 ( 4.5%)  *********
12:     7 ( 3.5%)  *******
-----------------------------
      200 rolls</pre>
<p>Here are some details: We introduced output formatting in class; there are more details in the textbook(s) and especially in the <a href="http://www.ics.uci.edu/~kay/courses/31/string-formatting.html">String Formatting document</a>.<!-- If you work on this before then, print the values without lining them up (or use what you read in the textbook).--> You'll need a list of numbers for counting each of the possible rolls; think about an easy way to get to the tally for roll <em>n </em>(it's not good to have 11 separate variables, <code>count2s</code>, <code>count3s</code>, <code>count4s</code>,  and so on). The histogram above shows 200 rolls; if you wanted to try it with much larger numbers, you could scale the histogram differently so that one star counts for, say, 20 rolls.</p>
<p><strong>(e) </strong><strong>Cryptography</strong> is the science of secret writingâ€”messages that
other people can't understand unless they have a secret <strong>key</strong>.
Diplomats and generals have used cryptography for thousands of years; e-commerce
uses it today for secure web transactions.
We can <strong>encrypt</strong> a message and then send it (even by means that
might reveal the encrypted message to unauthorized parties) to someone authorized;
if that person has the key, he or she
can easily <strong>decrypt</strong> it.  (There are also techniques that an
unauthorized person can use to try to "break" the encryption and read the
message without the key.  That's called <strong>cryptanalysis</strong> or
codebreaking.  There are many different ways of encrypting messages; some
are more susceptible to cryptanalysis than others.)</p>
<p>A <strong>cipher</strong> is one category of encryption methodology.
  Ciphers take characters in the message and transform them into other
  characters.  One kind of simple cipher is a <strong>substitution cipher</strong>,
  for example substituting 'b' for each 'a', 'c' for each 'b', and so on;
  in this cipher, "cat" would become "dbu".
  (We can contrast ciphers with <strong>codes</strong>; the
  technical distinction is that codes work with words or phrases, at
  the level of meaning.  In World War II, the US Army used soldiers
  who spoke the Navajo language to transmit messages over the radio;
  none of the opponents could understand Navajo (or even recognize
  what language it was).  That's a code. By contrast, the World War II computer-assisted codebraking activity portrayed in the recent movie <em>The Imitation Game</em> focused on the German &quot;Enigma Cipher.&quot;)  Computational encryption
employs ciphers.</p>

<p>A <strong>Caesar cipher</strong> (named after Roman emperor
Julius Caesar, who is said to have originated it) works like the
example described above.  Each letter in the original message
(called the <strong>plaintext</strong>) is changed to a different
letter.  The example above ('a' becomes 'b', 'b' becomes 'c', and
so on) is one example; we could say its key is 1, because each letter
moves 1 position later in the alphabet.  There are 26 possible
Caesar ciphers (one of which doesn't change the plaintext message).
The encrypted message is called the <strong>ciphertext</strong>.
So encrypting the message "hi there" with a Caesar cipher whose key is 3 would give the ciphertext &quot;kl wkhuh&quot;.
<p><strong>(e.1) </strong>Write the two functions <code>Caesar_encrypt</code> and
  <code>Caesar_decrypt</code>.  Each takes two arguments:
  a string containing the message (the plaintext for encryption,
  the ciphertext for decryption) and an int for the key,
  indicating how far down the alphabet to find each substitute letter.
  The encryption function returns the ciphertext;
  the decryption function returns the plaintext.
  
<p>As always, follow the design recipe.  In particular
  make up enough examples to test both your understanding
  of the functions' behavior and the match between your
  code and that behavior.  Here are two more details:
  In the plaintext, turn any upper-case letters into
  lower-case letters.  In both the plaintext and the
  ciphertext, leave non-letters unchanged.
  
<p>With the right tools, each function can be written in two lines of
  code (plus function headers and docstrings).  Think for
  a while about how to write this; if you're still stuck,
  you may wish to consult these hints (one at a time):
  (i) It's convenient to have a
  global constant called <code>ALPHABET</code> that contains
  all 26 lower-case letters in order.  (ii) To do the work,
  you'll want to use the <code>translate()</code> method;
  look it up to make sure you understand how to use it.
  Seeing what arguments it takes may suggest some of the
  things you need to compute.
  (iii) It would also be convenient to have a function that
  takes a number and produces a "rotated" alphabet with the
  specified number of characters taken off the front and
  added on to the end of the string.
  
<p>Okay, it's time.  Write the functions and test them.
    
<p><strong>(e.2)</strong>

Each partner should do this part independently:
Make up a message without telling your partner what it is.
Encrypt the message with a key of your choosing.  Copy the
encrypted message into an Email message and send it to your
partner; put the key in the subject line[*].  When you receive
the Email your partner sent you, decrypt it using the key
you received.
<p> [*] It is not good security to include the key with the
  message.  Of course that doesn't matter to us here in lab.
  But in real life, this would be like writing your PIN on your ATM card. <strong>Key distribution</strong> is an issue in modern
  cryptography; you need a secure and independent way to get
  the key to the intended recipient of the ciphertext.
<p><strong>(e.3) </strong>If you have time, you could check that the key is in
  the correct range (0 to 25) or, better yet, make keys
  greater than 25 "wrap around" so that, for example,
  <code>Caesar_encrypt("cat", 29)</code>
  returns the same thing as <code>Caesar_encrypt("cat", 3)</code>.
  (Hint:  Use the <code>%</code> (mod) operator.)
<p><strong>(f)</strong> Suppose you have a list of strings containing English text, like this:</p>
<pre>[ &quot;Four score and seven years ago, our fathers brought forth on&quot;,
  &quot;this continent a new nation, conceived in liberty and dedicated&quot;,
  &quot;to the proposition that all men are created equal.  Now we are&quot;,
  &quot;   engaged in a great 		civil war, testing whether that nation, or any&quot;,
  &quot;nation so conceived and so dedicated, can long endure.        &quot; ]</pre>
<p>There might be additional spacing or punctuation, as shown in the last two lines above.</p>
<p><strong>(f.1) </strong>Write the function <code>print_line_numbers</code> that takes a list of strings and prints each string preceded by a line number:</p>
<pre>1:  Four score and seven years ago, our fathers brought forth on
2:  this continent a new nation, conceived in liberty and dedicated
3:  to the proposition that all men are created equal.  Now we are
4:     engaged in a great 		civil war, testing whether that nation, or any
5:  nation so conceived and so dedicated, can long endure.</pre>
<p>If there are 10 lines or more, the text won't line up nicely. Use the <code>format</code> method to print each line number in a five-character-wide field. (A nifty enhancement would be to make the line number field width exactly as long as it has to be to display the longest line number.)</p>
<p><strong>(f.2) </strong>Write the function <code>stats</code> that takes a list of strings and prints statistics as follows:</p>
<pre> 16824   lines in the list
   483   empty lines
    53.7 average characters per line
    65.9 average characters per non-empty line</pre>
<p>Follow the formatting shown.</p>
<p><strong>(f.3)</strong> Write the function <code>list_of_words</code> that takes a list of strings as above and returns a list of individual words with all white space and punctuation removed (except for apostrophes/single quotes).</p>
<p>Look at the string operations and list operations to determine which of them you'll need for this task.</p>
<p><strong>(g)</strong> Go back to your restaurants program from last week (modified to handle menusâ€”lists of Dish structures). You may start with the code that either partner submitted. Getting up to speed with code that someone else initially wrote is a real-world programmer's skill; most real programming is modifying or extending an already-existing product. But it's also okay to start fresh and make the dishlist/menu modifications from scratch; sometimes that's the best approach, even when you already have some code that does the task, because if the existing code isn't solidâ€”if it doesn't work as it should, or if it's too hard to understandâ€”it makes no sense to try to build more code on that shaky foundation. Besides, it won't take you nearly as long the second time because you've already thought about the issues and you've already learned something from the mistakes you've made. (Donald Knuth of Stanford, who might be America's most famous computer scientist, once suggested this as a software development method: Write the code and get it working; then throw it away and write it again from scratch. His point was that people tend to cling to code they've already written, even if it's bad code that's dragging down their further development. Starting afresh frees the programmer from the burden of previous bad design decisions and allows &quot;getting it right this time.&quot;)</p>
<p>Call the new copy of the restaurants program <code>restaurants6.py </code>.</p>
<p><strong>(g.1)</strong> Modify the program so that whenever a Restaurant is displayed, an additional line is included:</p>
<pre>
Average price:  $12.45.  Average calories:  455.6</pre>
<p>Follow the formatting shown above.</p>
<p><strong>(g.2)</strong> Add a command to the main menu that allows the user to search for (and display) all the restaurants that serve a specified cuisine along with the average price of (all the menus of the restaurants that serve) that cuisine.</p>
<p><strong>(g.3)</strong> Add a command to the main menu that allows the user to search for (and display) all the restaurants that serve a dish whose name contains a given word or phrase. (This is more realistic than forcing the user to type the exact name of the dish; here, at least, the user can just type &quot;fava beans&quot; and match all the dishes that include that phrase.)</p>
<p><strong>(h) </strong>Remember that each partner must complete a partner evaluation form and submit it individually. Do this using the <a href="http://ics31-partner-app.appspot.com/">partner app</a>. Make sure you know your partner's name, first and last, so you can evaluate the right person.
  <!-- Some students have been forgetting to specify their partner's name on the survey; from now on, if you forget your partner's name we won't give you credit for completing the evaluation.-->
Please complete your evaluation by the end of the day on Friday, or Saturday morning at the latest. It only takes a couple of minutes and not doing it hurts your participation score.
<p><strong>What to turn in:</strong> Submit via Checkmate two files: your  <code>lab6.py</code> file containing your solutions to parts (c), (d), (e) and (f), and a separate Python file containing your modified restaurants program from part (g). Remember what we've said in previous labs about rereading the assignment and rerunning your Python files.</p>
<p>Also remember that each student must complete a partner evaluation form; these evaluations contribute to your class participation score. Get in the habit of doing this every week on Friday after you've submitted your assignment; the survey closes on Saturday. If you miss it, or if you forget to indicate your partner's name, you won't get credit for filling it out.  (Missing one may not have a significant effect on your grade, but these are easy points that everyone else is getting.)</p>
<p>&nbsp;</p>
<p><font face="Helvetica" size="1">Written by David G. Kay in Fall 2012 for ICS 31, based in part on assignments from ICS H21 and Informatics 41. Modified by David G. Kay, WInter 2013  Fall 2013, and Winter 2014. Python exercises by David Lepe, edited by David G. Kay, Winter 2014, Fall 2014, Winter 2015, Fall 2015.</font></p>
<br class="Apple-interchange-newline">
<HR />
<FONT  ><A HREF="http://www.ics.uci.edu/~kay/">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />
<font size="2"  >
<!-- #BeginDate format:fcAm1a -->Wednesday, November 2, 2016 8:34 AM<!-- #EndDate -->
</font></span>
</BODY>
</HTML>
