  <html>
    <head>
      <title>
        Dr. Rina Dechter @ UCI
      </title>
      <LINK REL="Stylesheet" HREF="/~dechter/basic.css">		
    </HEAD>
  
  <BODY bgcolor="#ffffff" alink="00aaaa" link="008080" vlink="008080">
  
  <!-- Begin Header -->
    <!--#include virtual="/~dechter/header.html" -->
  <!-- End Header -->
  
  
  <!-- Begin Body -->
  
  <!--#include file="pubs-nav.html"--> 
<center>
<table width="80%" cellspacing="0" cellpadding="0" border="0">
<tr valign=top>
<td><b>R76A</td>
 | 
<br></td>
</tr>

<tr>
<td colspan=2><div class=title>Bucket elimination: A unifying framework for reasoning</div>
<TT>Rina Dechter (<A href="mailto:dechter@ics.uci.edu">dechter@ics.uci.edu</A>)</TT>
</td></tr>
</table>

<table width="80%" cellspacing="0" cellpadding="0" border="0">
<tr><td>
<br><div class=abstract>
<b>Abstract</b><BR>

Bucket elimination is an algorithmic framework that generalizes dynamic programming to accommodate
many problem-solving and reasoning tasks. Algorithms such as directional-resolution
for propositional satisfiability, adaptive-consistency for constraint satisfaction, Fourier and Gaussian
elimination for solving linear equalities and inequalities, and dynamic programming for combinatorial
optimization, can all be accommodated within the bucket elimination framework. Many probabilistic
inference tasks can likewise be expressed as bucket-elimination algorithms. These include:
belief updating, finding the most probable explanation, and expected utility maximization. These algorithms
share the same performance guarantees; all are time and space exponential in the inducedwidth
of the problem's interaction graph.
<br>
While elimination strategies have extensive demands on memory, a contrasting class of algorithms
called "conditioning search" require only linear space. Algorithms in this class split a problem into
subproblems by instantiating a subset of variables, called a conditioning set, or a cutset. Typical
examples of conditioning search algorithms are: backtracking (in constraint satisfaction), and branch
and bound (for combinatorial optimization).
<br>
The paper presents the bucket-elimination framework as a unifying theme across probabilistic and
deterministic reasoning tasks and show how conditioning search can be augmented to systematically
trade space for time.

</div><br>

<A href="r76A.pdf">
<img align=left border="0" src="/~dechter/images/down.gif">
<b>[pdf]</b></a>
</td></tr></table></center><br>

<!-- End Body-->

<!--- Begin Footer -->
     <!--#include virtual="/~dechter/footer.html" -->
<!--- End Footer -->

</body>
<html>
