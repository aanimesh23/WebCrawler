<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1" />
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay" />
<META HTTP-EQUIV="UPDATED" CONTENT="Monday, October 31, 2005 5:11 PM" />
<TITLE>Sixth Homework</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="D23E7C2F" />
<META HTTP-EQUIV=KEYWORDS CONTENT="CS 1, CS1, assignment, Scheme" />
<META HTTP-EQUIV="DESCRIPTION" CONTENT="An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al." />
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2001 by David G. Kay.  All rights reserved." />
<link href="/~kay/courses/i41/code.css" rel="stylesheet" type="text/css" />
<style type="text/css">
<!--
.style1 {font-family: "Goudy Old Style"}
.style2 {font-size: 10pt}
.style4 {font-size: 10pt; font-family: "Courier New", Courier, monospace; }
-->
</style>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<P><FONT size="2" FACE="Goudy Old Style">INFORMATICS 41 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2011</FONT></P>
<P> <FONT FACE="Goudy Old Style" SIZE=6><B>Sixth Homework </B></FONT></P>
<P>
<FONT FACE="Goudy Old Style">This assignment is due at the start of lab on
Monday, October 31. </FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(1) </B>If you haven't had an easy time solving the lab problems, go back through the textbook and read carefully through the worked exercises and the various versions of the design recipe. We're at the midpoint of the quarter now; there's time to go back and solidify your understanding. Nobody should be &quot;winging it&quot; at this point; to do the rest of the work in the course, you need to understand what we've done so far.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(2)</B>  Read Chapter 28, which discusses functions as first-class objects (i.e., functions that take other functions as inputs). Do exercises 28.2.3, 28.2.4. Look at exercises 28.2.10 and 28.3.1: You should know how to write them, but you'll also notice that they're the same as two predefined functions we went over in class. Do exercises 28.2.11, 28.2.12, and 28.3.6, using <span class="Code-in-Body">filter</span> or <span class="Code-in-Body">map</span> as appropriate.</FONT></P>
<P>
  <FONT FACE="Goudy Old Style"><B>(3)</B>  Take a look back at the discussion
  of the function </FONT><FONT SIZE=2 FACE="Courier New" class="style4">combine</FONT><FONT FACE="Goudy Old Style">
  in section 28.5.  (</FONT><FONT SIZE=2 FACE="Courier New" class="style4">Combine</FONT><FONT FACE="Goudy Old Style">
  is sometimes called </FONT><FONT SIZE=2 FACE="Courier New" class="style4">reduce</FONT><FONT FACE="Goudy Old Style">, </FONT><FONT SIZE=2 FACE="Courier New" class="style4">accumulate</FONT><FONT FACE="Goudy Old Style">
  or </FONT><FONT SIZE=2 FACE="Courier New" class="style4">foldr</FONT><FONT FACE="Goudy Old Style">,
            sometimes with the arguments in a different order. DrRacket uses the name <span class="style4">foldr</span>.)  Using </FONT><FONT SIZE=2 FACE="Courier New" class="style4">foldr</FONT><FONT FACE="Goudy Old Style">,
  </FONT><FONT SIZE=2 FACE="Courier New" class="style4">map</FONT><FONT FACE="Goudy Old Style">,
    and </FONT><FONT SIZE=2 FACE="Courier New" class="style4">filter</FONT><FONT FACE="Goudy Old Style">,
      you can define many powerful operations very compactly, without explicit
      recursion.  For example, suppose we have a list of restaurant structures  (</FONT><FONT SIZE=2 FACE="Courier New" class="style4">(define-struct rrant (name cuisine phone dish price)</FONT><FONT FACE="Goudy Old Style">) ; call that list RL.  To produce
        a list of the names of the cheap Thai restaurants in RL, we only need to
say <A NAME="_14_2425"></A></FONT></P>
<P>
<span class="style2"><FONT FACE="Courier New">(map rrant-name (filter cheap? (filter Thai?
RL)))</FONT></span><FONT SIZE=2><span class="style1">.</span> </FONT></P>
<P>
<FONT FACE="Goudy Old Style">Look at this step by step: First we select just the Thai restaurants from the list; then we take just the cheap restaurants from <em>that</em> list; then we turn the resulting list of restaurants into a list containing just their names.</FONT></P>
<P><FONT FACE="Goudy Old Style">To calculate the average price of the cheap
  Thai restaurants, we can say </FONT></P>
<P><FONT FACE="Goudy Old Style"><code>(local ((define cheap-thai-restaurant-prices<br />
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(map rrant-price (filter cheap? (filter Thai? RL)))))<br />
  &nbsp;&nbsp;(/ (foldr + 0 cheap-thai-restaurant-prices)<br />
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(length cheap-thai-restaurant-prices)))</code></FONT></P>
<P>
<FONT FACE="Goudy Old Style">(In the above example, note that using the </FONT><span class="style4">local</span><FONT FACE="Goudy Old Style"> expression saves us from computing the list of prices two separate
times.)  If you have trouble figuring out how these expressions work, first
make sure you understand </FONT><FONT SIZE=2 FACE="Courier New" class="style4">map</FONT><FONT FACE="Goudy Old Style">,
</FONT><FONT SIZE=2 FACE="Courier New" class="style4">filter</FONT><FONT FACE="Goudy Old Style">,
and </FONT><FONT SIZE=2 FACE="Courier New" class="style4">foldr</FONT><FONT FACE="Goudy Old Style">
individually (look at their contracts) and then look at what each part of
the expression returns, starting from the inside out.</FONT></P>
<P>
<FONT FACE="Goudy Old Style">Do each of the following problems.  Be aware, also,
that problems like these will show up on quizzes.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(3.1)</B>  Write the function <span class="style4">convert-to-1</span> that takes one argument (of any type) and returns the number 1, no matter
what the argument is.  Next, use <span class="style4">map</span> and <span class="style4">convert-to-1</span> to define the function
<span class="style4">list-of-ones</span> that takes a list of items and returns a list of 1s that&#39;s
the same length as its argument.  Finally, use <span class="style4">foldr</span> and <span class="style4">list-of-ones</span> to
rewrite the last line of the <span class="style4">average-price</span> code above without using <span class="style4">length</span>. </FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(3.2)</B>  What is the result of evaluating
each of these expressions? (Of course you should be able to do these in your head, possibly with pencil and paper. It would totally miss the point just to copy and paste them into DrRacket, although that would be a fine way to check your results.)</FONT></P>
<ul>
  <li><code>(foldr + 0 '(1 2 3 4 5))</code></li>
  <li><code>(foldr (lambda (a b) (+ b (if (even? a) a 0))) 0 '(1 2 3 4 5))</code></li>
  <li><code>(foldr cons '() '(Huey Dewey Louie))</code></li>
  <li><code>(foldr max -1 '(1953 1956 1949 1991 1964))</code></li>
</ul>
<p><FONT FACE="Goudy Old Style">The second expression above uses if, which we may not have seen before; it's just a shortcut for writing a two-way cond. The equivalent using cond would be <code>(foldr (lambda (a b) (+ b (cond ((even? a) a) (else 0)))) 0 '(1 2 3 4 5))</code>. </FONT></p>
<P>
<FONT FACE="Goudy Old Style"><B>(3.3)</B>  Assume you have a function <span class="style4">(interval
a b)</span> that returns a list of all the integers between <span class="style4">a</span> and <span class="style4">b</span>, inclusive
(so that <span class="style4">(interval 5 10)</span> would return <span class="style4">(5 6 7 8 9 10)</span>).  (Re-)write the function
factorial using <span class="style4">foldr</span> (and <span class="style4">interval</span>), without any explicit recursion.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(3.4)</B>  Now, think back to the restaurant
collection program and assume we have a list (called RL) of the restaurant
objects as described there.  For each of the following expressions, describe
in one English sentence what value it returns.  Don&#39;t just say, &quot;It
does a foldr of plus and zero to a map of ... ;&quot; give a description
of what the expression means, something you could put in a software catalog
so that a prospective buyer could find what he or she wanted.</FONT></P>
<ul>
  <li><code>&nbsp;&nbsp;(foldr + 0 (map (lambda (R) 1) RL))</code></li>
  <li><code>&nbsp;&nbsp;(filter (lambda (R) (equal? &quot;Ethiopian&quot; (rrant-cuisine R))) RL)</code></li>
  <li><code>&nbsp;&nbsp;(/ (foldr + 0 (map (lambda (R) (rrant-price R)) RL)) <br />
&nbsp;&nbsp; &nbsp; (foldr + 0 (map (lambda (R) 1) RL)))</code></li>
  <li><code>&nbsp;&nbsp;(local ((define PRL (filter (lambda (R) (equal? &quot;pizza&quot; (rrant-dish R))) RL))) <br />
&nbsp;&nbsp; &nbsp; (/ (foldr + 0 (map rrant-price PRL)) <br />
&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(foldr + 0 (map (lambda (R) 1) PRL))))</code></li>
</ul>
<P>
<FONT FACE="Goudy Old Style"><B>(3.5)</B>  Using <span class="style4">map</span>, <span class="style4">filter</span>, and <span class="style4">foldr</span>,
write an expression to return each of the following values without using
explicit recursion:</FONT></P>
<ul>
  <li>
    <FONT FACE="Goudy Old Style">a list of all the French and
    Italian restaurants in RL</FONT></li>
  <li>
    <FONT FACE="Goudy Old Style">a list of all the (best) dishes
    served at the French and Italian restaurants in RL;
    it's okay for this list to have duplicates in it, though you may attempt
    to remove them if you'd like (as it can be done without explicit recursion)</FONT></li>
  <li>
    <FONT FACE="Goudy Old Style">a list of all the restaurants
    in RL whose best dish costs between $10.00 and $20.00 (inclusive)</FONT></li>
  <li>
    <FONT FACE="Goudy Old Style">the name of the lowest-priced
    French restaurant in RL</FONT></li>
  <li>
    <FONT FACE="Goudy Old Style">a list of all the restaurants
      in RL, where every French restaurant whose best dish&#39;s price is less
      than the average (price of best dishes at French restaurants) has its price
    changed to that average price (this one is tough, but take it one step at a time)</FONT></li>
</ul>
<P><FONT FACE="Goudy Old Style"><B>(4)</B> Section 28.6 talks about anonymous lambda, which we went over in class. Section 28.7 finally explains MIT-style function definitions, which we've known from the start of the course. Section 28.8 talks about functions that produce other functions, which we've also done in class. Section 28.9 covers how we can represent a sequence (of numbers or other values); it's interesting, but you can treat it as optional.</FONT></P>
<P><FONT FACE="Goudy Old Style"><B>(5)</B> Review the code we've developed in class for processing binary search trees. You should understand the algorithms for inserting an item, searching for an item, and traversing the tree (in order mainly, but you should also know what pre-order, post-order, and breadth-first mean), and you should know what lazy deletion means and its advantages and disadvantages over deletion that changes the structure of the tree. You may find it helpful to review this code: <code>http://www.ics.uci.edu/~kay/scheme/restaurants1d.scm</code>; we might ask questions about it on a quiz (providing you with a copy of the code, of course).</FONT></P>
<P><FONT FACE="Goudy Old Style"><B>(6)</B>  All the programs we&#39;ve written
  so far have done their work, displayed their results, and quit without leaving
  a trace.  Now it&#39;s time to learn how to read data from a file and write
  results back to a file so we can maintain information more permanently,
  even when our program isn&#39;t running.  For a programming language to
  enable file input and output, it must work with the operating system (or
  multiple operating systems) to handle a variety of issues involving different
  user interfaces, different ways of storing data in files, different naming
  conventions for files, and different hardware devices.  Because there are
  many options, there are details to consider when we work with files that
  we haven&#39;t had to worry about so far.</FONT></P>
<P>
<FONT FACE="Goudy Old Style">There are three main approaches to reading
from and writing to files of text.  (Reading and writing data directly in
the internal form the computer uses to store it in memory is yet another
approach, one we&#39;ll skip over for now.)</FONT></P>
<ul>
  <li>
    <FONT FACE="Goudy Old Style">Read and write a single character
      at a time.  If you read each character individually, you have the most precise
      control over how you analyze the input and build up the data structures
      in your program.  But this approach is the most painstaking and tedious.
      We&#39;ll cover some techniques for organizing this process in Informatics
    42, but we won&#39;t use it this quarter.</FONT></li>
  <li>
    <FONT FACE="Goudy Old Style">Read each line of the file into
      a string, perhaps collecting the strings into a list representing the whole
      file.  Then you could process the list conventionally, processing each string
    using Scheme&#39;s string functions.  This week we&#39;ll do some of this.</FONT></li>
  <li>
    <FONT FACE="Goudy Old Style">Write all the data as Scheme
      expressions, and read it back in the same way.  If your program&#39;s data
      is organized into lists of structures and so on, you can preserve all of
      that organization using this approach.  This is the easiest approach in
      many ways, since you&#39;re maintaining the structure of the data and letting
      Scheme do a lot of the work for you.  We&#39;ll see this approach in later
    assignments.</FONT></li>
</ul>
<BR />
<P>
<FONT FACE="Helvetica" SIZE=1>Based in part on ICS H21assignments by David
G. Kay; modified and new material added by David G. Kay for the Informatics
Core Course, Fall 2004, Fall 2005, Fall 2008, Fall 2009, Fall 2010, and Fall 2011.</FONT></P>
<HR />
<FONT FACE="Goudy Old Style"><A HREF="http://www.ics.uci.edu/~kay/">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />
<font size="2" face="Goudy Old Style">
<!-- #BeginDate format:fcAm1a -->Friday, October 28, 2011 8:38 AM<!-- #EndDate -->
</font></span>
</BODY>
</HTML>