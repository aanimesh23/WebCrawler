
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1">
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay">
<META HTTP-EQUIV="UPDATED" CONTENT="Thursday, January 5, 2006 2:39 PM">
<TITLE>The Design Recipe</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="D250620B">
<META HTTP-EQUIV=KEYWORDS CONTENT="java programming, data structures">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="Web references for computer science topics, especially Java programming and data structures.">
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2006 by David G. Kay.  All rights reserved.">
<link href="/~kay/courses/31/mainstyle.css" rel="stylesheet" type="text/css" />
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<P>
ICS 31 &bull; David G. Kay &bull; UC Irvine</FONT></P>
<P><B><font size=6>The &quot;Design Recipe&quot; for Functions</font></B></P>
<P>&nbsp;</P>
<p>Every time you write a function, you should follow these steps.  They don't do the job for you automatically—if it could do that, software engineers wouldn't make high salaries—but it does help you get organized and avoid many common mistakes. Notice in particular how much you do before you actually start writing the code in the body of the function (in step 6 out of 7).
</p>
<p>(The idea of a "design recipe" for programs comes from the 
<a href="http://programbydesign.org">Program By Design curriculum</a>.)</p>

<ol>

<li>What's the <strong>input</strong> and where does it come from?<br />
Does it come as arguments/parameters?<br />
Does it come from the user, e.g., <code>name = input('Hello; name please:')</code><br />       
Does it read data from a file?   <br />
Does it come from a mouse or trackpad or other sensing device? <br />
Note that a function that "takes a number as input" almost always expects an argument and  does
not call the <code>input()</code> function; a function that "prompts (or asks) the user for a number as input"<em> does</em> call <code>input()</code>.
</li>
<br />
<li>What's the <strong>output</strong> and where does it go?<br />
Is it <em>returned</em> from the function?<br />       
Is it printed?<br />       
Does it write the results to a file?<br />
Does it send a signal to some speakers or a robot controller or another machine on the internet?

<p>Deciding whether to design functions with parameters and returned values or alternatively with print statements or other direct interactions is a question that requires more sophistication than we usually expect in a first course.  In most cases, then, the lab problem or exam question will tell you explicitly what to do (e.g.,  "take a number as a parameter and return its square root" or "prompt the user to input a number and then print that number's square root").  Read the problem carefully to find this vital information.</p>
<p>As a general principle, though, it's usually best to write every function you can with parameters and return values.  That makes them flexible; the program that <em>calls</em> it can decide what to do with the returned result (print it, send it to a robot, whatever).</p>
</li>
<br />
<li>Write a <strong>contract</strong> that states the function's name and the       names and types of its parameters and return value. This can be in the form of a comment (so the precise syntax doesn't trip you up):
<pre><code>#   Restaurant_price:   rest: Restaurant   ->   float       </code></pre>
or it can use actual Python annotations in the actual Python function header (also called the function signature):
<pre><code>def Restaurant_price(rest: Restaurant) -> float:   </code></pre>
If you're not clear about what type(s) of data your function expects and what type it returns, you can't get any further.
</li>
<br />
<li>Write a one-line <strong>purpose statement</strong> or <strong>docstring</strong> that says in simple English what the function does.  
<pre><code>" Take a total restaurant bill and compute the tip on that specified amount "</code></pre>
We will write this line as a quoted string and place it right after the function definition in the final code; that's called a "docstring"; Python will pick it up and display it when we call the <code>help()</code> function.
<pre><code>""" Your docstring can be triple-quoted; among other things, this
    lets you spread it over two lines if you need to. """</code><br />
</pre></li><li>Write some <strong>examples</strong> of calling the function, including the results you expect in each case.  This helps clarify exactly what the function should do; as you work out the examples you may get ideas for how to write code to compute the results.  Moreover, the examples become your tests
(see step 8).<br />
For functions that return values, use Python's <code>assert</code> statement—the word <code>assert</code> followed by a Boolean (true or false) expression that should be true if the function is correct:
<pre><code>assert triple(0) == 0
assert triple(5) == 15   </code></pre>
Write enough different examples to convince yourself (and your TA) that your function works correctly on all expected kinds of data.
</li>
<br />
<li>Write the <strong>body</strong> of the function.  This is where you actually get to write the rest of the code.  Note that you already have the header (it was your contract) and your docstring (the purpose statement).  The examples (assert statements) go after the function body (aligned with the left margin, just like the <code>def</code> for the function.
<pre><code>def triple(value: int) -> int:
   " Return three times the parameter value "
   return 3 * value
assert triple(0) == 0
assert triple(5) == 15   </code><br />
</pre></li><li>Run the function (which runs the <strong>tests</strong>—your examples from step 6) and check the results.  If the assertions are true, everything stays quiet; if one is false, you get an error message that helps you locate the source of the problem. Resolve any discrepancies and repeat the process until all the tests pass.
</li>
</ol>
<HR>
<address>
<FONT FACE="Palatino"><A HREF="http://www.ics.uci.edu/~kay/">David G. Kay</A>,</FONT><a href=mailto:kay@uci.edu> kay@uci.edu</A>
</address>
</BODY>
</HTML>
