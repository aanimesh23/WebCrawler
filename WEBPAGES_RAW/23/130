<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- Page automatically generated from latex_to_html converter. -->
<!-- by cc_extract_html, $Revision: 3.19 $ -->
<!-- LaTeX source file: './Optimisation_ref/Min_ellipse_2.tex' -->
<html> <head>  
<title>Min_ellipse_2&lt;Traits&gt;</title>
</head>  
<link href="../latex_to_html.css" rel="STYLESHEET">
<body bgcolor="white">
<!-- ------------------------------------------------------------------- -->


<!-- Top Navigation ---------------------------------------------------- -->
<div class="NavTop">
<hr>
  <strong>Navigation:</strong>
<a href="Chapter_intro.html">Up</a>, 
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<hr><!-- End of Top Navigation ----------------------------------------- -->
</div>


<A NAME="Cross_link_anchor_1143"></A>

<A NAME="Cross_link_anchor_1144"></A>

      
     
     
     
<A NAME="Index_anchor_1073"></A> 

   
<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC="cc_Class.gif"></TD></TR></TABLE>


    <A NAME="ccRef_CGAL::Min_ellipse_2<Traits>"></A>
<h2><I>CGAL::Min_ellipse_2&lt;Traits&gt;</I></h2>
<P>

<A NAME="Index_anchor_1074"></A> 

   


   
   
     
     
<A NAME="Index_anchor_1075"></A> 

   

   


   
     
     
<A NAME="Index_anchor_1076"></A> 

   


   
     
     
<A NAME="Index_anchor_1077"></A>
<P>

<H3>Definition</H3>
<P>

An object of the class <I><A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt;</I> is the unique ellipse of smallest <A HREF="../Kernel_23_ref/Function_area.html#Cross_link_anchor_159">area</A>
enclosing a finite (multi)set of points in two-dimensional euclidean
space&nbsp;<MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC="cc_mathbb_E.gif"> <SUB>2</SUB></I></MATH>.  For a point set <MATH><I>P</I></MATH> we denote by <MATH><I>me(P)</I></MATH> the smallest
ellipse that contains all points of <MATH><I>P</I></MATH>. Note that <MATH><I>me(P)</I></MATH> can be
degenerate,
i.e.&nbsp;<MATH><I>me(P)=</I></MATH>&Oslash;<MATH><I></I></MATH> if
<MATH><I>P=</I></MATH>&Oslash;<MATH><I></I></MATH>, <MATH><I>me(P)={p}</I></MATH> if <MATH><I>P={p}</I></MATH>,
and <MATH><I>me(P) = { </I></MATH>(1-l)p + l q | 0 <= l <= 1<MATH><I> }</I></MATH> if <MATH><I>P={p,q}</I></MATH>.
<P>

An inclusion-minimal subset <MATH><I>S</I></MATH> of <MATH><I>P</I></MATH> with <MATH><I>me(S)=me(P)</I></MATH> is called a
<I>support set</I>,
the points in <MATH><I>S</I></MATH> are the <I>support points</I>.  A support set has size at
most five, and all its points lie on the boundary of <MATH><I>me(P)</I></MATH>. In general,
neither the support set nor its size are necessarily unique.
<P>

The underlying algorithm can cope with all kinds of input, e.g.&nbsp;<MATH><I>P</I></MATH> may be
empty or points may occur more than once. The algorithm computes a support
set <MATH><I>S</I></MATH> which remains fixed until the next insert or clear operation.
<P>

<I>#include &lt;<A HREF="../../../include/CGAL/Min_ellipse_2.h">CGAL/Min_ellipse_2.h</A>&gt;</I>
<P>

<H3>Requirements</H3>   
     
     
<A NAME="Index_anchor_1078"></A>
<P>

The template parameter <I>Traits</I> is a model for <I><A HREF="Concept_MinEllipse2Traits.html#Cross_link_anchor_1147">MinEllipse2Traits</A></I>.
<P>

We provide the model <I><A HREF="Class_Min_ellipse_2_traits_2.html#Cross_link_anchor_1145">CGAL::Min_ellipse_2_traits_2</A>&lt;K&gt;</I> using the 
two-dimensional C<SMALL>GAL</SMALL>&nbsp;kernel.
<P>

<H3>Types</H3>   
     
     
<A NAME="Index_anchor_1079"></A>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt;::Point
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    Typedef to <I>Traits::Point  </I>.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt;::Ellipse
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    Typedef to <I>Traits::Ellipse</I>. If you 
        are using the predefined traits class 
        <I><A HREF="Class_Min_ellipse_2_traits_2.html#Cross_link_anchor_1145">CGAL::Min_ellipse_2_traits_2</A>&lt;K&gt;</I>,
        you can access the coefficients of the ellipse, see the 
        documentation of <I><A HREF="Class_Min_ellipse_2_traits_2.html#Cross_link_anchor_1145">CGAL::Min_ellipse_2_traits_2</A>&lt;K&gt;</I> and 
        the example below.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt;::Point_iterator
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    Non-mutable model of the STL concept <I>BidirectionalIterator</I>
        with value type <I>Point</I>. Used to access the points
        of the smallest enclosing ellipse.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt;::Support_point_iterator
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    Non-mutable model of the STL concept <I>RandomAccessIterator</I>
        with value type <I>Point</I>. Used to access the support points
        of the smallest enclosing ellipse.
<P>

</TD></TR>
        </TABLE>
<P>

<H3>Creation</H3>   
     
     
<A NAME="Index_anchor_1080"></A>
<P>

A <I><A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt;</I> object can be created from an arbitrary point set <MATH><I>P</I></MATH> and by
specialized construction methods expecting no, one, two, three, four or
five points as arguments. The latter methods can be useful for
reconstructing <MATH><I>me(P)</I></MATH> from a given support set <MATH><I>S</I></MATH> of <MATH><I>P</I></MATH>.
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    template &lt; class InputIterator &gt;
        </I></NOBR>
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    <A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt; min_ellipse ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    InputIterator first,<BR>

InputIterator last,<BR>

bool randomize,<BR>

Random&amp; random = default_random,<BR>

Traits traits = Traits());</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    initializes <I>min_ellipse</I> to <MATH><I>me(P)</I></MATH> with <MATH><I>P</I></MATH> being the set of points
        in the range [<I>first</I>,<I>last</I>). If <I>randomize</I> is
        <I>true</I>, a random permutation of <MATH><I>P</I></MATH> is computed in
        advance, using the random numbers generator <I>random</I>.
        Usually, this will not be necessary, however, the algorithm's
        efficiency depends on the order in which the points are
        processed, and a bad order might lead to extremely poor
        performance (see example below).<BR>

<EM>Requirement: </EM>The value type of <I>first</I> and <I>last</I>
        is <I>Point</I>.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt; min_ellipse (  Traits traits = Traits());
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    creates a variable <I>min_ellipse</I> of type <I><A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt;</I>.
        It is initialized to
        <MATH><I>me(</I></MATH>&Oslash;<MATH><I>)</I></MATH>, the empty set.<BR>

<EM>Postcondition: </EM><I>min_ellipse</I><I>.is_empty()</I> = <I>true</I>.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt; min_ellipse (  Point p,  Traits traits = Traits());
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    initializes <I>min_ellipse</I> to <MATH><I>me({p})</I></MATH>, the set <MATH><I>{p}</I></MATH>.<BR>

<EM>Postcondition: </EM><I>min_ellipse</I><I>.is_degenerate()</I> = <I>true</I>.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    <A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt; min_ellipse ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     Point p,<BR>

Point q,<BR>

Traits traits = Traits());</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    initializes <I>min_ellipse</I> to <MATH><I>me({p,q})</I></MATH>,
the set
        <MATH><I>{ </I></MATH>(1-l)p + l q | 0 <= l <= 1<MATH><I> }</I></MATH>.<BR>

<EM>Postcondition: </EM><I>min_ellipse</I><I>.is_degenerate()</I> = <I>true</I>.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    <A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt; min_ellipse ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     Point p1,<BR>

Point p2,<BR>

Point p3,<BR>

Traits traits = Traits());</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    initializes <I>min_ellipse</I> to <MATH><I>me({p1,p2,p3})</I></MATH>.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    <A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt; min_ellipse ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     Point p1,<BR>

Point p2,<BR>

Point p3,<BR>

Point p4,<BR>

Traits traits = Traits());</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    initializes <I>min_ellipse</I> to <MATH><I>me({p1,p2,p3,p4})</I></MATH>.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    <A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt; min_ellipse ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     Point p1,<BR>

Point p2,<BR>

Point p3,<BR>

Point p4,<BR>

Point p5,<BR>

Traits traits = Traits());</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    initializes <I>min_ellipse</I> to <MATH><I>me({p1,p2,p3,p4,p5})</I></MATH>.
<P>

</TD></TR>
        </TABLE>
<P>

<H3>Access Functions</H3>   
     
     
<A NAME="Index_anchor_1081"></A> 

   


   
     
     
     
<A NAME="Index_anchor_1082"></A> 

   
   
     
     
<A NAME="Index_anchor_1083"></A>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_int_number_of_points6_9_const;"></A>
int
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.number_of_points ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the number of points of <I>min_ellipse</I>, i.e. <MATH><I>|P|</I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_int_number_of_support_points6_9_const;"></A>
int
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.number_of_support_points ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the number of support points of <I>min_ellipse</I>, i.e. <MATH><I>|S|</I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_iterator_points_begin69_const;"></A>
Point_iterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.points_begin ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns an iterator referring to the first point of <I>min_ellipse</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_iterator_points_end69_const;"></A>
Point_iterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.points_end ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the corresponding past-the-end iterator.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_Support_point_iterator_support_points_begin69_const;"></A>
Support_point_iterator
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.support_points_begin ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns an iterator referring to the first support point of <I>min_ellipse</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_Support_point_iterator_support_points_end69_const;"></A>
Support_point_iterator
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.support_points_end ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the corresponding past-the-end iterator.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_const_Point__support_point6_int_i9_const;"></A>
 Point
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.support_point ( int i)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the <I>i</I>-th support point of <I>min_ellipse</I>. Between two
        modifying operations (see below) any call to
        <I>min_ellipse</I><I>.support_point(i)</I> with the same <I>i</I> returns
        the same point.<BR>

<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> i&lt; </I></MATH><I>min_ellipse</I><I>.number_of_support_points()</I><MATH><I></I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_const_Ellipse__ellipse6_9_const;"></A>
 Ellipse
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.ellipse ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the current ellipse of <I>min_ellipse</I>.
        </TD></TR>
        </TABLE>
<P>

<H3>Predicates</H3>   
     
     
     
<A NAME="Index_anchor_1084"></A> 

   
   
     
     
<A NAME="Index_anchor_1085"></A>
<P>

By definition, an empty <I><A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt;</I> has no boundary and no bounded side,
i.e. its unbounded side equals the whole space <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC="cc_mathbb_E.gif"> <SUB>2</SUB></I></MATH>.
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_CGAL::Bounded_side_bounded_side6_const_Point__p9_const;"></A>
<A HREF="../Kernel_23_ref/Enum_Bounded_side.html#Cross_link_anchor_98">CGAL::Bounded_side</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.bounded_side (  Point p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>CGAL::</I><I><A HREF="../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side">ON_BOUNDED_SIDE</A></I>,
        <I>CGAL::</I><I><A HREF="../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side">ON_BOUNDARY</A></I>, or
        <I>CGAL::</I><I><A HREF="../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side">ON_UNBOUNDED_SIDE</A></I> iff <I>p</I> lies properly
        inside, on the boundary of, or properly outside of <I>min_ellipse</I>, resp.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_has_on_bounded_side6_const_Point__p9_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.has_on_bounded_side (  Point p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>true</I>, iff <I>p</I> lies properly inside <I>min_ellipse</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_has_on_boundary6_const_Point__p9_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.has_on_boundary (  Point p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>true</I>, iff <I>p</I> lies on the boundary
        of <I>min_ellipse</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_has_on_unbounded_side6_const_Point__p9_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.has_on_unbounded_side (  Point p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>true</I>, iff <I>p</I> lies properly outside of <I>min_ellipse</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_empty6_9_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.is_empty ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>true</I>, iff <I>min_ellipse</I> is empty (this implies
        degeneracy).
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_degenerate6_9_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.is_degenerate ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>true</I>, iff <I>min_ellipse</I> is degenerate,
        i.e.&nbsp;if <I>min_ellipse</I> is empty, equal to a single point or equal to a
        segment, equivalently if the number of support points is less
        than&nbsp;3.
        </TD></TR>
        </TABLE>
<P>

<H3>Modifiers</H3>   
     
     
     
<A NAME="Index_anchor_1086"></A> 

   
   
     
     
<A NAME="Index_anchor_1087"></A>
<P>

New points can be added to an existing <I>min_ellipse</I>, allowing to build <MATH><I>me(P)</I></MATH>
incrementally, e.g.&nbsp;if <MATH><I>P</I></MATH> is not known in advance. Compared to the direct
creation of <MATH><I>me(P)</I></MATH>, this is not much slower, because the construction
method is incremental itself.
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_insert6_const_Point__p9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.insert (  Point p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    inserts <I>p</I> into <I>min_ellipse</I> and recomputes the smallest
        enclosing ellipse.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    template &lt; class InputIterator &gt;
        </I></NOBR>
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_insert6_InputIterator_first+_InputIterator_last_9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    min_ellipse.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    InputIterator first,<BR>

InputIterator last)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    inserts the points in the range [<I>first</I>,<I>last</I>)
        into <I>min_ellipse</I> and recomputes the smallest enclosing ellipse by
        calling <I>insert(p)</I> for each point <I>p</I> in
        [<I>first</I>,<I>last</I>).<BR>

<EM>Requirement: </EM>The value type of <I>first</I> and <I>last</I> is
        <I>Point</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_clear6_9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.clear ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    deletes all points in <I>min_ellipse</I> and sets <I>min_ellipse</I> to the empty set.<BR>

<EM>Postcondition: </EM><I>min_ellipse</I><I>.is_empty()</I> = <I>true</I>.
        </TD></TR>
        </TABLE>
<P>

<H3>Validity Check</H3>
   
     
     
     
<A NAME="Index_anchor_1088"></A> 

   
   
     
     
<A NAME="Index_anchor_1089"></A>
<P>

An object <I>min_ellipse</I> is valid, iff
<UL>
  <LI><I>min_ellipse</I> contains all points of its defining set <MATH><I>P</I></MATH>,
  <LI><I>min_ellipse</I> is the smallest ellipse spanned by its support set <MATH><I>S</I></MATH>, and
  <LI><MATH><I>S</I></MATH> is minimal, i.e. no support point is redundant.
</UL>
<I>Note:</I> In this release only the first item is considered by the
validity check.
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_valid6_bool_verbose_=_false+_int_level_=_0_9_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    min_ellipse.is_valid ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    bool verbose = false,<BR>

int level = 0)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>true</I>, iff <I>min_ellipse</I> contains all points of its
      defining set <MATH><I>P</I></MATH>. If <I>verbose</I> is <I>true</I>, some
      messages concerning the performed checks are written to
      standard error stream. The second parameter <I>level</I> is not
      used, we provide it only for consistency with interfaces of
      other classes.
        </TD></TR>
        </TABLE>
<P>

<H3>Miscellaneous</H3>
   
     
     
     
<A NAME="Index_anchor_1090"></A> 

   
   
     
     
<A NAME="Index_anchor_1091"></A>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_const_Traits__traits6_9_const;"></A>
const Traits&amp;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    min_ellipse.traits ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a const reference to the traits class object.
        </TD></TR>
        </TABLE>
<P>

<H3>I/O</H3>
   
     
     
<A NAME="Index_anchor_1092"></A>
<P>

<A NAME="Index_anchor_1093"></A> 

   
   
     
     
<A NAME="Index_anchor_1094"></A> 

   
  
      


        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    std::ostream&amp;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
     std::ostream&amp; os &lt;&lt;  min_ellipse<A NAME="Function_std::ostream__operator_66_6_std::ostream__os+_const_Min_ellipse_26Traits9__min_ellipse9;"></A>

        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    writes <I>min_ellipse</I> to output stream <I>os</I>.<BR>

<EM>Requirement: </EM>The output operator is defined for <I>Point</I>
        (and for <I>Ellipse</I>, if pretty printing is used).
        </TD></TR>
        </TABLE>
<P>

<A NAME="Index_anchor_1095"></A> 

   
   
     
     
<A NAME="Index_anchor_1096"></A> 

   
  
      


        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    std::istream&amp;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
     std::istream&amp; is &gt;&gt;  min_ellipse&amp;<A NAME="Function_std::istream__operator_99_6_std::istream__is+_Min_ellipse_26Traits9_min_ellipse_9;"></A>

        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    reads <I>min_ellipse</I> from input stream <I>is</I>.<BR>

<EM>Requirement: </EM>The input operator is defined for <I>Point</I>.
        </TD></TR>
        </TABLE>
<P>

<I>#include &lt;<A HREF="../../../include/CGAL/IO/Window_stream.h">CGAL/IO/Window_stream.h</A>&gt;</I>
<P>

<A NAME="Index_anchor_1097"></A> 

   
   
     
     
<A NAME="Index_anchor_1098"></A> 

   
  
      


        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A HREF="../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757">CGAL::Window_stream</A>&amp;
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
     <A HREF="../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757">CGAL::Window_stream</A>&amp; ws &lt;&lt;  min_ellipse<A NAME="Function_CGAL::Window_stream__operator_66_6_CGAL::Window_stream__ws+_const_Min_ellipse_26Traits9__min_ellipse9;"></A>

        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    writes <I>min_ellipse</I> to window stream <I>ws</I>.<BR>

<EM>Requirement: </EM>The window stream output operator is defined for
        <I>Point</I> and <I>Ellipse</I>.
        </TD></TR>
        </TABLE>
<P>

<H3>See Also</H3>
<P>

<I><A HREF="Class_Min_circle_2.html#Cross_link_anchor_1138">CGAL::Min_circle_2</A>&lt;Traits&gt;</I><BR>

<I><A HREF="Class_Min_ellipse_2_traits_2.html#Cross_link_anchor_1145">CGAL::Min_ellipse_2_traits_2</A>&lt;K&gt;</I><BR>

<I><A HREF="Concept_MinEllipse2Traits.html#Cross_link_anchor_1147">MinEllipse2Traits</A></I>
<P>

<H3>Implementation</H3>   
     
     
<A NAME="Index_anchor_1099"></A>
<P>

We implement the incremental algorithm of Welzl, with move-to-front
heuristic&nbsp;[<A HREF="../biblio.html#Biblio_w-sedbe-91a">Wel91</A>], using the primitives as described
in&nbsp;[<A HREF="../biblio.html#Biblio_gs-epsee-97">GS97a</A>, <A HREF="../biblio.html#Biblio_cgal:gs-seefe-97a">GS97b</A>]. The whole implementation is described
in&nbsp;[<A HREF="../biblio.html#Biblio_cgal:gs-seeeg-98">GS98b</A>].
<P>

If randomization is
chosen, the creation time is almost always linear in the number of points.
Access functions and predicates take constant time, inserting a point might
take up to linear time, but substantially less than computing the new
smallest enclosing ellipse from scratch. The clear operation and the check
for validity each takes linear time.
<P>

<H3>Example</H3>
   
     
     
<A NAME="Index_anchor_1100"></A>
<P>

To illustrate the usage of <I><A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>&lt;Traits&gt;</I> and to show that randomization
can be useful in certain cases, we give an example. The example also
shows how the coefficents of the constructed ellipse can be accessed.
<P>

<pre class="ExampleCode">// file: examples/<A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>/example_Min_ellipse_2.C

// includes
#include &lt;cassert&gt;
#include &lt;CGAL/<A HREF="../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6">Cartesian</A>.h&gt;
#include &lt;CGAL/<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>.h&gt;
#include &lt;CGAL/<A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1144">Min_ellipse_2</A>.h&gt;
#include &lt;CGAL/<A HREF="Class_Min_ellipse_2_traits_2.html#Cross_link_anchor_1146">Min_ellipse_2_traits_2</A>.h&gt;
#include &lt;CGAL/<A HREF="../NumberTypeSupport_ref/Class_Gmpq.html#Cross_link_anchor_1362">Gmpq</A>.h&gt;

// typedefs
typedef  <A HREF="../NumberTypeSupport_ref/Class_Gmpq.html#Cross_link_anchor_1361">CGAL::Gmpq</A>                       NT;
typedef  <A HREF="../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5">CGAL::Cartesian</A>&lt;NT&gt;              K;
typedef  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_51">CGAL::Point_2</A>&lt;K&gt;                 Point;
typedef  <A HREF="Class_Min_ellipse_2_traits_2.html#Cross_link_anchor_1145">CGAL::Min_ellipse_2_traits_2</A>&lt;K&gt;  Traits;
typedef  <A HREF="Class_Min_ellipse_2.html#Cross_link_anchor_1143">CGAL::Min_ellipse_2</A>&lt;Traits&gt;      Min_ellipse;

// main
int
main( int, char**)
{
    int     n = 200;
    Point*  P = new Point[ n];

    for ( int i = 0; i &lt; n; ++i)
	P[ i] = Point( i % 2 ? i : -i , 0);
    // (0,0), (-1,0), (2,0), (-3,0)

    std::cout &lt;&lt; &quot;Computing ellipse (without randomization)...&quot;;
    std::cout.flush();
    Min_ellipse  me1( P, P+n, false);    // very slow
    std::cout &lt;&lt; &quot;done.&quot; &lt;&lt; std::endl;

    std::cout &lt;&lt; &quot;Computing ellipse (with randomization)...&quot;; 
    std::cout.flush();
    Min_ellipse  me2( P, P+n, true);     // fast  
    std::cout &lt;&lt; &quot;done.&quot; &lt;&lt; std::endl;

    // because all input points are <A HREF="../Kernel_23_ref/Function_collinear.html#Cross_link_anchor_167">collinear</A>, the ellipse is 
    // degenerate and equals a line segment; the ellipse has 
    // two support points
    assert(me2.is_degenerate());
    assert(me2.number_of_support_points()==2); 

    // prettyprinting 
    <A HREF="../IOstream_ref/Function_set_pretty_mode.html#Cross_link_anchor_1749">CGAL::set_pretty_mode</A>( std::cout);
    std::cout &lt;&lt; me2;

    // in general, the ellipse is not explicitly representable 
    // over the input number type NT; when you use the default
    // traits class <A HREF="Class_Min_ellipse_2_traits_2.html#Cross_link_anchor_1145">CGAL::Min_ellipse_2_traits_2</A>&lt;K&gt;, you can 
    // get double approximations for the coefficients of the 
    // underlying conic curve. NOTE: this curve only exists 
    // in the nondegenerate case!

    me2.insert(Point(0,1)); // resolves the degeneracy
    assert(!me2.is_degenerate());

    // get the coefficients
    double r,s,t,u,v,w;
    me2.ellipse().double_coefficients( r, s, t, u, v, w);    
    std::cout &lt;&lt; &quot;ellipse has the equation &quot; &lt;&lt; 
      r &lt;&lt; &quot; x^2 + &quot; &lt;&lt; 
      s &lt;&lt; &quot; y^2 + &quot; &lt;&lt; 
      t &lt;&lt; &quot; xy + &quot; &lt;&lt;
      u &lt;&lt; &quot; x + &quot; &lt;&lt;
      v &lt;&lt; &quot; y + &quot; &lt;&lt;
      w &lt;&lt; &quot; = 0.&quot; &lt;&lt; std::endl;

    delete[] P;

    return( 0);
}

// ===== EOF ==================================================================
</pre>
<P>

<div class="NavNext"><hr> <b>Next:</b> <a href="Class_Min_ellipse_2_traits_2.html"><I>Min_ellipse_2_traits_2&lt;K&gt;</I></a> 


    
<div class="NavBottom">
<hr><!-- Bottom Navigation --------------------------------------------- -->
  <strong>Navigation:</strong>
<!Up_chapter_link_52!>
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<!-- End of Bottom Navigation ------------------------------------------ -->


<hr><!-- --------------------------------------------------------------- -->
<div class="NavAddress">

The <A HREF=http://www.cgal.org>CGAL Project</A> .

Tue, December 21, 2004 .
<hr></div>
</body>  </html>  
