<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Program 1</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Program 1</h1>
<h1>Simple Program Suite</h1>
<p>
<h2>Introduction to Computer Science I<br>
ICS-21<br>
</h2>
<p>
</center>


<!-- Introduction -->

<a name="Introduction">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Introduction</b></td>
<td width ="80%">
  Please print a copy of this assignment, read it carefully, and
    highlight material you think will be useful to you while you
    are working on the program or submitting it.
  <p>
  This first real programming assignment is designed to ensure that you know
    the fundamentals of writing, testing, and debugging simple programs using
    the Eclipse Integrated Development Environment (Eclipse IDE).
  You will fill-in parts of one program and then write three simple programs
    in this assignment: each consists of a <b>main</b> method whose body 
    includes statements that
  <ul>
    <li>Declare some variables (sometimes also initializing them),
    <li>Prompt the user for input (values to store into variables)
          from the console via methods in the <b>Prompt</b> class,
    <li>Calculate values from these variables using expressions, and store
          the calculated values into other variables (typically to output at
          the end of the program),
    <li>Output results to the user via the console
          (using the <b>System.out.print</b> and/or <b>System.out.println</b>
           methods)
  </ul>
  <p>
  In this assignment you may assume that all input entered by the user of your
     program is correct; in the next assignment we will practice validating
     user input.
  <p>
  You can better understand this assignment, and check the behavior of your
     programs against my solutions, by downloading the
     <a href="executable.zip">Program #1 Executables</a> zip file, unzipping
     it, and running the programs it contains.
  <p>
  On a PC
   <ul>
     <li>Double click each of the <b>Run ...</b> icons to run its
            associated program.
  </ul>
  On any platform running Eclipse (PC or Mac)
   <ul>
     <li>Start Eclipse and create a new project, using the unzipped executable
           folder as its existing source.
         Disclose the project (at the top),
            then disclose the <b>Referenced Libraries</b> icon,
            then disclose the <b>program1solution.jar</b> icon inside it,
             and then disclose the <b>(default package)</b> icon inside it.
         Finally, right click any of the <b>.class</b> files
           and then select <b>Run As</b> and <b>Java Application</b>.
  </ul>
  Please run these programs now, both ways if possible (see sample inputs in
    the sections below), and observe the user interaction with the programs.
  <p>
  Note that although you can run these three programs, you cannot examine
    their Java code.
  Before writing your programs, run my executables and examine the form in
    which the do their input/output, and use the same form in the programs
    that you write.
  <p>
  To start working on this assignment, download and unzip
    <a href="start.zip">Program #1 Project Folder</a>, which contains
    statements from the first program you must write.
  Rename this project folder <b>Program1</b>).
  Then create three more new Java classes in it (as you did for one class in 
    Program #0).
  The existing class is named <b>ExpressionTest</b>; each of the three 
    remaining classes will contain a program that you will write from scratch
    to solve one problem; name the classes <b>EscapeVelocity</b>,
    <b>ChangeMaker</b>, and <b>PizzaPricer</b>.
  Write, run, and debug each class/program as you did in Program #0.
  When you finish each part, submit its <b>.java</b> file.
  <p>
  <b>Only one programmer of the pair should dropoff the programs: the same one
       for each part.
     It doesn't matter which of the pair submits, but that person should
       submit all the parts.
     Of course, each program should contain both student names (see below).</b>
  <p>
  IMPORTANT: 
    Download the <a href="../../programs/droptime.zip">Drop Time</a> program
      and examine and run it; use it as a model for all three of your programs.
    It declares variables, prompts the user for inputs (stored in some
       variables), computes values (stored in other variables), and prints the
       values of some variables along with some text.
  <p>
  Please cut, paste, and fill in the following comment at the top of each of
     your programs (see how I did this in the Drop Time program mentioned
     above).
  Ensure that the names and email addresses of <b>both programmers</b> in the
    pair appear in each program that you write, at the top of this big comment.
<b><pre>
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
// Name/e-mail    : e.g., Richard Pattis/pattis@ics.uci.edu
//                        Norm Jacobson/jacobson@ics.uci.edu
//                        You must list both in paired projects
// Course/Lab     : e.g., ICS-21/Lab 1, 2, or 3
// Program #/Name : e.g., Program #1/ExpressionTest
//
// Description:
//
//    Fill in this section with a description of your program. A good rule of
// thumb is that a description should be about 1/10th to 1/5th the size (in
// lines) of the program (in lines) that it describes.
//
// Known Bugs (if any)  : (if you know about/explain a bug here, you will lose
//                        less credit for it than if you don't acknowledge it).
//
// Program History:
//   List dates for any major events in the program's life-cycle: e.g.,
//   program started, removal of a major bug, program finished; get into the
//   habit of documenting (with an audit trail) major changes to every file
//   that you edit. The first entries might be...
//   9/1/08: R. Pattis/N. Jacobson  - Started program, working as a pair
//   9/1/08: R. Pattis/N. Jacobson  - suspended work; met with TA to discuss complicated bug
//   9/2/08: R. Pattis/N. Jacobson  - Finished program, submitted for grading
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
</pre></b>
<p>
All programs prompt the user for information on the console. 
To get access to the class and its needed method names, you will have to add
  the import statement <b>import edu.uci.ics.pattis.introlib.Prompt;</b>
  after the big comment above (and of course, you will also have to
  add the  <b>introlib.jar</b> file to Eclipse, if you haven't done so).
This import gives this program access to all methods in the <b>Prompt</b>
  class.
Note that you will also use methods from the <b>Math</b> class, but
  this class is implicitly/automatically imported into every Java program.
<p>
Finally, it is a mistake to try to do all these problems in one sitting
  (especially on the night that they all are due).
While all are simple, each part gets progressively harder.
Sit down during the first lab and try to finish the first part; over the 
  weekend, try to finish the second and third parts; if you succeed and have
  more time, finsh the last part (otherwise save it for next week) -maybe you
  will finish them all quickly.
Even though the programming problems get more complicated, the first one is
  likely to cause you the most trouble: understanding the basics of the
  assignment (shared by all three programs), setting up everything, etc.
It is important that you encounter all these difficulties early, by attempting
  to finish one problem over the first lab/weekend, well before the entire
  assignment is due; this will give you time to seek and obtain help, if you
  need it.
</td>
</tbody>
</table>


<!-- Escape Velocity -->

<a name="EscapeVelocity">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Part 1:<br>Calculating Escape Velocity</b></td>
<td width ="80%">
  The velocity needed to escape the gravitation field of a planet is given by
  the mathematical formula
  <pre><b>
          +---------
         /  2 g mP
  v =   /  --------
      \/      rP
</b></pre>
where <b>g</b> is the Gravitational constant (6.67x10<sup>-11</sup> in the
  metric system),
<b>mP</b> is the mass of the planet (in kilograms), <b>rP</b> is the radius of
  the planet (in meters) and <b>v</b> is the escape velocity in
  (in meters/second). 
<p>
Here is a short table of planets and their (<b>approximate</b>) calculated
  escape velocities.
<p>
<table cellspacing="0" cellpadding="5" border="1" rules="all">
<thead><tr><th align="left">Planet</th><th>Mass<br>(kilograms)</th><th>Radius<br>(meters)</th><th>Approximate Escape<br> Velocity (meters/sec)</th>
</thead>
<tbody>
<tr valign="top"><td>Earth</td><td>5.983x10<sup>24</sup></td><td>6.357x10<sup>6</sup></td><td align="right">11,200</td> 
<tr valign="top"><td>Venus</td><td>4.906x10<sup>24</sup></td><td>6.185x10<sup>6</sup></td><td align="right">10,300</td>
<tr valign="top"><td>Mars</td><td>6.581x10<sup>23</sup></td><td>3.382x10<sup>6</sup></td><td align="right">5,100</td>
<tr valign="top"><td>Jupiter</td><td>1.904x10<sup>27</sup></td><td>6.974x10<sup>7</sup></td><td align="right">60,300</td>
<tr valign="top"><td>Earth's Moon</td><td>7.347x10<sup>22</sup></td><td>1.738x10<sup>6</sup></td><td align="right">2,370</td>
</tbody>
</table>
<p>
Write a program that prompts the user for a planet's mass and radius, and then
  computes and displays the escape velocity of the planet.
Verify these answers in the table above to ensure that your program is working
  correctly.  
To use the <b>sqrt</b> function (function is a mathematical term), remember to
  call the <b>Math.sqrt</b> method (method is a programming term) in your
  program.
<p>
The <a href="../../programs/droptime.zip">Drop Time</a> program, mentioned
  above, also uses such a call to a method in the <b>Math</b> library class,
  and has similar code to what you need to write.
Examine this program and use it as a model for the one that solves the Escape
  Velocity program.
Remember to fill in all the information in the comment at the top of the
 program.
</td>
</tbody>
</table>



<!-- Escape Velocity -->

<a name="EscapeVelocity">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Part 2:<br>Formulas -> Expressions</b></b></td>
<td width ="80%">
  The following three lines contain a total of 13 formulas<p>
  <image src="formulas.gif">
  <p>
  There are 7 on the first line, and 3 each on the second and third lines.
  <p>
  The class <b>ExpressionTest</b> contains a driver program to test all these
    formulas: it declares the needed variables, prompts the user for their 
    values, and prints the answers.
  But, you need to translate each of the 13 formulas into a correct Java
    Expression (each now just says <b>answer = 0;</b>).
  For maximum credit, your expressions should contain no redundant
     parentheses; parentheses are redundant if they can be removed, but
     leave the expression always still computing the correct answer, still
     performing the required operations in the correct order.
  <p>
  For example, the parentheses in <b>(a*b)/c</b> are redundant because
    even if we remove them, the expression <b>a*b/c</b> will still multiply
    <b>a</b> by <b>b</b> before dividing by <b>c</b> (by Java's rules of
    operator precedence and associativity).
  The parentheses in <b>a/(2.*b)</b> are NOT redundant because if we remove
     them, the result will be the quantity <b>a/2.</b> times <b>b</b>.
  Note, some students might write <b>a/2./b</b> but I find this expression
    more difficult to understand: you don't have to <b>minimize</b>
    parentheses; you just want to write no redundant ones.
  There is a difference between these goals (reread the material above for
    clarification).
  <p>
  Finally, for the mathematical constants &pi; and <i>e</i> in these formulas,
    use <b>Math.PI</b> and <b>Math.E</b> instead of writing your own literals
    that approximate these values.
</td>
</tbody>
</table>



<!-- Change Maker -->

<a name="ChangeMaker">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Part 3:<br>Change Maker</b></td>
<td width ="80%">
  Write a program that prompts the user for some amount of change to make (an
    <b>int</b> from <b>1</b> to <b>99</b> cents; don't worry about bad input),
    and then computes and displays the number of quarters, dimes, nickels, and
    pennies to make that amount of change.
  Always compute the fewest coins to make that change.
  For example, if the user entered <b>69</b> the program would display
  <pre><b>    To make change for 69 cents:
      2 quarters
      1 dimes
      1 nickels
      4 pennies</b></pre>
  Don't worry about displaying things like <b>1 dimes</b> (mismatching a
    singular and plural).
  <p>
  Algorithm Hint: After the user inputs the amount of change to make, first
    determine the number of quarters to return (using <b>/</b> on <b>int</b>s:
    here truncation is useful), and then update the amount of change to make to
    be the remaining amount to return after accounting for the quarters
    returned; repeat this process for dimes, then nickels, and finally for
    pennies.
  <p>
  For example, to make <b>69</b> cents in change, the program computes <b>2</b>
     quarters, leaving <b>19</b> cents in change to be made by dimes, nickels,
     and pennies; then the program computes <b>1</b> dime, leaving <b>9</b>
     cents in change to be made by nickels and pennies; etc.
  Finally, note that some amounts may be zero:
  <pre><b>    To make change for 55 cents:
      2 quarters
      0 dimes
      1 nickels
      0 pennies</b></pre>
  Some solutions make use the the <b>%</b> operator; there are many different
     ways to solve this problem.
  Before programming the solution in Java, develop a procedure that allows
    <b>you</b> to calculate the right values when you follow it, and then
    automate that solution  by translating it into a Java program.
</td>
</tbody>
</table>


<!-- Pizza Pricer -->

<a name="PizzaPricer">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Part 4:<br>Pizza Pricer</b></td>
<td width ="80%">
  Write a program that computes pizza prices.
  The program should prompt the user to enter the diameter of the pizza (as an
    <b>int</b>, in inches, not as a <b>double</b>) and the price of the pizza
    (as a <b>double</b>, in dollars).
  Then the program should compute and display
  <ol>
    <li>How many people the pizza feeds, assuming each person gets to eat a
           minimum
          <b>50 in<sup>2</sup></b> of pizza: this value must be an <b>int</b>,
          so if your program computes <b>2.8</b> people are fed, then the
          "correct" number of people it feeds is <b>2</b> (with each person
          getting a bit more than the minimum amount of pizza).
    <li>The relative price of the pizza (in <b>cents/in<sup>2</sup></b>).
    <li>The cost (in <b>dollars per person</b>; include a <b>15%</b> tip).
  </ol>
  To get an excellent approximation to pi, use the static field <b>PI</b> in
     the <b>java.lang.Math</b> class in your area calculations; refer to it in 
     your program as <b>Math.PI</b>.
  <p>
  Test and check your program on various sizes and prices of pizzas (and
    compare its results with my executable).
  See the sample program
    <a href="../../programs/tripplanner.zip">Trip Planner</a> for a similar
    program.
  Use this program as a model for the one that you are writing.
</td>
</tbody>
</table>

</body>
</html>
