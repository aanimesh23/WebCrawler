<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Glossary</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Glossary of Programming (and Java) Terms</h1>
<p>
<p>
</center>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Cascaded Method Calls</b></td>
<td width ="80%">
In a cascaded method call, we use the result returned by one method (a
  reference to an object) to immediatley call another method.
If we declare <b>String s = "foo";</b> and then the cascaded method call
  <b>s.toUpperCase().replace('F','G')</b> it returns a result of <b>"GOO"</b>:
   <b>toUpperCase</b> is called on the object <b>s</b> refers to, and returns 
  a reference to a new object whose state is <b>"FOO"</b>; the cascaded method
  call immediately calls <b>replace</b> on this reference, and return a
  reference to a newer object whose state is <b>"GOO"</b>.
Cascaded method calls is similar to composition of functions in mathematics.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Checked Exception</b></td>
<td width ="80%">
A checked exception is a sublcass of Throwable but not of RunTimeException.
Such exceptions generally indicate an extra-logical failure (one not related
  to programming errors; e.g. EndOfFileException).).
They are required either to be caught, or appear in a method that specifies
  in its prototyp that it throws that kind of exception.
Contrast to Unchecked Exception.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Access Modifier</b></td>
<td width ="80%">
A Java keyword that describes whether/how some class member can be
  referred to (accessed).
Common access modifiers are <b>public</b>, <b>private</b>, <b>protected</b>,
  <b>static</b>, and <b>final</b>.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Accessor</b></td>
<td width ="80%">
A Java method that examines the state of an object but does not change it
  is called an accessor
Accessors typically return a result (otherwise, calling one would produce
  not visible effect).
Accessors are often call "getters", and their names often start with
   <b>get</b>.
See mutator.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Constructor</b></td>
<td width ="80%">
A class member whose purpose is to help initialize all the fields of a class.
Constructors can be overloaded.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Driver</b></td>
<td width ="80%">
A program with a simple menu for testing the constructors and methods of
  a class.
The user selects which method to call via the menu, and the result of
  the operation is printed (often along with the current state of the
  object via the <b>toString</b> method).
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>EBNF</b></td>
<td width ="80%">
Extended Backus-Naur Form: A notation for formally describing the syntax of
  a programming language (i.e., specifying which programs are grammatically
  correct).
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Evaluate</b></td>
<td width ="80%">
What Java does with an expression.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Exception</b></td>
<td width ="80%">
If a built-in Java operator or programmer supplied Java method cannot
   correctly compute its result (e.g., the user has specified the bad
   arguments) it throws an exception to indicate a problem.
Exceptions are classified as either checked or not-checked.
When such operators/methods occur in try/catch blocks, the programmer can
  indicate how to proceed if an exception is thrown.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Excecute</b></td>
<td width ="80%">
What Java does with a statement.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Identifier</b></td>
<td width ="80%">
A kind of token, used for names: variable names, method names, class names,
  etc.
Identifiers always start with letters; a dollar sign is allowed, but this
  character should be reserved for special identifiers created by the
  Java compiler.
</td>
</tbody>
</table>


<hr align="left" width="100%"> 
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Immutable</b></td>
<td width ="80%">
A class is immutable if is defines no mutator methods.
This means that once the state of an object is initialized by
  a constructor, it will never change.
<b>String</b> and the wrapper classes are all immutable.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Java</b></td>
<td width ="80%">
A programming language designed by James Gosling at Sun Microsystems.
Java is meant to be easier (and safer) to use than C++ (the language that 
  it most closely resembles) at the cost of being less efficient.
The implications of this tradeoff are very interesting.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Keyword</b></td>
<td width ="80%">
A kind of token, used for names/identifiers reserved by Java with immutable
  meanings.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Literal</b></td>
<td width ="80%">
A kind of token, used for the value of a type.
Java allows us to specify literals for the primitive types int, double,
  boolean, and char; and for the reference/class type String.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Members</b></td>
<td width ="80%">
Java classes define and document three kinds of  members:
  constructors, methods, and fields.
Almost everything that we can say about a class is said about
  one of these members.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Mutator</b></td>
<td width ="80%">
A Java method that changes the state of an object is called a mutator.
Mutators typically do not return a result (are declared to return <b>void</b>),
  although some mutators both change state and return a result
  (e.g., <b>nextToken</b> in <b>StringTokenizer</b>).
Mutators just change state, without looking at current values, are often call
  "setters", and their names often start with <b>set</b>.
See accessor.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>new</b></td>
<td width ="80%">
<b>new</b> is a unary prefix operator, which takes as an operand the
  name of any class.
Following the class name is a pair of open/close parentheses;
  inside these parentheses, separated by commas, is any information
  that the class requires to specify the initial state of the
  object being constructed.
The <b>new</b> operator constructs a new object from this class, initializes
  it, and then returns as a result (all operators return results) a reference
  to this object.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Operator</b></td>
<td width ="80%">
A kind of token, mostly used for arithmetic, relational, logical, or textual
  operations (operating on primtive types or references -but not on the
  state of the objects that they refer to).
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Overloaded</b></td>
<td width ="80%">
An operator or method is overloaded if it has more than one prototype.
Java determines which actual operator/method to use based on its
  signature.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Primitive Type</b></td>
<td width ="80%">
A type built in to the Java language (as a keyword).
The main primtive types are <b>int</b>, <b>double</b>, <b>boolean</b>,
  and <b>char</b>; less often used primitive types are <b>short</b>,
  <b>long</b>, and <b>float</b>.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Prototype</b></td>
<td width ="80%">
A specification of the types and exceptions involved in an operator or method.
It shows the types of the operands/parameter, the type of the result, and any
  exceptions that can be thrown during the computation.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Reference Type</b></td>
<td width ="80%">
A reference type includes the names of interfaces and classes (either declared
  in the standard Java library or by a programmer).
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Separator</b></td>
<td width ="80%">
A kind of token, used for punctuation (period, comma, semi-colon) or grouping
  (parentheses, brackets, braces -which all come in paris: one for openining
  the group and one for closing it).
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Signature</b></td>
<td width ="80%">
A specification of the types involved in an operator or method.
It shows the types of the operands/parameters only.
It is a subset of the prototype information (it omits the type of the result
  and any exceptions that can be thrown during the computation).
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Syntax Constraint</b></td>
<td width ="80%">
An extra rule imposed by the compiler on some statement.
The rule either cannot be encoded in the EBNF, or it is just
  very cumbersome to do so.
Example: in an <code>if</code> statement, the <i>expression</i> in the
  parentheses (which is specified in the EBNF) must be of type
  <code>boolean</bode>.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Token</b></td>
<td width ="80%">
The smallest lexical unit in a program.
The Java compiler scans the characters in a program, grouping them into tokens.
The 6 basic kinds of tokens are identifiers, keywords, separators, operators,
  literals (either type int, double, boolean, char, or String), and comments.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Types</b></td>
<td width ="80%">
Java types include primitive types and reference types.
Types are a bit more general than classes; while every class is a types,
   types also include interfaces.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Variable</b></td>
<td width ="80%">
Variables are declared to have names and types (either primitive or reference).
A variable of a primitive type a value of that type.
A variable of a reference type stores either <b>null</b> (meaning it
  refers to no object), or a reference to an object constructed from
  some compatible class: the object stores more information.
</td>
</tbody>
</table>


<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Unchecked Exception</b></td>
<td width ="80%">
An unchecked exception is a sublcass of RunTimeException.
Such exceptions generally indicate a programming error (e.g.
  IllegalArgumentException).
Contrast to Checked Exception.
</td>
</tbody>
</table>


<hr align="left" width="100%">
</body>
</html>
