<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="CHEM-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="CHEM-module.html">Package&nbsp;CHEM</a> ::
        <a href="CHEM.ML-module.html">Package&nbsp;ML</a> ::
        <a href="CHEM.ML.features-module.html">Package&nbsp;features</a> ::
        <a href="CHEM.ML.features.BaseFeatureExtractor-module.html">Module&nbsp;BaseFeatureExtractor</a> ::
        Class&nbsp;BaseFeatureExtractor
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<!-- ==================== CLASS DESCRIPTION ==================== -->
<h1 class="epydoc">Class BaseFeatureExtractor</h1><br /><br />
<p>Abstract base class for all feature extractor classes.</p>
  <p>Feature extractor classes are those that can map input data objects 
  into feature vectors (actually represented as feature dictionaries given 
  the typical sparseness of such vectors).</p>
  <p>Most commonly this is used ultimately for kernel functions which 
  should simply take any pair of objects and calculate some similarity 
  score between them (given positive definite limitations) for use in a 
  support vector machine  (SVM) style machine-learning application, without
  ever requiring an explicit vector representation of the data objects.</p>
  <p>For current practical purposes, most of our kernels are based on some 
  data -&gt; feature dictionary mapping, on which we can then apply any of 
  a variety of vector-based similarity measures to complete the kernel 
  function.  These include scalar dot product, Tanimoto, MinMax, Gaussian, 
  etc.</p>
  <p>The input objects need not be of any particular type as far as this 
  interface is concerned.  They may be strings, molecules (OEMolBase), 
  vectors, etc.  It is up to the implementing class to make those 
  distinctions.</p>
  <p>The results of these extractors will be feature dictionaries for each 
  input object.  These are simple dictionary objects representing sparse 
  feature vectors with the most common interpretation having the dictionary
  item keys as string representations of the features, and the item values 
  as the number of times that feature appears in the data object.</p>
  The general output of these extractors will be a text file 
  representation of these feature dictionaries, the specifics of which are 
  specified by the FeatureDictWriter class.  Modules in the Similarity 
  package can then apply the assorted similarity measures on these feature 
  dictionaries to produce a Gram matrix of similarity scores for input into
  an SVM or other learning machine.<br /><br />

<!-- ==================== INSTANCE METHODS ==================== -->
<a name="section-InstanceMethods"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Instance Methods</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-InstanceMethods"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#__init__" class="summary-sig-name">__init__</a>(<span class="summary-sig-arg">self</span>)</span><br />
      Default constructor.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#loadOptions" class="summary-sig-name">loadOptions</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">options</span>)</span><br />
      Load relevant options derived from an optparse.OptionParser into 
      the state of this object.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#loadArgs" class="summary-sig-name">loadArgs</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">args</span>)</span><br />
      Similar to loadOptions, handle the arguments that come out of 
      optparse.OptionParser.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#main" class="summary-sig-name">main</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">argv</span>,
        <span class="summary-sig-arg">closeOutfile</span>=<span class="summary-sig-default">True</span>)</span><br />
      Main method, callable from command line.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#__call__" class="summary-sig-name">__call__</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">obj</span>)</span><br />
      Primary abstract method.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#objectDescription" class="summary-sig-name">objectDescription</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">obj</span>)</span><br />
      Abstract method.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#getNameID" class="summary-sig-name">getNameID</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">obj</span>)</span><br />
      Overridable method.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#outputFeatures" class="summary-sig-name">outputFeatures</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">objIter</span>,
        <span class="summary-sig-arg">outFile</span>)</span><br />
      Convenience method shared by all extractors to generate and output
      features for all input objects.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
<!-- ==================== CLASS VARIABLES ==================== -->
<a name="section-ClassVariables"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Class Variables</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-ClassVariables"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#parser" class="summary-name">parser</a> = <code title="None">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingModel.Searc<code class="variable-ellipsis">...</code></code>
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#inputIter" class="summary-name">inputIter</a> = <code title="None">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingModel.Se<code class="variable-ellipsis">...</code></code>
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#outFile" class="summary-name">outFile</a> = <code title="None">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingModel.Sear<code class="variable-ellipsis">...</code></code>
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a href="CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#inputFunction" class="summary-name">inputFunction</a> = <code title="None">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingMode<code class="variable-ellipsis">...</code></code>
    </td>
  </tr>
</table>
<!-- ==================== METHOD DETAILS ==================== -->
<a name="section-MethodDetails"></a>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Method Details</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-MethodDetails"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
</table>
<a name="__init__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__init__</span>(<span class="sig-arg">self</span>)</span>
    <br /><em class="fname">(Constructor)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Default constructor.  Sets up expected command-line options.</p>
  Sub-classes can add their own options on top of these, though should 
  beware of overwriting an option letter.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="loadOptions"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">loadOptions</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">options</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Load relevant options derived from an optparse.OptionParser into the 
  state of this object.</p>
  Sub-classes should have this handle any of the options it added to the
  command-line parser via the constructor.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="loadArgs"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">loadArgs</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">args</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Similar to loadOptions, handle the arguments that come out of 
  optparse.OptionParser.</p>
  <p>Subclass is responsible for translating the command-line arguments 
  into an actual input iterator and output file object.</p>
  A default implementation is available here, assuming the arguments 
  should be interpreted as a simple input and simple output file. If this 
  is not the case, the sub-class should override this method or modify the 
  self.inputFunction member in its constructor. For example using something
  like an oemolistream or FeatureDictReader.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="main"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">main</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">argv</span>,
        <span class="sig-arg">closeOutfile</span>=<span class="sig-default">True</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Main method, callable from command line.</p>
  Setup several common options that all of the sub-classes will 
  share.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="__call__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__call__</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">obj</span>)</span>
    <br /><em class="fname">(Call operator)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Primary abstract method.  Build a dictionary of an input object's 
  important features.</p>
  <p>Should be such that it is easy to compare any two objects' feature 
  dictionaries.</p>
  This uses the &quot;callable&quot; interface, which means the object 
  is a functor which should be used like a function call.  For example: 
  &gt;&gt;&gt; from SpectrumExtractor import SpectrumExtractor; 
  &gt;&gt;&gt; featureExtractor = SpectrumExtractor(); &gt;&gt;&gt; 
  featureExtractor.k = 1; &gt;&gt;&gt; featureDict = 
  featureExtractor(&quot;teststring&quot;);     # Note that the extractor 
  object looks like a function call &gt;&gt;&gt; features = 
  featureDict.keys(); &gt;&gt;&gt; features.sort(); &gt;&gt;&gt; for 
  feature in features: ...     print feature, featureDict[feature] e 1 g 1 
  i 1 n 1 r 1 s 2 t 3
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="objectDescription"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">objectDescription</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">obj</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Abstract method.  Return a string description of the input object.</p>
  Individual extractor classes should implement the proper thing to do 
  here. For example, if the input is a SMILES string, just return the 
  string itself, but if the input object is an OEMolBase object, it could 
  generate a SMILES string for it, etc.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="getNameID"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">getNameID</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">obj</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Overridable method.  Return a string name or ID label for the input 
  object.</p>
  For molecule objects, this will probably be mol.GetTitle(). Otherwise,
  default to a sentinel value.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="outputFeatures"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">outputFeatures</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">objIter</span>,
        <span class="sig-arg">outFile</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Convenience method shared by all extractors to generate and output 
  features for all input objects.</p>
  Generated features will be output in feature dictionary format to the 
  output file.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<br />
<!-- ==================== CLASS VARIABLE DETAILS ==================== -->
<a name="section-ClassVariableDetails"></a>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Class Variable Details</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-ClassVariableDetails"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
</table>
<a name="parser"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <h3 class="epydoc">parser</h3>
  
  <dl class="fields">
  </dl>
  <dl class="fields">
    <dt>Value:</dt>
      <dd><table><tr><td><pre class="variable">
None
</pre></td></tr></table>
</dd>
  </dl>
</td></tr></table>
</div>
<a name="inputIter"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <h3 class="epydoc">inputIter</h3>
  
  <dl class="fields">
  </dl>
  <dl class="fields">
    <dt>Value:</dt>
      <dd><table><tr><td><pre class="variable">
None
</pre></td></tr></table>
</dd>
  </dl>
</td></tr></table>
</div>
<a name="outFile"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <h3 class="epydoc">outFile</h3>
  
  <dl class="fields">
  </dl>
  <dl class="fields">
    <dt>Value:</dt>
      <dd><table><tr><td><pre class="variable">
None
</pre></td></tr></table>
</dd>
  </dl>
</td></tr></table>
</div>
<a name="inputFunction"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <h3 class="epydoc">inputFunction</h3>
  
  <dl class="fields">
  </dl>
  <dl class="fields">
    <dt>Value:</dt>
      <dd><table><tr><td><pre class="variable">
None
</pre></td></tr></table>
</dd>
  </dl>
</td></tr></table>
</div>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="CHEM-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:32 2007
    </td>
    <td align="right" class="footer">
      <a href="http://epydoc.sourceforge.net">http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie()
  // -->
</script>
  
</body>
</html>
