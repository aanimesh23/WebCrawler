<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>CHEM.Common.MolExt</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="CHEM-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="CHEM-module.html">Package&nbsp;CHEM</a> ::
        <a href="CHEM.Common-module.html">Package&nbsp;Common</a> ::
        Module&nbsp;MolExt
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="CHEM.Common.MolExt-module.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<!-- ==================== MODULE DESCRIPTION ==================== -->
<h1 class="epydoc">Module MolExt</h1><br /><br />
Extensions for molecule object descriptors<br /><br />

<!-- ==================== CLASSES ==================== -->
<a name="section-Classes"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Classes</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-Classes"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a href="CHEM.Common.MolExt.Orbital-class.html" class="summary-name">Orbital</a>
    </td>
  </tr>
</table>
<!-- ==================== FUNCTIONS ==================== -->
<a name="section-Functions"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Functions</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-Functions"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#nStdValenceElectrons" class="summary-sig-name">nStdValenceElectrons</a>(<span class="summary-sig-arg">atomicNum</span>)</span><br />
      Return the standard number of valence electrons for an atom type 
      specified by atomic number.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#atomIonizationEnergy" class="summary-sig-name">atomIonizationEnergy</a>(<span class="summary-sig-arg">atom</span>,
        <span class="summary-sig-arg">formalCharge</span>=<span class="summary-sig-default">None</span>)</span><br />
      Return a reference value for the atom's ionization energy 
      (kcal/mol).</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#atomElectronAffinity" class="summary-sig-name">atomElectronAffinity</a>(<span class="summary-sig-arg">atom</span>,
        <span class="summary-sig-arg">formalCharge</span>=<span class="summary-sig-default">None</span>)</span><br />
      Return a reference value for the atom's electron affinity 
      (kcal/mol).</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#atomElectronegativity" class="summary-sig-name">atomElectronegativity</a>(<span class="summary-sig-arg">atom</span>,
        <span class="summary-sig-arg">formalCharge</span>=<span class="summary-sig-default">None</span>)</span><br />
      Return a reference value for the electronegativity of a given 
      atom.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#stableValenceShell" class="summary-sig-name">stableValenceShell</a>(<span class="summary-sig-arg">atomicNum</span>)</span><br />
      How many electrons should be in the outer shell for this atom type
      to be stable? Most commonly should just be 8 to make the octet rule, 
      except for hydrogen.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#orbitalInfo" class="summary-sig-name">orbitalInfo</a>(<span class="summary-sig-arg">atom</span>)</span><br />
      Returns various statistics related to the atom's non-bonded 
      orbitals.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#atomHybridization" class="summary-sig-name">atomHybridization</a>(<span class="summary-sig-arg">atom</span>,
        <span class="summary-sig-arg">visitedAtomIndexes</span>=<span class="summary-sig-default">None</span>)</span><br />
      OEChem has OEGetHybridization method, and this works 
      similarly.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#orbitalIter" class="summary-sig-name">orbitalIter</a>(<span class="summary-sig-arg">atom</span>)</span><br />
      Iterate over all of the apparent orbitals in the current atom.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#resonanceStructureIter" class="summary-sig-name">resonanceStructureIter</a>(<span class="summary-sig-arg">mol</span>,
        <span class="summary-sig-arg">observedSmilesSet</span>=<span class="summary-sig-default">None</span>,
        <span class="summary-sig-arg">depth</span>=<span class="summary-sig-default">0</span>)</span><br />
      For the given molecule or intermediate, enumerate all of the 
      reasonable resonance structures by shifting electrons around 
      available p atomic orbitals and pi molecular orbitals.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#uniqueAtomResonanceStructureIter" class="summary-sig-name">uniqueAtomResonanceStructureIter</a>(<span class="summary-sig-arg">mol</span>,
        <span class="summary-sig-arg">undoLabels</span>=<span class="summary-sig-default">True</span>)</span><br />
      Simple wrapper around resonance structureIter method.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#labelUniqueAtomMaps" class="summary-sig-name">labelUniqueAtomMaps</a>(<span class="summary-sig-arg">mol</span>,
        <span class="summary-sig-arg">undoDict</span>=<span class="summary-sig-default">None</span>)</span><br />
      Helper to label the atom map attribute of all of the atoms of the 
      molecule equal to their index position in the molecule, which ensures
      they will all receive a unique value.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#undoLabelUniqueAtomMaps" class="summary-sig-name">undoLabelUniqueAtomMaps</a>(<span class="summary-sig-arg">mol</span>,
        <span class="summary-sig-arg">undoDict</span>=<span class="summary-sig-default">None</span>)</span><br />
      Undo the effects of the labelUniqueAtomMaps function.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#rearrangeOrbitalElectrons" class="summary-sig-name">rearrangeOrbitalElectrons</a>(<span class="summary-sig-arg">mol</span>,
        <span class="summary-sig-arg">bond</span>,
        <span class="summary-sig-arg">beginPOrbs</span>,
        <span class="summary-sig-arg">endPOrbs</span>)</span><br />
      Given just the p and pi orbitals for the given bond,
enumerate each natural way of rearranging the electrons within them.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#rearrangeOrbitalElectronsAllowDoubleCharges" class="summary-sig-name">rearrangeOrbitalElectronsAllowDoubleCharges</a>(<span class="summary-sig-arg">mol</span>,
        <span class="summary-sig-arg">bond</span>,
        <span class="summary-sig-arg">beginPOrbs</span>,
        <span class="summary-sig-arg">endPOrbs</span>)</span><br />
      The real implementation method.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#grossFormalCharges" class="summary-sig-name">grossFormalCharges</a>(<span class="summary-sig-arg">mol</span>)</span><br />
      Figure out the total gross positive and negative charge on the 
      molecule, which may be non-zero even if the net charge on the 
      molecule is zero.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#screenResonanceStruct" class="summary-sig-name">screenResonanceStruct</a>(<span class="summary-sig-arg">mol</span>)</span><br />
      The molecule should represent a proposed resonance structure.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#moveOrbitalElectrons" class="summary-sig-name">moveOrbitalElectrons</a>(<span class="summary-sig-arg">orb1</span>,
        <span class="summary-sig-arg">orb2</span>,
        <span class="summary-sig-arg">electronCount</span>=<span class="summary-sig-default">2</span>)</span><br />
      Most general half-reaction, movement of electrons from one 
      molecular orbital to another.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#undoMoveOrbitalElectrons" class="summary-sig-name">undoMoveOrbitalElectrons</a>(<span class="summary-sig-arg">orb1</span>,
        <span class="summary-sig-arg">orb2</span>,
        <span class="summary-sig-arg">electronCount</span>=<span class="summary-sig-default">2</span>)</span><br />
      Assume the moveOrbitalElectrons function was just called for orb1 
      and orb2.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#moveAtomElectrons" class="summary-sig-name">moveAtomElectrons</a>(<span class="summary-sig-arg">atom1</span>,
        <span class="summary-sig-arg">atom2</span>,
        <span class="summary-sig-arg">electronCount</span>=<span class="summary-sig-default">2</span>,
        <span class="summary-sig-arg">halfBondIndexes</span>=<span class="summary-sig-default">None</span>)</span><br />
      Move electrons from atom1 to atom2.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#moveBondElectrons" class="summary-sig-name">moveBondElectrons</a>(<span class="summary-sig-arg">bond</span>,
        <span class="summary-sig-arg">atom</span>,
        <span class="summary-sig-arg">electronCount</span>=<span class="summary-sig-default">2</span>,
        <span class="summary-sig-arg">pivotAtom</span>=<span class="summary-sig-default">None</span>,
        <span class="summary-sig-arg">halfBondIndexes</span>=<span class="summary-sig-default">None</span>)</span><br />
      Move electrons from the bond to the target atom.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#atomsAltered" class="summary-sig-name">atomsAltered</a>(<span class="summary-sig-arg">mol1</span>,
        <span class="summary-sig-arg">mol2</span>)</span><br />
      Given 2 molecules, that should be based on a common one, determine
      how many atoms in the molecule have been altered by electron 
      rearrangement.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#atomIsChiral" class="summary-sig-name">atomIsChiral</a>(<span class="summary-sig-arg">atom</span>)</span><br />
      Extension of OpenEye OEAtomBase.IsChiral method.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#bondIsChiral" class="summary-sig-name">bondIsChiral</a>(<span class="summary-sig-arg">bond</span>)</span><br />
      Extension of OpenEye OEBondBase.IsChiral method.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#createStandardMol" class="summary-sig-name">createStandardMol</a>(<span class="summary-sig-arg">mol</span>)</span><br />
      Reparse the molecule SMILES string to ensure any unusual 
      properties are cleared out.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#enumerateRacemicMixture" class="summary-sig-name">enumerateRacemicMixture</a>(<span class="summary-sig-arg">mol</span>,
        <span class="summary-sig-arg">unspecifiedAtoms</span>=<span class="summary-sig-default">None</span>,
        <span class="summary-sig-arg">unspecifiedBonds</span>=<span class="summary-sig-default">None</span>,
        <span class="summary-sig-arg">allCisTrans</span>=<span class="summary-sig-default">False</span>)</span><br />
      Assume the molecule object represents a racemic mixture of otherwise identical isomers.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a name="clearAtomStereo"></a><span class="summary-sig-name">clearAtomStereo</span>(<span class="summary-sig-arg">atom</span>)</span></td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a name="clearBondStereo"></a><span class="summary-sig-name">clearBondStereo</span>(<span class="summary-sig-arg">bond</span>)</span></td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#enumerateRacemicMixtureList" class="summary-sig-name">enumerateRacemicMixtureList</a>(<span class="summary-sig-arg">molList</span>,
        <span class="summary-sig-arg">currStereoList</span>=<span class="summary-sig-default">None</span>)</span><br />
      Given a list of molecule objects, call enumerateRacemicMixture on 
      each to yield a list of all possible isomer combinations of the 
      molecules.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#neighborTreeWeight" class="summary-sig-name">neighborTreeWeight</a>(<span class="summary-sig-arg">atom</span>,
        <span class="summary-sig-arg">visitedAtomIndexes</span>)</span><br />
      Determine the molecular weight of all atoms connected up to the 
      atom, that are not counted in the visitedAtomIndexes.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#molSkeleton" class="summary-sig-name">molSkeleton</a>(<span class="summary-sig-arg">mol</span>,
        <span class="summary-sig-arg">clearChiralFlags</span>=<span class="summary-sig-default">True</span>,
        <span class="summary-sig-arg">copyMol</span>=<span class="summary-sig-default">True</span>,
        <span class="summary-sig-arg">carbonSkeleton</span>=<span class="summary-sig-default">False</span>)</span><br />
      Reduces the molecule down to just it's (carbon) skeleton.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.Common.MolExt-module.html#clearMol" class="summary-sig-name">clearMol</a>(<span class="summary-sig-arg">mol</span>)</span><br />
      Delete all of the atoms in the molecule.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
<!-- ==================== VARIABLES ==================== -->
<a name="section-Variables"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Variables</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-Variables"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a href="CHEM.Common.MolExt-module.html#ORBITAL_TYPES" class="summary-name">ORBITAL_TYPES</a> = <code title="Set([&quot;sigma&quot;, &quot;pi&quot;, &quot;s&quot;, &quot;sp0&quot;, &quot;sp&quot;, &quot;sp1&quot;, &quot;sp2&quot;, &quot;sp3&quot;, &quot;p&quot;])">Set([&quot;sigma&quot;, &quot;pi&quot;, &quot;s&quot;, &quot;sp0&quot;, &quot;sp&quot;, &quot;sp1&quot;, &quot;<code class="variable-ellipsis">...</code></code>
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a name="BOND_ORBITAL_TYPES"></a><span class="summary-name">BOND_ORBITAL_TYPES</span> = <code title="Set([&quot;sigma&quot;, &quot;pi&quot;])">Set([&quot;sigma&quot;, &quot;pi&quot;])</code>
    </td>
  </tr>
</table>
<!-- ==================== FUNCTION DETAILS ==================== -->
<a name="section-FunctionDetails"></a>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Function Details</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-FunctionDetails"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
</table>
<a name="nStdValenceElectrons"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">nStdValenceElectrons</span>(<span class="sig-arg">atomicNum</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Return the standard number of valence electrons for an atom type 
  specified by atomic number. Based on lookup table for now, can come up 
  with more generalized scheme later.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="atomIonizationEnergy"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">atomIonizationEnergy</span>(<span class="sig-arg">atom</span>,
        <span class="sig-arg">formalCharge</span>=<span class="sig-default">None</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Return a reference value for the atom's ionization energy (kcal/mol). 
  If the atom has a formal charge, should return an adjusted value to 
  estimate 2nd ionization energies, etc. If a formal charge parameter is 
  specified use that value instead of any set on the actual atom 
  object.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="atomElectronAffinity"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">atomElectronAffinity</span>(<span class="sig-arg">atom</span>,
        <span class="sig-arg">formalCharge</span>=<span class="sig-default">None</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Return a reference value for the atom's electron affinity (kcal/mol). 
  If the atom has a formal charge, should return an adjusted value to 
  estimate 2nd electron affinities, etc. If a formal charge parameter is 
  specified use that value instead of any set on the actual atom 
  object.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="atomElectronegativity"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">atomElectronegativity</span>(<span class="sig-arg">atom</span>,
        <span class="sig-arg">formalCharge</span>=<span class="sig-default">None</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Return a reference value for the electronegativity of a given atom.  
  This uses a general Mulliken scale where EN = (IE - EA) / 2, (IE = 
  Ionization Energy, EA = Electron Affinity) which can in turn be found by 
  standard values and inferred for charged atoms.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="stableValenceShell"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">stableValenceShell</span>(<span class="sig-arg">atomicNum</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  How many electrons should be in the outer shell for this atom type to 
  be stable? Most commonly should just be 8 to make the octet rule, except 
  for hydrogen. Note also that essentially any can be come stable with 
  &quot;zero&quot; outer shell electrons, since that just means the next 
  complete inner shell becomes the outer shell.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="orbitalInfo"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">orbitalInfo</span>(<span class="sig-arg">atom</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Returns various statistics related to the atom's non-bonded orbitals. 
  This is a dictionary with keys:
  <ul>
    <li>
      nUnbondedElectrons
    </li>
    <li>
      nLonePairs
    </li>
    <li>
      nRadicals
    </li>
    <li>
      nEmptyOrbitals
    </li>
  </ul>
  Given an atom object, figure out how many electrons are in its outer 
  valence shell that are NOT part of a bond.  Based on standard valence 
  electron number.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="atomHybridization"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">atomHybridization</span>(<span class="sig-arg">atom</span>,
        <span class="sig-arg">visitedAtomIndexes</span>=<span class="sig-default">None</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>OEChem has OEGetHybridization method, and this works similarly.</p>
  <p>Return value is the p character of the hybridization, for example 2 
  for sp2</p>
  <p>Simple rule based now, that should work for atoms up to the second row
  at least. Easy to tell if this atom has more than one pi bond.  
  Otherwise, assume is sp3 unless have an empty orbital then assume is sp2.
  Or, if have a lone pair in an aromatic system, must be sp2.  In cases 
  like oxygen of C=CO, is probably somewhere in between.</p>
  Hydrogen is special case.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="orbitalIter"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">orbitalIter</span>(<span class="sig-arg">atom</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Iterate over all of the apparent orbitals in the current atom. These 
  will include sigma and pi molecular orbitals or possible sp or p atomic 
  orbitals. For each, will have a bond associated with it, or a certain 
  number of lone electrons.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="resonanceStructureIter"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">resonanceStructureIter</span>(<span class="sig-arg">mol</span>,
        <span class="sig-arg">observedSmilesSet</span>=<span class="sig-default">None</span>,
        <span class="sig-arg">depth</span>=<span class="sig-default">0</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>For the given molecule or intermediate, enumerate all of the 
  reasonable resonance structures by shifting electrons around available p 
  atomic orbitals and pi molecular orbitals.  For efficiency, will always 
  be the same molecule object yielded, just modified.  Caller must make 
  sure that it comes back in the same state.</p>
  <p>Strategy: Look for any 2 adjacent atoms hybridized with p or pi 
  orbitals and rearrange electrons in a chemically natural manner.</p>
  After any case, recursively look for more possibilities.  Use 
  observedSmilesSet to avoid recursion loops
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="uniqueAtomResonanceStructureIter"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">uniqueAtomResonanceStructureIter</span>(<span class="sig-arg">mol</span>,
        <span class="sig-arg">undoLabels</span>=<span class="sig-default">True</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <pre class="literalblock">
Simple wrapper around resonance structureIter method.  Before generating
the resonance structures however, will give a unique atom map label to
every atom in the molecule with the effect that symmetric resonance structures
will each be counted individually, instead of being skipped over as if identical.

undoLabels: Specifies whether to clear out these fake labels before
                each result is yielded

</pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="labelUniqueAtomMaps"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">labelUniqueAtomMaps</span>(<span class="sig-arg">mol</span>,
        <span class="sig-arg">undoDict</span>=<span class="sig-default">None</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Helper to label the atom map attribute of all of the atoms of the 
  molecule equal to their index position in the molecule, which ensures 
  they will all receive a unique value.</p>
  If undoDict provided, then store the original values of the atom map 
  indexes so they can later be restored by the undoLabelUniqueAtomMaps 
  function.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="undoLabelUniqueAtomMaps"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">undoLabelUniqueAtomMaps</span>(<span class="sig-arg">mol</span>,
        <span class="sig-arg">undoDict</span>=<span class="sig-default">None</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Undo the effects of the labelUniqueAtomMaps function.  If no specific 
  undoDict is provided, then just reset all of the atom map indexes to 
  &quot;0&quot; indicating standard values. Otherwise, use the specific 
  values stored in the undoDict.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="rearrangeOrbitalElectrons"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">rearrangeOrbitalElectrons</span>(<span class="sig-arg">mol</span>,
        <span class="sig-arg">bond</span>,
        <span class="sig-arg">beginPOrbs</span>,
        <span class="sig-arg">endPOrbs</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <pre class="literalblock">
Given just the p and pi orbitals for the given bond,
enumerate each natural way of rearranging the electrons within them.
Don't have to consider mirror cases, leave that as caller's responsibility
by calling this function twice, but swapping the begin and end atoms and pOrbs.

Cases of interest (not counting radicals for now):
    - Both atoms share a pi molecular orbital.  That is, the bond includes a pi bond.
        . Separate the pi molecular orbitals into one empty orbital (+ charge) and 
            one lone pair orbital (- charge).
            Then caller can recurse on this intermediate which should fit the above rules.
    - One atom has lone pair, other has empty p orbital (artificial case representing charge separation modeling)
        . Move lone pair to empty p orbital to form new pi bond here
    - One atom has pi molecular orbital other has empty p orbital
        . Move the pi electrons to form a new pi bond here
    - One atom has a lone pair in p orbital, other has a pi molecular orbital
        . Move the lone pair into a new pi bond
        . Move the pi electrons to a lone pair over the far (3rd) atom

Additional case where atoms each have a pi molecular orbital, but not the same one,
like the central bond in C=C-C=C.  Do nothing here, let another case separate
the pi orbital of one of the adjacent double bonds, and then it will look like
a case we can work with (lone pair or empty orbital next to pi orbital).

Note that this keeps yielding the same (but modified) molecule object.
Thus, in implementing, after each yield usage, the atom and bond states must 
be returned to how they were.

</pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="rearrangeOrbitalElectronsAllowDoubleCharges"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">rearrangeOrbitalElectronsAllowDoubleCharges</span>(<span class="sig-arg">mol</span>,
        <span class="sig-arg">bond</span>,
        <span class="sig-arg">beginPOrbs</span>,
        <span class="sig-arg">endPOrbs</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>The real implementation method.  Interface method is just a wrapper on
  this one with a filter to eliminate overcharged resonance structure 
  proposals.</p>
  Can almost just use the moveOrbitalElectrons functions from every 
  beginPOrb to every endPOrb and let that sort out the details.  This would
  work, except that we need to undo the changes at each step to revert the 
  molecule to its original state, which is hard to do if we don't know the 
  specific steps.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="grossFormalCharges"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">grossFormalCharges</span>(<span class="sig-arg">mol</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Figure out the total gross positive and negative charge on the 
  molecule, which may be non-zero even if the net charge on the molecule is
  zero.</p>
  For example: &gt;&gt;&gt; from CHEM.Common.Util import molBySmiles; 
  &gt;&gt;&gt; print grossFormalCharges(molBySmiles( &quot;CC(=O)Cl&quot; 
  )); (0, 0) &gt;&gt;&gt; print grossFormalCharges(molBySmiles( 
  &quot;[OH3+]&quot; )); (1, 0) &gt;&gt;&gt; print 
  grossFormalCharges(molBySmiles( &quot;CC[N+](=O)[O-]&quot; )); (1, -1) 
  &gt;&gt;&gt; print grossFormalCharges(molBySmiles( 
  &quot;[N-]=[N+]=[N-]&quot; )); (1, -2)
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="screenResonanceStruct"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">screenResonanceStruct</span>(<span class="sig-arg">mol</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <pre class="literalblock">
The molecule should represent a proposed resonance structure.
Decide whether it should be accepted as a valid / meaningful one.

For example:
    Don't accept charge separated structures if it leaves an empty orbital 
    (incomplete octet) on the formal positive atom.
    It's okay if the formal positive atom has a complete octet, like
    the nitrogen on nitro and azide groups.
    Also okay if lone positive charge, like carbocation with no anion available
    to &quot;fill-in&quot; the empty orbital.

</pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="moveOrbitalElectrons"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">moveOrbitalElectrons</span>(<span class="sig-arg">orb1</span>,
        <span class="sig-arg">orb2</span>,
        <span class="sig-arg">electronCount</span>=<span class="sig-default">2</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Most general half-reaction, movement of electrons from one molecular 
  orbital to another.  Function should figure out all of the substeps 
  necessary to properly represent the change, including consideration for 
  whether the orbitals are atomic (non-bond) or molecular (bond).</p>
  <p>Assume this is called in a sensible manner however. Cannot use any 
  arbitary orbitals as the arguments. The source orbital (orb1) must 
  contain electrons to move, no empty orbitals allowed. The target orbital 
  (orb2) must have space for electrons to move in. In general this means it
  is either an empty orbital or a bond orbital which can displace the 
  existing bond electrons to the neighbor atom.  No lone pairs allowed.</p>
  Returns a 2-ple consisting of the bond just created or added to by the
  move and a string representing the respective &quot;arrow-pushing&quot; 
  diagram.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="undoMoveOrbitalElectrons"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">undoMoveOrbitalElectrons</span>(<span class="sig-arg">orb1</span>,
        <span class="sig-arg">orb2</span>,
        <span class="sig-arg">electronCount</span>=<span class="sig-default">2</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Assume the moveOrbitalElectrons function was just called for orb1 and 
  orb2. Revert the molecule state to where it was before then based on the 
  info in the orbitals.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="moveAtomElectrons"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">moveAtomElectrons</span>(<span class="sig-arg">atom1</span>,
        <span class="sig-arg">atom2</span>,
        <span class="sig-arg">electronCount</span>=<span class="sig-default">2</span>,
        <span class="sig-arg">halfBondIndexes</span>=<span class="sig-default">None</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Move electrons from atom1 to atom2.  If these are bonded already, just
  change the bond order and adjust the formal charges. If they are not 
  already bonded, then create a new bond and adjust the formal charges.</p>
  <p>If moving single electrons (radical reactions) better provide 
  halfBonds list. Used to keep track of which bonds have only been 
  &quot;half-formed&quot; by a radical movement, and are waiting for a 
  complementary one to complete or eliminate the bond. Note that the bond 
  could be &quot;1 1/2&quot; or &quot;2 1/2.&quot;  The point is that it's 
  just not a whole number bond yet.</p>
  Return 2-ple with reference to new bond object if it was created and 
  the arrow code string representing the electron movement.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="moveBondElectrons"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">moveBondElectrons</span>(<span class="sig-arg">bond</span>,
        <span class="sig-arg">atom</span>,
        <span class="sig-arg">electronCount</span>=<span class="sig-default">2</span>,
        <span class="sig-arg">pivotAtom</span>=<span class="sig-default">None</span>,
        <span class="sig-arg">halfBondIndexes</span>=<span class="sig-default">None</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Move electrons from the bond to the target atom. If the atom is 
  already part of the bond, then just down shift the bond order (maybe 
  deleting the bond altogether) and adjust atom formal charges.</p>
  <p>Otherwise, down shift this bond order and create a new one to the 
  atom, again adjusting atom formal charges.  Note that this only works if 
  the &quot;pivotAtom&quot; is specified.  That is, the atom which appears 
  in both the source and the target bond.  Otherwise, without the polarity 
  of the source bond specified, can't tell which end to remain connected 
  to.</p>
  Return the arrow code string representing the electron movement.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="atomsAltered"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">atomsAltered</span>(<span class="sig-arg">mol1</span>,
        <span class="sig-arg">mol2</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Given 2 molecules, that should be based on a common one, determine how
  many atoms in the molecule have been altered by electron rearrangement.  
  One of the molecules should probably have been a copy of the other, 
  because this method depends on the mol.GetAtoms iterator returning the 
  atoms in the same order.</p>
  If that's the case, will go through each matching pair of atoms and 
  check whether they share the same bond orders and formal charge.  If not,
  assume the electron arrangement has changed.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="atomIsChiral"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">atomIsChiral</span>(<span class="sig-arg">atom</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Extension of OpenEye OEAtomBase.IsChiral method. Manual corrections 
  for
  <ul>
    <li>
      Organometallics do not have configurationally stable 
      stereochemistry
    </li>
  </ul>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="bondIsChiral"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">bondIsChiral</span>(<span class="sig-arg">bond</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Extension of OpenEye OEBondBase.IsChiral method. Manual corrections 
  for
  <ul>
    <li>
      Vinylic carbocations should not have stereochemistry, should be 
      linear, sp hybridized
    </li>
  </ul>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="createStandardMol"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">createStandardMol</span>(<span class="sig-arg">mol</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Reparse the molecule SMILES string to ensure any unusual properties 
  are cleared out. Happens often when doing direct molecule graph 
  manipulations or reaction processing.</p>
  In addition, check molecule bonds and atoms and clear out any bogus 
  stereoassignments.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="enumerateRacemicMixture"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">enumerateRacemicMixture</span>(<span class="sig-arg">mol</span>,
        <span class="sig-arg">unspecifiedAtoms</span>=<span class="sig-default">None</span>,
        <span class="sig-arg">unspecifiedBonds</span>=<span class="sig-default">None</span>,
        <span class="sig-arg">allCisTrans</span>=<span class="sig-default">False</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <pre class="literalblock">
Assume the molecule object represents a racemic mixture of otherwise identical isomers.  
Go through every unassigned stereocenter and generate all possible specific isomers
by assiging all possible stereo configurations.

allCisTrans: If true, will enumerate all cis-trans isomers for unspecified chiral bonds.
    Otherwise, will only generate one with the bulkiest (largest by molecular weight)
    groups trans to each other

</pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="enumerateRacemicMixtureList"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">enumerateRacemicMixtureList</span>(<span class="sig-arg">molList</span>,
        <span class="sig-arg">currStereoList</span>=<span class="sig-default">None</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Given a list of molecule objects, call enumerateRacemicMixture on each
  to yield a list of all possible isomer combinations of the molecules.</p>
  currStereoList is the current list of fully-stereospecified molecules.
  One it reaches the same length of the original molList, one complete set 
  of stereoisomers has been produced and can be returned.  Use to track 
  depth in recursion
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="neighborTreeWeight"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">neighborTreeWeight</span>(<span class="sig-arg">atom</span>,
        <span class="sig-arg">visitedAtomIndexes</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Determine the molecular weight of all atoms connected up to the atom, 
  that are not counted in the visitedAtomIndexes.  Ignore implicit 
  hydrogens, which should be fine for relative comparisons as long as they 
  are consistently ignored throughout the molecule.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="molSkeleton"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">molSkeleton</span>(<span class="sig-arg">mol</span>,
        <span class="sig-arg">clearChiralFlags</span>=<span class="sig-default">True</span>,
        <span class="sig-arg">copyMol</span>=<span class="sig-default">True</span>,
        <span class="sig-arg">carbonSkeleton</span>=<span class="sig-default">False</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Reduces the molecule down to just it's (carbon) skeleton.
  <ul>
    <li>
      All implicit and explicit hydrogen atoms are removed
    </li>
    <li>
      All bond orders are set to 1
    </li>
    <li>
      All formal charges are neutralized
    </li>
    <li>
      All isotopes are reset
    </li>
    <li>
      <p>All atom mapping indexes are reset</p>
      If carbonSkeleton is True
      <ul>
        <li>
          All non-carbon atoms that are not within a ring or chain are 
          removed
        </li>
      </ul>
    </li>
  </ul>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="clearMol"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">clearMol</span>(<span class="sig-arg">mol</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Delete all of the atoms in the molecule.  Don't just use mol.Clear(), 
  if want to retain other information, such as SD tagged or other 
  name-value pair data
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<br />
<!-- ==================== VARIABLES DETAILS ==================== -->
<a name="section-VariablesDetails"></a>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Variables Details</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-VariablesDetails"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
</table>
<a name="ORBITAL_TYPES"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <h3 class="epydoc">ORBITAL_TYPES</h3>
  
  <dl class="fields">
  </dl>
  <dl class="fields">
    <dt>Value:</dt>
      <dd><table><tr><td><pre class="variable">
Set([&quot;sigma&quot;, &quot;pi&quot;, &quot;s&quot;, &quot;sp0&quot;, &quot;sp&quot;, &quot;sp1&quot;, &quot;sp2&quot;, &quot;sp3&quot;, &quot;p&quot;])
</pre></td></tr></table>
</dd>
  </dl>
</td></tr></table>
</div>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="CHEM-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:22 2007
    </td>
    <td align="right" class="footer">
      <a href="http://epydoc.sourceforge.net">http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie()
  // -->
</script>
  
</body>
</html>
