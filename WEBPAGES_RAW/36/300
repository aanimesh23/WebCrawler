<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1">
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay">
<META HTTP-EQUIV="UPDATED" CONTENT="Wednesday, February 22, 2006 6:16 PM">
<TITLE>Sixth Homework</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="AD90D780">
<META HTTP-EQUIV=KEYWORDS CONTENT="CS 1, CS1, assignment, Scheme">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al.">
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2001 by David G. Kay.  All rights reserved.">
<link href="/~kay/courses/i42/code.css" rel="stylesheet" type="text/css" />
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<P>Informatics 42 &bull; Winter 2012 &bull; David G. Kay
  &bull; UC Irvine</P>
<P> <FONT SIZE=6><B>Sixth Homework</B></FONT></P>
<P> Get your work checked and signed off by a classmate, then show it to your TA in lab by Wednesday, February 22 (since Monday is a holiday).</P>
<P><B>(a)</B>  Write regular expressions to match
    each of the following patterns.  Note that these are natural language descriptions,
    so they will certainly be ambiguous; disambiguate them as you see fit and
    note what decisions you made.  In some cases you may not be able to match
the described set completely; it&#39;s fine to make some simplifying assumptions.</P>
<ul><li>Comma-separated dollars-and-cents amounts
  (e.g., $1,234.56 and $17).  The differences between this expression and
  the one we did in class are (a) the &quot;cents&quot; portion isn&#39;t
required and (b) leading zeroes are allowed.</FONT></li>
<li>
Lines that are empty or all blanks.  (The
caret (&quot;<code>^</code>&quot;)
matches the start of a line and the dollar sign matches the end of the line.)</li>
<li>
Email addresses</li>
<li>
URLs in HTML anchor tags (e.g., <code>&lt;A
href=&quot;http://www.ics.uci.edu/~kay&quot;&gt;</code>)</li>
<li>
Lines containing exactly one integer (perhaps
surrounded by non-numeric characters)</li></ul>
<p>Feel free to write FSAs for these languages if you'd like the practice.</p>
<P>
<B>(b)</B> A grammar is a set of rules that
  can generate all the strings in a formal language.  In the right form, a
grammar for a programming language can be used with other software to produce <I>automatically</I> part of a compiler for that language.</FONT></P>
<P> <FONT FACE="Goudy Old Style">Below is a grammar (in Backus-Naur Form, or
  BNF notation) that describes arithmetic expressions:</FONT></P>
<pre><FONT FACE="Palatino">&lt;expression&gt; ::=  &#160; &lt;real&gt; | &lt;variable&gt; | </FONT><FONT FACE="Courier"><TT><B>(</B></TT></FONT><FONT FACE="Palatino"> &lt;expression&gt; </FONT><FONT FACE="Courier"><TT><B>)</B></TT></FONT><FONT FACE="Palatino"> | 
 &#160;&#160;                                    &lt;expression&gt; &lt;operator&gt; &lt;expression&gt; | 
 &#160;&#160;                                    </FONT><FONT FACE="Courier"><TT><B>(</B></TT></FONT><FONT FACE="Palatino"> &lt;variable&gt;  </FONT><FONT FACE="Courier"><TT><B>==</B></TT></FONT><FONT FACE="Palatino">  &lt;expression&gt; </FONT><FONT FACE="Courier"><TT><B>) </B></TT></FONT><FONT FACE="Palatino">&lt;real&gt; ::=  &#160; &lt;positive-real&gt;  | </FONT><FONT FACE="Courier"><TT><B>-</B></TT></FONT><FONT FACE="Palatino">  &lt;positive-real&gt; 
&lt;positive-real&gt; ::=  &#160; &lt;integer-part&gt;  | &lt;integer-part&gt; </FONT><FONT FACE="Courier" SIZE=4><TT><B>.</B></TT></FONT><FONT FACE="Palatino"> &lt;integer-part&gt;  
&lt;integer-part&gt; ::=  &#160; &lt;digit&gt; | &lt;digit&gt; &lt;integer-part&gt; 
&lt;variable&gt; ::=  &#160; &lt;letter&gt; 
&lt;digit&gt; ::= </FONT><FONT FACE="Courier"><TT> &#160; 0</TT></FONT><FONT FACE="Palatino"> | </FONT><FONT FACE="Courier"><TT>1</TT></FONT><FONT FACE="Palatino"> | </FONT><FONT FACE="Courier"><TT>2</TT></FONT><FONT FACE="Palatino"> | </FONT><FONT FACE="Courier"><TT>3</TT></FONT><FONT FACE="Palatino"> | </FONT><FONT FACE="Courier"><TT>4</TT></FONT><FONT FACE="Palatino"> | </FONT><FONT FACE="Courier"><TT>5</TT></FONT><FONT FACE="Palatino"> | </FONT><FONT FACE="Courier"><TT>6</TT></FONT><FONT FACE="Palatino"> | </FONT><FONT FACE="Courier"><TT>7</TT></FONT><FONT FACE="Palatino"> | </FONT><FONT FACE="Courier"><TT>8</TT></FONT><FONT FACE="Palatino"> | </FONT><FONT FACE="Courier"><TT>9 
</TT></FONT><font face="Palatino">&lt;letter&gt; ::=</font><FONT SIZE=2>     &#160; </FONT><FONT FACE="Courier"><TT>a | b | c | d | e | f | g | h | i | j | k | l | m | 
 &#160;&#160;              n | o | p | q | r | s | t | u | v | w | x | y | z </TT></FONT><FONT FACE="Palatino">
&lt;operator&gt; ::= </FONT><FONT FACE="Courier"><TT> &#160; +</TT></FONT><FONT FACE="Palatino"> | </FONT><FONT FACE="Courier"><TT>-</TT></FONT><FONT FACE="Palatino"> | </FONT><FONT FACE="Courier"><TT>*</TT></FONT><FONT FACE="Palatino"> | </FONT><FONT FACE="Courier"><TT>/ | %</TT></FONT></pre>
<FONT FACE="Goudy Old Style"><B>(b.1) </B> Some of the following expressions
can be generated by this grammar; others can not.  Indicate which are the
valid expressions.  (The easiest way to do this might be to photocopy the
page, or print it from the on-line version, and circle the valid expressions.)</FONT>
<P>
  <CENTER>
    <IMG SRC="Fifth_Homework_files/Sidebar_291.gif" WIDTH=546 HEIGHT=162 HSPACE=6 VSPACE=6 ALT="3">
  </CENTER>
</P>
<P> <FONT FACE="Goudy Old Style"><B>(b.2) </B> Using the grammar, generate four
  more expressions that aren&#39;t on the above list.  Each expression should
  involve applying at least ten rules.  For each expression, show its derivation
  tree (with &lt;expression&gt; at the root and terminal symbols&mdash;i.e., without
  angle brackets&mdash;at the leaves).</FONT></P>
<P> <FONT FACE="Goudy Old Style"><B>(b.3) </B> Give three arithmetic expressions
  that are syntactically valid in Python but are not generated by this grammar.</FONT></P>
<P> <FONT FACE="Goudy Old Style"><B>(b.4) </B> Modify the grammar to allow multi-letter
  variable names.  This requires changing only one of the existing rules.</FONT></P>
<P><FONT FACE="Goudy Old Style"><strong>(c) </strong>Read the <A HREF="http://www.ics.uci.edu/~kay/courses/i42/wildride/problem_description_files/index.html">problem description</A> for Lab D, the Random Sentence Generator.</FONT></P>
<P><FONT FACE="Goudy Old Style"><B>(d)</B>  For Labs E and F, we'll use an already existing program that simulates visitors to an amusement park. Read the <A HREF="http://www.ics.uci.edu/~kay/courses/i42/wildride/problem_description_files/index.html">problem description</A>
  for the amusement park simulator, noting (a) that it's not essential that you memorize every detail and (b) that your task won't be to build this from scratch, but to enhance it in various ways (though for that, you'll need to become familiar with the existing code that we will supply.</FONT></P>
  
<!--
<P>
<FONT FACE="Goudy Old Style"><B>(g)</B>  If you&#39;d like to use your personal
machine to work on the amusement park simulator, install the Eclipse environment
from <A HREF="http://www.eclipse.org">www.eclipse.org</A>.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(h)</B>  Start getting familiar with Eclipse.</FONT></P>
<P>
<FONT FACE="Goudy Old Style">Learning how to use a new tool is something
you&#39;ll do again and again in your career.  Moreover, many tools are
dauntingly complex (think of Photoshop or Excel or even Java itself), with
so many options and so much special-purpose functionality that a single
user can&#39;t hope (and shouldn&#39;t expect) to learn all of it.  How
should you approach a new tool like this?</FONT></P>
<P>
<FONT FACE="Goudy Old Style">The first point is to have realistic expectations.
 If you postpone using the system until you have a comprehensive understanding
of it, you&#39;ll wait forever.  You have to accept that there will be corners
of the application that you&#39;ll never visit; you have to find a path
through the most useful parts so you can get your work done.  As you continue
using the tool, you can learn more options and features and short-cuts,
but the first task is to find that one path.  Becoming a master of the tool
can be rewarding, but it&#39;s not usually the ultimate goal, so it&#39;s
important to keep a focus on getting your real work done.</FONT></P>
<P>
<FONT FACE="Goudy Old Style">Different people learn differently.  Some are
comfortable exploring, trying out commands or options and seeing their effect.
 Some prefer to be walked through a demonstration.  Some prefer to prepare
by reading background information in advance.  All of these are reasonable
strategies; even if you prefer one over another, you should be flexible
enough to employ any of them in the appropriate situation.  (Experimentation
gives immediate feedback and builds your intuitions about software behavior;
demonstrations focus on one concrete step at a time; advance reading provides
a conceptual framework to help organize the complexity.)  </FONT></P>
<P>
<FONT FACE="Goudy Old Style">Here are a few things to remember about using
Eclipse.  Eclipse asks you to create a &quot;workspace,&quot; a folder for
all your programs.  Within the workspace, you will create individual projects
(folders for the files making up a particular program).  Make sure that
Eclipse is set to use Java 5.0; you should be given that choice as you set
things up, and you don&#39;t want the default of Java 1.4.</FONT></P>
<P>
<FONT FACE="Goudy Old Style">So create an Eclipse project for one of the
simple programs you (or we) have already written.  Import the source code
files and run the program to make sure it works.  This is what you should
demonstrate to Jeff.</FONT></P>
<P>
<FONT FACE="Goudy Old Style">One final point:  Don&#39;t be shy.  Don&#39;t
be shy about asking for help or advice in lab when you run into difficulty
(which is inevitable when you&#39;re getting started).  Expertise in Eclipse
is not the point of the course, but experience is.  So don&#39;t be shy
about getting your feet wet and trying things out; don&#39;t let your more
experienced partner be the one to do all the typing.  That&#39;s not how
you build your own skills.</FONT></P>
-->
<BR>
<P>
<FONT FACE="Helvetica" SIZE=1>Written by David G. Kay, Winter 2005, and
modified Winter 2006; regular expression exercise written by David G. Kay,
Winter 2001. BNF grammar exercise written by David G. Kay,
  Spring 1999. Reorganized by David G. Kay, Winter 2012.</FONT></P>
</BODY>
</HTML>