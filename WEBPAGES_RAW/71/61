<html><head><title>Toolkit Integration Technique</title>
</head>
<body bgcolor="#FFFFFF" text="#000000">
<HR><TABLE WIDTH=100%><TR ALIGN=CENTER><TD><A HREF="introduction.html">Introduction</A></TD><TD><A HREF="index.html#toc">Table of Contents</A></TD><TD><A HREF="prototype.html">Proof-of-Concept Prototype</A></TD></TR><TR ALIGN=CENTER><TD>(Previous)</TD><TD></TD><TD>(Next)</TD></TR></TABLE><HR>
<H2>2. Toolkit integration technique</H2>
<P>
The toolkit integration technique (TI technique) applies the conceptual architecture shown in <A HREF="#fig1">Figure&nbsp;1</A>. The major components of the conceptual architecture are the integrated toolkit, the OHS, and the set of applications using the toolkit. The integrated toolkit consists of the original user-interface toolkit, a set of extended widgets, and a hypermedia infrastructure. It is important to note the technique's potential for toolkit independence, since any user-interface toolkit can likely be integrated by building these extensions. The variable across toolkits will be the amount of effort a toolkit integrator expends to achieve the required extensions. For instance, a toolkit constructed with an object-oriented programming language is fairly easy to integrate. The extended widgets reuse the appearance and behavior provided by the original widgets via inheritance and can be mixed and matched with the original widgets via polymorphism. On the other end of the spectrum, a library-based toolkit will require more effort since the extended widgets may have to reimplement some or all of the original widgets and employ potentially toolkit-specific mechanisms to compose these new widgets into an interface with the original widgets. The developmental effort for the former toolkit is minimal while the effort for the latter is, most likely, prohibitive. <A HREF="#sec2.3">Section&nbsp;2.3</A> addresses this issue by modifying the conceptual architecture to facilitate "plug-and-play" of certain architectural elements.
</P>
<P>
The hypermedia services provided by this technique to applications constructed with the integrated toolkit include navigation, search, history, and bookmarks. Some of these services are provided by every extended widget while others are provided only by specialized widgets. The upper bound of possible services is defined by the functionality of the underlying OHS. The lower bound will vary depending on the affordances of the widget. Thus, for instance, a button widget might only be able to initiate or receive link traversals, whereas a canvas widget might provide a popup menu to access services such as bookmark creation or search and query. Specialized widgets can keep track of a user's navigation path or display a user's bookmarks. Although not all hypermedia operations may be provided by the widgets, this does not prohibit the user from accessing these services. For instance, some services may only be available via specialized clients of the underlying OHS such as hyperweb viewers or link editors. These applications can be used in combination with toolkit-constructed applications to provide users with a complete range of hypermedia functionality.
</P>
<P>
The responsibilities placed on an application using the integrated toolkit are minor. As discussed in the next section, an application must supply context information to the extended widgets during initialization. This information is required by the underlying OHS. The only other responsibility is providing a callback routine to the toolkit to respond to link traversal events which require a new object to be displayed. This is similar to what Kacmar calls a <EM>directive</EM> from the OHS to the application [<A HREF="references.html#ref13">13</A>]. The hypermedia infrastructure will call this routine as needed to display the relevant objects. If the destination of a link traversal is already displayed, the extended widgets automatically handle the event.
</P>
<TABLE BORDER="1">
<TR ALIGN=CENTER><TD><A NAME="fig1"><IMG SRC="anderson1.gif"></A></TD></TR>
<TR>
<TD><STRONG>Figure 1. The conceptual architecture of the integrated toolkit.</STRONG> A line from one box to another signifies the flow of information. Unless indicated by a black arrow, information flows both ways across the line. The gray arrow indicates the potential reuse of user-interface toolkit widgets by the extended widgets.</TD>
</TR>
</TABLE>
<H3><A NAME="sec2.1">2.1.</A> Extended widgets</H3>
<P>
A completely integrated toolkit will have at most one extended widget for each widget present in the user-interface toolkit. These extended widgets behave exactly as the original widgets with the addition of providing access to hypermedia services. As noted above, the hypermedia services available for a particular widget will vary depending on the affordances of the widget but will typically include some way to add the widget (i.e. the widget's anchor) to a link and to initiate a link traversal from the widget. The user-interface to these services for each widget may also vary depending on the affordances of the widget. While it is important to ensure a consistent interface to hypermedia services across widgets, research has shown that only iterative usability testing with end-users will result in a "usable" interface [<A HREF="references.html#ref14">14</A>]. As such, this paper will not attempt to define the specific interface for each widget. Instead, it is important to note that once defined, these widgets will behave the same in each application providing consistent cross-application access to hypermedia services.
</P>
<P>
The programmatic interface to an extended widget is virtually identical to the original widget. The difference is limited to initialization of the widget, in which certain hypermedia-specific information is required. Typically, open hypermedia systems require a context in order to persistently store and access hypermedia structures such as anchors and links. Thus, before a hypermedia-enabled widget can create hypermedia structures, the developer must initialize it with context information. The developmental effort of using an extended widget is therefore minimal. There are several techniques which may prove useful to eliminate the need for this context information. These techniques are discussed in <A HREF="futurework.html#sec6.2">Section&nbsp;6.2</A>.
</P>
<P>
From the standpoint of a toolkit integrator, the work required to create an extended widget consists of identifying the hypermedia services available for a widget, defining a user-interface to those services, constructing a new widget to mimic the original widget (trivial if the toolkit is constructed in an object-oriented language), and extending the new widget to appropriately interact with the hypermedia infrastructure to provide the identified services. The latter includes properly handling the context information supplied at initialization, creating the appropriate hypermedia structures, engaging in the protocols of the hypermedia system, and supplying the end-user with appropriate feedback to hypermedia events, such as link traversal.
</P>
<P>
While these steps imply a non-trivial amount of work for the toolkit integrator, several characteristics help to make the effort manageable. First, not all widgets need to be integrated for developers to benefit from the extensions. Widgets can be prioritized according to some criterion such as developer requests or perceived utility, and incrementally integrated. Second, widgets are, in general, independent of each other and thus integration work can be done in parallel by a team of toolkit integrators. Third, since the original widgets are unmodified by the construction of the integrated widgets, existing toolkit applications continue to function; no effort is needed to keep the toolkit "backward-compatible." The result of the integration is a suite of extended widgets that automatically provide hypermedia services in a consistent fashion and utilize common mechanisms provided by the hypermedia infrastructure.
</P>
<H3><A NAME="sec2.2">2.2.</A> Hypermedia infrastructure</H3>
<P>
The hypermedia infrastructure provides an interface to the underlying OHS and implements common services for the extended widgets. This is similar to the role played by HyperDisco's tool integrator [<A HREF="references.html#ref22">22</A>] which provides this functionality to HyperDisco clients. In the TI technique, however, client applications will primarily interact only with the extended widgets not with the hypermedia infrastructure. The only interaction between them occurs when handling link-traversal directives.
</P>
<P>
The extended widgets use the OHS interface to access hypermedia services. The interface provides component, anchor, link, and composite operations. These are standard hypermedia concepts [<A HREF="references.html#ref2">2</A>] in which a component maps to a particular object, anchors specify regions of interest within the object, links specify a relationship of some type over a set of anchors, and composites allow components to be grouped and hierarchically composed. The operations support the creation, deletion, and manipulation of these concepts. In addition, operations are provided to query and search the resulting hyperweb and initiate link traversal. Note that the simple existence of an operation in the infrastructure does not imply each widget will make use of the operation. Instead widgets will use the minimum set of operations needed to implement their hypermedia services.
</P>
<P>
The abstractions provided by the hypermedia infrastructure allow widgets to create hypermedia structures to model their hypermedia needs. For instance, a scrollbar may register itself as a component with one anchor for each of its thumb positions. Traversing to one of its anchors could then cause it to jump to the specified thumb position. A button may be modeled as a component with a single anchor. Traversing to the button's anchor could then cause the button to execute its action just as if the user had clicked on it. A panel may be modeled as a composite managing a set of components. A user-interface thus creates a set of hypermedia structures within the OHS, allowing it to participate in a hyperweb.
</P>
<P>
The hypermedia infrastructure also implements the common services required by all of the extended widgets. This prevents having to replicate the services in each widget, provides a consistent behavior across widgets, and localizes the code for them in one place. Common services include managing a connection with the OHS, handling hypermedia-related errors, and providing a consistent interface to link traversals. Initially, the common services use the original toolkit to provide the user feedback. For example, a link traversal dialog may need to make use of window, scrolling list, and button widgets. This use, of course, is not desirable from the standpoint of reuse, since toolkit-specific code is placed in the hypermedia infrastructure. Fortunately, as the toolkit integration progresses, the common services can migrate from using the widgets in the toolkit to using their counterparts in the set of extended widgets. The next section considers other issues related to making the extensions reusable across multiple toolkits and hypermedia systems.
</P>
<H3><A NAME="sec2.3">2.3.</A> Plug-and-play issues</H3>
<P>
A goal for the TI technique is reusability across the wide range of user-interface toolkits and open hypermedia systems. The technique would have little practical value if applying the technique required the same amount of work the second time as it required the first. In order to address these issues, the conceptual architecture presented in <A HREF="#fig1">Figure&nbsp;1</A> has been modified slightly to bring reuse issues to the forefront (see <A HREF="#fig2">Figure&nbsp;2</A>). The major change is to identify and isolate the areas in which code specific to the user-interface toolkit or OHS is likely to exist. The second change is to indicate the bootstrapping of the hypermedia infrastructure with respect to the widgets used by its common services.
</P>
<P>
The new elements are the abstract toolkit and hypermedia interfaces. These abstract interfaces hide the details of the actual systems used from the extended widgets, which are implemented solely in terms of these new interfaces. Moving to a new hypermedia system or user-interface toolkit involves constructing a mapping between the abstract interface and the actual system used. Once the mapping is complete the extended widgets and the common services can be used without modification. Implementations using an object-oriented programming language can benefit from the use of the Bridge design pattern [<A HREF="references.html#ref9">9</A>] to aid in the construction of these abstract interfaces.
</P>
<P>
One design choice used in previous work on providing abstract interfaces to multiple toolkits is the least common denominator approach [<A HREF="references.html#ref19">19</A>]. This technique hides the differences between user-interface toolkits by providing only the functionality common to all of them. While these issues are relevant to the TI technique, they are not as significant, since the goal is to make the extended widgets as reusable as possible across multiple toolkits. This is different from the goal of making the applications using the extended widgets on one integrated toolkit portable to other integrated toolkits. The interoperability provided by the hypermedia services to the applications reduces the importance of this latter goal. Instead the ability to re-host the extended widgets on a different user-interface toolkit with a minimum of effort is more important. This goal should be achievable since the differences between modern user-interface toolkits are not so significant as to be prohibitive.The next section presents a proof-of-concept prototype representing the first attempt at implementing the conceptual architecture of the TI technique.
</P>
<TABLE BORDER="1">
<TR ALIGN=CENTER><TD><A NAME="fig2"><IMG SRC="anderson2.gif"></A></TD></TR>
<TR>
<TD><STRONG>Figure 2. The conceptual architecture modified to highlight reuse issues.</STRONG> The extended widgets are implemented solely in terms of the abstract toolkit and hypermedia interfaces. This eases the task of reusing the extensions with a different user-interface toolkit or open hypermedia system. The common services of the hypermedia infrastructure initially make use of actual toolkit widgets (gray line) to provide user feedback. Extended widgets are eventually used (black line) as they become available. This bootstrapping process is required for only the initial implementation of the technique since subsequent implementations simply reuse the resulting code.</TD>
</TR>
</TABLE>
<HR><TABLE WIDTH=100%><TR ALIGN=CENTER><TD><A HREF="introduction.html">Introduction</A></TD><TD><A HREF="index.html#toc">Table of Contents</A></TD><TD><A HREF="prototype.html">Proof-of-Concept Prototype</A></TD></TR><TR ALIGN=CENTER><TD>(Previous)</TD><TD></TD><TD>(Next)</TD></TR></TABLE>
<hr>
</body></html>
