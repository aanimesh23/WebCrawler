<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Collection Classes: Basics (including Iterators)</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Collection Classes: Basics<br>Including Iterators</h1>
<p>
<h2>Introduction to Computer Science II<br>
ICS-22<br>
</h2>
<p>
</center>



<!-- Introduction -->

<a name="Introduction"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Introduction</b></td>
<td width ="80%">
This lecture begins a series of lectures that together act as a capstone for
  the first half of the quarter.
These lectures explore collection classes, which are a sophisticated and
  powerful group of related interfaces and classes that are useful in a wide
  variety of programming tasks; they are also designed and built using most
  of the high-level Java programming features that we have studied: interfaces,
  inheritance, abstract classes, concrete classes, exceptions, and analysis
  of algorithims (and iterators, and inner-clases which we learn in this
  lecture).
<p>
Thus, studying collection classes now brings all these features back into
  focus, each sharing the spotlight with -and complementing- the others.
Once you accept the power of these tools, and practice using them, you'll
  never think about plain old arrays in the same way again (and maybe you'll
  never think of them at all).
<p>
This lecture begins with a taxonomy of the collection classes, and an
  introduction to the interfaces, abstract classes, and concrete classes
  that are used to define them.
The second part of this lecture explores <b>iterators</b>, which is an
  interesting concept by itself, but which takes on a central role when
  coupled with collection classes.
We can create extremely sophisticated and efficient behavior by composing
  collection classes (for modelling complex data) and processing them with
  iterators.
</td>
</tbody>
</table>



<!-- Design -->

<a name="Design"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Design of Collection Classes</b></td>
<td width ="80%">
In this section we will briefly examine the standard Java collection classes,
  to get a birds-eye view of how they are designed and implemented.
First we will examine the overall relationships among the interfaces, abstract
  classes, and concrete classes; these features naturally arrange themselves
  into three vertical levels in a hierarchy.
Then we will examine one example more closely, at each level in the hierarchy.
<p>
The following legend explains the three levels and some of the notation used.
</table>
<p>
<img src="images/legend.gif"></image>
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%">&nbsp</td>
<td width ="80%">
<p>
Overall, there are three major groups of "collection" classes, eact rooted in
  one special interface: <b>OrderedCollection</b>, <b>Collection</b>, and
  <b>Map</b>.
Each group is presented using the three vertical levels of interfaces,
  abstract classes, and concrete classes.
We depict the <b>OrderedCollection</b> group as follows.
</table>
<p>
<img src="images/orderedcollectiontree.gif"></image>
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%">&nbsp</td>
<td width ="80%">
<p>
Next, we depict the <b>Collection</b> group as follows.
</table>
<p>
<img src="images/collectiontree.gif"></image>
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%">&nbsp</td>
<td width ="80%">
And finally, we depict the <b>Map</b> group as follows.
</table>
<p>
<img src="images/maptree.gif"></image>
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%">&nbsp</td>
<td width ="80%">
In each, interfaces are implemented by abstract classes (which supply some
  but not all of the needed methods) which are extended by concrete classes
  that inherit some behvaior from the abstract classes and define all their
  abstract methods.
In some cases, an interface extends another interface: 
   <b>List</b> and <b>Set</b> extend <b>Collection</b>;
   <b>SortedSet</b> extends <b>Set</b>; and
   <b>SortedMap</b> extends <b>Map</b>.
In many cases, one abstract class extends another, before being extended by
  a concrete subclass.
Recall that concrete subclasses automatically implement the interfaces that
  their superclasses implement, and [abstract]classes can implement more
  than one interface (but can extend only one superclass); this is a
  fundamentcal difference between interfaces and classes.
<p>
In the next three sections, we will examine the Javadoc of an interface, two
  abstract classes, and a concrete class, forming a chain from top to bottom,
  starting with the <b>Collections</b> interface and ending with the
  <b>HashSet</b> concrete class.
We will spend two more lectures covering this same material in more detail.
</tbody>
</table>


<!-- Interfaces -->

<a name="Interfaces">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Interfaces</b></td>
<td width ="80%">
The methods specified in the <b>Collection</b> interface are summarized
  in the following Javadoc.
The semantics of most methods should be somewhat intuitive.
Primarily, objects can be added and removed from a collection, and checked for
  membership.
Methods like <b>add</b>, <b>contains</b>, and <b>remove</b> which have
  <b>Object</b> parameters, have counterparts <b>addAll</b>,
  <b>containsAll</b>, and <b>removeAll</b> which use another
  <b>Collection</b> as a parameter, adding, removing, or checking for
  containment each of the values in the parameter.
<p>
Read these Javadoc descriptions now; we will examine them again, in more
  detail, in a subsequent lecture (including <b>hashCode</b>).
We will discuss the <b>iterator</b> method (and the <b>Iterator</b>
  interface) at the end of this lecture.
</table>
<p>
<img src="images/collection.gif"></image>
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%">&nbsp</td>
<td width ="80%">
Now we will examine an abstract class and abstract subclass that implement
  a surprising number of these methods, leaving the concrete subclass to
  implement very little (mostly the iterator, which many other methods use).
Remember that there are 15 methods specified in this interface.
</tbody>
</table>


<!-- Abstract Classes -->

<a name="Abstract">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Abstract Classes</b></td>
<td width ="80%">
Now we will examine the Javadoc of an abstract class and its abstract subclass
  that implement the interface specified above (although some of its methods
  are abstract).
The <b>Collection</b> interface specified 15 methods.
The <b>AbstractCollection</b> class specifies one <b>protected</b> constructor
  and 14 methods; it doesn't define <b>equals</b> or <b>hashCode</b> which are
  inherited from the <b>Object</b> class that this one implicitly extends
  (and overridden is the abstract subclass in the next section); it adds the
  specification of a <b>toString</b> method.
Of these 14 (=15-2+1) methods, all but two <b>iterator</b> and <b>size</b> are
  defined here (they are defined to be <b>abstract</b>), although operations
  like <b>add</b>, <b>contains</b>, and <b>remove</b> are implemented to throw
  <b>UnsupportedOperationException</b>.
Yet the <b>addAll</b>, <b>containsAll</b>, and <b>removeAll</b> methods are
  completely written here, using the promised iterator and eventually-working
 <b>add</b>, <b>contains</b>, and <b>remove</b> methods: they iterate through
  the parameter collection, calling the appropriate method for each element.
Here is the Javadoc of <b>AbstractCollection</b> (because of size constraints,
  it appears in a smaller font).
</table>
<p>
<img src="images/abstractcollection.gif"></image>
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%">&nbsp</td>
<td width ="80%">
</tbody>
</table>
The <b>AbstractSet</b> class extends <b>AbstractCollection</b>.
It too specifies one <b>protected</b> constructor, and it specifies 3 methods:
  it overrides the <b>equals</b> and <b>hashCode</b> methods inherited
  from <b>Object</b>, and it also overrides the <b>removeAll</b> method
  inherited from the <b>AbstractCollection</b> (it can improve its peformance
  knowing something that is true about sets but not collections in general).
Here is the Javadoc of <b>AbstractSet</b>, which is very short.
</table>
<p>
<img src="images/abstractset.gif"></image>
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%">&nbsp</td>
<td width ="80%">
Now we will examine the Javadoc of a concrete class that extends
  <b>AbstractSet</b>.
</tbody>
</table>


<!-- Concrete Classes -->

<a name="Concrete">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Concrete Classes</b></td>
<td width ="80%">
Now we will examine the Javadoc of a concrete class that extends
  <b>AbstractSet</b>.
This class is implemented by an advanced and efficient technique called
  <b>hashing</b>
We will briefly discuss hash tables at the end of this series of lectures.
Needless to say from the constructors, hash tables have "initial sizes" and
  "load factors"; you will need to use only the first two constructors this
  quarter; the other parameters relate to fine-tuning the efficiency of
  the underlying hash table, and is a topic you will study in IC-23.
<p>
The <b>HashSet</b> class extends <b>AbstractSet</b>.
It specifies some <b>public</b> constructors and 8 methods:
  defines the two abstract methods that it inherited, <b>iterator</b>
  and <b>size</b>; it overrides some other inherited methods as well
  (it either implements methods like <b>add</b>, which were previously defined
  to throw <b>UnsupportedOperationException</b> and can improve the
  peformance of others, knowing something about the hash tables that
  implement this class)
Here is the Javadoc of <b>HashSet</b> (because of size constraints,
  it appears in a smaller font).
</table>
<p>
<img src="images/hashset.gif"></image>
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%">&nbsp</td>
<td width ="80%">
So, the structure leading from the <b>Collection</b> interface to the
  <b>HashSet</b> concrete class involved all sorts of interesting
  inheritance of abstract and concrete methods.
In some sense, we can use this class without knowing all this information,
  by examining the <b>Collection</b> and <b>Set</b> interfaces, and knowing
  that it implements its methods efficienty.
<p>
Finally, we when discuss the actual implementation of all these methods in
  concrete classes, we will discuss their performance in terms of big O
  notation, where <b>n</b> is typically the number of values stored in the
  collection.
</tbody>
</table>


<!-- A Simple Example -->

<a name="Simple">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>A Simple Example of Using a Collection Class</b></td>
<td width ="80%">
Assume that we have to prompt the user for a sequence of <b>n String</b>s,
  such that the they are different.
The following program uses the <b>Set</b> interface and <b>HashSet</b> class
  to solve this problem.
Note that <b>i</b> is incremented only if a new value is successfully
  added to the set.
<b><pre>  System.out.println("Enter "+n+" different Strings");
  Set unique = new HashSet();
  for (int i=1; i&lt;=n; ) {
    String attempt = Prompt.forString("Enter unique value #"+i);
    if (!unique.contains(attempt)) {
      unique.add(attempt);
      i++;
    }
  }</pre></b>
Actually, this code can be simplified if you carefully read the real
  Javadoc (not just the summary listed in this lecture) for the <b>HashSet</b>
  class.
The <b>add</b> method adds the value to the set only if it is not there
  (generally, sets don't contain duplicates) and returns whether it
  added it.
<b><pre>  System.out.println("Enter "+n+" different Strings");
  Set unique = new HashSet();
  for (int i=1; i&lt;=n; ) {
    String attempt = Prompt.forString("Enter unique value #"+i);
    if (unique.add(attempt))
      i++;
  }</pre></b>
Generally, we use the name of the interface (<b>Set</b>) for the type
  of the variable (<b>unique</b>), not the name of the actual class
  we are using for its implementation (<b>HashSet</b>).
But we must use this name when constructing an object.
<p>
Technically, the most elegant solution to this problem uses the fact that the
  <b>Set</b> knows its size, so we don't need the counter <b>i</b> at all.
<b><pre>  System.out.println("Enter "+n+" different Strings");
  Set unique = new HashSet();
  while (unique.size()&lt;n)
    unique.add( Prompt.forString("Enter unique value #"+ (unique.size()+1)) );</pre></b>
Notice here that we must write <b>( unique.size()+1) )</b> in parentheses,
  otherwise Java would treat the <b>+</b> operator as catenation instead of
  addition.
</table>



<!-- Iterators -->

<a name="Iterators"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Iterators (and inner classes)</b></td>
<td width ="80%">
The <b>Iterator</b> interface (declared in the <b>java.util</b> package) is
  used heavily with collection classes (both to implement the collection
  classes and by users of the collection classes), but it it also useful in
  other contexts.
Iterators allow us to process, one at at time, a sequence of values
  (which we are said to iterate over), either stored in some collection or
  generated on the fly, as necessary.
Before we begin to study using iterators with collection classes, we will first
   study them independently (and a bit later in simplified collection classes).
The <b>Iterator</b> interface is very simple (as a heuristic, the simpler the
  interface, the more useful it is): it comprises jut three methods.
<b><pre>  public interface Iterator {
    public boolean hasNext();
    public Object  next   ();
      throws NoSuchElementException
    public void    remove ();
      throws UnsupportedOperationException, IllegalStateException
  }</pre></b>
The first two methods are the most interesting and useful; the third method
  does not have to be implemented to do anything but throw
  the <b>UnsupportedOperationException</b>.
The standard code fragment using the first two methods looks like
<b><pre>  for (Iterator i = <i>an-iterator-object</i>; i.hasNext(); ) {
    Object o = i.next();
    ...process o...
  }</b></pre>
So, the <b>hasNext</b> and <b>next</b> methods work together to query whether
  the loop should continue, and if so, access and process the next value in
  the collection.
Sometimes the next object retrieved will be cast immediately and stored in
  a non-<b>Object</b> variable.
<p>
Because <b>next</b> can throw an exception, we can also write the following
  loop to iterate over a sequence of values, which is equivalent to the first
<b><pre>  for (Iterator i = <i>an-iterator-object</i>; ; ) 
    try {
      Object o = i.next();
      ...process o...
    } catch (NoSuchElementException nsee){break;}
  }</pre></b>
Most programmers prefer the non <b>try-catch</b> code, deeming it simpler.
In many ways, we use iterators much like we use objects from the
  <b>StringTokenizer</b> class; this method has <b>hasNext</b> and
  <b>nextToken</b> methods, although it DOES NOT implement this interface.
<p>
The <b>Squares</b> class illustrates how to write a simple class that
  implements this interface; it contains only a constructor and the methods
  required to implement the <b>Iterator</b> interface.
<b><pre>  public class Squares implements Iterator {

    private int current;
    private int leftToGenerate;

    public Squares(int numberToGenerate)
    {this(0,numberToGenerate-1);}

    public Squares(int start, int stop)
    {
      current        = start;
      leftToGenerate = stop-start+1;
    }

    public boolean hasNext()
    {return leftToGenerate != 0;}

    public Object next ()
      throws NoSuchElementException
    {
      if (!hasNext())
        throw NoSuchElementException("Squares: next");
      leftToGenerate--;
      Integer answer = new Integer(current*current);
      current++;
      return answer;
    }

    public void remove ()
      throws UnsupportedOperationException, IllegalStateException
    {throw UnsupportedOperationException("Squares: remove");}
  }</pre></b>
Hand simulate the following code to ensure that it prints the squares
  of the first 10 integers (starting with 0): 0, 1, 4, 9, ... , 81.
<b><pre>  for (Iterator i = new Squares(10); i.hasNext(); )
    System.out.println(i.next());</pre></b>
Note that because all we are doing to each value is printing it, we
  do not store it in an <b>Object</b> variable, and the
  <b>System.out.println</b> automatically calls the <b>toString</b> method
  on the object returned.
To print the sequence 25, 36, ... , 100 we would instead write
  <b>new Squares(5,10)</b> in the initialization part of the <b>for</b> loop.
<p>
<!---
In fact, Java 1.5 allows a new, simpler to use form of the <b>for</b> loop,
  usable with any objects constructed from classes that implement
  <b>Iterator</b>.
We could write the previous code as just
<b><pre>  for (Integer x : new Squares(10))
    System.out.println(x);</pre></b>
Here, Java takes care of creating the iterator, and applying to it all the
  calls to <b>hasNext</b> and <b>next</b> (including a cast); it
  translates this code to the equivalent (but more verbose).
<b><pre>  for (Iterator i = new Squares(10); i.hasNext(); ) {
    Integer x = (Integer)i.next();
    System.out.println(x);
  }</pre></b>
Notice the use of the colon separator; the "right" thing to do is to make
  a new keyword <b>in</b> (as C# does), but that might break lots of programs
  that use that identifier for a variable name: using a separator is safer.
-->
</tbody>
</table>
<a name="Inner">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Inner Classes to Implement Iterators in Collection Classes</b></td>
<td width ="80%">
Now lets start learning about how iterators are implemented in collection
  classes.
But, instead of starting with "real" collection classes (involving interfaces
  and abstract classes), we will write an iterator in a simpler context: the
  <b>SimpleQueue</b> class that we studied in the lecture on 
  <a href="../arrays1d/lecture.html#Queue">1-d Arrays</a>.
Please find and review this code now; pay close attention to the
  class invariant that <b>rear</b> refers to the largest member index
  that stores a value.
<p>
To illustrate iterators, we will add a method to this class with the prototype
  <b>public Iterator iterator()</b>: it returns a reference to an object from
  some class that implements <b>Iterator</b> (over the sequence of values that
  this collection stores).
It is simple to use the result returned by this class with the idiom shown
  above; to print all the values in the queue (without changing their
  order in the queue) we would write just
<b><pre>  SimpleQueue sq = new SimpleQueue();
  ...put some values in the queue...
  for (Iterator i = sq.iterator(); i.hasNext(); )
    System.out.println(i.next());</pre></b>
Generally, iterators in collection classes allow us to process each value in
  the collection (say to print each) without altering the contents of the
  collection (in the case of a queue, all the elements remain in the queue in
  their original order); in addition, the <b>remove</b> method allows us to
  alter the collection by removing the value which the most recent call to
  <b>next</b> returned; it throws <b>IllegalStateException</b> if
  <b>next</b> has not been called OR if its value has already been removed.
This method can also just throw <b>UnsupportedOperationException</b> if
  it is not meaningful (or just not implemented).
<p>
In this context, it is useful to discuss the concept of an <b>inner class</b>.
Sometimes -as with iterators- it is useful to declare a <b>private</b> class
  INSIDE another (<b>public</b>) class.
By doing so, Java allows some interesting behaviors to emerge.
<ol>
<li>Only the methods in the outer class can construct objects from
     the inner class; in fact, only non-<b>static</b> methods can do so
     (or the Java compiler will detect and report an error).
<p>
<li>When a method in the outer class constructs an object from its inner
      class, the inner class object can refer to all the instance variables
      by name (even <b>private</b> ones) in the outer class object that it was
      constructed in.
</ol>
The scope rules for classes (outer and inner) are just like the scope rules
  for blocks (inner and outer): an inner block can freely refer to variables
  define in the outer block enclosing it.
Think of the inner class object storing a reference to the outer class
  object, which by the restriction in rule 1, always must exist.
In fact, we can explicitly refer to this outer object by
  writing <b><i>Outer-Class-Name</i>.this</b>, and its instance variable
  <b><i>p</i></b> by <b><i>Outer-Class-Name</i>.this.<i>p</i></b> -either
  to be explicit, or in case there is a name conflict between the instance
  variable <b><i>p</i></b> and some other variable.
<p>
So, how can we extend the <b>SimpleQueue</b> to allow iterators?
First, we must define  the <b>iterator</b> method in that class as
<b><pre>  public Iterator iterator()
  {return new SimpleQueueIterator();}</pre></b>
where <b>SimpleQueueIterator</b> is an inner class defined in 
  <b>SimpleQueue</b>.
We must also import the following classes for this definition and
  the ones below to make sense to Java
<b><pre>  import java.util.Iterator;
  import java.util.NoSuchElementException;</pre></b>
(the <b>UnsupportedOperationException</b> is in the <b>java.lang</b>
  package, and doesn't need to be imported).
The simplest version of this inner class is
<b><pre>
  private class SimpleQueueIterator implements Iterator {
     private int next = 0;
     
    public boolean hasNext()
    {return next <= rear;}

    public Object next ()
      throws NoSuchElementException
    {
      if (!hasNext())
        throw new NoSuchElementException
          ("SimpleQueueIterator: next");

      return q[next++];
    }
    
    public void remove ()
      throws UnsupportedOperationException, IllegalStateException
    {throw new UnsupportedOperationException
       ("SimpleQueueIterator: remove");
    }
  }</pre></b>
Here, each new <b>SimpleQueueIterator</b> object intializes <b>next</b> to
  <b>0</b>: it refers to the index of the next value in the queue that the
  <b>next</b> method returns.
Both the <b>hasNext</b> and <b>next</b> methods can access the
  <b>SimpleQueue</b> instance  variables <b>q</b> and <b>rear</b>,
  either directly by these names or by <b>SimpleQueue.this.q</b> and
  <b>SimpleQueue.this.rear</b>.
So long as <b>next</b> is not beyond <b>rear</b>, the last member index that
  stores a value, there is another value to iterate over.
The <b>next</b> method returns the value in that location, and increments
  <b>next</b> for (possibly) another call to this method.
The following picture illustrates both a <b>SimpleQueue</b> object, and a
  <b>SimpleQueueIterator</b> object that is ready to iterate over it.
</table>
<p>
<img src="images/simplequeueiterator.gif"></image>
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%">&nbsp</td>
<td width ="80%">
If we wanted to implement the <b>remove</b> method, we would have to declare
  an additional <b>removedAlready</b> instance variable and rewrite the
  methods as follows.
<b><pre>  private class SimpleQueueIterator implements Iterator {
  
    private int     next           = 0;
    private boolean removedAlready = true;
     
    public boolean hasNext()
    {return next <= rear;}

    public Object next ()
      throws NoSuchElementException
    {
      if (!hasNext())
        throw new NoSuchElementException
          ("SimpleQueueIterator: next - no next value");
        
      removedAlready = false;
      return q[next++];
    }
    
    public void remove ()
      throws UnsupportedOperationException,
             IllegalStateException
    {
      if (removedAlready)
        throw new IllegalStateException
          ("SimpleQueueIterator: remove - cannot remove");

      //Backup next: the value at that index will be removed.
      //Shift everything beyond to the left by 1, and decrement
      //  rear too (since removing a value shrinks the queue).
      removedAlready = true;
      next--;
      for (int i=next; i&lt;rear; i++)
        q[i] = q[i+1];
      q[rear--] = null;
    }
  }</pre></b>
The differences are that <b>next</b> resets <b>removedAlready</b> to
  <b>false</b> when it successfully advances to return another value, and
  <b>remove</b> checks this value.
If <b>remove</b> does remove a value, it must shift the values following it to
  the left by 1 index, just like the <b>dequeue</b> method: in fact, a
  generalized helper method
  <b><pre>  private void shiftLeftFrom (int shiftStart)</pre></b>
would be useful to simplify both methods.
Finally, <b>removedAlready</b> is initialized to <b>true</b>, because we
  cannot call <b>remove</b> until <b>next</b> has been called; this
  initialization ensures this requirement.
<p>
We can use the <b>remove</b> method to remove every odd value in a queue of
 <b>Integer</b>s easy.
The code is
<b><pre>  SimpleQueue sq = new SimpleQueue();
  ...put some values in the queue...
  for (Iterator i = sq.iterator(); i.hasNext(); ) {
    Integer x = (Integer)i.next();
    if (x.intValue()%2 == 1)
      i.remove();
  }</pre></b>
You can download, unzip, run, and examine all this code (along with
  a driver program) in the
  <a href="../../programs/simplequeuewithiteratordemo.zip">
      SimpleQueue with Iterator Demonstration</a>.
In fact, this code includes the material described in the next section on
  what happens when a collection is modified concurrently with it being
  iterated over.
</tbody>
</table>



<!-- Concurrent Modification -->

<a name="Concurrent">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Detecting Concurrent Changes</b></td>
<td width ="80%">
There is still one loose end connecting collection classes and iterators.
If we are iterating through a collection class, and we modify it (add or
  remove a value), how should this affect the way our iterator works in the
  future, when <b>hasNext</b>/<b>next</b> are called?
It turns out that there is no uniformly good way to answer to this question
  for all collection classes,  so instead all Java collection classes (with
  iterators) prohibit it from occurring.
<p>
Java prohibits it from occuring by forcing the <b>next</b> method to
  throw the <b>ConcurrentModificationException</b> if any state changes have
  been made to the object it is iterating over: i.e., we are modifying a
  collection class while concurrently iterating over it.
This is accomplished in a surprisingly simple and efficient way (funny how
  those two properties often go together) by the iterator class.
When this approach is used, the iterators are said to be <b>fail-fast</b>
  iterators.
<p>
On the <b>SimpleQueue</b> side:
<ul>
<li>Each <b>SimpleQueue</b> object stores another instance variable, named
      <b>modCount</b>: it represents the modification count of this queue
      and is initialized to <b>0</b> at construction.
<li>Each mutator method in this class increments this instance variable.
</ul>
On the <b>SimpleQueueIterator</b> side:
<ul>
<li>Each <b>SimpleQueueIterator</b> object stores another instance variable,
      named <b>expectedModCount</b>: it represents the modification count of
      the queue when THIS ITERATOR WAS CONSTRUCTED, so it is initialized to the
      <b>modCount</b> of its <b>SimpleQueue</b> object at construction.
<p>
<li>Each call to <b>next</b> in this class first compares this stored value
      with the <b>modCount</b> value stored in the queue that it is iterating
      over; if they differ (the queue has been changed), it immediately throws
      <b>ConcurrentModificationException</b>.
</ul>
In this way, if the expected modification count is not found, we know that
  the collection was modified after the iterator was constructed, so this
  iterator cannot continue to iterate over it.
<p>
Finally, if the <b>remove</b> method in the iterator successfully removes an
  element from the collection, no other iterator should be able to continue.
This is accomplished by incrementing the <b>modCount</b> of the collection
  first, and then copying this new value into the <b>expectedModCount</b> of
  this iterator.
Therefore, this iterator can continue (because it knows how to ensure that
  it still iterates over all the remaining values in the collection) but any 
  other iterator is forced to throw <b>ConcurrentModificationException</b>.
</tbody>
</table>



<!-- Problem Set -->

<a name="ProblemSet"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Problem Set</b></td>
<td width ="80%">
  To ensure that you understand all the material in this lecture, please solve
    the the announced problems after you read the lecture.
  <p>
  If you get stumped on any problem, go back and read the relevant part of the
     lecture.
  If you still have questions, please get help from the Instructor, a TA,
    or any other student.

<ol> 
<li>Write a class named <b>Constant</b> that implements <b>Iterator</b>.
    Its constructor should be called with some object, and its <b>next</b>
      method should always return a reference to that same object, with
      <b>hasNext</b> always returning <b>true</b>.
<p>
<li>Write a class named <b>Prime</b> that implements <b>Iterator</b>,
      retuning only prime numbers.
    You may assume that the method <b>public static boolean isPrime(int i)</b>
      is defined in the <b>Math</b> class (it isn't, but assume it).
    Write a few reasonable constructors for this class.
<p>
<li>Write a class named <b>Combine</b> that implements <b>Iterator</b>.
    Its constructor should be called with two objects constructed from a
      class implementing <b>Iterator</b>, and an object constructed from a
      class implementing <b>Combine2</b>.
<b><pre>  public interface Combine2 {
    public Object combine2(Object o1, Object o2);
  }</pre></b>
  The <b>hasNext</b> method returns <b>true</b> when both of the iterators
    it stores have a next value; its <b>next</b> method combines the next
   values from each of the iterators it stores.
<p>
<li>What are the implications of defining the <b>iterator</b> method
     in <b>SimpleQueue</b> to be <b>static</b>.
<p>
<li>Write an inner class implementing iterators of <b>SimpleStack</b>.
<p>
<li>Devise a scheme whereby each mutator method in the <b>SimpleQueue</b>
      class detects if there is an iterator iterating over the object it is
      about to change, and throws the <b>ConcurrentModificationException</b>.
    Compare the efficiency of these two approaches to reportng this problem.
</ol>
</td>
</tbody>
</table>


</body>
</html>

