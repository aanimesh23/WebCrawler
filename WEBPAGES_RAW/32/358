<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1">
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay">
<META HTTP-EQUIV="UPDATED" CONTENT="Sunday, February 27, 2000 11:48 AM">
<TITLE>Asst. 8 * Concurrency and Exceptions</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="643BEC49">
<META HTTP-EQUIV=KEYWORDS CONTENT="homework, exceptions, concurrency">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="Assignment 7 on exceptions and concurrency, for ICS 141, a course in programming language concepts taught by David G. Kay in the Dept. of Info. and Computer Science, Univ. of Calif., Irvine (UCI ICS).">
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 1999 , 2000 by David G. Kay.  All rights reserved.">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<A NAME="_top"></A>
<P>
<IMG SRC="asst_8_exceptions_conc_files/sidebar_73.gif" WIDTH=468 HEIGHT=78>
<BR>
<FONT FACE="AGaramond" SIZE=4>This assignment is due on Monday, March 13,
by 7:00 p.m. in the box in CS 189.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Summary:</B>  Finally, we consider concurrency
and exceptions.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>Readings and review questions:</B>  You
should know the answers to the review questions listed below, but you do
not have to turn them in.  Remember that going over all of the review questions
we&#39;ve singled out is good preparation for the final.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Chapter 12:  1-6, 19-24</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Chapter 13:  1-4, 11-23</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(a)</B>  This part refers to the Java code
on pages 524 and 525, with these substitutions:</FONT></P>
<UL>
<LI>
<FONT FACE="AGaramond" SIZE=4>Use </FONT><FONT FACE="Courier New">new Queue(5)</FONT><FONT FACE="AGaramond" SIZE=4>
instead of </FONT><FONT FACE="Courier New">new Queue(100)</FONT><FONT FACE="AGaramond" SIZE=4>
(in other words, just create a queue with 5 elements).</FONT></LI>
<BR><BR>
<LI>
<FONT FACE="AGaramond" SIZE=4>In </FONT><FONT FACE="Courier New">Producer</FONT><FONT FACE="AGaramond" SIZE=4>&#39;s
run method on page 525, change the loop to read:<A NAME="_14_717"></A></FONT>
<BR>
<CODE><FONT FACE="Courier New">while (true) {</FONT></CODE>
<BR>
<CODE><FONT FACE="Courier New">&#160;&#160; if TimeToAct() {</FONT></CODE>
<BR>
<CODE><FONT FACE="Courier New">&#160;&#160;  &#160; //-- Create a new_item</FONT></CODE>
<BR>
<CODE><FONT FACE="Courier New">&#160;&#160;  &#160; buffer.deposit(new_item);</FONT></CODE>
<BR>
<CODE><FONT FACE="Courier New">}}</FONT></CODE></LI>
<BR><BR>
<LI>
<FONT FACE="AGaramond" SIZE=4>Change the loop in </FONT><FONT FACE="Courier New">Consumer</FONT><FONT FACE="AGaramond" SIZE=4>&#39;s
run method to call </FONT><FONT FACE="Courier New">TimeToAct</FONT><FONT FACE="AGaramond" SIZE=4>
the same way.</FONT></LI>
</UL>
<P>
<FONT FACE="AGaramond" SIZE=4>Assume that both threads start running at
7:00 a.m.  Assume that </FONT><FONT FACE="Courier New">consumer1</FONT><FONT FACE="AGaramond" SIZE=4>
tries to consume a new item every 5 minutes, starting at 7:10 a.m., stopping
at 7:36 a.m., and starting again at 9:25 a.m.  These timings are handled
(magically) by the function </FONT><FONT FACE="Courier New">TimeToAct</FONT><FONT FACE="AGaramond" SIZE=4>,
which just returns false until the time for the next action comes up.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4>Assume that </FONT><FONT FACE="Courier New">producer1</FONT><FONT FACE="AGaramond" SIZE=4>
produces an item every 10 minutes from at 7:21 a.m. to 9:21 a.m.  Each item
is an integer representing the time (721, 731, 741, ..., 921).</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(a.1)  </B>Give a snapshot of the concurrent
processes&#39; execution every 5 minutes, starting at 7:03 a.m. (7:03, 7:08,
7:13, 7:18, ...) and continuing until the contents don&#39;t change any
more.  Each snapshot should show the contents of </FONT><FONT FACE="Courier New">buff1</FONT><FONT FACE="AGaramond" SIZE=4>
and the state of execution of the threads </FONT><FONT FACE="Courier New">producer1</FONT><FONT FACE="AGaramond" SIZE=4>
and </FONT><FONT FACE="Courier New">consumer1</FONT><FONT FACE="AGaramond" SIZE=4>
(i.e., where in the code they are executing).</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(a.2)</B>  (extra credit)  Rewrite the
producer/consumer code to use the </FONT><FONT FACE="Courier New">sleep</FONT><FONT FACE="AGaramond" SIZE=4>
method instead of the </FONT><FONT FACE="Courier New">TimeToAct</FONT><FONT FACE="AGaramond" SIZE=4>
function described above.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(a.3)</B>  (extra credit)  Implement this
producer/consumer problem in Java; turn in your code, a test plan, and the
results.  Make sure you can do part <B>(e.1)</B> by hand, though; you won&#39;t
have a computer on the final exam.</FONT></P>
<P>
<FONT FACE="AGaramond" SIZE=4><B>(b)</B>  Briefly answer problems 6, 7,
8, and 15 in the problem set on page 564.  For extra credit, do either problem
12 or 13.</FONT></P>
<BR CLEAR=ALL>
</BODY>
</HTML>
