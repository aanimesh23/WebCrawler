//    Processing educational code
//    Copyright (C) 2013  Lee Martie
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

class MyCharacter {
//this will keep track of which keys are pressed
  public boolean[] pressed = new boolean[525];
  // our characters sprite
  Sprite sprite;
  //initalizing the index into our sprite (remember sprite is just an animation)
  int index  = 0;
  //location of our sprite
  PVector location;
    //direction of my character, 0 = facing left, 1 = facing right
  int direction = 0;
  //controls animation speed
  int animationSpeed = 10;
  // used to keep track of frames passed
  int updateCount = 0;

  boolean noMove = false;
  
//constructor
  public MyCharacter(Sprite _sprite, int startX, int startY) {
    sprite = _sprite;
    location = new PVector(startX, startY);
   
  }


//Updates location and animation sequence (sprite)
  void update() {
    if(pressed[LEFT] == true){
        
       if(!noMove){
       //moving the location of my character
       //location.x  = location.x - 1;
       }
       
       //setting the direction of character
       direction = 0; 
       updateCount ++;
       
       if(updateCount == animationSpeed){
         //index into the sprite sheet
         index++;
         updateCount = 0;
       }
    }else if(pressed[RIGHT] == true){
      if(!noMove){
       //moving the location of my character
      // location.x  = location.x + 1;
      }
      
       //setting the direction of character
       direction = 1; 
       updateCount ++;
       
       if(updateCount == animationSpeed){
         //index into the sprite sheet
         index++;
         updateCount = 0;
       }
    }
    
    //resetting if two big
    if(index > sprite.rows){
     index = 0; 
    }
    
  }

//notice the index and look at the Sprite class
//In terms of the sprite sheet, each row represents a direction for the animation
//since we stored this in a 1 dimensional array we jump to the part of our 1 dimensional array
//that has the right animation (direction*sprite.cols) and we add index, to get the frame we want to
//start at in that animation sequense
  void display() {
    image(sprite.spriteAnimationArray[direction*sprite.cols+index],location.x,location.y);
  }
}

