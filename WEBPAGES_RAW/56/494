<HTML>
<!-- $Id: c2-css96_abstract.html,v 1.1 1996/08/08 22:10:18 kari Exp $ -->
<HEAD>
<TITLE>Arcadia Collected Papers: ABSTRACT</TITLE>
<META http-equiv="Owner" content="Arcadia">
<META http-equiv="Reply-To" content="arcadia-www@ics.uci.edu">
<LINK rev="made" href="mailto:arcadia-www@ics.uci.edu">
</HEAD><BODY>
<H1><img align=middle src="http://www.ics.uci.edu/~arcadia/Icons/arcadia-logo.gif">
Arcadia Papers: ABSTRACT</H1>
<HR>

<A HREF="ftp://www.ics.uci.edu/pub/arch/papers/C2-CSS96-MTW.fm.ps">
"<b>Formal Modeling of Software Architectures at Multiple Levels of Abstraction</b>"</A>,
by Nenad Medvidovic, Richard N. Taylor, and E. James Whitehead, Jr.  in
<i>Proceedings of the <A HREF="http://www.ics.uci.edu/IRUS/css.html">
California Software Symposium 1996</i></A>,
pages 28-40, Los Angeles, CA, April 17, 1996.

<H2> Abstract </H2>

Software architectures are multi-dimensional entities that 
can be fully understood only when viewed and analyzed at 
four different levels of abstraction: (1) internal functionality 
of a component, (2) the interface(s) exported by the 
component to the rest of the system, (3) interconnection of 
architectural elements in an architecture, and (4) rules of the 
architectural style. This paper presents the characteristics of 
each of the four levels of architectural abstraction, outlines 
the kinds of analyses that need to be performed at each 
level, and discusses the kinds of formal notations that are 
suitable at each level. We use the pipe-and-filter and Chiron-
2 (C2) architectural styles as illustrations. In particular, we 
present formal models of C2 at the last three levels of 
abstraction as a first step in enabling a C2 design 
environment to perform the necessary analyses of 
architectures. We discuss the benefits of the formal 
definitions and our experience to date.

<P>

<HR>
<ADDRESS>
<A HREF="http://www.ics.uci.edu/Arcadia/">The Arcadia Project
&lt;arcadia-www@ics.uci.edu&gt;</A><BR>
Last modified: Tue May 23 13:40:23 1995
</ADDRESS>
</BODY></HTML>

