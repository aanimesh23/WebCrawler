<html>
    <head>
      <title>
        Dr. Rina Dechter @ UCI
      </title>
      <LINK REL="Stylesheet" HREF="/~dechter/basic.css">		
    </HEAD>
  
  <BODY bgcolor="#ffffff" alink="00aaaa" link="008080" vlink="008080">
  
  <!-- Begin Header -->
    <!--#include virtual="/~dechter/header.html" -->
  <!-- End Header -->
  
  
  <!-- Begin Body -->
  
  <!--#include file="pubs-nav.html"--> 
<center>
<table width="80%" cellspacing="0" cellpadding="0" border="0">
<tr valign=top>
<td><b>R70b</td>
 | 
<br></td>
</tr>

<tr>
<td colspan=2><div class=title>Maintenance Scheduling Problems As Benchmarks
For Constraint Algorithms</div>
<TT>Daniel Frost(<A href="mailto:frost@ics.uci.edu">frost@ics.uci.edu</A>) &
Rina Dechter (<A href="mailto:dechter@ics.uci.edu">dechter@ics.uci.edu</A>)</TT>
</td></tr>
</table>

<table width="80%" cellspacing="0" cellpadding="0" border="0">
<tr><td>
<br><div class=abstract>
<b>Abstract</b><BR>
The paper focuses on evaluating constraint satisfaction search algorithms on 
application based random problem instances. The application we use is a well-studied
problem in the electric power industry: optimally scheduling preventive maintenance
of power generating units within a power plant. We show how these scheduling 
problems can be cast as constraint satisfaction problems and used to define the 
structure of randomly generated non-binary CSPs. The random problem instances are
then used to evaluate several previously studied algorithms. The paper also 
demonstrates how constraint satisfaction can be used for optimization tasks. To find an
optimal maintenance schedule, a series of CSPs are solved with successively tighter
cost-bound constraints. We introduce and experiment with an "iterative learning"
algorithm which records additional constraints uncovered during search. The 
constraints recorded during the solution of one instance with a certain cost-bound are
used again on subsequent instances with tighter cost-bounds. Our results show that
on a class of randomly generated maintenance scheduling problems, iterative learning
reduces the time required to find a good schedule.
</div><br>

<A href="r70b-maintscheduling.ps">
<img align=left border="0" src="/~dechter/images/down.gif">&nbsp;&nbsp;<b>[ps] </b></a>
<A target=blank href="r70b-maintscheduling.ps">
<b>[pdf]</b></a>
</td></tr></table></center><br>

<!-- End Body-->

<!--- Begin Footer -->
     <!--#include virtual="/~dechter/footer.html" -->
<!--- End Footer -->

</body>
<html>
