<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_01) on Tue Jul 03 14:38:37 PDT 2007 -->
<TITLE>
JFMFileSystem
</TITLE>

<META NAME="date" CONTENT="2007-07-03">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="JFMFileSystem";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/JFMFileSystem.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="JFMFileSystem.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.itr_rescue.dataGuard.localFileSystem</FONT>
<BR>
Class JFMFileSystem</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>org.itr_rescue.dataGuard.localFileSystem.JFMFileSystem</B>
</PRE>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFilesystem.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMLocalFilesystem</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public abstract class <B>JFMFileSystem</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
This class represents the base class for all filesystems.
<P>

<P>
<DL>
<DT><B>Author:</B></DT>
  <DD>sergiu</DD>
</DL>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#JFMFileSystem()">JFMFileSystem</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Empy constructor.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#canRead(org.itr_rescue.dataGuard.localFileSystem.JFMFile)">canRead</A></B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the application can read the file denoted by the
 abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#canWrite(org.itr_rescue.dataGuard.localFileSystem.JFMFile)">canWrite</A></B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the application can modify to the file denoted by the
 abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFileSystem</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#createFileSystem(java.lang.String)">createFileSystem</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method searches through the registered filesystems, loads and returns the requested one.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#createNewFile(org.itr_rescue.dataGuard.localFileSystem.JFMFile, java.lang.String)">createNewFile</A></B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;parent,
              java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Atomically creates a new, empty file named by the abstract pathname if
 and only if a file with that name does not yet exist.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#delete(org.itr_rescue.dataGuard.localFileSystem.JFMFile)">delete</A></B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deletes the file or directory denoted by the abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#exists(org.itr_rescue.dataGuard.localFileSystem.JFMFile)">exists</A></B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file or directory denoted by the abstract pathname
 exists.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getDefaultRootDirectory()">getDefaultRootDirectory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The default root directory in the case of filesystems with more than one root directories (like windows)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getFile(java.lang.String)">getFile</A></B>(java.lang.String&nbsp;pathName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns an JFMFile object based on the pathname provided</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;char</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getPathSeparator()">getPathSeparator</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The system-dependent path-separator character.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getPathSeparatorString()">getPathSeparatorString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The system-dependent path-separator character, represented as a string
 for convenience.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.Hashtable&lt;java.lang.String,java.lang.String&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getRegisteredFilesystems()">getRegisteredFilesystems</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getRootDriveFile(org.itr_rescue.dataGuard.localFileSystem.JFMFile)">getRootDriveFile</A></B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the root directory of the filesystem of witch the supplied file belongs to.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;char</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getSeparator()">getSeparator</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The system-dependent default name-separator character.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getSeparatorString()">getSeparatorString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The system-dependent default name-separator character, represented as a
 string for convenience.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getStartDirectory()">getStartDirectory</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the start directory for this filesystem</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#isLocal()">isLocal</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tells us if the filesystem is local.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#listFiles(org.itr_rescue.dataGuard.localFileSystem.JFMFile)">listFiles</A></B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;rootFile)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array of abstract pathnames denoting the files in the
 directory denoted by the abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#listFiles(org.itr_rescue.dataGuard.localFileSystem.JFMFile, java.io.FilenameFilter)">listFiles</A></B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;rootFile,
          java.io.FilenameFilter&nbsp;filter)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array of abstract pathnames denoting the files and
 directories in the directory denoted by this abstract pathname that
 satisfy the specified filter.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#listRoots()">listRoots</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List the available filesystem roots.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#mkdir(org.itr_rescue.dataGuard.localFileSystem.JFMFile, java.lang.String)">mkdir</A></B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;parent,
      java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates the directory named by the abstract pathname denoted by the parameter.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#registerFilesystems()">registerFilesystems</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method searches the java path and the plugins directory (a subdirectory of the current directory)
 for jar's that contain a filesystem plugin.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#setLastModified(org.itr_rescue.dataGuard.localFileSystem.JFMFile, long)">setLastModified</A></B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file,
                long&nbsp;time)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the last-modified time of the file or directory named by the
 abstract pathname.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>abstract &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#setReadOnly(org.itr_rescue.dataGuard.localFileSystem.JFMFile)">setReadOnly</A></B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Marks the file or directory named by the abstract pathname so that
 only read operations are allowed.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="JFMFileSystem()"><!-- --></A><H3>
JFMFileSystem</H3>
<PRE>
public <B>JFMFileSystem</B>()</PRE>
<DL>
<DD>Empy constructor.
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getRegisteredFilesystems()"><!-- --></A><H3>
getRegisteredFilesystems</H3>
<PRE>
public static java.util.Hashtable&lt;java.lang.String,java.lang.String&gt; <B>getRegisteredFilesystems</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="registerFilesystems()"><!-- --></A><H3>
registerFilesystems</H3>
<PRE>
public static void <B>registerFilesystems</B>()</PRE>
<DL>
<DD>This method searches the java path and the plugins directory (a subdirectory of the current directory)
 for jar's that contain a filesystem plugin.
 A jar that contains a filesystem plugin, is a jar file that has in its root directory a file named filesystem.xml
 in which it describes the filesystem class used and its friendly name (to be shown in the menu)
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="createFileSystem(java.lang.String)"><!-- --></A><H3>
createFileSystem</H3>
<PRE>
public static <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFileSystem</A> <B>createFileSystem</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>This method searches through the registered filesystems, loads and returns the requested one.
 Fielsystems are represented in the vector as full qualified names of the class that represents them.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the requested filesystem, or null if you accept the default one
<DT><B>Returns:</B><DD>The requested filesystem instance</DL>
</DD>
</DL>
<HR>

<A NAME="getDefaultRootDirectory()"><!-- --></A><H3>
getDefaultRootDirectory</H3>
<PRE>
public abstract <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A> <B>getDefaultRootDirectory</B>()</PRE>
<DL>
<DD>The default root directory in the case of filesystems with more than one root directories (like windows)
<P>
<DD><DL>

<DT><B>Returns:</B><DD>The default root directory</DL>
</DD>
</DL>
<HR>

<A NAME="getPathSeparator()"><!-- --></A><H3>
getPathSeparator</H3>
<PRE>
public abstract char <B>getPathSeparator</B>()</PRE>
<DL>
<DD>The system-dependent path-separator character.  This field is
 initialized to contain the first character of the value of the system
 property <code>path.separator</code>.  This character is used to
 separate filenames in a sequence of files given as a <em>path list</em>.
 On UNIX systems, this character is <code>':'</code>; on Microsoft Windows systems it
 is <code>';'</code>.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getPathSeparatorString()"><!-- --></A><H3>
getPathSeparatorString</H3>
<PRE>
public java.lang.String <B>getPathSeparatorString</B>()</PRE>
<DL>
<DD>The system-dependent path-separator character, represented as a string
 for convenience.  This string contains a single character, namely
 <code><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getPathSeparator()"><CODE>getPathSeparator()</CODE></A></code>.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getSeparator()"><!-- --></A><H3>
getSeparator</H3>
<PRE>
public abstract char <B>getSeparator</B>()</PRE>
<DL>
<DD>The system-dependent default name-separator character.  This field is
 initialized to contain the first character of the value of the system
 property <code>file.separator</code>.  On UNIX systems the value of this
 field is <code>'/'</code>; on Microsoft Windows systems it is <code>'\'</code>.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getSeparatorString()"><!-- --></A><H3>
getSeparatorString</H3>
<PRE>
public java.lang.String <B>getSeparatorString</B>()</PRE>
<DL>
<DD>The system-dependent default name-separator character, represented as a
 string for convenience.  This string contains a single character, namely
 <code><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getSeparator()"><CODE>getSeparator()</CODE></A></code>.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="listRoots()"><!-- --></A><H3>
listRoots</H3>
<PRE>
public abstract <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>[] <B>listRoots</B>()</PRE>
<DL>
<DD>List the available filesystem roots.
<P>
<DD><DL>
<DT><B>See Also:</B><DD><CODE>File.listRoots()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="listFiles(org.itr_rescue.dataGuard.localFileSystem.JFMFile)"><!-- --></A><H3>
listFiles</H3>
<PRE>
public abstract <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>[] <B>listFiles</B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;rootFile)</PRE>
<DL>
<DD>Returns an array of abstract pathnames denoting the files in the
 directory denoted by the abstract pathname.

 <p> If this abstract pathname does not denote a directory, then this
 method returns <code>null</code>.  Otherwise an array of
 <code>File</code> objects is returned, one for each file or directory in
 the directory.  Pathnames denoting the directory itself and the
 directory's parent directory are not included in the result.

 <p> There is no guarantee that the name strings in the resulting array
 will appear in any specific order; they are not, in particular,
 guaranteed to appear in alphabetical order.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>An array of abstract pathnames denoting the files and
          directories in the directory denoted by this abstract
          pathname.  The array will be empty if the directory is
          empty.  Returns <code>null</code> if this abstract pathname
          does not denote a directory, or if an I/O error occurs.
<DT><B>Throws:</B>
<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>
          method denies read access to the directory</DL>
</DD>
</DL>
<HR>

<A NAME="listFiles(org.itr_rescue.dataGuard.localFileSystem.JFMFile, java.io.FilenameFilter)"><!-- --></A><H3>
listFiles</H3>
<PRE>
public abstract <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>[] <B>listFiles</B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;rootFile,
                                    java.io.FilenameFilter&nbsp;filter)</PRE>
<DL>
<DD>Returns an array of abstract pathnames denoting the files and
 directories in the directory denoted by this abstract pathname that
 satisfy the specified filter.  The behavior of this method is the
 same as that of the <code><CODE>#listFiles()</CODE></code> method, except
 that the pathnames in the returned array must satisfy the filter.
 If the given <code>filter</code> is <code>null</code> then all
 pathnames are accepted.  Otherwise, a pathname satisfies the filter
 if and only if the value <code>true</code> results when the
 <code><CODE>FilenameFilter.accept(java.io.File, java.lang.String)</CODE></code> method of the filter is
 invoked on this abstract pathname and the name of a file or
 directory in the directory that it denotes.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>filter</CODE> - A filename filter
<DT><B>Returns:</B><DD>An array of abstract pathnames denoting the files and
          directories in the directory denoted by this abstract
          pathname.  The array will be empty if the directory is
          empty.  Returns <code>null</code> if this abstract pathname
          does not denote a directory, or if an I/O error occurs.
<DT><B>Throws:</B>
<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>
          method denies read access to the directory</DL>
</DD>
</DL>
<HR>

<A NAME="mkdir(org.itr_rescue.dataGuard.localFileSystem.JFMFile, java.lang.String)"><!-- --></A><H3>
mkdir</H3>
<PRE>
public abstract boolean <B>mkdir</B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;parent,
                              java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Creates the directory named by the abstract pathname denoted by the parameter.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>parent</CODE> - The parent file that denotes the abstract pathname<DD><CODE>name</CODE> - The name of the new dir
<DT><B>Returns:</B><DD><code>true</code> if and only if the directory was
          created; <code>false</code> otherwise
<DT><B>Throws:</B>
<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>
          method does not permit the named directory to be created</DL>
</DD>
</DL>
<HR>

<A NAME="delete(org.itr_rescue.dataGuard.localFileSystem.JFMFile)"><!-- --></A><H3>
delete</H3>
<PRE>
public boolean <B>delete</B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file)</PRE>
<DL>
<DD>Deletes the file or directory denoted by the abstract pathname.  If
 this pathname denotes a directory, then the directory must be empty in
 order to be deleted.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname
<DT><B>Returns:</B><DD><code>true</code> if and only if the file or directory is
          successfully deleted; <code>false</code> otherwise
<DT><B>Throws:</B>
<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkDelete(java.lang.String)</CODE></code> method denies
          delete access to the file</DL>
</DD>
</DL>
<HR>

<A NAME="createNewFile(org.itr_rescue.dataGuard.localFileSystem.JFMFile, java.lang.String)"><!-- --></A><H3>
createNewFile</H3>
<PRE>
public abstract boolean <B>createNewFile</B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;parent,
                                      java.lang.String&nbsp;name)
                               throws <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html" title="class in org.itr_rescue.dataGuard.localFileSystem">FSException</A></PRE>
<DL>
<DD>Atomically creates a new, empty file named by the abstract pathname if
 and only if a file with that name does not yet exist.  The check for the
 existence of the file and the creation of the file if it does not exist
 are a single operation that is atomic with respect to all other
 filesystem activities that might affect the file.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname
<DT><B>Returns:</B><DD><code>true</code> if the named file does not exist and was
          successfully created; <code>false</code> if the named file
          already exists
<DT><B>Throws:</B>
<DD><CODE><A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html" title="class in org.itr_rescue.dataGuard.localFileSystem">FSException</A></CODE> - If an filesystem error occurred
<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>
          method denies write access to the file</DL>
</DD>
</DL>
<HR>

<A NAME="setLastModified(org.itr_rescue.dataGuard.localFileSystem.JFMFile, long)"><!-- --></A><H3>
setLastModified</H3>
<PRE>
public abstract boolean <B>setLastModified</B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file,
                                        long&nbsp;time)</PRE>
<DL>
<DD>Sets the last-modified time of the file or directory named by the
 abstract pathname.

 <p> All platforms support file-modification times to the nearest second,
 but some provide more precision.  The argument will be truncated to fit
 the supported precision.  If the operation succeeds and no intervening
 operations on the file take place, then the next invocation of the
 <code><CODE>org.jfm.md.filesystems.JFMFile#lastModified</CODE></code> method will return the (possibly
 truncated) <code>time</code> argument that was passed to this method.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname<DD><CODE>time</CODE> - The new last-modified time, measured in milliseconds since
               the epoch (00:00:00 GMT, January 1, 1970)
<DT><B>Returns:</B><DD><code>true</code> if and only if the operation succeeded;
          <code>false</code> otherwise
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - If the argument is negative
<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>
          method denies write access to the named file</DL>
</DD>
</DL>
<HR>

<A NAME="setReadOnly(org.itr_rescue.dataGuard.localFileSystem.JFMFile)"><!-- --></A><H3>
setReadOnly</H3>
<PRE>
public abstract boolean <B>setReadOnly</B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file)</PRE>
<DL>
<DD>Marks the file or directory named by the abstract pathname so that
 only read operations are allowed.  After invoking this method the file
 or directory is guaranteed not to change until it is either deleted or
 marked to allow write access.  Whether or not a read-only file or
 directory may be deleted depends upon the underlying system.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname
<DT><B>Returns:</B><DD><code>true</code> if and only if the operation succeeded;
          <code>false</code> otherwise
<DT><B>Throws:</B>
<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>
          method denies write access to the named file</DL>
</DD>
</DL>
<HR>

<A NAME="canRead(org.itr_rescue.dataGuard.localFileSystem.JFMFile)"><!-- --></A><H3>
canRead</H3>
<PRE>
public boolean <B>canRead</B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file)</PRE>
<DL>
<DD>Tests whether the application can read the file denoted by the
 abstract pathname.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname
<DT><B>Returns:</B><DD><code>true</code> if and only if the file specified by this
          abstract pathname exists <em>and</em> can be read by the
          application; <code>false</code> otherwise
<DT><B>Throws:</B>
<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>
          method denies read access to the file</DL>
</DD>
</DL>
<HR>

<A NAME="canWrite(org.itr_rescue.dataGuard.localFileSystem.JFMFile)"><!-- --></A><H3>
canWrite</H3>
<PRE>
public boolean <B>canWrite</B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file)</PRE>
<DL>
<DD>Tests whether the application can modify to the file denoted by the
 abstract pathname.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname
<DT><B>Returns:</B><DD><code>true</code> if and only if the file system actually
          contains a file denoted by this abstract pathname <em>and</em>
          the application is allowed to write to the file;
          <code>false</code> otherwise.
<DT><B>Throws:</B>
<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>
          method denies write access to the file</DL>
</DD>
</DL>
<HR>

<A NAME="exists(org.itr_rescue.dataGuard.localFileSystem.JFMFile)"><!-- --></A><H3>
exists</H3>
<PRE>
public boolean <B>exists</B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file)</PRE>
<DL>
<DD>Tests whether the file or directory denoted by the abstract pathname
 exists.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname
<DT><B>Returns:</B><DD><code>true</code> if and only if the file or directory denoted
          by this abstract pathname exists; <code>false</code> otherwise
<DT><B>Throws:</B>
<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>
          method denies read access to the file or directory</DL>
</DD>
</DL>
<HR>

<A NAME="getRootDriveFile(org.itr_rescue.dataGuard.localFileSystem.JFMFile)"><!-- --></A><H3>
getRootDriveFile</H3>
<PRE>
public <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A> <B>getRootDriveFile</B>(<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A>&nbsp;file)</PRE>
<DL>
<DD>This method returns the root directory of the filesystem of witch the supplied file belongs to.
 For example:<br>
       <p> If the active filesystem is the local filesystem and is an Windows filesystem, this
 method should return the drive letter of the drive that this file belongs to. On Unix filesystems it will always return
 '/'. On other filesystems .... it will return whatever the one that imlements it wants to.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>file</CODE> - JFMFile the file  whoses root we want to find out.
<DT><B>Returns:</B><DD>JFMFile the root drive (it cannot be null). It can be the same file that was passed as an argument.</DL>
</DD>
</DL>
<HR>

<A NAME="getStartDirectory()"><!-- --></A><H3>
getStartDirectory</H3>
<PRE>
public abstract <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A> <B>getStartDirectory</B>()</PRE>
<DL>
<DD>This method returns the start directory for this filesystem
<P>
<DD><DL>

<DT><B>Returns:</B><DD>JFMFile the start directory (for example, on the local filesystem it will be the user directory)</DL>
</DD>
</DL>
<HR>

<A NAME="getFile(java.lang.String)"><!-- --></A><H3>
getFile</H3>
<PRE>
public abstract <A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem">JFMFile</A> <B>getFile</B>(java.lang.String&nbsp;pathName)</PRE>
<DL>
<DD>This method returns an JFMFile object based on the pathname provided
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pathName</CODE> - String
<DT><B>Returns:</B><DD>JFMFile</DL>
</DD>
</DL>
<HR>

<A NAME="isLocal()"><!-- --></A><H3>
isLocal</H3>
<PRE>
public boolean <B>isLocal</B>()</PRE>
<DL>
<DD>Tells us if the filesystem is local. This information may be used for some optimizations in some cases
<P>
<DD><DL>

<DT><B>Returns:</B><DD>true is the filesystem is a local filesystem (hard-disk) false otherwise (a network one)</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/JFMFileSystem.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html" title="class in org.itr_rescue.dataGuard.localFileSystem"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="JFMFileSystem.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
