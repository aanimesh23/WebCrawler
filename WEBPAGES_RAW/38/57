<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1" />
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay" />
<META HTTP-EQUIV="UPDATED" CONTENT="Thursday, November 10, 2005 3:43 AM" />
<TITLE>Lab Assignment 7</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="D22A250A" />
<META HTTP-EQUIV=KEYWORDS CONTENT="CS 1, CS1, assignment, Scheme" />
<META HTTP-EQUIV="DESCRIPTION" CONTENT="An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al." />
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved." />
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<P><font size="2" face="Garamond">ICS H21 &bull; UC IRVINE &bull; DAVID G. KAY &bull; FALL 2009</font></P>
<P><FONT FACE="Garamond" SIZE=6><B>Lab Assignment 7 </B></FONT></P>
<P><BR />
  <FONT FACE="Garamond" SIZE=4>This assignment is due at the end of lab on Friday, November 13. This lab is a little shorter than usual since Wednesday is a holiday.</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4>Choose a partner for this assignment, someone
you haven&#39;t worked with already.</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4><B>(a)</B> Do exercises 29.3.6 and 29.3.7.
 Then choose two of 29.3.8, 29.3.9, and 29.3.10.  When these exercises ask
for the abstract running time, they mean the O-notation of the algorithm.
 When they ask you which representation is preferable, consider also binary
search trees.  When they ask why one representation is better than another,
you just need to give a sentence or so comparing the performance of the
alternatives.  Just put those answers in a comment in your definitions file.</FONT> <FONT FACE="Garamond"> [Some printed versions of
the text may number some of these exercises as 29.4.x; if in doubt, refer
to the on-line version.]</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4>Do exercises 30.1.1, 30.1.2, 30.2.1, and 30.2.2.
 Then do exercises 31.3.3 and 31.3.4.</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4>Choose one of the three sections in Chapter
32 and do all the exercises in that section.  (If you choose 32.1, be aware that
the </FONT><FONT FACE="Courier New, Courier, monospace">gensym</FONT><FONT FACE="Garamond" SIZE=4> function referred to in exercise 32.1.3
requires a different language level: "Pretty Big," which is part of a set of
language levels called "PLT."  "Pretty Big" combines the "Advanced Student"
version of Scheme with some aspects of the more professional versions of Scheme
supported by DrScheme.)</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4>Collect these definitions and submit them
as usual via Checkmate.</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4><B>(b)</B> At </FONT><FONT FACE="Courier New"><A HREF="http://www.ics.uci.edu/~kay/scheme/restaurants4.scm">http://www.ics.uci.edu/~kay/scheme/restaurants4.scm</A></FONT><FONT FACE="Garamond" SIZE=4>
you will find a version of the restaurants program that implements menus
and also reading and writing restaurant collections from a file.  Make sure
your language level is set to Intermediate Student with Lambda; you&#39;ll also
need to download and install a new teachpack, <A HREF="http://www.ics.uci.edu/~kay/scheme/simple-file-io.ss">simple-file-io.ss</A>.</FONT> <FONT FACE="Garamond" SIZE=4> (Remember to right- or control-click on the link and download the file, saving it in the same folder that contains your code.) </FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4>Download this program and run it, creating
restaurants and saving them when you quit.  Run it again, starting with
the saved file.  (You can restart the program in the same interactions window
in DrScheme with another call to </FONT><FONT FACE="Courier New">(restaurants
&#39;x)</FONT><FONT FACE="Garamond" SIZE=4>.)  Take a little time to look
over the code, most of which should be familiar.  If your DrScheme window
doesn&#39;t show the high-level program profile in a column at the right,
select Show Program Contour from the View menu.  You&#39;ll see large section
headings in that view (which you can create with Insert Large Letters from
the Special menu).</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4><B>(b.1)</B>  Modify this program by adding
the search-by-cuisine and search-by-menu-word menu commands you wrote in
Lab Assignment 5.  (You may use either partner&#39;s code from
that assignment, or you may reimplement it from scratch.)</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4><B>(b.2)</B>  Add a menu command to add new
dishes to a restaurant currently in the collection.  It should prompt for
the restaurant&#39;s name, print a message if that name isn&#39;t found,
and otherwise prompt the user for additional dishes to add to the named
restaurant&#39;s menu.  Once you&#39;ve done this, refine the dish-adding
process as follows:  If a dish being added has the same name as a dish already
on that menu, then just replace the old price with the new price.  This
should happen when you&#39;re initially adding dishes as well as when you&#39;re
adding new dishes later; use the same code.  This also means (automatically)
that no menu will have two dishes with the same name.</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4><B>(b.3)</B>  Add a menu command to import
another restaurant collection from another file, adding all the restaurants
in that file to the main collection.  Re-use the file-reading code where
possible.  After you&#39;ve done the basic task of adding all the imported
restaurants to the collection, go back and implement this refinement:  If
a restaurant you&#39;re adding has the same name and phone number as a restaurant
that&#39;s already in the collection, then just add the new restaurant&#39;s
dishes to the existing record for that restaurant.  (Add uniquely, of
course, as in the previous part.) Do this same adding of restaurants that are unique by name-plus-phone for restaurants that the user adds manually.</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4>You&#39;ll note that with interactive interfaces,
even text-based ones, handling testing isn&#39;t as easy as it is when we&#39;re
just using the interpreter.  Now that we have files, so we can save restaurant
set-ups, it&#39;s a little easier again.  But of course this doesn&#39;t
mean that testing is no longer important.  It&#39;s just another illustration
that interactivity adds an extra layer of complexity and that it&#39;s important
to build and test our model (the underlying restaurant, menu, dish, and
collection classes in this case) independently of the view and controller
(the interface).</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4>You&#39;ll also note as you&#39;re doing this
that you need to work with file-handling functions that are unfamiliar.
 You have a description of the functions (and more detail is available in
the DrScheme Help Desk, although looking there isn&#39;t necessary and if
you do look, you have to change the language for the help desk window to
&quot;Pretty Big&quot; under PLT instead of Intermediate Student); you also
have some working code to use as an example.  This is all you&#39;ll get
(aside from a little assistance from your instructional staff, but you wouldn&#39;t
have that in the real world); the thing is, it's <em>more</em> than you'd get in a similar situation in the real world, so learning how to make practical use of the information you do have is an important skill.  One of the nice things about the Scheme we&#39;ve
done so far is that we could understand everything &quot;down to the ground,&quot;
evaluating everything in terms of the basic rules of substituting values
for expressions over and over.  But as we learn how to handle other interfaces
(as we did with the graphics earlier, as we&#39;re doing here with external
files, and as we could do with many other kinds of interfaces), we don&#39;t get to look
under the hood.  We have to use the API (the application programming interface&mdash;the
behavior, the contract and purpose of the functions, not their definitions),
fitting the functions we&#39;re given together like pieces of a jigsaw puzzle
to get the result we need.  Sometimes this involves taking code that we
know works for a similar task, duplicating it, and modifying the copy to
fit the new circumstances (and then perhaps abstracting and refactoring
the new code with the original, if they&#39;re in the same program).  Becoming
comfortable working with APIs is a crucial skill, since software is rarely
built today without using some pre-existing library.</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4>Turn in your modified program via Checkmate.</FONT></P>


<!--
<P>
<FONT FACE="Garamond" SIZE=4><B>(c)</B>  At </FONT><FONT FACE="Courier New"><A HREF="http://www.ics.uci.edu/~kay/scheme/restaurants5.scm">http://www.ics.uci.edu/~kay/scheme/restaurants5.scm</A></FONT><FONT FACE="Garamond" SIZE=4>
is a version of the restaurants program that has a web interface.  Download
it and run it; this program needs the Advanced Student level and the </FONT><FONT FACE="Courier New">servlet.ss</FONT><FONT FACE="Garamond" SIZE=4>
teachpack from DrScheme (as documented in the comment at the top of the
program).  Then take some time to look over the code to get an idea of how
it&#39;s organized.  The restaurant and collection code should be completely
familiar; the main-menu-handling code should have some familiar aspects;
the form-handling code should be completely foreign.  That&#39;s okay for
now.</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4><B>(c.1)</B>  Modify this program to read
and write restaurant collections from a file.  To make it easier, read and
write from a file named </FONT><FONT FACE="Courier New">Restaurants.txt</FONT><FONT FACE="Garamond" SIZE=4>.
 Rather than asking the user whether to start from an empty file or an existing
one, just use </FONT><FONT FACE="Courier New">(file-exists? &quot;Restaurants.txt&quot;)</FONT><FONT FACE="Garamond" SIZE=4>
to see whether it&#39;s already there.  Note that for this to work simply,
the file containing your Scheme definitions and your Restaurants.txt file
must both be in the same folder.  Note too that in Advanced Student Scheme,
you need to use the <A HREF="http://www.ics.uci.edu/~kay/scheme/advanced-file-io.ss">advanced-file-io.ss</A>
teachpack instead of simple-file-io.ss.</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4><B>(c.2)</B>  Add the ability to search for
a restaurant by cuisine.  This will require following the copy-and-modify
methodology described above; look for the code that handles searching by
name, then copy and adapt it to handle searching by cuisine.  Here is a
brief catalog of the main steps:  Define another button name constant for
searching by cuisine; copy and modify the search-by-name code in </FONT><FONT FACE="Courier New">handle-main-menu</FONT><FONT FACE="Garamond" SIZE=4>;
copy and modify the search-by-name lines in </FONT><FONT FACE="Courier New">make-main-menu-form</FONT><FONT FACE="Garamond" SIZE=4>;
create a </FONT><FONT FACE="Courier New">collection-search-by-cuisine</FONT><FONT FACE="Garamond" SIZE=4>
function, or better yet update the collection code to use high-order functions.</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4>Turn your modified program in via Checkmate.</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4>The point of these web-based exercises is
to give you some real-world context for your programs and to illustrate
that the underlying model--the definitions and operations on restaurants
and collections--are independent of the user interface.  Our main goal is
not to train you as web programmers; we&#39;re not going to ask questions
on the tests about the APIs for web interaction.  For some extra credit,
though, go ahead and (i) put high-order functions into this version of the
collection class, (ii) implement menus, including allowing the user to add
dishes and also to remove them, (iii) allow the user to specify what file
to read from and write to, using </FONT><FONT FACE="Courier New">get-file</FONT><FONT FACE="Garamond" SIZE=4>
and </FONT><FONT FACE="Courier New">put-file</FONT><FONT FACE="Garamond" SIZE=4>
as in the previous program, (iv) implement searching dishes for a word,
as in last week&#39;s homework. </FONT></P>
-->
<FONT FACE="Garamond" size=4"><B>(c)</B>  This week is an excellent time to shore up
your understanding of material from previous weeks that you're still not sure about.
Before we delve into what follows, take some time to fill in or reinforce your knowledge
from past weeks by reworking any problems from previous homeworks or labs that you or
your partner struggled with or never finished.</FONT>
<P>
  <FONT FACE="Garamond" size=4">The goal here, as in any lab assignment, is to do this work in pairs, and to ensure
    that both partners are clear on how you arrived at a new solution.  It's best to pick
    a few problems that each of you struggled with, so that both partners benefit from the
    time spent, but if one partner feels more confident, it's preferable for that partner
    to help raise the other one's confidence.  Remember, again, that you'll be each other's
classmates for the next four years, so each of you benefits from other students' strengths.</FONT></P>
<P>
<FONT FACE="Garamond" size=4">Collect your definitions into one or more .scm files.  You may find it necessary to
spread the definitions into multiple .scm files, since different homeworks required
different language levels and/or different teachpacks.  Include a comment at the top of
each file, indicating which language and which teachpacks (if any) are required to execute
the code within.  There are no explicit requirements about how many problems to submit,
but you can expect that we'll take your diligence into account  if you redo many problems that you had trouble with, and if you help your partner
to do the same.</FONT></P>
<P>
<FONT FACE="Garamond" size=4">Submit your reworked definitions to Checkmate.</FONT></P>

<P>
<FONT FACE="Garamond" SIZE=4><B>(d)</B>  For extra credit, do exercises
25.2.1 through 25.2.6.  You&#39;ll see this material again in ICS H23.</FONT></P>
<P> <FONT FACE="Garamond" SIZE=4>For more extra credit, do exercises 27.1.1,
  27.1.2, 27.1.4, and/or 27.1.5.  The code in the book uses the <CODE>draw.ss</CODE> teachpack, but you'll want to use <CODE>image.ss</CODE> (which we used earlier this
  quarter) instead.</FONT></P>
<P> <FONT FACE="Garamond" SIZE=4>For still more extra credit, enhance the restaurant
  program in some more interesting ways.</FONT></P>
<P><FONT FACE="Garamond" SIZE=4>For extra credit, do exercises
  29.3.14 and 29.3.15.  Also try 31.3.6, 31.3.7, and 31.3.8.</FONT></P>
<P>
<FONT FACE="Garamond" SIZE=4><B>(e)</B>  Remember that each partner must
complete a partner evaluation form via the Survey Tool on eee.uci.edu.</FONT></P>
<BR />
<P>
<FONT FACE="Helvetica" SIZE=1>Based in part on ICS H21assignments by David
G. Kay from Fall 2001; modified by David G. Kay, Fall 2004, Fall 2005, Fall 2008, Fall 2009.</FONT></P>
<HR />
<FONT FACE="Garamond"><A HREF="http://www.ics.uci.edu/~kay/">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />
<font size="2" face="Garamond">
<!-- #BeginDate format:fcAm1a -->Friday, November 13, 2009 8:50 PM<!-- #EndDate -->
</font></span></BODY>
</HTML>