<HTML>
<!-- $Id$ -->
<HEAD>
<TITLE> Type Evolution Software System</TITLE>
<META http-equiv="Owner" content="Arcadia">
<META http-equiv="Reply-To" content="arcadia-www@ics.uci.edu">
<LINK rev="made" href="mailto:arcadia-www@ics.uci.edu">
</HEAD><BODY>
<H1><IMG src="http://www.ics.uci.edu/~arcadia/Icons/arcadia-logo.gif" alt="" align=middle>
<A NAME="SECTION0008700000000000000"> Type Evolution Software System</A></H1>
<HR>
<P>
<OL><LI> <i>Name:</i><BR>
TESS (Type Evolution Software System)
<P>
<LI> <i>Source:</i><BR>
University of Massachusetts Arcadia Project
<P>
<LI> <i>Brief description:</i><BR>
TESS supports the evolution of persistent types by
	semi-automatically generating a transformer that can translate
	between two versions of a set of types.  More specifically,
	the input to TESS is two source files representing two
	versions of a set of type definitions.  TESS compares these
	files and produces a transformer describing how to translate
	instances of the old versions of the types into the new
	versions of the types.  Ultimately, the user will be able to
	edit these descriptions if they are incorrect, but this is not
	yet implemented.  Also, a runtime environment to interpret
	these descriptions and actually update the instances (either
	permanently via converting the instances or virtually via
	screening the instances) is planned, but does not yet exist.
<P>
<LI> <i>Evaluation against applicable general dimensions:</i>
<P>
<OL><LI> <i>Availability: commercial/licensed/public domain</i>  <BR>
Not currently available to the public.
<P>
<LI> <i>Cost:</i><BR>
N/A
<P>
<LI> <i>Degree of support/maturity/testing/usage:</i> <BR>
N/A
<P>
<LI> <i>Speed:</i><BR>
In the worst case, the type comparison algorithm is
	NP-complete.  However, there are several features of the
	system that make type comparison feasible.  First, there are a
	several heuristics to reduce the number of types that must
	be compared.  For example, types with the same names are
	compared first.  Given the nature of type changes in evolving
	systems, this will typically offer good results and make it
	unnecessary to compare these types to other types.  Other
	heuristics are also used to limit the number of comparisons.
	Furthermore, the user has the ability to limit the kinds of
	comparisons that are done to prevent an exhaustive search
	comparison of the types, and also can focus the system on the
	comparison of a pair of old and new types rather than entire
	sets of types if necessary.
<P>
<LI> <i>Computing platforms:</i><BR>
SunAda 1.1 for Sun/SPARC
	C
	X windows
	Pleiades
	RepoManGen
	BMS
	SUIT 2.3  (The Simple User Interface Toolkit from the
		   University of Virginia)
<P>
<LI> <i>Language compatibilities:</i><BR>
TESS is currently able to accept input written either in
	Pleiades.
<P>
<LI> <i>Footprint:</i>
	<OL><LI> <i>Kernel:</i>                     23381 SLOC
	    <LI> <i>Pleiades front-end:</i>           529 SLOC
	    <LI> <i>User interface (C code):</i>     1808 SLOC
	    <LI> <i>Total for Pleiades version:</i> 25718 SLOC
	</OL>
<P>
<LI> <i>Openness/integrability/source availability:</i><BR>
The license includes source.  Integration is restricted to
	non-commercial use.
<P>
<LI> <i>Extensibility:</i><BR>
The kernel type comparison algorithms use a language
	independent type model.  A new version of Tess can be created
	to compare types in a different language by creating a new
	front-end for that language and a back-end capable of reading
	and writing persistent objects of that language.
<P>
<LI> <i>Pedigree: ARPA developed? </i><BR>
N/A
</OL>
<P>
<LI> <i>Contact person(s)</i>
<blockquote> arcadia-software@cs.umass.edu<BR>
<BR>
or<BR>
<BR>
Dr. Lori A. Clarke (clarke@cs.umass.edu) <BR>
Department of Computer Science<BR>
University of Massachusetts<BR>
Amherst, MA 01003<BR>
(413) 545-1328       <BR>
(413) 545-1249 - fax  
</blockquote>
<P>
<LI> <i>Pointers to literature, demos, etc.:</i>
<UL><LI>	David Garlan, Charles W. Krueger, Barbara Staudt Lerner.
	TransformGen:  Automating the Maintenance of
	Structure-Oriented Environments. ACM Transactions on
	Programming Languages and Systems, To appear.
<P>
<LI>	Adrian Koren, Identifying Type Changes in a Collection of
	Evolving Types. Masters project report, Computer Science
	Department, University of Massachusetts, Amherst, May 1992
<P>
<LI> 	Barbara Staudt Lerner. Extending the Notion of Type
	Conformance to Interfaces and Type Systems. OOPSLA '93
	Workshop on Supporting the Evolution of Class Definitions,
	September 1993, Washington, DC.
<P>
<LI>   Demonstration available upon request.
</UL>
</OL>
<P>
<HR>
<P>
<ADDRESS>
<A HREF="http://www.ics.uci.edu/Arcadia/">The Arcadia Project
&lt;arcadia-www@ics.uci.edu&gt;</A><BR>
Last modified: Wed Nov 30 14:44:52 1994
</ADDRESS>
</BODY></HTML>
