<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- Page automatically generated from latex_to_html converter. -->
<!-- by cc_extract_html, $Revision: 3.19 $ -->
<!-- LaTeX source file: './Convex_hull_d_ref/Delaunay_d.tex' -->
<html> <head>  
<title>Delaunay_d&lt; R, Lifted_R &gt;</title>
</head>  
<link href="../latex_to_html.css" rel="STYLESHEET">
<body bgcolor="white">
<!-- ------------------------------------------------------------------- -->


<!-- Top Navigation ---------------------------------------------------- -->
<div class="NavTop">
<hr>
  <strong>Navigation:</strong>
<a href="Chapter_intro.html">Up</a>, 
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<hr><!-- End of Top Navigation ----------------------------------------- -->
</div>


<A NAME="Cross_link_anchor_650"></A>

<A NAME="Cross_link_anchor_651"></A>

      
     
     
     
<A NAME="Index_anchor_591"></A> 

   
<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC="cc_Class.gif"></TD></TR></TABLE>


    <A NAME="ccRef_CGAL::Delaunay_d< R, Lifted_R >"></A>
<h2><I>CGAL::Delaunay_d&lt; R, Lifted_R &gt;</I></h2>


 
     
<A NAME="Index_anchor_592"></A>
<P>

<H3>Definition</H3>
<P>

An instance <I>DT</I> of type <I><A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt;</I> is the
nearest and furthest site Delaunay triangulation of a set <I>S</I> of
points in some <MATH><I>d</I></MATH>-dimensional space. We call <I>S</I> the underlying
point set and <MATH><I>d</I></MATH> or <I>dim</I> the dimension of the underlying space.
We use <I>dcur</I> to denote the affine dimension of <I>S</I>.  The data
type supports incremental construction of Delaunay triangulations and
various kind of query operations (in particular, nearest and furthest
neighbor queries and range queries with spheres and simplices).
<P>

A Delaunay triangulation is a simplicial complex. All simplices in
the Delaunay triangulation have dimension <I>dcur</I>.  In the nearest
site Delaunay triangulation the circumsphere of any simplex in the
triangulation contains no point of <MATH><I>S</I></MATH> in its interior. In the
furthest site Delaunay triangulation the circumsphere of any simplex
contains no point of <MATH><I>S</I></MATH> in its exterior. If the points in <MATH><I>S</I></MATH> are
co-circular then any triangulation of <MATH><I>S</I></MATH> is a nearest as well as a
furthest site Delaunay triangulation of <MATH><I>S</I></MATH>. If the points in <MATH><I>S</I></MATH> are
not co-circular then no simplex can be a simplex of both
triangulations. Accordingly, we view <I>DT</I> as either one or two
collection(s) of simplices. If the points in <MATH><I>S</I></MATH> are co-circular there
is just one collection: the set of simplices of some triangulation.
If the points in <MATH><I>S</I></MATH> are not co-circular there are two
collections. One collection consists of the simplices of a nearest
site Delaunay triangulation and the other collection consists of the
simplices of a furthest site Delaunay triangulation.
<P>

For each simplex of maximal dimension there is a handle of type
<I>Simplex_handle</I> and for each vertex of the triangulation there is
a handle of type <I>Vertex_handle</I>. Each simplex has <I>1 + dcur</I>
vertices indexed from <MATH><I>0</I></MATH> to <I>dcur</I>.  For any simplex <MATH><I>s</I></MATH> and any
index <MATH><I>i</I></MATH>, <I>DT.vertex_of(s,i)</I> returns the <MATH><I>i</I></MATH>-th vertex of
<MATH><I>s</I></MATH>. There may or may not be a simplex <MATH><I>t</I></MATH> <A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A> to the vertex of
<MATH><I>s</I></MATH> with index <MATH><I>i</I></MATH>.  The function <I>DT.opposite_simplex(s,i)</I>
returns <MATH><I>t</I></MATH> if it exists and returns <I>Simplex_handle()</I>
otherwise. If <MATH><I>t</I></MATH> exists then <MATH><I>s</I></MATH> and <MATH><I>t</I></MATH> share <I>dcur</I> vertices,
namely all but the vertex with index <MATH><I>i</I></MATH> of <MATH><I>s</I></MATH> and the vertex with
index <I>DT.index_of_vertex_in_opposite_simplex(s,i)</I> of <MATH><I>t</I></MATH>.
Assume that <MATH><I>t = <I>DT.opposite_simplex(s,i)</I></I></MATH> exists and let <MATH><I>j =
<I>DT.index_of_vertex_in_opposite_simplex(s,i)</I></I></MATH>. Then <I>s = DT.opposite_simplex(t,j)</I> and <I>i = DT.index_of_vertex_in_opposite_simplex(t,j)</I>.  In general, a vertex
belongs to many simplices.
<P>

Any simplex of <I>DT</I> belongs either to the nearest or to the
furthest site Delaunay triangulation or both. The test
<I>DT.simplex_of_nearest(dt_simplex s)</I> returns true if <I>s</I>
belongs to the nearest site triangulation and the test
<I>DT.simplex_of_furthest(dt_simplex s)</I> returns true if <I>s</I>
belongs to the furthest site triangulation.
<P>

<H3>Inherits From</H3><I><A HREF="Class_Convex_hull_d.html#Cross_link_anchor_645">Convex_hull_d</A>&lt;Lifted_R&gt;</I>
<P>

<H3>Types</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt;::Simplex_handle
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    handles to the simplices of the complex.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt;::Vertex_handle
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    handles to vertices of the complex.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt;::<A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A>
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    the point type
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt;::<A HREF="../Kernel_d_ref/Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A>
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    the sphere type
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A NAME="Function_Delaunay_voronoi_kind"></A>
<A NAME="Enum_Delaunay_voronoi_kind"></A>
<A HREF="../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum">enum</A> <A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">Delaunay_voronoi_kind</A> { <A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">NEAREST</A><A NAME="Function_Delaunay_voronoi_kind"></A>
, <A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">FURTHEST</A><A NAME="Function_Delaunay_voronoi_kind"></A>
};
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    interface flags
<P>

</TD></TR>
        </TABLE>
<P>

To use these types you can typedef them into the global
scope after instantiation of the class. We use <I>Vertex_handle</I> instead
of <I><A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt;::Vertex_handle</I> from now on. Similarly we use
<I>Simplex_handle</I>.
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt;::Point_const_iterator
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    the iterator for points.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt;::Vertex_iterator
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    the iterator for vertices.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt;::Simplex_iterator
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    the iterator for simplices.
<P>

</TD></TR>
        </TABLE>
<P>

<H3>Creation</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt; DT ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    int d,<BR>

R k1 = R(),<BR>

Lifted_R k2 = Lifted_R());</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    creates an instance <I>DT</I> of type <I><A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A></I>. The
dimension of the underlying space is <MATH><I>d</I></MATH> and <I>S</I> is initialized to the
empty point set. The traits class <I>R</I> specifies the models of
all types and the implementations of all geometric primitives used by
the Delaunay class. The traits class <I>Lifted_R</I> specifies the models of
all types and the implementations of all geometric primitives used by
the base class of <I><A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt;</I>. The second template parameter defaults to
the first: <I><A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt;R&gt; = <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt;R, Lifted_R = R &gt;</I>.
<P>

</TD></TR>
        </TABLE>
<P>

The data type <I><A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A></I> offers neither copy constructor nor
assignment operator.
<P>

<H3>Requirements</H3>
<P>

<I>R</I> is a model of the concept <I><A HREF="Concept_DelaunayTraits_d.html#Cross_link_anchor_649">DelaunayTraits_d</A></I>
  
<A NAME="Index_anchor_593"></A> 
.                    
<I>Lifted_R</I> is a model of the concept <I><A HREF="Concept_DelaunayLiftedTraits_d.html#Cross_link_anchor_648">DelaunayLiftedTraits_d</A></I>
  
<A NAME="Index_anchor_594"></A> 
.
<P>

<H3>Operations</H3>
<P>

All operations below that take a point <I>x</I> as an argument
have the common precondition that <MATH><I><I>x.dimension()</I> = <I>DT.dimension()</I></I></MATH>.
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_int_dimension69_;"></A>
int
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    DT.dimension ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the dimension of ambient space
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_int_current_dimension69_;"></A>
int
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.current_dimension ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the affine dimension of the current point set, i.e.,
<MATH><I>-1</I></MATH> is <MATH><I>S</I></MATH> is empty, <MATH><I>0</I></MATH> if <MATH><I>S</I></MATH> consists of a single point,
<MATH><I>1</I></MATH> if all points of <MATH><I>S</I></MATH> lie on a common line, etcetera.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_simplex_of_nearest6Simplex_handle_s9_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.is_simplex_of_nearest ( Simplex_handle s)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns true if <I>s</I> is a simplex of the nearest site 
triangulation.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_simplex_of_furthest6Simplex_handle_s9_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.is_simplex_of_furthest ( Simplex_handle s)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns true if <I>s</I> is a simplex of the furthest site 
triangulation.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Vertex_handle_vertex_of_simplex6Simplex_handle_s+_int_i9_;"></A>
Vertex_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.vertex_of_simplex ( Simplex_handle s,  int i)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the vertex associated with the <MATH><I>i</I></MATH>-th node of <MATH><I>s</I></MATH>.<BR>

<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> <I>dcur</I></I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_d_associated_point6Vertex_handle_v9_;"></A>
<A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.associated_point ( Vertex_handle v)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the point associated with vertex <MATH><I>v</I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_d_point_of_simplex6Simplex_handle_s+int_i9_;"></A>
<A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.point_of_simplex ( Simplex_handle s, int i)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the point associated with the <MATH><I>i</I></MATH>-th vertex of <MATH><I>s</I></MATH>.<BR>

<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> <I>dcur</I></I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Simplex_handle_opposite_simplex6Simplex_handle_s+_int_i9_;"></A>
Simplex_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.opposite_simplex ( Simplex_handle s,  int i)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the simplex <A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A> to the <MATH><I>i</I></MATH>-th vertex of <MATH><I>s</I></MATH>
(<I>Simplex_handle()</I> if there is no such simplex).<BR>

<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> <I>dcur</I></I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_int_index_of_vertex_in_opposite_simplex6Simplex_handle_s+int_i9_;"></A>
int
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    DT.index_of_vertex_in_opposite_simplex ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    Simplex_handle s,<BR>

int i)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the index of the vertex <A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A> to the <MATH><I>i</I></MATH>-th vertex 
of <MATH><I>s</I></MATH>.<BR>

<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> <I>dcur</I></I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Simplex_handle_simplex6Vertex_handle_v9_;"></A>
Simplex_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.simplex ( Vertex_handle v)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a simplex of the nearest site triangulation incident 
to <MATH><I>v</I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_int_index6Vertex_handle_v9_;"></A>
int
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.index ( Vertex_handle v)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the index of <MATH><I>v</I></MATH> in <I>DT.simplex(v)</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_contains6Simplex_handle_s+_const_Point_d__x9_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.contains ( Simplex_handle s,  <A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A> x)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns true if <I>x</I> is contained in the closure of simplex <I>s</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_empty69_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    DT.empty ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    decides whether <I>DT</I> is empty.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_clear69_;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    DT.clear ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    reinitializes <I>DT</I> to the empty Delaunay triangulation.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Vertex_handle_insert6const_Point_d__x9_;"></A>
Vertex_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.insert (  <A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A> x)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    inserts point <MATH><I>x</I></MATH> into <I>DT</I> and returns the corresponding
<I>Vertex_handle</I>.  More precisely, if there is already a vertex <I>v</I> in
<I>DT</I> positioned at <MATH><I>x</I></MATH> (i.e., <I>associated_point(v)</I> is equal to
<I>x</I>) then <I>associated_point(v)</I> is changed to <I>x</I> (i.e.,
<I>associated_point(v)</I> is made identical to <I>x</I>) and if there is no
such vertex then a new vertex <MATH><I>v</I></MATH> with <I>associated_point(v) = x</I> is
added to <I>DT</I>.  In either case, <MATH><I>v</I></MATH> is returned.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Simplex_handle_locate6const_Point_d__x9_;"></A>
Simplex_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.locate (  <A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A> x)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a simplex of the nearest site triangulation
containing <I>x</I> in its closure (returns <I>Simplex_handle()</I> if <I>x</I> lies 
outside the convex hull of <MATH><I>S</I></MATH>).
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Vertex_handle_lookup6const_Point_d__x9_;"></A>
Vertex_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.lookup (  <A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A> x)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    if <I>DT</I> contains a vertex <MATH><I>v</I></MATH> with <I>associated_point(v) = x</I> 
the result is <MATH><I>v</I></MATH> otherwise the result is <I>Vertex_handle()</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Vertex_handle_nearest_neighbor6const_Point_d__x9_;"></A>
Vertex_handle
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.<A HREF="../Point_set_2_ref/Function_nearest_neighbor.html#Cross_link_anchor_1221">nearest_neighbor</A> (  <A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A> x)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    computes a vertex <MATH><I>v</I></MATH> of <I>DT</I> that is closest to <MATH><I>x</I></MATH>,
i.e.,<BR>

<MATH><I><I>dist(x,associated_point(v))</I> = </I></MATH><A HREF="../NumberTypeSupport_ref/Function_min.html#Cross_link_anchor_1394">min</A><MATH><I>{ 
<I>dist(x, associated_point(u))</I>  <IMG BORDER=0 WIDTH=2 HEIGHT=29 ALIGN=MIDDLE SRC="cc_mid.gif"> u  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC="cc_in.gif"> S }</I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_std::list6Vertex_handle9_range_search6const_Sphere_d__C9_;"></A>
std::list&lt;Vertex_handle&gt;
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.<A HREF="../Point_set_2_ref/Function_range_search.html#Cross_link_anchor_1225">range_search</A> (  <A HREF="../Kernel_d_ref/Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A> C)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the list of all vertices contained in the closure of 
sphere <MATH><I>C</I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_std::list6Vertex_handle9_range_search6const_std::vector6Point_d9__A9_;"></A>
std::list&lt;Vertex_handle&gt;
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.<A HREF="../Point_set_2_ref/Function_range_search.html#Cross_link_anchor_1225">range_search</A> (  std::vector&lt;<A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&gt; A)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the list of all vertices contained in the closure of
the simplex whose corners are given by <I>A</I>.<BR>

<EM>Precondition: </EM><I>A</I> must consist of <MATH><I>d+1</I></MATH> affinely independent points
in base space.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_std::list6Simplex_handle9_all_simplices6Delaunay_voronoi_kind_k_=_NEAREST9_;"></A>
std::list&lt;Simplex_handle&gt;
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.all_simplices ( <A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">Delaunay_voronoi_kind</A> k = <A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">NEAREST</A>)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a list of all simplices of either the nearest or the
        furthest site Delaunay triangulation of <I>S</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_std::list6Vertex_handle9_all_vertices6Delaunay_voronoi_kind_k_=_NEAREST9_;"></A>
std::list&lt;Vertex_handle&gt;
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.all_vertices ( <A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">Delaunay_voronoi_kind</A> k = <A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">NEAREST</A>)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a list of all vertices of either the nearest or the
furthest site Delaunay triangulation of <I>S</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_std::list6Point_d9_all_points69_;"></A>
std::list&lt;<A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A>&gt;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    DT.all_points ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <MATH><I>S</I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_Point_const_iterator_points_begin69_;"></A>
Point_const_iterator
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    DT.points_begin ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the start iterator for points in <I>DT</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_Point_const_iterator_points_end69_;"></A>
Point_const_iterator
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    DT.points_end ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the past the end iterator for points in <I>DT</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Simplex_iterator_simplices_begin6Delaunay_voronoi_kind_k_=_NEAREST9_;"></A>
Simplex_iterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.simplices_begin ( <A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">Delaunay_voronoi_kind</A> k = <A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">NEAREST</A>)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the start iterator for simplices of <I>DT</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Simplex_iterator_simplices_end69_;"></A>
Simplex_iterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    DT.simplices_end ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the past the end iterator for simplices of <I>DT</I>.
        </TD></TR>
        </TABLE>
<P>

<H3>Implementation</H3>
<P>

The data type is derived from <I><A HREF="Class_Convex_hull_d.html#Cross_link_anchor_645">Convex_hull_d</A></I> via
the lifting map. For a point <MATH><I>x</I></MATH> in <MATH><I>d</I></MATH>-dimensional space let
<I>lift(x)</I> be its lifting to the unit paraboloid of revolution. There
is an intimate relationship between the Delaunay triangulation of a
point set <MATH><I>S</I></MATH> and the convex hull of <I>lift(S)</I>: The nearest site
Delaunay triangulation is the projection of the lower hull and the
furthest site Delaunay triangulation is the upper hull.  For
implementation details we refer the reader to the implementation
report available from the CGAL server.
<P>

The space requirement is the same as for convex hulls. The time
requirement for an insert is the time to insert the lifted point
into the convex hull of the lifted points.
<P>

<H3>Example</H3>
<P>

The abstract data type <I><A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A></I> has a default instantiation by
means of the <MATH><I>d</I></MATH>-dimensional geometric kernel.
<P>

<pre class="Verbatim">
#include &lt;CGAL/Homogeneous_d.h&gt;
#include &lt;CGAL/<A HREF="../NumberTypeSupport_ref/Class_leda_integer.html#Cross_link_anchor_1388">leda_integer</A>.h&gt;
#include &lt;CGAL/<A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>.h&gt;

typedef <A HREF="../NumberTypeSupport_ref/Class_leda_integer.html#Cross_link_anchor_1388">leda_integer</A> RT;
typedef CGAL::Homogeneous_d&lt;RT&gt; <A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>;
typedef <A HREF="Class_Delaunay_d.html#Cross_link_anchor_650">CGAL::Delaunay_d</A>&lt;<A HREF="../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>;
typedef <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>::<A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A> Point;
typedef <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>::Simplex_handle Simplex_handle;
typedef <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>::Vertex_handle Vertex_handle;

int main()
{
  <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A> T(2);
  Vertex_handle v1 = T.insert(<A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A>(2,11));
  ...
}
</pre>
<P>

<H3>Traits requirements</H3>
<P>

<I><A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt;</I> requires the following types from the kernel traits <I>Lifted_R</I>:
<pre class="Verbatim">
  RT <A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A> <A HREF="../Kernel_d_ref/Class_Vector_d.html#Cross_link_anchor_489">Vector_d</A> <A HREF="../Kernel_d_ref/Class_Ray_d.html#Cross_link_anchor_495">Ray_d</A> <A HREF="../Kernel_d_ref/Class_Hyperplane_d.html#Cross_link_anchor_499">Hyperplane_d</A> 
</pre>
and uses the following function objects from the kernel traits:
<pre class="Verbatim">
  Construct_hyperplane_d
  Construct_vector_d
  Vector_to_point_d / Point_to_vector_d
  Orientation_d
  Orthogonal_vector_d
  Oriented_side_d / Has_on_positive_side_d
  Affinely_independent_d
  Contained_in_simplex_d
  Contained_in_affine_hull_d
  Intersect_d
  Lift_to_paraboloid_d / Project_along_d_axis_d
  Component_accessor_d
</pre>
<I><A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt; R, Lifted_R &gt;</I> requires the following types from the kernel traits <I>R</I>:
<pre class="Verbatim">
  FT <A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A> <A HREF="../Kernel_d_ref/Class_Sphere_d.html#Cross_link_anchor_501">Sphere_d</A> 
</pre>
and uses the following function objects from the kernel traits <I>R</I>:
<pre class="Verbatim">
  Construct_sphere_d
  Squared_distance_d
  Point_of_sphere_d
  Affinely_independent_d
  Contained_in_simplex_d
</pre>
<P>

<H3>Low Dimensional Output Routines</H3>
include <I>&lt;CGAL/IO/Delaunay_d_window_stream.h&gt;</I>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    template &lt;typename R, typename Lifted_R&gt;
        </I></NOBR>
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_template_6typename_R+_typename_Lifted_R9_void_d2_show6const_Delaunay_d6R+Lifted_R9__D+_CGAL::Window_stream__W+_typename_Delaunay_d6R+Lifted_R9::Delaunay_voronoi_kind_k_=_Delaunay_d6R+Lifted_R9::NEAREST9_;"></A>
template &lt;typename R, typename Lifted_R&gt; void
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    d2_show ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt;R,Lifted_R&gt; D,<BR>

<A HREF="../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757">CGAL::Window_stream</A>&amp; W,<BR>

typename <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt;R,Lifted_R&gt;::<A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">Delaunay_voronoi_kind</A> k = <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt;R,Lifted_R&gt;::<A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">NEAREST</A>)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    draws the underlying simplicial complex <I>D</I> into window <I>W</I>.<BR>

<BR>

<EM>Precondition: </EM><I>dim == 2</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    template &lt;typename R, typename Lifted_R&gt;
        </I></NOBR>
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_template_6typename_R+_typename_Lifted_R9_void_d2_map6const_Delaunay_d6R+Lifted_R9__D+_GRAPH6_typename_Delaunay_d6R+Lifted_R9::Point_d+_int_9__DTG+_typename_Delaunay_d6R+Lifted_R9::Delaunay_voronoi_kind_k_=_Delaunay_d6R+Lifted_R9::NEAREST9_;"></A>
template &lt;typename R, typename Lifted_R&gt; void
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    d2_map ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt;R,Lifted_R&gt; D,<BR>

GRAPH&lt; typename <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt;R,Lifted_R&gt;::<A HREF="../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487">Point_d</A>, int &gt;&amp; DTG,<BR>

typename <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt;R,Lifted_R&gt;::<A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">Delaunay_voronoi_kind</A> k = <A HREF="Class_Delaunay_d.html#Cross_link_anchor_651">Delaunay_d</A>&lt;R,Lifted_R&gt;::<A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">NEAREST</A>)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    constructs a LEDA graph representation of the nearest 
(<I>kind = <A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">NEAREST</A></I> or the furthest (<I>kind = <A HREF="Class_Delaunay_d#Enum_Delaunay_voronoi_kind">FURTHEST</A></I>) site
Delaunay triangulation.<BR>

<BR>

<EM>Precondition: </EM><I>dim() == 2</I>.
        </TD></TR>
        </TABLE>
<P>

<!Next_reference_link_8_6_7!>

    
<div class="NavBottom">
<hr><!-- Bottom Navigation --------------------------------------------- -->
  <strong>Navigation:</strong>
<!Up_chapter_link_6!>
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<!-- End of Bottom Navigation ------------------------------------------ -->


<hr><!-- --------------------------------------------------------------- -->
<div class="NavAddress">

The <A HREF=http://www.cgal.org>CGAL Project</A> .

Tue, December 21, 2004 .
<hr></div>
</body>  </html>  
