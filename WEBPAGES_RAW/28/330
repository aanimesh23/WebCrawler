Mac Eclipse/C++ Installation

This is the accumulated wisdom I have about installing on Macs.

----------

  Mostly, I have copied/pasted Daniel Acevedo's Post
  "Guide to Succesfully Install Eclipse on Mac"...
  but I have also added a few other hints from the TA
  who said most students going to Lab today seemed to
  get it running (and most who Daniel helped outside my
  office hours on Wednesday did).

  I don't have a good feeling for those students who got
  the courselib working, whether they got GoogleTest to
  work too.  For Program #1 you don't need GoogleTest working, 
  but you will need  it for all later programs.

----------

ECLIPSE:

This is the setup I found to work best to get Eclipse working perfectly on my
Mac machine. As a note, I am using Mavericks.

The first thing you want to do is download "Eclipse IDE for C/C++ Developers"
(http://www.eclipse.org/downloads/packages/eclipse-ide-cc-developers/keplersr1)
and choose the "Mac OS X(Cocoa 64)" download link on the right-hand side of the
page.

After successfully downloading Eclipse, you must download Xcode
(https://itunes.apple.com/us/app/xcode/id497799835?mt=12). Note that Xcode may
take a while to download onto your computer, especially depending on your
internet speed. NOTE: You MUST have the latest version of Xcode (Xcode 5) in
order for this to properly work.

Now, open up Terminal. Type in (don't copy/paste) "xcode-select --install"
(yet xcode-select followed by the switch --install).

Now, open up Eclipse. Under "Eclipse", open up "Preferences". Under the
"General" tab, click "Workspace". Under "Text file encoding", switch from
Default (MacRoman) to Other, and pick "UTF-8" from the drop-down list. Click
Apply.

Under the "New C/C++ Project Wizard" tab, look at the list under "Project
type:" Under the "Executable" tab, highlight "Empty Project". Now, look to your
right. Under the "Toolchains" list, highlight "MacOSX GCC". Now, underneath
that list, click on the "Make toolchain(s) preferred" button. Click Apply.

You can now test if you have set everything up correctly:

Create a new C++ Project. Call the Project name whatever you'd like. If you
have successfully done the above parts, you can just name it and click "Finish"
at the bottom right.

Highlight the project you just created. Right click it, click "New", and select
"Source File". When the prompt shows up, enter in a Source file name, and click
finish. Copy and paste the following code into the project to check that
everything worked:

#include <iostream>

int main()
{
      std::cout << "Welcome to ICS 46!" << std::endl;
      return 0;
}

You should see "Welcome to ICS 46!" as the output.

NOTE: If you reach an error, make sure you have SAVED your file and BUILD it
before you run it. I cannot emphasize this enough. This will most likely be
your problem if you run into it. You must always follow this process for all
of your files. If this did not fix your error, go back and check the steps
again.


COURSELIB:

Download the courselib zip folder, and unzip it into your workspace folder.
Follow the directions that Professor Pattis posted, as they are virtually the
same. Please note that you must continue using the "MacOSX GCC" toolchain.

HOWEVER, after the step in which you copy and paste the .dll into your test_set
folder, perform the following steps or your program will fail:

1. Highlight the test_set folder, right click and select "Properties"
2. Select the "Run/Debug Settings" tab
3. You should see "test_set" in the list. Highlight it and click "Edit" on the
   right-hand side. 
4. When the window pops up, open the "Environment" tab
5. Click "New" on the right-hand side.
6. In the "Name:" space, enter "DYLD_LIBRARY_PATH"
7. In the "Value:" space, you must enter the path to your Debug folder. For
    example, it should look something like
    "/Users/yourcomputername/Documents/workspace/courselib/Debug"

------------------------------------------------------------------------------

Also for Courselib help...

The TA adds "For people with Mac OS versions older than Mavericks, they need
to use clang++ compiler". This relates to Help with "-std=gnu++11" problems
and also might help with x86_64 problems.

1. If you already have the Mavericks and Xcode 5, skip this post.

2. Else, you could need clang++ instead of g++ to compile and link the program.
2.1 Change your complier:
    Click on the "GCC C++ Compiler" replace the "g++ " in "command" by "clang++"
    Click on the Misc: add "-std=gnu++11 -stdlib=libc++"

2.2 Change your linker:
    Click on the "MacOsX C++ linker" replace the "g++" in "command" by "clang++"
    Click on the Misc: add "-std=gnu++11 -stdlib=libc++" inside the "Linker
      flags"

That should solve the courselib problems. 

Another student recently wrote

  To fix the x86_64 error, instead of taking his unzipped project folder (just
  recently downloaded) and putting it into the workspace. I created a whole new
  project of my own following the test_set instructions and then created a new
  src folder, new src file (called the same name as his src files) and then
  opened his code from project0 in xcode (just by double clicking it), and copy
  and pasted it into my new src file. It compiled and ran his code. 

------------------------------------------------------------------------------

Added for GoogleTest

Follow the regular (quick) instructions...but

When it states:
  In the Builder section, uncheck the "Use default build command".
  In the Builder section, in the Build command: textbox enter mingw32-make
     (replacing make).

You should instead:
   Disregard this section. I.e. Leave "Use default build command" checked, and
   keep "make" in the "Build command:" textbox.

Another student writes:

Be sure to use eclipse kepler 64 bit. It solved my x86_64 problem.

The "DYLD_LIBRARY_PATH" should include the path to the courselib and
  googletestlib. Separate the paths by a COLON
