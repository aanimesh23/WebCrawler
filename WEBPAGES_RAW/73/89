<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  


  <head>
    <title>
      DomParserExample.java on cs122b-2017-winter-project3 – Attachment
     – Public
    </title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/wiki/public/search" />
        <link rel="help" href="/wiki/public/wiki/TracGuide" />
        <link rel="alternate" href="/wiki/public/raw-attachment/wiki/cs122b-2017-winter-project3/DomParserExample.java" type="text/x-java; charset=iso-8859-15" title="Original Format" />
        <link rel="up" href="/wiki/public/wiki/cs122b-2017-winter-project3" title="cs122b-2017-winter-project3" />
        <link rel="start" href="/wiki/public/wiki" />
        <link rel="stylesheet" href="/wiki/public/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/common/css/code.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/tracwysiwyg/wysiwyg.css" type="text/css" />
        <link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/common/css/trac.css" /><link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/tracwysiwyg/editor.css" />
        <link rel="tracwysiwyg.base" href="/wiki/public" />
        <link rel="shortcut icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
        <link rel="icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
    <script type="text/javascript" src="/wiki/public/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/wiki/public/chrome/common/js/babel.js"></script><script type="text/javascript" src="/wiki/public/chrome/common/js/messages/en_US.js"></script><script type="text/javascript" src="/wiki/public/chrome/common/js/trac.js"></script><script type="text/javascript" src="/wiki/public/chrome/common/js/search.js"></script><script type="text/javascript" src="/wiki/public/chrome/tracwysiwyg/wysiwyg.js"></script><script type="text/javascript" src="/wiki/public/chrome/tracwysiwyg/wysiwyg-load.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/wiki/public/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
      <script type="text/javascript" src="/wiki/public/chrome/common/js/folding.js"></script>
      <script type="text/javascript">
        jQuery(document).ready(function($) {
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
        });
      </script>
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="http://www.ics.uci.edu/"><img src="/wiki/public/chrome/site/ics.jpg" alt="ICS Logo" height="67" width="128" /></a>
      </div>
      <form id="search" action="/wiki/public/search" method="get">
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/wiki/public/login">Login</a></li><li><a href="/wiki/public/prefs">Preferences</a></li><li class="last"><a href="/wiki/public/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
              <li class="last first"><a href="/wiki/public/wiki/cs122b-2017-winter-project3">Back to cs122b-2017-winter-project3</a></li>
          </ul>
        <hr />
      </div>
    <div id="content" class="attachment">
        <h1><a href="/wiki/public/wiki/cs122b-2017-winter-project3">cs122b-2017-winter-project3</a>: DomParserExample.java</h1>
        <table id="info" summary="Description">
          <tbody>
            <tr>
              <th scope="col">File DomParserExample.java,
                <span title="4471 bytes">4.4 KB</span>
                (added by cluo8, <a class="timeline" href="/wiki/public/timeline?from=2017-02-09T09%3A04%3A40-08%3A00&amp;precision=second" title="2017-02-09T09:04:40-08:00 in Timeline">2 days</a> ago)</th>
            </tr>
            <tr>
              <td class="message searchable">
                
              </td>
            </tr>
          </tbody>
        </table>
        <div id="preview" class="searchable">
          
  <table class="code"><thead><tr><th class="lineno" title="Line numbers">Line</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td></td></tr><tr><th id="L2"><a href="#L2">2</a></th><td>import java.io.IOException;</td></tr><tr><th id="L3"><a href="#L3">3</a></th><td>import java.util.ArrayList;</td></tr><tr><th id="L4"><a href="#L4">4</a></th><td>import java.util.Iterator;</td></tr><tr><th id="L5"><a href="#L5">5</a></th><td>import java.util.List;</td></tr><tr><th id="L6"><a href="#L6">6</a></th><td></td></tr><tr><th id="L7"><a href="#L7">7</a></th><td>import javax.xml.parsers.DocumentBuilder;</td></tr><tr><th id="L8"><a href="#L8">8</a></th><td>import javax.xml.parsers.DocumentBuilderFactory;</td></tr><tr><th id="L9"><a href="#L9">9</a></th><td>import javax.xml.parsers.ParserConfigurationException;</td></tr><tr><th id="L10"><a href="#L10">10</a></th><td></td></tr><tr><th id="L11"><a href="#L11">11</a></th><td>import org.w3c.dom.Document;</td></tr><tr><th id="L12"><a href="#L12">12</a></th><td>import org.w3c.dom.Element;</td></tr><tr><th id="L13"><a href="#L13">13</a></th><td>import org.w3c.dom.NodeList;</td></tr><tr><th id="L14"><a href="#L14">14</a></th><td>import org.xml.sax.SAXException;</td></tr><tr><th id="L15"><a href="#L15">15</a></th><td></td></tr><tr><th id="L16"><a href="#L16">16</a></th><td>public class DomParserExample {</td></tr><tr><th id="L17"><a href="#L17">17</a></th><td></td></tr><tr><th id="L18"><a href="#L18">18</a></th><td>    List&lt;Employee&gt; myEmpls;</td></tr><tr><th id="L19"><a href="#L19">19</a></th><td>    Document dom;</td></tr><tr><th id="L20"><a href="#L20">20</a></th><td></td></tr><tr><th id="L21"><a href="#L21">21</a></th><td>    public DomParserExample() {</td></tr><tr><th id="L22"><a href="#L22">22</a></th><td>        //create a list to hold the employee objects</td></tr><tr><th id="L23"><a href="#L23">23</a></th><td>        myEmpls = new ArrayList&lt;&gt;();</td></tr><tr><th id="L24"><a href="#L24">24</a></th><td>    }</td></tr><tr><th id="L25"><a href="#L25">25</a></th><td></td></tr><tr><th id="L26"><a href="#L26">26</a></th><td>    public void runExample() {</td></tr><tr><th id="L27"><a href="#L27">27</a></th><td></td></tr><tr><th id="L28"><a href="#L28">28</a></th><td>        //parse the xml file and get the dom object</td></tr><tr><th id="L29"><a href="#L29">29</a></th><td>        parseXmlFile();</td></tr><tr><th id="L30"><a href="#L30">30</a></th><td></td></tr><tr><th id="L31"><a href="#L31">31</a></th><td>        //get each employee element and create a Employee object</td></tr><tr><th id="L32"><a href="#L32">32</a></th><td>        parseDocument();</td></tr><tr><th id="L33"><a href="#L33">33</a></th><td></td></tr><tr><th id="L34"><a href="#L34">34</a></th><td>        //Iterate through the list and print the data</td></tr><tr><th id="L35"><a href="#L35">35</a></th><td>        printData();</td></tr><tr><th id="L36"><a href="#L36">36</a></th><td></td></tr><tr><th id="L37"><a href="#L37">37</a></th><td>    }</td></tr><tr><th id="L38"><a href="#L38">38</a></th><td></td></tr><tr><th id="L39"><a href="#L39">39</a></th><td>    private void parseXmlFile() {</td></tr><tr><th id="L40"><a href="#L40">40</a></th><td>        //get the factory</td></tr><tr><th id="L41"><a href="#L41">41</a></th><td>        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</td></tr><tr><th id="L42"><a href="#L42">42</a></th><td></td></tr><tr><th id="L43"><a href="#L43">43</a></th><td>        try {</td></tr><tr><th id="L44"><a href="#L44">44</a></th><td></td></tr><tr><th id="L45"><a href="#L45">45</a></th><td>            //Using factory get an instance of document builder</td></tr><tr><th id="L46"><a href="#L46">46</a></th><td>            DocumentBuilder db = dbf.newDocumentBuilder();</td></tr><tr><th id="L47"><a href="#L47">47</a></th><td></td></tr><tr><th id="L48"><a href="#L48">48</a></th><td>            //parse using builder to get DOM representation of the XML file</td></tr><tr><th id="L49"><a href="#L49">49</a></th><td>            dom = db.parse("employees.xml");</td></tr><tr><th id="L50"><a href="#L50">50</a></th><td></td></tr><tr><th id="L51"><a href="#L51">51</a></th><td>        } catch (ParserConfigurationException pce) {</td></tr><tr><th id="L52"><a href="#L52">52</a></th><td>            pce.printStackTrace();</td></tr><tr><th id="L53"><a href="#L53">53</a></th><td>        } catch (SAXException se) {</td></tr><tr><th id="L54"><a href="#L54">54</a></th><td>            se.printStackTrace();</td></tr><tr><th id="L55"><a href="#L55">55</a></th><td>        } catch (IOException ioe) {</td></tr><tr><th id="L56"><a href="#L56">56</a></th><td>            ioe.printStackTrace();</td></tr><tr><th id="L57"><a href="#L57">57</a></th><td>        }</td></tr><tr><th id="L58"><a href="#L58">58</a></th><td>    }</td></tr><tr><th id="L59"><a href="#L59">59</a></th><td></td></tr><tr><th id="L60"><a href="#L60">60</a></th><td>    private void parseDocument() {</td></tr><tr><th id="L61"><a href="#L61">61</a></th><td>        //get the root elememt</td></tr><tr><th id="L62"><a href="#L62">62</a></th><td>        Element docEle = dom.getDocumentElement();</td></tr><tr><th id="L63"><a href="#L63">63</a></th><td></td></tr><tr><th id="L64"><a href="#L64">64</a></th><td>        //get a nodelist of &lt;employee&gt; elements</td></tr><tr><th id="L65"><a href="#L65">65</a></th><td>        NodeList nl = docEle.getElementsByTagName("Employee");</td></tr><tr><th id="L66"><a href="#L66">66</a></th><td>        if (nl != null &amp;&amp; nl.getLength() &gt; 0) {</td></tr><tr><th id="L67"><a href="#L67">67</a></th><td>            for (int i = 0; i &lt; nl.getLength(); i++) {</td></tr><tr><th id="L68"><a href="#L68">68</a></th><td></td></tr><tr><th id="L69"><a href="#L69">69</a></th><td>                //get the employee element</td></tr><tr><th id="L70"><a href="#L70">70</a></th><td>                Element el = (Element) nl.item(i);</td></tr><tr><th id="L71"><a href="#L71">71</a></th><td></td></tr><tr><th id="L72"><a href="#L72">72</a></th><td>                //get the Employee object</td></tr><tr><th id="L73"><a href="#L73">73</a></th><td>                Employee e = getEmployee(el);</td></tr><tr><th id="L74"><a href="#L74">74</a></th><td></td></tr><tr><th id="L75"><a href="#L75">75</a></th><td>                //add it to list</td></tr><tr><th id="L76"><a href="#L76">76</a></th><td>                myEmpls.add(e);</td></tr><tr><th id="L77"><a href="#L77">77</a></th><td>            }</td></tr><tr><th id="L78"><a href="#L78">78</a></th><td>        }</td></tr><tr><th id="L79"><a href="#L79">79</a></th><td>    }</td></tr><tr><th id="L80"><a href="#L80">80</a></th><td></td></tr><tr><th id="L81"><a href="#L81">81</a></th><td>    /**</td></tr><tr><th id="L82"><a href="#L82">82</a></th><td>     * I take an employee element and read the values in, create</td></tr><tr><th id="L83"><a href="#L83">83</a></th><td>     * an Employee object and return it</td></tr><tr><th id="L84"><a href="#L84">84</a></th><td>     * </td></tr><tr><th id="L85"><a href="#L85">85</a></th><td>     * @param empEl</td></tr><tr><th id="L86"><a href="#L86">86</a></th><td>     * @return</td></tr><tr><th id="L87"><a href="#L87">87</a></th><td>     */</td></tr><tr><th id="L88"><a href="#L88">88</a></th><td>    private Employee getEmployee(Element empEl) {</td></tr><tr><th id="L89"><a href="#L89">89</a></th><td></td></tr><tr><th id="L90"><a href="#L90">90</a></th><td>        //for each &lt;employee&gt; element get text or int values of </td></tr><tr><th id="L91"><a href="#L91">91</a></th><td>        //name ,id, age and name</td></tr><tr><th id="L92"><a href="#L92">92</a></th><td>        String name = getTextValue(empEl, "Name");</td></tr><tr><th id="L93"><a href="#L93">93</a></th><td>        int id = getIntValue(empEl, "Id");</td></tr><tr><th id="L94"><a href="#L94">94</a></th><td>        int age = getIntValue(empEl, "Age");</td></tr><tr><th id="L95"><a href="#L95">95</a></th><td></td></tr><tr><th id="L96"><a href="#L96">96</a></th><td>        String type = empEl.getAttribute("type");</td></tr><tr><th id="L97"><a href="#L97">97</a></th><td></td></tr><tr><th id="L98"><a href="#L98">98</a></th><td>        //Create a new Employee with the value read from the xml nodes</td></tr><tr><th id="L99"><a href="#L99">99</a></th><td>        Employee e = new Employee(name, id, age, type);</td></tr><tr><th id="L100"><a href="#L100">100</a></th><td></td></tr><tr><th id="L101"><a href="#L101">101</a></th><td>        return e;</td></tr><tr><th id="L102"><a href="#L102">102</a></th><td>    }</td></tr><tr><th id="L103"><a href="#L103">103</a></th><td></td></tr><tr><th id="L104"><a href="#L104">104</a></th><td>    /**</td></tr><tr><th id="L105"><a href="#L105">105</a></th><td>     * I take a xml element and the tag name, look for the tag and get</td></tr><tr><th id="L106"><a href="#L106">106</a></th><td>     * the text content</td></tr><tr><th id="L107"><a href="#L107">107</a></th><td>     * i.e for &lt;employee&gt;&lt;name&gt;John&lt;/name&gt;&lt;/employee&gt; xml snippet if</td></tr><tr><th id="L108"><a href="#L108">108</a></th><td>     * the Element points to employee node and tagName is name I will return John</td></tr><tr><th id="L109"><a href="#L109">109</a></th><td>     * </td></tr><tr><th id="L110"><a href="#L110">110</a></th><td>     * @param ele</td></tr><tr><th id="L111"><a href="#L111">111</a></th><td>     * @param tagName</td></tr><tr><th id="L112"><a href="#L112">112</a></th><td>     * @return</td></tr><tr><th id="L113"><a href="#L113">113</a></th><td>     */</td></tr><tr><th id="L114"><a href="#L114">114</a></th><td>    private String getTextValue(Element ele, String tagName) {</td></tr><tr><th id="L115"><a href="#L115">115</a></th><td>        String textVal = null;</td></tr><tr><th id="L116"><a href="#L116">116</a></th><td>        NodeList nl = ele.getElementsByTagName(tagName);</td></tr><tr><th id="L117"><a href="#L117">117</a></th><td>        if (nl != null &amp;&amp; nl.getLength() &gt; 0) {</td></tr><tr><th id="L118"><a href="#L118">118</a></th><td>            Element el = (Element) nl.item(0);</td></tr><tr><th id="L119"><a href="#L119">119</a></th><td>            textVal = el.getFirstChild().getNodeValue();</td></tr><tr><th id="L120"><a href="#L120">120</a></th><td>        }</td></tr><tr><th id="L121"><a href="#L121">121</a></th><td></td></tr><tr><th id="L122"><a href="#L122">122</a></th><td>        return textVal;</td></tr><tr><th id="L123"><a href="#L123">123</a></th><td>    }</td></tr><tr><th id="L124"><a href="#L124">124</a></th><td></td></tr><tr><th id="L125"><a href="#L125">125</a></th><td>    /**</td></tr><tr><th id="L126"><a href="#L126">126</a></th><td>     * Calls getTextValue and returns a int value</td></tr><tr><th id="L127"><a href="#L127">127</a></th><td>     * </td></tr><tr><th id="L128"><a href="#L128">128</a></th><td>     * @param ele</td></tr><tr><th id="L129"><a href="#L129">129</a></th><td>     * @param tagName</td></tr><tr><th id="L130"><a href="#L130">130</a></th><td>     * @return</td></tr><tr><th id="L131"><a href="#L131">131</a></th><td>     */</td></tr><tr><th id="L132"><a href="#L132">132</a></th><td>    private int getIntValue(Element ele, String tagName) {</td></tr><tr><th id="L133"><a href="#L133">133</a></th><td>        //in production application you would catch the exception</td></tr><tr><th id="L134"><a href="#L134">134</a></th><td>        return Integer.parseInt(getTextValue(ele, tagName));</td></tr><tr><th id="L135"><a href="#L135">135</a></th><td>    }</td></tr><tr><th id="L136"><a href="#L136">136</a></th><td></td></tr><tr><th id="L137"><a href="#L137">137</a></th><td>    /**</td></tr><tr><th id="L138"><a href="#L138">138</a></th><td>     * Iterate through the list and print the</td></tr><tr><th id="L139"><a href="#L139">139</a></th><td>     * content to console</td></tr><tr><th id="L140"><a href="#L140">140</a></th><td>     */</td></tr><tr><th id="L141"><a href="#L141">141</a></th><td>    private void printData() {</td></tr><tr><th id="L142"><a href="#L142">142</a></th><td></td></tr><tr><th id="L143"><a href="#L143">143</a></th><td>        System.out.println("No of Employees '" + myEmpls.size() + "'.");</td></tr><tr><th id="L144"><a href="#L144">144</a></th><td></td></tr><tr><th id="L145"><a href="#L145">145</a></th><td>        Iterator&lt;Employee&gt; it = myEmpls.iterator();</td></tr><tr><th id="L146"><a href="#L146">146</a></th><td>        while (it.hasNext()) {</td></tr><tr><th id="L147"><a href="#L147">147</a></th><td>            System.out.println(it.next().toString());</td></tr><tr><th id="L148"><a href="#L148">148</a></th><td>        }</td></tr><tr><th id="L149"><a href="#L149">149</a></th><td>    }</td></tr><tr><th id="L150"><a href="#L150">150</a></th><td></td></tr><tr><th id="L151"><a href="#L151">151</a></th><td>    public static void main(String[] args) {</td></tr><tr><th id="L152"><a href="#L152">152</a></th><td>        //create an instance</td></tr><tr><th id="L153"><a href="#L153">153</a></th><td>        DomParserExample dpe = new DomParserExample();</td></tr><tr><th id="L154"><a href="#L154">154</a></th><td></td></tr><tr><th id="L155"><a href="#L155">155</a></th><td>        //call run example</td></tr><tr><th id="L156"><a href="#L156">156</a></th><td>        dpe.runExample();</td></tr><tr><th id="L157"><a href="#L157">157</a></th><td>    }</td></tr><tr><th id="L158"><a href="#L158">158</a></th><td></td></tr><tr><th id="L159"><a href="#L159">159</a></th><td>}</td></tr></tbody></table>

        </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/wiki/public/raw-attachment/wiki/cs122b-2017-winter-project3/DomParserExample.java">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/wiki/public/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">Powered by <a href="/wiki/public/about"><strong>Trac 0.12.5</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.</p>
      <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
    </div>
  </body>
</html>