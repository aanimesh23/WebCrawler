<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script type="text/javascript" src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>

<body>
<p><a href="/~theory/"><img src="/~theory/logo/CATOC2.jpg" 
alt="ICS Theory Group"></a></p>

<h2><a href="/~theory/269/">Spring 2016: Theory Seminar</a><br>
DBH, Room 1423, 1:00pm</h2>

<hr>

<h2>May 27, 2016:</h2>
<h1>
Interactive Treelike Visualization of Algorithmic Complexity in Java Bytecode
</h1>
<h2>
Timothy Johnson
</h2>

<p>
The problem of identifying security vulnerabilities resulting from flawed algorithms, and not just flawed implementations, has not been addressed adequately by previous research. Specifically, we want to identify when an algorithm could exceed a given bound on the running time or the amount of memory used.
</p><p>
To enable users to identify these flaws more easily, we developed an interactive visualization system. Our visualization shows the user a graph of the possible execution paths of a Java application, and the code that produced each path. To allow for easy pattern recognition, we construct similar layouts for similar programmatic structures. We also highlight sections of the code that seem likely to cause problems.</p>
<p>
Preliminary experiments show that these features successfully enhance a user's ability to find algorithmic vulnerabilities efficiently.
</p><p>
Joint work with Jawaherul Alan and  Michael Goodrich
</p>



</body>
</html>

