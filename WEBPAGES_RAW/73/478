<?xml version='1.1'?>
<!DOCTYPE html
     PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
     'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
<head>
  <title>Javadoc</title>
  <meta name='Author' content='Thomas A. Alspaugh'/>
  <meta name='Description' content="Javadoc"/>
  <meta http-equiv='content-type' content='text/html; charset=ISO-8859-1'/>
  <meta http-equiv='Content-Style-Type' content='text/css'/>
  <link href='../../alspaugh-uci.css' rel='stylesheet' type='text/css'/>
  <!-- <link href='../alspaugh-uci-cls.css' rel='stylesheet' type='text/css'/> -->
  <style type='text/css'>
    dl.code      {  padding-left: 0.75em;  }
    dl.code dt   {
      font-family: monospace;
      font-style: normal;
      font-size:125%;
    }
    dl.code dd   {  margin-left: 1.5em;  }
    code dfn     {  font-style: normal;  }
    span.comment {  color: olive;  }
    dl.code dt   {  font-family: monospace;  }
    @media screen {
      body     {  background: url("img/bg-javadoc.png") repeat-y;  }
      #TMain   {  margin-left: 10.00em;  }
    }
  </style>
</head>
<body>

<div id='TBg'>

<div id='THeader'>
Javadoc
</div>

<div id='TLinks1' class='Links'> <!-- - - - - - - - - - - - - - - - - - - - -->
<p>  <a class='sc' href='../../index.html'>Home</a>
</p>
<div class='hr'> </div>
<p>  <a href='index.html'>Foundations home</a>
</p>
<div class='hr'> </div>
<p>
<a href='set.html'>Sets</a><br/>
<a href='relation.html'>Relations</a><br/>
<a href='correspondence.html'>Correspondences</a><br/>
<a href='orderedSet.html'>Ordered Sets</a><br/>
<a href='lattice.html'>Lattices</a><br/>
<a href='graph.html'>Graphs</a><br/>
<a href='powerset.html'>Powersets</a><br/>
<a href='binaryString.html'>Binary Strings</a><br/>
<a href='logicConcepts.html'>Logic</a><br/>
<a href='allen.html'>AIA</a><br/><!-- -spell AIA -->
<a href='greek.html'>Greek</a><br/>
</p>
<div class='hr'> </div>
<p>
<a href='glossaryExternal.html'>Glossary</a><br/>
<a href='goodAbstract.html'>Abstracts</a><br/>
<a href='argument.html'>Argument</a><br/>
<a href='ontology.html'>Glossaries</a><br/>
<a href='inquiryCycle.html'>Inquiry Cycle</a><br/>
<a href='hohfeld.html'>Legal Relations</a><br/>
<a href='goodPresentation.html'>Presentations</a><br/>
</p>
<div class='hr'> </div>
<p>
<a href='quickStart.html'>Elicitation</a><br/>
<a href='ontology.html'>Glossaries</a><br/>
<a href='goal.html'>Goals</a><br/>
<a href='istar.html'>i*</a><br/>
<a href='SCR.html'>SCR</a><br/>
<a href='tracing.html'>Tracing</a><br/>
</p>
<div class='hr2'> </div>
<p>
<a href='alloy.html'>Alloy</a><br/>
<a href='msc.html'>MSCs</a><br/>
<a href='regularExpression.html'>Regular Exprs.</a><br/>
</p><!-- -spell MSCs Exprs -->
<div class='hr2'> </div>
<p>
<a href='java-designPattern.html'>Design Patterns</a><br/>
<a href='javadoc.html'>Javadoc</a><br/>
<a href='java-package.html'>Java Packages</a><br/>
<a href='java-type.html'>Java Types</a><br/>
</p>
<div class='hr2'> </div>
<p>
<a href='html.html'>(X)HTML</a><br/>
<a href='xmlSchema.html'>XML Schemas</a><br/>
<a href='xslt.html'>XSLT</a><br/>
</p><!-- -spell XSLT -->
</div>


<!-- No right column -->
<div id='TMain'><!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!--xhtml -y -->


<!--spell API Charset IndexOutOfBoundsException NullPointerException OptsFile -->
<!--spell SDK StringBuffer StringBuilder abc awt charAt classname -->
<!--spell compareToIgnoreCase doctitle documenation href html javadoc -->
<!--spell lang linkplain optsFile packagelist param pathlist serializable -->
<!--spell sourcefiles sourcepath src str stylesheet subpackages util -->
<!--spell windowtitle -->


<h1>Table of contents</h1>

<div id='ToC'>
  <h1><a href='#Introduction'>Introduction</a></h1>
  <h1><a href='#organization'>Javadoc organization</a></h1>
  <h1><a href='#overview-package'>Overview and package summaries</a></h1>
  <h2><a href='#overview'>Overview documentation:&nbsp; the overview file</a></h2>
  <h2><a href='#package'>Package documentation:&nbsp; the <code>package.html</code> file</a></h2>
  <h1><a href='#doc-comment'>Doc comments</a></h1>
  <h2><a href='#syntax'>Syntactic form</a></h2>
  <h2><a href='#first-sentence'>The essential first sentence</a></h2>
  <h2><a href='#class'>Class and interface doc comments</a></h2>
  <h2><a href='#field'>Field doc comments</a></h2>
  <h2><a href='#method'>Constructor and method doc comments</a></h2>
  <h2><a href='#inheritance'>Inheritance of doc comments</a></h2>
  <h2><a href='#doc-example'>Example doc comments</a></h2>
  <h1><a href='#tag'>@Tags</a></h1>
  <h1><a href='#command-line'>The <code>javadoc</code> command</a></h1>
  <h2><a href='#options'><code>javadoc</code> -options and arguments</a></h2>
  <h2><a href='#packages'>Packages</a></h2>
  <h2><a href='#sourcefiles'>Source files</a></h2>
  <h2><a href='#at-files'>@files</a></h2>
</div> <!-- id='ToC' -->


<h1 id='Introduction'>Introduction</h1>

<p>
<code>javadoc</code> is a command-line tool
for extracting special comments
(called <a href='#doc-comment'>doc comments</a>)
from java source files
and generating an easy-to-use HTML file tree
containing them.&nbsp;
<a  href='#doc-comment'>Doc comments</a> begin with <code>/**</code>
and immediately precede a
<a href='#class'>class</a>,
<a href='#class'>interface</a>,
<a href='#method'>constructor</a>,
<a href='#method'>method</a>,
  or
<a href='#field'>field</a> definition
are extracted and processed.&nbsp;
The comments can include standard
<a href='http://www.w3.org/html/'>HTML</a> markup
and javadoc
<a href='#tag'><code>@tags</code></a>.&nbsp;
The
<a href='http://java.sun.com/javase/6/docs/api/index.html'>Java API Specification</a>
is an example of what <code>javadoc</code> produces.&nbsp;
The <code>javadoc</code> tool is part of the free Sun SDK distribution.&nbsp;
</p>


<h1 id='organization'>Javadoc organization</h1>

<p>
The HTML output generated by <code>javadoc</code>
is organized like java source is:&nbsp;
</p>

<ul>
  <li> at the top level, as a group of several packages
    (with an <a href='#overview'>overview summary</a>),
  </li>
  <li> within a group, as individual packages
    (each with a <a href='#package'>package summary</a>),
  </li>
  <li> within a package, as classes and interfaces
    (each with a <a href='#class'>class or interface doc comment</a>),
    and
  </li>
  <li> within a class or interface,
    as fields (each with a <a href='#field'>field doc comment</a>),
    and constructors and methods
    (each with a <a href='#method'>constructor or method doc comment</a>).&nbsp;
  </li>
</ul>

<h1 id='overview-package'>Overview and package summaries</h1>

<h2 id='overview'>Overview documentation:&nbsp; the overview file</h2>

<p>
The overview file for the output from a javadoc compilation
can appear in a file of any name;&nbsp;
the file name is specified in the <a href='#overview'>-overview</a> option
to the javadoc command.&nbsp;
</p>

<p>
The file may contain HTML elements and
<a href='#inline-tag'>inline <code>{@tags}</code></a>,
and may conclude with one or more:&nbsp;
</p>

<ul>
  <li> <code><a href='#see'>@see</a></code> block tags
  </li>
  <li> <code><a href='#author'>@author</a></code> block tags
  </li>
</ul>

<p>
The file should begin with an HTML &lt;body&gt; tag
and end with an HTML &gt;/body&gt; tag.&nbsp;
</p>


<h2 id='package'>Package documentation:&nbsp; the <code>package.html</code> file</h2>

<p>
The summary describing a package
must appear in a file named <code>package.html</code>
in the package directory along with the java files for the class.&nbsp;
</p>

<p>
The format of the <code>package.html</code> file
is the same as that of the <a href='#overview'>overview</a> file.&nbsp;
</p>


<h1 id='doc-comment'>Doc comments</h1>
<!-- <div class='toTopH1'><a href=''>top</a></div> -->

<p>
Doc comments describe
classes,
interfaces,
fields,
constructors,
and methods.&nbsp;
</p>


<h2 id='syntax'>Syntactic form</h2>

<p>
Each doc comment consists of:&nbsp;
</p>

<ol>
  <li> <code>/**</code>
  </li>
  <li> an optional main description consisting of text that may contain
    HTML and
    <a href='#inline-tag'>inline <code>{@tags}</code></a> but no
    <a href='#block-tag'>block <code>@tags</code></a>
  </li>
  <li> zero or more javadoc <a href='#block-tag'>block <code>@tags</code></a>
  </li>
  <li> <code>*/</code>
  </li>
</ol>

<p>
Text in the description and tag blocks
can contain HTML format elements.&nbsp;
</p>

<table cellpadding='2'>
<tbody>
  <tr><td colspan='2'> A doc comment may be all on one line:
<pre>
  /**  All on one line -- but still a doc comment.  */
</pre>
      </td>
  </tr>
  <tr><td valign='top'> or span several lines:
<pre>
  /**
    Spans several lines --
    still a doc comment
  */
</pre>
      </td>
      <td>
        The second and later lines of a multi-line doc comment
<pre>
  /**
   *  For that 'retro'
   *  FORTRAN look.
   */
</pre>
        may begin with whitespace and an asterisk,
        which javadoc discards.
      </td>
  </tr>
</tbody>
</table>


<h2 id='first-sentence'>The essential first sentence</h2>

<p>
The <i>first sentence</i> of each
<!-- <a href='#package'>package</a>, -->
<a href='#class'>class</a>,
<a href='#class'>interface</a>
<a href='#field'>field</a>,
<a href='#method'>constructor</a>,
and
<a href='#method'>method</a>
doc comment
is reused in the indexes,
so this sentence should summarize the thing described,
concisely but completely.&nbsp;
</p>

<p>
The recommended grammatical form for the first line of
the doc comment for class X is
'An X is ...'
or an equivalent sentence.&nbsp;
</p>

<p>
The recommended form for a constructor or method is that it begin with a verb
and be the completion of a sentence that would begin
'This constructor ...' or 'This method ...', respectively.&nbsp;
</p>

<p>
For example, the <code>java.lang</code> package and
<code>java.lang.String</code> doc comments begin:
</p>

<table>
<tbody>
  <tr><th>package</th>
      <td>'Provides classes that are fundamental to
        the design of the Java programming language.'
      </td>
  </tr>
  <tr><th>class</th>
      <td>'The String class represents character strings.'
      </td>
  </tr>
  <tr><th>constructor</th>
      <td>'Initializes a newly created String object so that it represents
        an empty character sequence.'
      </td>
  </tr>
  <tr><th>method</th>
      <td>'Returns the character at the specified index.'
      </td>
  </tr>
</tbody>
</table>


<h2 id='class'>Class and interface doc comments</h2>

<p>
The doc comment describing a class or interface
must appear immediately before the class or interface.&nbsp;
Its first sentence should summarize the class or interface
concisely but completely;&nbsp;
a good form for class or interface X is
'An X is a ...', 'An X represents a ...', or
'A ...' or 'Represents a ....'&nbsp;
It may include <a href='#inline-tag'>inline <code>{@tags}</code></a>
and may conclude with one or more:
</p>

<ul>
  <li> <code><a href='#see'>@see</a></code> block tags
  </li>
  <li> <code><a href='#author'>@author</a></code> block tags
  </li>
</ul>

<h2 id='field'>Field doc comments</h2>

<p>
The doc comment describing a field
must appear immediately before the field declaration.&nbsp;
It may include <a href='#inline-tag'>inline <code>{@tags}</code></a>.&nbsp;
Its first sentence should summarize the field concisely but completely.&nbsp;
</p>


<h2 id='method'>Constructor and method doc comments</h2>

<p>
The doc comment describing a method or constructor
must appear immediately before the field declaration.&nbsp;
Its first sentence should summarize the method or constructor
concisely but completely,
and should begin with a verb and complete 'This constructor ...'
or 'This method ...', respectively.&nbsp;
Examples are
'Initializes a newly created String object so that it represents
an empty character sequence' or
'Returns the character at the specified index,'
respectively.&nbsp;
The doc comment
may include <a href='#inline-tag'>inline <code>{@tags}</code></a>,
and should end with
</p>

<ul>
  <li> a <code><a href='#param'>@param</a></code> block tag for each of the
    method or constructor's parameters,
  </li>
  <li> a <code><a href='#return'>@return</a></code> block tag,
    if it is a method whose type is not <code>void</code>,
    and
  </li>
  <li> a <code><a href='#throws'>@throws</a></code> block tag
    for each exception the method or constructor
    can throw (whether or not the method or constructor declares this).
  </li>
</ul>

<h2 id='inheritance'>Inheritance of doc comments</h2>

<p>
The doc comments of a
<a href='#class'>class or interface</a>
may be inherited by a class that extends or implements it, respectively.&nbsp;
</p>

<p>
If the subclass does not provide its own implementation of a method,
the generated description of it
lists the inherited methods with links to their descriptions.&nbsp;
</p>

<p>
If the subclass implements a method of its superclass or interface,
but the java file does not contain a doc comment for it,
the doc comment of the superclass or interface
is inherited
and appears word-for-word in the description of the subclass.&nbsp;
</p>


<h2 id='doc-example'>Example doc comments</h2>

<h3>For the
<a href='http://java.sun.com/javase/6/docs/api/java/lang/String.html'
><code>String</code>
class</a></h3>

<pre>
/**
  The String class represents character strings.
  All string literals in Java programs, such as &lt;code&gt;'abc'&lt;/code&gt;,
  are implemented as instances of this class.
  &lt;p&gt;
  Strings are constant;
  their values cannot be changed after they are created.
  String buffers support mutable strings.
  Because String objects are immutable they can be shared.
  For example:
  &lt;pre&gt;

           String str = 'abc';

  &lt;/pre&gt;
  &lt;p&gt;
  is equivalent to:
  &lt;pre&gt;

           char data[] = {'a', 'b', 'c'};
           String str = new String(data);

  &lt;/pre&gt;

  &lt;p&gt;
  The class
  &lt;code&gt;String&lt;/code&gt;
  includes methods for examining individual characters
  of the sequence, for comparing strings, for searching strings,
  for extracting substrings, and for creating a copy of a string
  with all characters translated to uppercase or to lowercase.
  Case mapping is based on the Unicode Standard version specified by
  the {@link Character} class.

  &lt;p&gt;
  Unless otherwise noted,
  passing a null argument to a constructor or method in this class
  will cause a {@link NullPointerException} to be thrown.

  @see Object.toString()
  @see StringBuffer
  @see StringBuilder
  @see Charset
  @see Serialized Form
*/
public class String { ...
</pre>


<h3>For the
<a
href='http://java.sun.com/javase/6/docs/api/java/lang/String.html#CASE_INSENSITIVE_ORDER'><code>CASE_INSENSITIVE_ORDER</code>
field</a></h3>

<pre>
/**
A Comparator that orders &lt;code&gt;String&lt;/code&gt; objects as by
&lt;code&gt;compareToIgnoreCase&lt;/code&gt;. This comparator is serializable.
&lt;p&gt;
Note that this Comparator does &lt;i&gt;not&lt;/i&gt; take locale into account,
and will result in an unsatisfactory ordering for certain locales.
The java.text package provides &lt;i&gt;Collators&lt;/i&gt; to allow
locale-sensitive ordering.
@see Collator.compare(String, String)
*/
public static final Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER;
</pre>

<h3>For the
<a
href='http://java.sun.com/javase/6/docs/api/java/lang/String.html#String(java.lang.String)'
><code>String(String)</code>
constructor</a></h3>

<pre>
/**
  Initializes a newly created &lt;code&gt;String&lt;/code&gt; object
  so that it represents the same sequence of characters as the argument;
  in other words, the newly created string is a copy of the argument string.
  Unless an explicit copy of &lt;code&gt;original&lt;/code&gt; is needed,
  use of this constructor is unnecessary since Strings are immutable.
  @param original  a String.
*/
public String(String original) { ...
</pre>


<h3>For the
<a href='http://java.sun.com/javase/6/docs/api/java/lang/String.html#charAt(int)'
><code>charAt(int)</code>
method</a></h3>

<pre>
/**
  Returns the &lt;code&gt;char&lt;/code&gt; value at the specified index.
  An index ranges from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;length()
    - 1&lt;/code&gt;.
  The first char value of the sequence is at index &lt;code&gt;0&lt;/code&gt;,
  the next at index &lt;code&gt;1&lt;/code&gt;, and so on, as for array indexing.
  @param index  the index of the char value.
  @return the char value at the specified &lt;code&gt;index&lt;/code&gt;
    of this string.
    The first &lt;code&gt;char&lt;/code&gt; value is at index
    &lt;code&gt;0&lt;/code&gt;.
  @throws IndexOutOfBoundsException  if the index argument is negative
    or not less than the length of this string.
*/
public char charAt(int index) { ...
</pre>


<h1 id='tag'>@Tags</h1>

<p id='block-tag'>
A <dfn>block tag</dfn> has the form <code>@tag</code> followed by text.&nbsp;
Block tags can only appear after the main description of a doc comment.&nbsp;
</p>

<p id='inline-tag'>
An <dfn>inline tag</dfn> has the form <code>{@tag ...}</code>.&nbsp;
Inline tags may appear anywhere in a doc comment.&nbsp;
</p>

<p>
The most useful javadoc tags are:&nbsp;
</p>

<dl class='code'>
  <dt id='author'>@author <i>name</i>
    </dt>
    <dd> This tag adds an 'Author' entry
      at the end of an overview, <a href='#package'>package</a>, or
      <a href='#class'>class</a> description.&nbsp;
      Note that author entries are only generated if
      the <a href='#author'>-author</a> option is given.&nbsp;
    </dd>
  <dt id='link'>{@link <i>package.class#member label</i>}<br/>
      {@linkplain <i>package.class#member label</i>}
    </dt>
    <dd>These inline tags produce a link to the documentation
      for a <a href='#package'>package</a>, <a href='#class'>class</a>,
      <a href='#class'>interface</a>, <a href='#method'>constructor</a>,
      <a href='#method'>method</a>, or
      <a href='#field'>field</a>.&nbsp;
      Depending on context,
      parts of <i>package.class#member</i> may be omitted:
      <table>
      <tbody>
        <tr><th class='blk'>In same package and class</th>
        </tr>
        <tr><td class='tt'>{@link #field}</td>
        </tr>
        <tr><td class='tt'>{@link #method}</td>
        </tr>
        <tr><td class='tt'>{@link #method(Type,Type,...)}</td>
        </tr>
        <tr><th>In same package, different class</th>
        </tr>
        <tr><td class='tt'>{@link Class#field}</td>
        </tr>
        <tr><td class='tt'>{@link Class#method}</td>
        </tr>
        <tr><td class='tt'>{@link Class#method(Type,Type,...)}</td>
        </tr>
        <tr><td class='tt'>{@link Class}</td>
        </tr>
        <tr><th>In another package, or from<br/>
              <code>package.html</code> or overview</th>
        </tr>
        <tr><td class='tt'>{@link package.Class#field}</td>
        </tr>
        <tr><td class='tt'>{@link package.Class#method}</td>
        </tr>
        <tr><td class='tt'>{@link package.Class#method(Type,...)}</td>
        </tr>
        <tr><td class='tt'>{@link package.Class}</td>
        </tr>
        <tr><td class='tt'>{@link package}</td>
        </tr>
      </tbody>
      </table>
      <p>
      If a label is given,
      it is used as the label for the link.&nbsp;
      If no label is given,
      the appropriately-qualified name of the item being linked to
      is used as the label for the link.&nbsp;
      </p>
      <p>
      <code>{@link ...}</code> displays the link text in <code>code</code> font,
      while
      <code>{@linkplain ...}</code> displays it in plain font.&nbsp;
      Otherwise they behave the same.&nbsp;
      </p>
    </dd>
  <dt id='param'>@param <i>parameter-name description</i>
    </dt>
    <dd>This tag introduces a <a href='#method'>constructor</a> or
      <a href='#method'>method</a> parameter description.&nbsp;
      The first word after the tag is the name of the parameter,
      and the rest of the text following the tag
      is a description of the parameter.&nbsp;
    </dd>
  <dt id='return'>@return <i>description</i>
    </dt>
    <dd>This tag introduces a description of the value returned
      by a non-void <a href='#method'>method</a>.&nbsp;
    </dd>
  <dt id='see'>@see <i>reference</i>
    </dt>
    <dd>This tag adds a 'See Also' entry.&nbsp;
      <table>
      <tbody>
        <tr><th class='lf'>@see '<i>string</i>'</th>
            <td>Adds an entry with the string</td>
        </tr>
        <tr><th class='lf'>@see&nbsp;&lt;a href='URL#label'&gt;label&lt;/a&gt;</th>
            <td>Adds an entry with that link.</td>
        </tr>
        <tr><th class='lf'>@see&nbsp;<i>package.class#member&nbsp;label</i></th>
            <td>Adds an entry with a link to the specified documentation.&nbsp;
              See <code><a href='#link'>{@link}</a></code>
              for the possibilities.&nbsp;</td>
        </tr>
      </tbody>
      </table>
    </dd>
  <dt id='serial'>@serial <i>exclude</i>
    </dt>
    <dd>Javadoc documentation normally includes a serialized form page
      and links to it from many locations.&nbsp;
      This tag in the <code><a href='#package'>package.html</a></code> file
      prevents this for all classes in the package.&nbsp;
    </dd>
  <dt id='throws'>@throws <i>exception-classname when-description</i>
    </dt>
    <dd>This tag describes an exception thrown by
      a <a href='#method'>constructor</a> or <a href='#method'>method</a>.&nbsp;
      The first word is the name of the exception class that is thrown,
      and the remainder of the text following the tag
      explains the circumstances under which this exception is thrown.&nbsp;
    </dd>
</dl>

<p>
See
<a href='http://java.sun.com/j2se/javadoc/index.jsp'>Sun's
javadoc documentation</a>
for more tags.&nbsp;
</p>


<h1 id='command-line'>The <code>javadoc</code> command</h1>

<p>
The javadoc command line synopsis is
</p>

<p class='tt' style='padding-left:1em;'>
javadoc [<a href='#options'>options</a>]
[<a href='#packages'>packages</a>]
[<a href='#sourcefiles'>sourcefiles</a>]
[<a href='#at-files'>@files</a>]
</p>

<p>
Examples in this section are adapted from Sun's examples.&nbsp;
</p>


<h2 id='options'><code>javadoc</code> -options and arguments</h2>

<p>
The following options are particularly useful.&nbsp;
See
<a href='http://java.sun.com/j2se/javadoc/index.jsp'>Sun's
javadoc documentation</a>
for more.&nbsp;
</p>

<dl>
  <dt id='help-opt'>-help
    </dt>
    <dd> Displays help for the javadoc command.&nbsp;
    </dd>
  <dt id='author-opt'>-author
    </dt>
    <dd> Includes the <a href='#author'>author</a> entries in
      the generated documentation
      (by default they are not included).&nbsp;
    </dd>
  <dt id='d-opt'>-d  <i>directory</i>
    </dt>
    <dd> Puts the documentation tree in the named directory.&nbsp;
    </dd>
  <dt id='doctitle-opt'>-doctitle
    </dt>
    <dd> Gives a heading to begin the <a href='#overview'>overview</a>.&nbsp;
    </dd>
  <dt id='exclude-opt'>-exclude <i>packagelist</i>
    </dt>
    <dd> If packages have been specified recursively with
      <code><a href='#sourcepath-opt'>-sourcepath</a></code>,
      then those packages in <i>packagelist</i> are
      excluded.&nbsp;
    </dd>
  <dt id='link-opt'>-link <i>external-doc-URL</i>
    </dt>
    <dd> Creates links to existing javadoc documentation
      wherever appropriate.&nbsp;
      For example, if <i>external-doc-URL</i> points to the Java API,
      then parameters of type String would be linked to the
      documentation for java.util.String in the API.&nbsp;
      More than one <code>-link</code> <i>external-doc-URL</i>
      option may be given.&nbsp;
    </dd>
  <dt id='overview-opt'>-overview  <i>overview-file-pathname</i>
    </dt>
    <dd> Read the <a href='#overview'>overview</a>
      from the file <i>overview-file-pathname</i>.&nbsp;
    </dd>
  <dt>-package, -private, -protected, -public
    </dt>
    <dd>
      <table>
      <tbody>
        <tr><th>Option</th>
            <th colspan='4'>Which classes, etc., are documented</th>
        </tr>
        <tr id='public-opt'    title='public'   ><th class='tt'>-public</th>
          <td>public</td> <td>         </td> <td>         </td> <td></td>
        </tr>
        <tr id='protected-opt'><th class='tt'>-protected</th>
            <td>public</td> <td>protected</td> <td>         </td> <td></td>
        </tr>
        <tr id='package-opt'   title='package'  ><th class='tt'>-package</th>
          <td>public</td> <td>protected</td> <td>(package)</td> <td></td>
        </tr>
        <tr id='private-opt'   title='private'  ><th class='tt'>-private</th>
          <td>public</td> <td>protected</td> <td>(package)</td> <td>private</td>
        </tr>
      </tbody>
      </table>
    </dd>
  <dt id='sourcepath-opt'>-sourcepath <i>pathlist</i>
    </dt>
    <dd> Specifies the directories in which to look for
      packages, classes, and source files to document.&nbsp;
      If the <i>pathlist</i> contains two or more directories,
      they are separated by colons (<b>:</b>).&nbsp;
      If this option is not given,
      the current directory is assumed.&nbsp;
    </dd>
  <dt id='stylesheet-opt'>-stylesheet <i>pathname</i>
    </dt>
    <dd> Specifies an alternate stylesheet
      that the generated documentation will use.&nbsp;
      Otherwise, <code>javadoc</code> creates a file
      <code>stylesheet.css</code> in the documenation directory.&nbsp;
    </dd>
  <dt id='subpackages-opt'>-subpackages <i>packagelist</i>
    </dt>
    <dd> Equivalent to listing the packages in <i>packagelist</i>
      and all their subpackages.&nbsp;
      <i>packagelist</i> is colon-separated.&nbsp;
    </dd>
  <dt id='use-opt'>-use
    </dt>
    <dd> Each class and package will be given a 'Use' page
      listing where that class or package is used.&nbsp;
    </dd>
  <dt id='windowtitle-opt'>-windowtitle
    </dt>
    <dd> Specifies the window title that a browser will show
      for the generated documentation.&nbsp;
    </dd>
</dl>

<h2 id='packages'>Packages</h2>

<p>
To generate documentation for a package,
list the package names.&nbsp;
If the package name is two or more levels deep,
the directory names are separated by dot (.)
as always in Java.&nbsp;
javadoc will look for each package's source files
in the package directory,
and will look for the package directory
on the <code><a href='#sourcepath-opt'>-sourcepath</a></code> path,
or in the current directory if <code>-sourcepath</code> is not given.&nbsp;
</p>

<p>
Examples:
</p>

<ul>
  <li> <code>javadoc -d /home/html -sourcepath
      /home/src java.awt java.awt.event</code>
  </li>
  <li> <code>javadoc -d /home/html java.awt java.awt.event</code>
  </li>
</ul>

<h2 id='sourcefiles'>Source files</h2>

<p>
To generate documentation for specific source files,
list the source file names
(using slashes rather than dots to separate directories,
and including the <code>.java</code> suffix).&nbsp;
</p>

<p>
You can include both package names and source file names
on the same command line.&nbsp;
</p>

<p>
Examples:
</p>

<ul>
  <li> <code>javadoc -d /home/html Button.java Canvas.java Graphics*.java</code>
  </li>
  <li> <code>javadoc -d /home/html
      java/awt/Button.java java/applet/Applet.java</code>
  </li>
  <li> <code>javadoc -d /home/html
      /home/src/java/awt/Button.java /home/src/java/awt/Graphics*.java</code>
  </li>
  <li> <code>javadoc -d /home/html
      -sourcepath /home/src java.awt /home/src/java/applet/Applet.java</code>
  </li>
</ul>

<h2 id='at-files'>@files</h2>

<p>
An <code>@file</code> ('at-file') is a file containing javadoc command line
options and arguments.&nbsp;
To run <code>javadoc</code> using options and arguments
in two files whose pathname from the current directory
are <code>optsFile1</code> and <code>package/OptsFile2</code>,
put <code>@optsFile1</code> <code>@package/OptsFile</code>
on the <code>javadoc</code> command line.&nbsp;
</p>


<!--xhtml -n -->
</div>

</div><!-- #TBg -->

<div id='TFooter'>
<div class='W3C'>
  <a href='http://validator.w3.org/check?uri=referer'><img class='W3C'
    src='../../img/valid-xhtml10-blue.png'
    alt='Valid XHTML 1.0 Strict'/></a>
  <br/>
  <a href='http://jigsaw.w3.org/css-validator/check/referer'><img class='W3C'
    src='../../img/vcss-blue.png'
    alt='Valid CSS!'/></a>
</div>
<div class='timestamp'>2010May16Su21:42</div>
<div style='padding-top:1px;'>
<a class='plain' href='./index.html' style='font-variant:small-caps;'
>Thomas A. Alspaugh</a>
<span style='padding-left:1em;'><span class='email ss sm'>alspaugh&nbsp;
    <span class='ss sc sm'>at</span> &middot; ics &middot; uci &middot; edu</span>
    <!-- -spell alspaugh uci edu --> </span>
</div>
</div>

<!-- Google Analytics code -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol)
  ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost +
  "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-15281497-1");
pageTracker._trackPageview();
} catch(err) {}
</script>

</body>
</html>

