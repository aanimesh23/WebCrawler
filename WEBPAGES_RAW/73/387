<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- Page automatically generated from latex_to_html converter. -->
<!-- by cc_extract_html, $Revision: 3.19 $ -->
<!-- LaTeX source file: './STL_Extension_ref/in_place_list.tex' -->
<html> <head>  
<title>In_place_list&lt;T,bool&gt;</title>
</head>  
<link href="../latex_to_html.css" rel="STYLESHEET">
<body bgcolor="white">
<!-- ------------------------------------------------------------------- -->


<!-- Top Navigation ---------------------------------------------------- -->
<div class="NavTop">
<hr>
  <strong>Navigation:</strong>
<a href="Chapter_intro.html">Up</a>, 
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<hr><!-- End of Top Navigation ----------------------------------------- -->
</div>


<A NAME="Cross_link_anchor_1433"></A>

<A NAME="Cross_link_anchor_1434"></A>

      
     
     
     
<A NAME="Index_anchor_1422"></A> 

   
<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC="cc_Class.gif"></TD></TR></TABLE>


    <A NAME="ccRef_CGAL::In_place_list<T,bool>"></A>
<h2><I>CGAL::In_place_list&lt;T,bool&gt;</I></h2>
<P>

<H3>Definition</H3>An object of the class <I><A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;</I> 
  represents a sequence of items of type <I>T</I> that supports
  bidirectional iterators and allows constant time insert and erase
  operations anywhere within the sequence. The functionality is
  similar to the <I>list&lt;T&gt;</I> in the STL.
<P>

The <I><A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;</I> manages the items in place, i.e., inserted
  items are not copied. Two pointers of type <I>T*</I> are expected
  to be reserved in <I>T</I> for the list management. The base class
  <I><A HREF="Class_In_place_list_base.html#Cross_link_anchor_1432">In_place_list_base</A>&lt;T&gt;</I> can be used to obtain such pointers.
<P>

The <I><A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;</I> does not copy element items during
  insertion (unless otherwise stated for a function). On removal of an
  item or destruction of the list the items are not deleted by
  default.  The second template parameter <I>bool</I> is set to
  <I>false</I> in this case. If the <I><A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;</I> should
  take the responsibility for the stored objects the <I>bool</I>
  parameter could be set to <I>true</I>, in which case the list
  will delete removed items and will delete all remaining items on
  destruction. In any case, the <I>destroy()</I> member function
  deletes all items.  Note that these two possible versions of
  <I><A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;</I> are not assignable to each other to avoid
  confusions between the different storage responsibilities.
<P>

<I>#include &lt;<A HREF="../../../include/CGAL/In_place_list.h">CGAL/In_place_list.h</A>&gt;</I>
<P>

<H3>Parameters</H3>
<P>

The full class name is <I><A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T, bool managed =     false, class Alloc = CGAL_ALLOCATOR(T)&gt;</I>.
<P>

The parameter <I>T</I> is supposed to have a default constructor,
  a copy constructor and an assignment operator. The copy constructor
  and the assignment may copy the pointers in <I>T</I> for the list
  management, but they do not have to. The equality test and the
  relational order require the operators <I>==</I> and <I>&lt;</I>
  for <MATH><I>T</I></MATH> respectively. These operators must not <A HREF="../NumberTypeSupport_ref/Function_compare.html#Cross_link_anchor_1339">compare</A> the pointers
  in <I>T</I>.
<P>

<H3>Types</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;::iterator
        </I></NOBR>
        </TD></TR>
<P>


        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;::const_iterator
        </I></NOBR>
        </TD></TR>
<P>

<TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;::value_type
        </I></NOBR>
        </TD></TR>
<P>


        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;::reference
        </I></NOBR>
        </TD></TR>
<P>


        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;::const_reference
        </I></NOBR>
        </TD></TR>
<P>


        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;::size_type
        </I></NOBR>
        </TD></TR>
<P>


        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;::difference_type
        </I></NOBR>
        </TD></TR>
<P>

<TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;::reverse_iterator
        </I></NOBR>
        </TD></TR>
<P>


        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;::const_reverse_iterator
        </I></NOBR>
        </TD></TR>
<P>

<TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt;::allocator_type
        </I></NOBR>
        </TD></TR>
<P>

</TABLE>
<P>

<H3>Creation</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt; l;
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    introduces an empty list.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt; l (  list&lt;T&gt; l1);
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    copy constructor.
    Each item in <I>l1</I> is copied.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt; l ( size_type n,  T t = T());
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    introduces a list with <MATH><I>n</I></MATH> items, all initialized with copies
    of <MATH><I>t</I></MATH>.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    template &lt;class InputIterator&gt;
        </I></NOBR>
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt; l ( InputIterator first,  InputIterator last);
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    a list with copies from
    the range [<I>first,last</I>).
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt; l ( const T* first,  const T* last);
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    non-member-template version.
<P>

</TD></TR>
        </TABLE>
<P>

        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>&lt;T,bool&gt; &amp;
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
     l =  l1<A NAME="Function_In_place_list6T+bool9___operator=6const_In_place_list6T+bool9__l19;"></A>

        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    assignment. Each item in <I>l1</I>
    is copied. Each item in <I>l</I> is deleted if the <I>bool</I>
    parameter is <I>true</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_swap6_const_In_place_list6T+bool9__l19;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.swap (  l1)
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    swaps the
    contents of <I>l</I> with <I>l1</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_destroy69;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.destroy ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    all items in <I>l</I> are deleted
    regardless of the <I>bool</I> parameter.
        </TD></TR>
        </TABLE>
<P>

<H3>Comparison Operations</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
     l ==  l1<A NAME="Function_bool_operator==6const_In_place_list6T+bool9__l19_const;"></A>

        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    test for equality: Two lists are equal, iff they have the
    same size and if their corresponding elements are equal.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
     l &lt;  l1<A NAME="Function_bool_operator66const_In_place_list6T+bool9__l19_const;"></A>

        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    compares in lexicographical order.
        </TD></TR>
        </TABLE>
<P>

<H3>Access Member Functions</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_iterator_begin69;"></A>
iterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.begin () 
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a mutable iterator referring to the first
    element in&nbsp;<I>l</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_const_iterator_begin69_const;"></A>
const_iterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.begin () const
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a constant
    iterator referring to the first element in&nbsp;<I>l</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_iterator_end69;"></A>
iterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.end () 
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a mutable iterator which
    is the past-end-value of&nbsp;<I>l</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_const_iterator_end69_const;"></A>
const_iterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.end () const
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a constant
    iterator which is the past-end-value of&nbsp;<I>l</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_empty69_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.empty ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>true</I> if <I>l</I> is
    empty.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_size_type_size69_const;"></A>
size_type
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.size ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the number of
    items in list&nbsp;<I>l</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_size_type_max_size69_const;"></A>
size_type
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.max_size ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the maximum
    possible size of the list&nbsp;<I>l</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_T__front69;"></A>
T&amp;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.front ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the first item in list&nbsp;<I>l</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_T__back69;"></A>
T&amp;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.back ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the last item in list&nbsp;<I>l</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_allocator_type_get_allocator69_const;"></A>
allocator_type
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.get_allocator ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the alloctor.
        </TD></TR>
        </TABLE>
<P>

<H3>Insertion</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_push_front6_T_9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.push_front ( T&amp;)
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    inserts an item in front of
    list&nbsp;<I>l</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_push_back6_T_9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.push_back ( T&amp;)
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    inserts an item at the back
    of list&nbsp;<I>l</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_iterator_insert6iterator_pos+_T__t9;"></A>
iterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.insert ( iterator pos,  T&amp; t)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_iterator_insert6T*_pos+_T__t9;"></A>
iterator
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.insert ( T* pos,  T&amp; t)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    inserts <I>t</I>
    in front of <I>pos</I>.  The return value points to the
    inserted item.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_insert6iterator_pos+_size_type_n+_const_T__t_=_T699;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.insert ( iterator pos,  size_type n,  T t = T())
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_insert6T*_pos+_size_type_n+_const_T__t_=_T699;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.insert ( T* pos,  size_type n,  T t = T())
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    inserts <MATH><I>n</I></MATH> copies of <I>t</I> in front of
    <I>pos</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    template &lt;class InputIterator&gt;
        </I></NOBR>
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_insert6iterator_pos+_InputIterator_first+_InputIterator_last9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    l.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    iterator pos,<BR>

InputIterator first,<BR>

InputIterator last)</I></TD></TR></TABLE>
    
        </I></NOBR>
        
    
        </TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    template &lt;class InputIterator&gt;
        </I></NOBR>
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_insert6T*_pos+_InputIterator_first+_InputIterator_last9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    l.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    T* pos,<BR>

InputIterator first,<BR>

InputIterator last)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    inserts the range
    [<I>first, last</I>) in front of iterator <I>pos</I>.
        </TD></TR>
        </TABLE>
<P>

As long as member templates are not supported, member functions
  using <I>T*</I> instead of the general <I>InputIterator</I>
  are provided.
<P>

<H3>Removal</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_pop_front69;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.pop_front ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the first item from
    list&nbsp;<I>l</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_pop_back69;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.pop_back ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the last item from
    list&nbsp;<I>l</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_erase6iterator_pos9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.erase ( iterator pos)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the item from
    list&nbsp;<I>l</I>, where <I>pos</I> refers to.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_erase6T*_pos9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.erase ( T* pos)
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the item from
    list&nbsp;<I>l</I>, where <I>pos</I> refers to.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_erase6iterator_first+_iterator_last9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.erase ( iterator first,  iterator last)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_erase6T*_first+_T*_last9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.erase ( T* first,  T* last)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    removes the items
    in the range [<I>first, last</I>) from&nbsp;<I>l</I>.
        </TD></TR>
        </TABLE>
<P>

<H3>Special List Operations</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_splice6iterator_pos+_In_place_list6T+bool9__x9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.splice ( iterator pos,  &amp; x)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_splice6T*_pos+_In_place_list6T+bool9__x9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.splice ( T* pos,  &amp; x)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    inserts the list <MATH><I>x</I></MATH> before position <I>pos</I> and <MATH><I>x</I></MATH>
    becomes empty. It takes constant time.<BR>

<EM>Precondition: </EM><I>&amp;</I> <I>l</I><I>!= &amp;x</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_splice6iterator_pos+_In_place_list6T+bool9__x+_iterator_i9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.splice ( iterator pos,  &amp; x,  iterator i)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_splice6T*_pos+_In_place_list6T+bool9__x+_T*_i9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.splice ( T* pos,  &amp; x,  T* i)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    inserts an element pointed to by <MATH><I>i</I></MATH> from list <MATH><I>x</I></MATH> before
    position <I>pos</I> and removes the element from <MATH><I>x</I></MATH>. It takes
    constant time. <MATH><I>i</I></MATH> is a valid dereferenceable iterator of <MATH><I>x</I></MATH>.
    The result is unchanged if <I>pos == i</I> or <I>pos ==       ++i</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_splice6iterator_pos+_In_place_list6T+bool9__x+_iterator_first+_iterator_last9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    l.splice ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    iterator pos,<BR>

&amp; x,<BR>

iterator first,<BR>

iterator last)</I></TD></TR></TABLE>
    
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_splice6T*_pos+_In_place_list6T+bool9__x+_T*_first+_T*_last9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.splice ( T* pos,  &amp; x,  T* first,  T* last)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    inserts elements in the range [<I>first,       last</I>) before position <I>pos</I> and removes the elements
    from <MATH><I>x</I></MATH>. It takes constant time if <I>&amp;x == &amp;</I><I>l</I>;
    otherwise, it takes linear time. [<I>first, last</I>) is a
    valid range in <MATH><I>x</I></MATH>.<BR>

<EM>Precondition: </EM><I>pos</I> is not in the range
    [<I>first, last</I>).
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_remove6const_T__value9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    l.remove (  T value)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    erases all elements <MATH><I>e</I></MATH> in
    the list <I>l</I> for which <I>e == value</I>. It is stable.<BR>

<EM>Precondition: </EM>a suitable <I>operator==</I> for the type <MATH><I>T</I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_unique69;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.unique ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    erases all but the first element from
    every consecutive group of equal elements in the list <I>l</I>.<BR>

<EM>Precondition: </EM>a suitable <I>operator==</I> for the type <MATH><I>T</I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_merge6In_place_list6T+bool9__x9;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.merge (  &amp; x)
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    merges the list <MATH><I>x</I></MATH>
    into the list <I>l</I> and <MATH><I>x</I></MATH> becomes empty. It is stable.<BR>

<EM>Precondition: </EM>Both lists are increasingly sorted. A suitable
    <I>operator&lt;</I> for the type <MATH><I>T</I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_reverse69;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.reverse ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    reverses the order of the elements in
    <I>l</I> in linear time.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_sort69;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    l.sort ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    sorts the list <I>l</I> according to the
    <I>operator&lt;</I> in time <MATH><I>O(n </I></MATH>log<MATH><I>n)</I></MATH> where <I>n =       size()</I>. It is stable.<BR>

<EM>Precondition: </EM>a suitable <I>operator&lt;</I>
    for the type <MATH><I>T</I></MATH>.
        </TD></TR>
        </TABLE>
<P>

<H3>Example</H3>
<P>

<pre class="ExampleCode">// in_place_list_prog.C                 
// -------------------------------
#include &lt;CGAL/basic.h&gt;
#include &lt;cassert&gt;
#include &lt;algorithm&gt;
#include &lt;CGAL/<A HREF="Class_In_place_list.html#Cross_link_anchor_1434">In_place_list</A>.h&gt;

using <A HREF="Class_In_place_list_base.html#Cross_link_anchor_1431">CGAL::In_place_list_base</A>;

struct item : public <A HREF="Class_In_place_list_base.html#Cross_link_anchor_1432">In_place_list_base</A>&lt;item&gt; {
    int key;
    item() {}
    item( const item&amp; i) : <A HREF="Class_In_place_list_base.html#Cross_link_anchor_1432">In_place_list_base</A>&lt;item&gt;(i), key(i.key) {}
    item( int i) : key(i) {}
    bool operator== (const item&amp; i) const { return key == i.key;}
    bool operator!= (const item&amp; i) const { return ! (*this == i);}
    bool operator== (int i) const         { return key == i;}
    bool operator!= (int i) const         { return ! (*this == i);}
    bool operator&lt;  (const item&amp; i) const { return key &lt; i.key;}
};

int main() {
    typedef <A HREF="Class_In_place_list.html#Cross_link_anchor_1433">CGAL::In_place_list</A>&lt;item,true&gt; List;
    List l;
    item* p = new item(1);
    l.push_back(*p);
    l.push_back(*new item(2));
    l.push_front(*new item(3));
    l.push_front(*new item(4));
    l.push_front(*new item(2));
    List::iterator i = l.begin();
    ++i;
    l.insert(i, *new item(5));
    l.insert(p, *new item(5));
    int a[7] = {2,5,4,3,5,1,2};
    bool ok = std::equal(l.begin(), l.end(), a);
    assert(ok);
    l.sort();
    l.unique();
    assert(l.size() == 5);
    int b[5] = {1,2,3,4,5};
    ok = std::equal(l.begin(), l.end(), b);
    assert(ok);
    return 0;
}
</pre>
<P>

<div class="NavNext"><hr> <b>Next:</b> <a href="Class_Compact_container_base.html"><I>Compact_container_base</I></a> 


    
<div class="NavBottom">
<hr><!-- Bottom Navigation --------------------------------------------- -->
  <strong>Navigation:</strong>
<!Up_chapter_link_3!>
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<!-- End of Bottom Navigation ------------------------------------------ -->


<hr><!-- --------------------------------------------------------------- -->
<div class="NavAddress">

The <A HREF=http://www.cgal.org>CGAL Project</A> .

Tue, December 21, 2004 .
<hr></div>
</body>  </html>  
