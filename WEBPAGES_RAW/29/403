<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1" />
<META HTTP-EQUIV="UPDATED" CONTENT="Tuesday, November 22, 2005 9:30 AM" />
<TITLE>ICS 31 Lab 1</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="33CB8976" />
<META HTTP-EQUIV="DESCRIPTION" CONTENT="Homework Assignments for Informatics 41, the Informatics Core Course, using How to Design Programs by Felleisen, Findler, Flatt, and Krishnamurthi and Fluency by Snyder, at UC Irvine." />
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved." />
<link href="http://www.ics.uci.edu/~kay/courses/31/mainstyle.css" rel="stylesheet" type="text/css" />
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<p><FONT size="2"  >ICS 31 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2016</FONT></p>
<p><FONT   SIZE=6><B>Lab Assignment 1 </B></FONT>
</p>
<P><font  >This assignment is due by 10:00 p.m. on Friday, September 30.</font></P>
<P><font  ><strong>Preparation</strong></font> (Do this part individually, before coming to lab)</P>
<P>Some of these items are repeated from Lab Assignment 0 because they're important and some people may have added the class late. We won't be repeating assignment parts in the future.</P>
<P><font  ><strong>(1)</strong> (Repeated from the previous assignment) Do everything on the course refrence sheet (the syllabus) under the heading &quot;What to do this week to get started in ICS 31.&quot; This includes filling out the questionnaire at <a href="http://eee.uci.edu/survey/ics31.f16.q"><code>eee.uci.edu/survey/ics31,f16.q</code></a> and registering yourself at <a href="http://checkmate.ics.uci.edu/"><code>checkmate.ics.uci.edu</code></a> and <a href="https://piazza.com/uci/fall2016/ics31"><code>piazza.com</code></a>. </font></P>
<P><strong>(2)</strong> Read through the Lab Work part of this assignment before you come to lab, to get an idea of what you'll be doing with your partner.</P>
<P><strong>(3)</strong> <font  >(Repeated from the previous assignment) </font>If you haven't already, read the <a href="http://www.ics.uci.edu/~kay/courses/31/pair.html">guidelines for pair programming</a>. They describe how you will be doing all your work in the lab. Pair programming is not as simple as just working together; there are specific roles and specific things each person needs to do.</P>
<P><strong>(4) </strong><font  >(Repeated from the previous assignment) </font>We encourage you to talk with each other and help each other understand how to do the assignments. There are some limits, though; in particular, remember that knowing <em>how</em> to do it (when the quizzes and exams come, for example) is much more important than just putting down the answer. If you haven't already, read the <a href="http://www.ics.uci.edu/~kay/courses/31/collab.html">guidelines for collaboration and independent work</a>. You may also wish to read some general advice about <a href="http://www.ics.uci.edu/~kay/college.html">how to approach college work</a>; not all of the practices that served you well in secondary school will work well here.
</P>
<P><strong>(5)</strong> <font  >(Repeated from the previous assignment) </font>Read Chapter 1  of the Perkovic textbook; it provides some background, including some issues we talked about in class.</P>
<P>These &quot;preparation&quot; sections of each assignment will include the reading in the text and some exercises for you to try out as you read.  People learn best when they apply what they read as they go, so it's best to read the book with a computer at hand so you can type things in and try them out. There's always a big gap between thinking you understand something you read and actually being able to apply it. We expect these exercises to go quickly, but if you find yourself spending more than a couple of minutes on an exercise without making any progress, you should ask about it (on Piazza, probably) rather than continuing to spin your wheels unproductively. Note that this also means you should get started early, so that you'll have the time to get any questions answered.</P>
<P><strong>(6)</strong> <font  >(Repeated from the previous assignment)</font> Read sections  2.1 and 2.2 of the Perkovic text. </P>
<P>As you're reading, it's important that you apply what you're reading; it's impossible to learn this material without actually working through it. Perkovic provides &quot;Practice Problem&quot; sections: You should try to do nearly all of these in whichever text you're using. Don't get stalled for a long time on any single question, but if you have trouble, ask someone.  Especially early in the course, it may seem tedious and slow because you're just learning your way. But the effort here will pay off in a greater facility later (or, to put it negatively, failing to do this now will result in disappointing performance later).</P>
<P>We don't require you to turn in your answers to these practice problems; most of the solutions  appear at the end of the chapter in Perkovic. But don't just read the problem, turn to the solution, and say, &quot;Yeah, that looks right.&quot; Write down your answer first; force yourself to work it through. That's how you learn.</P>
<P><strong>(7)</strong> <font  >(Repeated from the previous assignment)</font> If you'd like to install Python on your personal machine, follow <a href="http://www.ics.uci.edu/~thornton/ics32/ProjectGuide/Assignment0/">these instructions</a>. (If you're in a &quot;Laptop Only&quot; section, sections 8–12, you'll need to do this. Your TA or lab tutor may be able to help in lab.)</P>
<P>&nbsp;</P>
<p><font  ><strong>Lab Work</strong></font> (Do this part with your partner in lab)</p>
<p><strong>(a)</strong> Choose a partner for this assignment and register your choice in the <a href="http://ics31-partner-app.appspot.com/">partner app</a>. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only on this assignment. Your partner must be enrolled in the same lab section you're enrolled in. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab. 
 All your computer-based work on this (and every) lab assignment must follow the <a href="http://www.ics.uci.edu/~kay/courses/31/pair.html">pair programming guidelines</a>.
<p><strong>(b)</strong> (Repeated from the previous assignment.) Locate and launch the IDLE software.
  
IDLE starts up with a &quot;Python Shell&quot; window where we'll see the results of most of our programs. IDLE also lets you open up a program window; do this now, by choosing &quot;New Window&quot; from the File menu. Give that window a name right away and save it, by choosing &quot;Save As&quot; from the file menu and specifying the name <code>lab1.py</code> . (You can save it anywhere on your machine; just don't forget where you put it and remember to recycle/discard it after you're done so that the next student on your lab machine doesn't use your work by mistake.)
<p>In your 
  <code>lab1.py</code> file, you can type <code>print</code> statements that contain expressions; when you run the  code in the file (choose &quot;Run Module&quot; from the Run menu or press the F5 key), the results are printed in the Python Shell window. Try it: Type <code>print('Hello')</code> in your <code>lab1.py</code> file and then run it. You should se<code>e Hello </code>
in the shell window.
<p>[It is also possible to type expressions, without the <code>print</code>, directly into the shell window after IDLE's &quot;prompt&quot; of three greater-than signs (&quot;<code>&gt;&gt;&gt;</code>"). This behaves a little differently, though, and most beginners find it confusing, so for now we're going to type all our Python code in a code window and run it when we're ready.]
<p><strong>(c)</strong> Experiment with IDLE to get familiar with it, following the suggestions below. One person "drives" (types); the other "navigates" (observes, questions, suggests); if you don't know what this is about, go back and read the <a href="http://www.ics.uci.edu/~kay/courses/31/pair.html">pair programming guidelines</a>. The main point of this assignment is to get you familiar with the mechanics of IDLE, Python, and pair programming.
<p>Try printing the values of some expressions, like <code>print(123 + 456)</code> and <code>print(2 ** 5)</code> (<code>**</code> is the operator for exponents) and <code>print(5 * 4 * 3 * 2 * 1)</code>. 
<p>Type in some definitions, like <code>number_of_students = 356</code> and <code>number_of_staff = 16</code> and then try printing expressions like <code>number_of_students / number_of_staff</code>.


(That is, type the Python statement <code>print(number_of_students / number_of_staff)</code>. At this point we'll just say &quot;print the expresion X&quot; and you'll know to type the Python statement <code>print(</code>X<code>)</code> in your <code>lab1.py</code> file and then run it.)
<p>Probably you've already done this a few times: Type some things that Python can't evaluate and see what messages Python produces. (Error messages are not bad; they're an inevitable part of programming. Don't think of them as the computer yelling at you; it's just trying to tell you why it couldn't process something.  The language of error messages can be cryptic, but you will learn how to pick through them for useful clues to what Python thinks the problem is.) 
<p>Save a copy of the Python Shell window that shows your work for this part (using Save a Copy As from the File menu). A good name for the file would be <code>lab1c.txt</code>; stick with a naming pattern like this for the rest of the quarter. It's fine if your interactions show false starts and mistakes; it's also fine if you just produce a short, clean copy. Edit the file to make sure it includes your name and your partner's at the top; when you're done with the assignment, this is one of the files you'll submit via Checkmate. You will also submit your <code>lab1.py</code> file containing whatever Python code you wrote for this part. (Don't know what Checkmate is? Look at the "What to do this week" section of the course syllabus).
<p>
<strong>(d)</strong> Switch roles now, if you haven't already, so the navigator can drive and vice versa. Don't worry if the new driver is less familiar with Python or IDLE than the first driver. Both will get more experienced rapidly.
<p>
As we mentioned briefly above, the Python shell window can be useful for testing out small things, but it doesn't save the code we type, so as our code gets longer and more involved, we need the technique we've already started using: We create a new window into which we can type Python code to save as a Python (<code>.py</code>) file. That's the way we'll be doing our work this quarter.
<p>The factorial function (written in mathematical notation with an exclamation point, so "n factorial" would be n!) is used in calculating how many ways there are to arrange things (like the number of different ways to arrange five students in a row). The value of n! is n· (n-1)· (n-2)· ...· 1, so 5! = 5· 4· 3· 2· 1 = 120.
<p>Create a new window (from the File menu) and save it as  <code>lab1d.py</code>. On the first line of the file type a pound sign followed by the names and IDs of both partners and some other identifying information, like this: 
<pre>
 #  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab Asst 1d.
</pre>
<p>Type the following function definition into your new window. Actually do the typing so you can get used to the way it works; don't just copy and paste. (We'll go over the details of this code in class some time soon; for now, this is just a typing exercise and you shouldn't try too hard to figure out how it works. If you're not used to typing programs, be careful to type accurately. In particular, the spacing at the beginnings of the lines matters in Python.) 
  Watch what happens every time you type a right-parenthesis, and watch what happens when you hit Return after typing a colon.
<pre>
def factorial (n: int) -> int:
    ''' Compute n! (n factorial) '''
    if n <= 0:
        return 1
    else:
        return n * factorial(n - 1)
assert factorial(0) == 1 
assert factorial(5) == 120 

print("10! is", factorial(10))
print("100! is", factorial(100))
</pre>
<p>
  When you're done, run the code (select Run Module from the Run menu or type the F5 key). Don't be surprised to get error messages; you've probably just mis-typed something, and programming languages are pickier than the pickiest human proofreader. Just use the messages to help you identify each typo until you get an error-free result.
<p>Now try changing the print statement(s) to print expressions like<code> factorial(120)</code>, <code>factorial(50 * 10)</code>, and <code>factorial(factorial(5))</code>. Re-run the code to see what the results are.</p>
<p>
Python can handle long numbers effortlessly, but any computer is finite; what do you think might happen if you evaluate <code>factorial(factorial(50))</code>? You can try this, but you'll have to stop the evaluation by selecting Restart Shell from the Shell menu.
<p>Make sure both partners' names are at the top of the Python file you typed, save that file, and submit it via Checkmate.

But before you submit it, run the file one last time. It should produce correct results. If it doesn't, correct the mistakes before you submit it. Whenever you submit a Python file in ICS 31, the file should produce correct results when you (or we) run it; you won't receive credit if it produces an error message.
<p><strong>(e)</strong> 
<!-- In the Python Shell in IDLE, type any expression, like <code>17 * 5</code>, and hit Return. The shell evaluates it and displays its value. Now type <code>print(17 * 5)</code> and evaluate it. You get the same value. (The book will get to Python's print statement a little later, but we're going to find it useful now.) </p>
<p>But try it with a string expression: Evaluate <code>'ics31'[2]</code>, then evaluate <code>print('ics31'[2])</code>. You get the same value, but without the quotation marks. When we're working on small pieces of our code directly in the Python interpreter (the Python Shell window), it doesn't matter much to us whether we see the quotes or not. But in a real program, we don't usually want quotes around our strings. We don't know quite enough yet to write complete programs, but as you work on the exercises in this assignment, you may want to type them into a Python file to edit and save them. If you type Python code into a Python file and run it (from the Run menu), you need to print expressions to see their values. </p>
-->In IDLE, create a new file and save it as <code>lab1e.py</code>. When you have your personal ICS lab account, save the file on your personal H: drive (or on a removable thumb drive). If you save it on the common C: drive, someone else might pick it up later (by mistake, we hope, but it would still lead to a lot of awkward questions about academic honesty). Keeping personal information secure is a real-world skill; people who work with health and other personal information can get in huge trouble if they leave personal information open to unauthorized access.
<p>On the first line of the file type a pound sign followed by the names and IDs of both partners and some other identifying information, like this: 
<pre>
 #  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab Asst 1e.
</pre>
<p>Now put in a couple of print statements that print some expressions—any expressions, you make them up—and run the code in the file. Once you have this working, continue with the rest of this assignment. Type your solutions to the rest of the lab into your  <code>lab1e.py</code> file, which you will submit via Checkmate. (It's a good idea if each partner keeps a copy of the lab work at the end of each session, just in case someone can't make it to the next lab.)</p>

<p><strong>(f)</strong> 
<!-- Exercise 2.12 â€” Three problems
Broad topic: Writing expressions from English
Specific topic: Numeric expressions involving addition, average, exponents, mod, and division
Problem domain: None; just mechanical

Replacement--> Python exercises; answer in your <code>lab1e.py</code> file. [If you're moving along quickly, it's possible that you'll get to some problems below that address topics we haven't gotten to yet in class. Feel free to try them; it's also fine to wait until class catches up.]
<p>
<b>(1)</b> Write Python expressions that correspond to each of the following statements:</p>
<ul>
<li>
The sum of the five even integers from 2 to 10.
</li><li>
The average of this group of test scores: 75%, 83.5%, 61%, 43%
</li><li>
2 to the 10th power
</li><li>
A moving anteater has a mass of 50 kg and a velocity (speed) of 15 meters per second.
Compute its kinetic energy using this formula:  1/2 times the mass times the velocity squared.
</li></ul>
<!--
Solutions
2 + 4 + 6 + 8 + 10
(75 + 83.5 + 61 + 43) / 4
2 ** 10
.5 * 50 * (15 ** 2)

	Wow!  I found some solutions here in the web page source!
    
	Now I can just copy them and I don"t have to think through
	those problems myself!  I"ve just saved some time!
    
	But wait.  You need to learn the concepts that these problems
	test.  You learn them by solving the problem, not copying the
	solution.  And you need to learn these concepts for later work
    (labs and exams) this quarter.  You don't learn by copying the
    answers; you need to generate them yourself.
    
    Your lab assignment score probably won't improve by copying
    these answers, because most students will get them right
    whether they copy them or work them out.  But the student
    who copies risks much lower scores on later assignments
    and exams---at that point, it's a lot harder to go back
    and learn these more basic concepts.
    
    So if you go ahead and copy these, it's your grade you're risking.
    
    (The above is the purely practical reason not to copy
    answers.  Copying answers rather than working them out
    as instructed may also violate the policies about 
    academic dishonesty.  You might think that all correct
    solutions look the same; that may even be true for the
    first few assignments. But pretty soon it will be easy
    for us to identify copied solutions.)

-->
<!--
â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
Exercise 2.13 â€” Two problems
Broad topic: Writing expressions from English
Specific topic: String concatenation
Problem domain: None; just mechanical

Replacement-->
<b>(2)</b> We're designing a game where players can create castle defenses against invaders.
Each side of the castle consists of a sequence of wall parts and cannons:  We
represent a six-segment side with no cannons as <code>'wwwwww'</code>; a five-segment
side with one cannon in the middle would be <code>'wwcww'</code>.</p>
<p>Define these two variables:</p>
<pre><code>wall = 'w'
cannon = 'c'</code></pre>
<p>Using the variables <code>wall</code> and <code>cannon</code>, the string operators <code>+</code> and <code>*</code>, and parentheses, write string expressions that evaluate to:</p>
<ul>
<li><code> "wc" </code></li>
<li><code> "wcw" </code></li>
<li><code> "wwwcwww" </code></li>
<li><code> "wccwccwccwcc" </code></li>
<li><code> "wwwcwwwcwwwcwwwcw" </code></li>
<li><code> "wwwwcwwwwcwwwwcwwwwcwwww" </code></li>
</code></ul>
Try making your string expressions as compact as you can.<!--
Solutions
wall + cannon
wall + cannon + wall
3 * wall + cannon + 3 * wall
(wall + 2 * cannon) * 4
4 * (3 * wall + cannon) + wall
wall * 2 + (wall*2 + cannon + wall*2) * 4 + wall * 2 


THINKING ABOUT JUST COPYING THESE SOLUTIONS<br>
AND TURNING THEM IN?  See the note above.  
-->
<!-- â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
Exercise 2.14 â€” Three problems
Broad topic: Writing expressions from English
Specific topic: Indexing operators on strings
Problem domain: None; just mechanical

Replacement -->
<p><b>(3)</b>
Scores on a quiz range from 0 to 5.
Suppose we have the following assignment statement (which represents the quiz scores of all the students in a class):
</p>
<code> test_scores = "4325220523455023"</code>
<p>
Using the variable <code>test_scores</code> and the indexing operators,
write four separate expressions whose values are each of
the following:  quiz score for the 1st student, the 5th student,
the 10th student, and the 16th student.  Remember zero-based indexing.
</p>
<!--
Solution
test_scores[0]
test_scores[4]
test_scores[9]
test_scores[15]
-->
<!-- â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
Exercise 2.15 â€” Four problems
Broad topic: Writing expressions from English
Specific topic: Boolean expressions and indexing operators
Problem domain: None; just mechanical

Replacement -->
<p><b>(4)</b>
Suppose we have the following assignment statement:</p>
<code> s = "anteater"</code>
<p>
For each of the following, write a boolean expression that represents the English statement:
<ul>
<li>The first character of string <code>s</code> is <code>"a"</code>
</li>
<li>The last character of string <code>s</code> is <code>"r"</code>
</li>
<li>The fourth character of string <code>s</code> is <code>"x"</code>
</li>
<li>The first three characters of string <code>s</code> match the string <code>"zot"</code><!-- Solution
s[0] == "a"
s[-1] == "r"
s[3] == "x"
s[0:3] == "zot"
-->
<!--
â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
Exercise 2.16 â€” Four problems
Broad topic: Writing expressions from English
Specific topic: Variable assignment
Problem domain: Mechanical, office supplies, and names

Replacement -->
</li></ul>
<p><b>(5)</b> Write Python assignment statements that correspond to each of the following:</p>
<ul>
<li>Assign 3.14159 to variable <code>pi</code>
</li>
<li>Assign the values
<code>"Toyota"</code>, <code>"Camry"</code>, and <code>2014</code>
to the variables <code>make</code>, <code>model</code>, and <code>year</code> 
</li>
<li>Assign a list containing strings <code>"Computer Science"</code>, <code>"Informatics"</code>, and <code>"Computer Game Science"</code> to the variable <code>ICS_majors</code>
</li>
<li>Assign the variable <code>a</code> to be the average of the odd numbers from 3 to 9.
</li>
</ul>
<!--
<pre>Solution
pi = 3.14156
make = "Toyota"; model = 'Camry'; year = 2014
	(typically we'd write these on separate lines
	without the semicolons)
ICS_majors = ["Computer Science", "Informatics", "Computer Game Science"]
a = (3 + 5 + 7 + 9) / 4
</pre>
-->
<!--
â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
Exercise 2.17 â€” Four problems
Broad topic: Writing expressions from English
Specific topic: Boolean expressions
Problem domain: None; just mechanical

Replacement -->
<p><b>(6)</b>
Write boolean expressions corresponding to each of the following statements:</p>
<ul>
<li>20 plus 35 is greater than 2 to the power of 4
</li>
<li>The string <code>"hello"</code> is not equivalent to the string <code>"goodbye"</code>
</li>
<li>The remainder when 10 is divided by 3 is less or equal to 1.
</li>
<li>The list <code>["apple", "orange", "banana", "mango"]</code> contains 5 elements.
</li>
<li>The number 63 is an even number.
</li>
</ul>
<!--Solution
20 + 35 > 2**4
"hello" != "goodbye"
10 % 3 <= 1
len(["apple", "orange", "banana", "mango"]) == 5
63 % 2 == 0
-->
<!--
â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
Exercise 2.21 â€” One problem
Broad topic: Writing expressions from English
Specific topic: String concatenation and indexing operators
Problem domain: None; just mechanical

Replacement -->
<p><b>(7)</b>
Start with the following assignment statement:<br />
<code> s = "abcdefghijklmnopqrstuvwxyz"</code>
</p>
<p>Using only string concatenation and the indexing operator on the string <code>s</code>, write Python expressions that result in the following:</p>
<ul>
  <li><code>"dog"</code>
</li>
<li><code>"tv"</code>
</li>
<li><code>"ics"</code>
</li>
<li><code>"uci"</code>
</li>
</ul>
<!--
Solution

s[3] + s[14] + s[6]
s[19] + s[21]
s[8] + s[2] + s[18]
s[20] + s[2] + [8]
-->

<!--  ORIGINAL PERKOVIC EXERCISES
At the end of Chapter 2, do the following exercises. Where the exercises say to write Python expressions or evaluate them in the shell window, instead you should put those expressions into your   <code>lab1e.py</code> file and print their values.</p>
<p> Exercise 2.12: choose three parts from (a) to (e); Exercise
  2.13: chose one from (a) to (c) plus one from (d) to (f); Exercise
  
  2.14: choose three of the letters listed; Exercise
  
2.15: choose four from (a) to (g).</p>
<p>Then do Exercise 2.16 (a), (b), (d), and (e); Exercise
  2.17 (a), (c), (d), and (e); Exercise 2.21.</p>
-->
<p><strong>(g)</strong> Done, and it's not Friday yet? Good for you! But you should know that the rest of the class will catch up to you and that later assignments will take everyone longer. And ask yourself: Are you sure that both you and your partner understand everything in this assignment? Could each of you re-solve each problem easily? Does each of you understand every technical term used?</p>
<p>Take this opportunity to make sure each of you has a solid foundation in the basics. If you like, try some of the problems at <a href="http://codingbat.com/python">Codingbat.com.</a></p>
<p><strong>(h) </strong>Remember that each partner must complete a partner evaluation form and submit it individually. Do this by connecting to the <a href="http://ics31-partner-app.appspot.com/">partner app</a>; you'll need to log in with your UCInet ID. The partner evaluations will typically be available on the day the lab is due.</p>
<p>Make sure you know your partner's name, first and last, so you can evaluate the right person. Please complete your evaluation by the end of the day on Friday, or Saturday morning at the latest. It only takes a couple of minutes and not doing it hurts your participation score. </p>
<p><strong>What to turn in:</strong> It would be an excellent idea to go back and re-read the assignment carefully now, to make sure you've completed all the steps specified. Then one member of each pair (not both!) must submit via Checkmate the files you created for parts (c), (d), (e) and (f) above; make sure both partners' names appear at the top of each file. Also remember that each student must complete a partner evaluation form; these evaluations contribute to your class participation score. Get in the habit of doing this every week on Friday after you've submitted your assignment; the partner evaluations close on Saturday.
  
<p style="color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; ">&nbsp;</p>
<p style="color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; "><font face="Helvetica" size="1">Written by David G. Kay in Fall 2012 for ICS 31, based on materials from ICS H21, H22, and Informatics 41; modified by David G. Kay, Winter and Fall 2013, Winter 2014, Fall 2014, Winter 2015, Fall 2015, Fall 2016. Python exercises by David Lepe, Winter 2014.</font><br class="Apple-interchange-newline">
<HR />
<FONT  ><A HREF="http://www.ics.uci.edu/~kay/">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />
<font size="2"  >
<!-- #BeginDate format:fcAm1a -->Tuesday, September 27, 2016 7:31 PM<!-- #EndDate -->
</font></span>
</BODY>
</HTML>
