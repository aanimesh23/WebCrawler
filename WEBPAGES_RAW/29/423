<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Command Line Cygwin Tools</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Command Line Cygwin Tools</h1>
<p>
</center>
<hr align="left" width="100%">
<p>
This document shows how to create and download project files for use with the
  Cygwin tools from the command line.
<p>
<hr align="left" width="100%">
<p>

<h3>Section 1) Testing the Cygwin Toolset and Clang</h3>
<p>
In this section you will create and run a trivial C++ project/program
   (including editing it, and seeing how syntax errors are reported).
<p>
<ol>
<li>Click the <img src="images/cygwin/cygwin64terminal.jpg"> (Cygwin64 Terminal
      icon).
    Perform the following actions in your come directory
      (mine is <b>pattis@pattishome12</b>).
    <p>
    <ul>
    <li>Make an empty directory for all ICS-46 Projects (<b>ics46projects</b>)
          using the <b>mkdir</b> command.
    <li>Connect to the <b>ics46projects</b> directory
          using the <b>cd</b> command.
    <li>Make an empty directory for the Trivial Test Project
         (<b>trivialtest</b>)
          using the <b>mkdir</b> command.
    <li>Connect to the <b>trivialtest</b> project directory
          using the <b>cd</b> command.
    <li>Use any editor (<b>vi</b> is automatically available in Cygwin;
          other editors can be downloaded; Windows editors can be used)
          to create a <b>main.cpp</b> file that contains the following code
          (e.g., copy/paste it):
    <b><pre>#include &lt;iostream&gt;

using namespace std;

int main() {
    cout << "Hello, World!" << endl;
    return 0;
}</pre></b>
<p>
    <li>Create a <b>CMakeLists.txt</b> file that contains the following code
          (e.g., copy/paste it):
    <b><pre>cmake_minimum_required(VERSION 3.3.2)

project(trivialtest)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

set(SOURCE_FILES main.cpp)

add_executable(trivialtest ${SOURCE_FILES})</pre></b>
<p>
    <li>List the contents of the <b>ics46project/trivialtest</b> directory
          storing these two files,
          by using the <b>ls</b> command.
    <li>Create the <b>make</b> files needed for this project,
          by using the <b>cmake .</b> command (reemember, you will
          do this just the first time you use a project).
    <li>List the contents of the <b>ics46project/trivialtest</b> directory
          storing the new files it creates (and the new <b>CMakeFiles</b>
          directory),
          by using the <b>ls</b> command.
    <li>Build the <b>trivialtest.exe</b> file needed to execute this program,
          by using the <b>make</b> command (you will do this each time
          that you modify a <b>.cpp</b> file in a project).
    <li>List the contents of the <b>ics46project/trivialtest</b> directory
          storing the new file it creates,
          by using the <b>ls</b> command.
   <li>Run the <b>trivialtest.exe</b> executable file,
          by using the <b>./trivialtest.exe</b> command.
   </ul>
   <p>
    The following <b>~/ics46projects/trivialtest</b>
      Cygwin64 Terminal window shows all these actions.
    <p>
    <img src="images/commandline/trivialtest.jpg">
    <p>
    If you do not see the <b>clang</b> and <b>clang++</b> compilers listed here,
      you might have multiple C/C++ compilers on your computer, and Cygwin
      is using the wrong one.
    In such a case, edit the <b>MakeLists.txt</b> file (specified above) to
      contain the following two <b>set</b> commands between the
      <b>cmake_mininum_required</b> and <b>project</b> commands.
<b><pre>  cmake_minimum_required(VERSION 3.3.2)

  set(CMAKE_CXX_COMPILER "/cygdrive/c/cygwin64/bin/clang++")
  set(CMAKE_C_COMPILER "/cygdrive/c/cygwin64/bin/clang")

  project(trivialtest)</pre></b>
    Then execute the 2 commands <b>rm -f -r CMakeFiles</b> and
      <b>rm CMakeCache.txt</b> and repeat the commands above, starting at
      <b>cmake .</b>
    <p>

<li>Open a Windows file Explorer Window and navigate to the 
      <b>C:\cygwin\home\yourname\ics46projects\trivialtest</b> 
      directory, which is the same as the one manipulated using Cygwin.
    <p>
    The following 
      Explorer window should appear on your screen.
    <p>
    <img src="images/commandline/trivialtest windows.jpg">
    <p>
    You can use any combination of Windows and Cygwin commands to manipulate
      the files in this directory: whichever is simplest.
<p>

<li>Edit, rebuild, and rerun the <b>main.cpp</b> program,
   <ul>
   <p>
   <li>Use an editor to change the <b>cout</b> to print
         <b>"Goodbye, World!"</b>.
   <li>Show the <b>main.cpp</b> program file, by using the <b>more</b> command.
   <li>Rebuild the <b>trivialtest.exe</b> file using the same <b>make</b>
         command.
       There is no reason to use the <b>cmake</b> command here: it must be used
       only if we <b>change</b> the <b>CMakeLists.txt</b> file.
   <li>Rerun the edited <b>trivialtest.exe</b> file,
          by using the <b>./trivialtest.exe</b> command.
   </ul>
   <p>
    The following <b>~/ics46projects/trivialtest</b>
      Cygwin64 Terminal window shows all these actions.
    <p>
    <img src="images/commandline/trivialtest rebuild.jpg">
    <p>

<li>Create a syntax error (remove the <b>;</b> at the end of the <b>cout</b>
      line), and then follow the rebuilding/rerunning steps above
    The following <b>~/ics46projects/trivialtest</b>
      Cygwin64 Terminal window shows all these actions.
    <p>
    <img src="images/commandline/trivialtest syntax error.jpg">
    <p>
    The failed results of attempting to rebuild the program appear after the
      <b>make</b> command.
    In this case, the Clang compiler accurately indicates the source of the
      error.
    I have lengthened the window so as not cause lines to wrap.
</ol>
We will now continue by learning how to download a project and run it.
During the quarter, you will be asked to do this for all programming
  assignments and many quizzes.
<p>

<hr align="left" width="33%">
<h3>Section 2) Testing Downloadable Projects with the Course Libraries</h3>
<p>
In this section you will download the course libraries and then
  download/build/run a project that contains various programs that use these
  libraries.
<p>
<ol>
<li>Create a shortcut named <b>ics46projects</b> to the directory
      <b>C:\cygwin\home\yourname\ics46projects</b> and place it on your desktop
      near the 
      <img src="images/cygwin/cygwin64terminal.jpg"> (Cygwin64 Terminal icon).
<p>

<li>Download and unzip the file <a href="libraries.zip">template</a>;
    Copy its three directories (<b>courselib</b>, <b>googletestlib</b>, and
      <b>test_all_data_types</b>) into the directory that
      <b>ics46projects</b> shortcuts; it should already contain the
      <b>trivialtest</b>  directory,  created by the operations above.
    <p>
    Generally, whenever you download projects, you will unzip them and 
      then copy their directories into the directory that <b>ics46projects</b>
      shortcuts.
    <p>
    The following <b>~/ics46projects</b>
      Cygwin64 Terminal window lists these four directories.
    <p>
    <img src="images/commandline/libraries.jpg">
    <p>

<li>Connect to the <b>test_all_data_types</b> directory,
      by using the <b>cd</b> command.
    Hint: type only <b>cd te</b> and then press the <b>tab</b> key and Cygwin
      should complete the name of this directory; generally using <b>tab</b> for
      directory/file name completion can drastically reduce your typing in
      Cygwin.
    <p>
    List the contents of the <b>ics46project/test_all_data_types</b> directory,
          by using the <b>ls</b> command.
    Notice that this project folder contiains various <b>.cpp</b> files
      and a <b>CMakeLists.txt</b> file
    <p>
    The following <b>~/ics46projects/test_all_data_types</b>
      Cygwin64 Terminal window shows all these actions.
    <p>
    <img src="images/commandline/test_all_data_types.jpg">
    <p>

<li>Edit the <b>driver.cpp</b> file by uncommenting lines 30-35, so they
      appear as follows
    <b><pre>#include "driver_set.hpp"

int main() {
  ics::DriverSet d;
  return 0;
}</pre></b>
<p>

<li>Build and run the <b>main.cpp</b> program,
   <ul>
   <p>
   <li>Create the <b>make</b> files needed for this project,
         by using the <b>cmake .</b> command (recall you will
         do this just the first time you use a project).
   <li>Build the <b>test_all_data_types.exe</b> file needed to execute this
         program, by using the <b>make</b> command (you will do this each time
         that you modify a <b>.cpp</b> file in a project).
   <li>Run the <b>test_all_data_types.exe</b> executable file,
          by using the <b>./test_all_data_types.exe</b> command
          (remember to use command-completion to reduce your typing:
          but since many file names start with <b>test_</b> you will
          have to type <b>test_d</b> (a unique prefix for the <b>exe</b> file)
          before pressing <b>tab</b>.
   </ul>
   <p>
    The following <b>~/ics46projects/test_all_data_types</b>
      Cygwin64 Terminal window shows all these actions.
    <p>
    <img src="images/commandline/test_all_data_types run.jpg">
    <p>
    If you do not see the <b>clang</b> and <b>clang++</b> compilers listed here,
      you might have multiple C/C++ compilers on your computer, and Cygwin
      is using the wrong one.
    In such a case, edit the <b>MakeLists.txt</b> file (see part 3 above) to
      contain the following two <b>set</b> commands between the
      <b>cmake_mininum_required</b> and <b>project</b> commands.
<b><pre>  cmake_minimum_required(VERSION 3.3.2)

  set(CMAKE_CXX_COMPILER "/cygdrive/c/cygwin64/bin/clang++")
  set(CMAKE_C_COMPILER "/cygdrive/c/cygwin64/bin/clang")

  project(test_all_data_types)</pre></b>
    Then execute the 2 commands <b>rm -f -r CMakeFiles</b> and
      <b>rm CMakeCache.txt</b> and repeat the commands above, starting at
      <b>cmake .</b>
    <p>
    Experiment with this driver by entering commands (and their arguments, when
      prompted) to better understand the <b>set</b> data type.
    You can enter the <b>q</b> command to terminate the driver, or you can
      type <b>ctrl-c</b> to terminate the driver.
    <p>
    I suggest that you try terminating the driver with a <b>q</b> command; then,
      rerun the program and terminate it with <b>ctrl-c</b>.
<p>

<li>Recall in <b>Item 1</b> (at the top of this section) you created a shortcut
      named <b>ics46projects</b> to the directory
      <b>C:\cygwin\home\yourname\ics46projects</b>; we will now
      briefly explore the contents of this folder.
    Explore (double-click) the short-cut and double-click on the
      <b>test_all_data_types</b> folder.
    <p>
    The following explorer window should appear on your screen.
    <p>
    <img src="images/commandline/explorer test_all_data_types.jpg">
    <p>

<li>Double-click the <b>test_all_data_types.exe</b> file to run this program
      in Windows, outside of Cygwin.
    The following MS-DOS window should appear on your screen.
    <p>
    <img src="images/commandline/MSDOSRun.jpg">
    <p>
    <blockquote>
    If the error pop-window
    <p>
    <img src="images/clion/CLion patherror.jpg">
    <p>
    appears, you must also add <b>C:\cygwin64\bin</b> to the
      user variable <b>PATH</b>, briefly illustrated below
      (also see step 15 in the <a href="cygwin.html" target="_new">Cygwin</a> handout).
    <p>
    <img src="images/clion/CLion patherrorfix.jpg">
    <p>
    </blockquote>
    Experiment with this driver by entering commands (and their arguments, when
      prompted); it runs as it did in Cygwin.
    Note that when you enter the <b>q</b> command or <b>ctrl-c</b>, the program
      terminates and the MS-DOS window disappears.
    <p>
    So, when a program we run under Cygwin terminates, the screen retains the
      information printed (by <b>cout</b>) after the run terminates, but when we
      run it directly in an MS-DOS window, the window disappears after the run
      terminates.
    For example, if you find the <b>trivialtest.exe</b> file and run it by
      double-clicking this file, its MS-DOS windo will run and then immediately
      disappear.
<p>

<li>Find the <b>'input files'</b> directory in the <b>test_all_data_types</b>
      folder and copy all of its <b>.txt</b> data files up one level in the
      directory (the one that contains the <b>test_all_data_types.exe</b> file).
    <p>
    Then, run the program (either in the Cygwin or a MS-DOS window) and
      issue the <b>lf</b> command (load from file); when prompted for the file
      name, just press the enter key to choose the default (<b>loadset.txt</b>).
    <p>
    The following <b>~/ics46projects/test_all_data_types</b>
      Cygwin64 Terminal window shows all these actions.
    <p>
    <img src="images/commandline/lf command run.jpg">
    <p>
    Note that because the directory name <b>input files</b> contains a space,
      it appears in single quotes (<b>'input files'</b>) and must appear in
      single quotes in all Cygwin commands. 
    <p>
    <b>IMPORTANT</b>: If a program reads data files, the root directory for the
         specifying the files is the directory in which the <b>.exe</b> file
         appears.
       It is simplest to copy all the data files into this directory.
       An alternative would be to leave the files in the <b>input files</b>
         directory, and enter their names like <b>input files/loadset.txt</b>
         (note no quotes here: this is not a Cygwin command).
<p>

<li>A typical project folder may have more than one <b>.cpp</b> file with a
     main function (as <b>test_all_data_types</b> has).
    Only one of these <b>.cpp</b> files can have its main function uncommented,
      otherwise the build will fail.
    When working on project, it is typical to 
    <p>
    <ol type="a">
      <li>Comment-out code in one <b>.cpp</b> file.
      <li>Uncomment code in another <b>.cpp</b> file.
      <li>Rebuild/Rerun the newly uncommented <b>.cpp</b> file.
    </ol>
    <p>
    In the <b>test_all_data_types</b> project folder, the <b>driver.cpp</b>
      file has many main functions: we uncommented one (in step 4) to allow us
      to run the Set driver.
    If more than one main function is uncommented, attempting to build the code
      will result in the compiler specifying a <b>redefinition of 'main'</b>
      error.
    <p>
    The <b>test_all_data_types</b> project folder also contains many <b>.cpp</b>
      files (their names all start with <b>test</b>) that each contain one main
      function (each is a <b>Googletest</b> for one data type).
    If more than one file contains a main function, attempting to build the
      code will result in the linker specifying a
      <b>multiple definition of 'main'</b> error.
    <p>
    To switch this project from running the Set driver to the Set Googletest
    <ol type="a">
      <li>Edit the <b>driver.cpp</b> file and comment-out lines 30-35.
      <li>Edit the <b>test_set.cpp</b> file and uncomment all its lines.<br>
          Most program editors have a special command that allows commenting
          on selected lines to be toggeled.
    </ol>
    <p>
    Rebuild/Rerun the newly uncommented <b>.cpp</b> file.
    <p>
    The following <b>~/ics46projects/test_all_data_types</b>
      Cygwin64 Terminal window shows all these actions.
    <p>
    <img src="images/commandline/test_set run.jpg">
    <p>
    <p>
</ol>
<p>
We are now at the end of this handout.
You will not need to repeat the first two sections during the course, but you
  will frequently download project folders and use them as demonstrated in
  section 2.

</body>
</html>

