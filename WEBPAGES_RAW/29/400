//    Processing educational code
//    Copyright (C) 2013  Lee Martie
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

class Grid{
  
  Cell[][] grid;
  Cell currentLocation;
  int heightSize;
  int widthSize;
 
 Grid(int widthSize, int heightSize){
  grid = new Cell[widthSize][heightSize];
  
    for(int x = 0; x<widthSize; x++){
    for(int y = 0; y<heightSize; y++){
      Cell cell = new Cell();
      cell.x = x;
      cell.y = y;
      cell.visited = false;
      grid[x][y] = cell; 
    }
  }
  
  this.currentLocation = grid[widthSize/32][heightSize/32];
  this.currentLocation.visited = true;
  
  this.heightSize = heightSize;
  this.widthSize = widthSize;
  
 }
 
 public Cell getLocation(){
  return currentLocation; 
 }
 
 public void moveTo(Cell cell){
  currentLocation = cell;
      currentLocation.visited = true;

 }
 
 public void moveUp(){
   currentLocation = getUp();
   currentLocation.visited = true;
 }
 
  public void moveDown(){
     currentLocation = getDown();
     currentLocation.visited = true;
 }
 
  public void moveLeft(){
         currentLocation = getLeft();
         currentLocation.visited = true;
 }
 
  public void moveRight(){
         currentLocation = getRight();
         currentLocation.visited = true;
 }
 
 public Cell getUp(){
   
   if(currentLocation.y-1 >=0)
    return grid[currentLocation.x][currentLocation.y-1];
  else
    return currentLocation;
   
 }
 
 public Cell getDown(){
   if(currentLocation.y+1 <= heightSize)
    return grid[currentLocation.x][currentLocation.y+1];
  else
    return currentLocation;
 }
 
 public Cell getRight(){
   if(currentLocation.x+1 <= widthSize)
    return grid[currentLocation.x+1][currentLocation.y];
  else
    return currentLocation;
 }
 
 public Cell getLeft(){
   if(currentLocation.x-1 >= 0)
    return grid[currentLocation.x-1][currentLocation.y];
  else
    return currentLocation;
 }
 
 public List<Cell> getFreeLocalCells(){
  
  ArrayList<Cell> freeCells = new ArrayList<Cell>();
 
 Cell cell;
 
   cell = getUp();
   if(!cell.visited){
     freeCells.add(cell);
   }
   
   cell = getDown();
   if(!cell.visited){
     freeCells.add(cell);
   }
   
   cell = getRight();
   if(!cell.visited){
     freeCells.add(cell);
   }
   
      cell = getLeft();
   if(!cell.visited){
     freeCells.add(cell);
   }
 
 
   return freeCells; 
 }
 
}


