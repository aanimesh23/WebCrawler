<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- Page automatically generated from latex_to_html converter. -->
<!-- by cc_extract_html, $Revision: 3.19 $ -->
<!-- LaTeX source file: './Nef_2_ref/ExtendedKernelTraits_2.tex' -->
<html> <head>  
<title>ExtendedKernelTraits_2</title>
</head>  
<link href="../latex_to_html.css" rel="STYLESHEET">
<body bgcolor="white">
<!-- ------------------------------------------------------------------- -->


<!-- Top Navigation ---------------------------------------------------- -->
<div class="NavTop">
<hr>
  <strong>Navigation:</strong>
<a href="Chapter_intro.html">Up</a>, 
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<hr><!-- End of Top Navigation ----------------------------------------- -->
</div>


<A NAME="Cross_link_anchor_719"></A>

      
     
     
     
<A NAME="Index_anchor_744"></A> 

   
<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC="cc_Concept.gif"></TD></TR></TABLE>


    <A NAME="ccRef_ExtendedKernelTraits_2"></A>
<h2><I>ExtendedKernelTraits_2</I></h2>



     
     
     
<A NAME="Index_anchor_745"></A> 

<A NAME="Index_anchor_746"></A>
<P>

<H3>Definition</H3>
<P>

<I><A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A></I> is a kernel concept providing extended
geometry<A HREF="#Footnote_1"><SUP>1</SUP></A>. Let <I>K</I>
be an instance of the data type <I><A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A></I>.  The
central notion of extended geomtry are extended points. An extended
point represents either a standard affine point of the <A HREF="../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6">Cartesian</A> plane
or a non-standard point representing the equivalence class of rays
where two rays are equivalent if one is contained in the other.
<P>

Let <MATH><I>R</I></MATH> be an infinimaximal number<A HREF="#Footnote_2"><SUP>2</SUP></A>, <MATH><I>F</I></MATH> be the <A HREF="../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418">square</A> box with corners <MATH><I>NW(-R,R)</I></MATH>, <MATH><I>NE(R,R)</I></MATH>,
<MATH><I>SE(R,-R)</I></MATH>, and <MATH><I>SW(-R,-R)</I></MATH>. Let <MATH><I>p</I></MATH> be a non-standard point and let
<MATH><I>r</I></MATH> be a ray defining it. If the frame <MATH><I>F</I></MATH> contains the source point
of <MATH><I>r</I></MATH> then let <MATH><I>p(R)</I></MATH> be the <A HREF="../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221">intersection</A> of <MATH><I>r</I></MATH> with the frame <MATH><I>F</I></MATH>,
if <MATH><I>F</I></MATH> does not contain the source of <MATH><I>r</I></MATH> then <MATH><I>p(R)</I></MATH> is undefined.
For a standard point let <MATH><I>p(R)</I></MATH> be equal to <MATH><I>p</I></MATH> if <MATH><I>p</I></MATH> is contained in
the frame <MATH><I>F</I></MATH> and let <MATH><I>p(R)</I></MATH> be undefined otherwise. Clearly, for any
standard or non-standard point <MATH><I>p</I></MATH>, <MATH><I>p(R)</I></MATH> is defined for any
sufficiently large <MATH><I>R</I></MATH>. Let <MATH><I>f</I></MATH> be any function on standard points,
say with <MATH><I>k</I></MATH> arguments. We call <MATH><I>f</I></MATH> <I>extensible</I> if for any <MATH><I>k</I></MATH>
points <MATH><I>p<SUB>1</SUB></I></MATH>, ..., <MATH><I>p<SUB>k</SUB></I></MATH> the function value
<MATH><I>f(p<SUB>1</SUB>(R),...,p<SUB>k</SUB>(R))</I></MATH> is constant for all sufficiently large
<MATH><I>R</I></MATH>. We define this value as <MATH><I>f(p<SUB>1</SUB>,...,p<SUB>k</SUB>)</I></MATH>.  Predicates like
lexicographic order of points, <A HREF="../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247">orientation</A>, and incircle tests are
extensible.
<P>

An extended segment is defined by two extended points such that it is
either an affine segment, an affine ray, an affine line, or a segment
that is part of the <A HREF="../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418">square</A> box. Extended directions extend the affine
notion of direction to extended objects.
<P>

This extended geometry concept serves two purposes. It offers
functionality for changing between standard affine and extended
geometry. At the same time it provides extensible geometric primitives
on the extended geometric objects.
<P>

<H3>Types</H3>
<P>

<H3>Affine kernel types</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A>::Standard_kernel
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    the standard affine kernel.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A>::Standard_RT
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    the standard ring type.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A>::Standard_point_2
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    standard points.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A>::Standard_segment_2
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    standard segments.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A>::Standard_line_2
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    standard oriented lines.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A>::Standard_direction_2
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    standard directions.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A>::Standard_ray_2
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    standard rays.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A>::Standard_aff_transformation_2
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    standard affine transformations.
<P>

</TD></TR>
        </TABLE>
<P>

<H3>Extended kernel types</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A>::RT
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    the ring type of our extended kernel.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A>::<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    extended points.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A>::<A HREF="../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56">Segment_2</A>
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    extended segments.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719">ExtendedKernelTraits_2</A>::<A HREF="../Kernel_23_ref/Class_Direction_2.html#Cross_link_anchor_46">Direction_2</A>
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    extended directions.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A NAME="Function_Point_type"></A>
<A NAME="Enum_Point_type"></A>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    <A HREF="../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum">enum</A> <A HREF="Concept_ExtendedKernelTraits_2#Enum_Point_type">Point_type</A> { </TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP>
    <A HREF="Concept_ExtendedKernelTraits_2#Enum_Point_type">SWCORNER</A><A NAME="Function_Point_type"></A>
,<BR>

<A HREF="Concept_ExtendedKernelTraits_2#Enum_Point_type">LEFTFRAME</A><A NAME="Function_Point_type"></A>
,<BR>

<A HREF="Concept_ExtendedKernelTraits_2#Enum_Point_type">NWCORNER</A><A NAME="Function_Point_type"></A>
,<BR>

<A HREF="Concept_ExtendedKernelTraits_2#Enum_Point_type">BOTTOMFRAME</A><A NAME="Function_Point_type"></A>
,<BR>

<A HREF="Concept_ExtendedKernelTraits_2#Enum_Point_type">STANDARD</A><A NAME="Function_Point_type"></A>
,<BR>

<A HREF="Concept_ExtendedKernelTraits_2#Enum_Point_type">TOPFRAME</A><A NAME="Function_Point_type"></A>
,<BR>

<A HREF="Concept_ExtendedKernelTraits_2#Enum_Point_type">SECORNER</A><A NAME="Function_Point_type"></A>
,<BR>

<A HREF="Concept_ExtendedKernelTraits_2#Enum_Point_type">RIGHTFRAME</A><A NAME="Function_Point_type"></A>
,<BR>

<A HREF="Concept_ExtendedKernelTraits_2#Enum_Point_type">NECORNER</A><A NAME="Function_Point_type"></A>
};</TD></TR></TABLE>
    
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    a type descriptor for extended points.
<P>

</TD></TR>
        </TABLE>
<P>

<H3>Operations</H3>
<P>

<H3>Interfacing the affine kernel types</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_2_construct_point6const_Standard_point_2__p9_;"></A>
<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.construct_point (  Standard_point_2 p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    creates an extended point and initializes it to the standard point
<I>p</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_2_construct_point6const_Standard_line_2__l9_;"></A>
<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.construct_point (  Standard_line_2 l)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    creates an extended point and initializes it to the equivalence class
of all the rays underlying the oriented line <I>l</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_2_construct_point6const_Standard_point_2__p1+_const_Standard_point_2__p29_;"></A>
<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    K.construct_point ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     Standard_point_2 p1,<BR>

Standard_point_2 p2)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    creates an extended point and initializes it
to the equivalence class of all the rays underlying the oriented line
<I>l(p1,p2)</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_2_construct_point6const_Standard_point_2__p+_const_Standard_direction_2__d9_;"></A>
<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    K.construct_point ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     Standard_point_2 p,<BR>

Standard_direction_2 d)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    creates an extended point and initializes
it to the equivalence class of all the rays underlying the ray
starting in <I>p</I> in direction <I>d</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_2_construct_opposite_point6const_Standard_line_2__l9_;"></A>
<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.construct_opposite_point (  Standard_line_2 l)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    creates an extended point and initializes it to the equivalence
class of all the rays underlying the oriented line <A HREF="../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243">opposite</A> to
<I>l</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_type_type6const_Point_2__p9_;"></A>
<A HREF="Concept_ExtendedKernelTraits_2#Enum_Point_type">Point_type</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.type (  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    determines the type of
<I>p</I> and returns it.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_standard6const_Point_2__p9_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.is_standard (  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>true</I> iff
<I>p</I> is a standard point.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Standard_point_2_standard_point6const_Point_2__p9_;"></A>
Standard_point_2
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.standard_point (  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns
the standard point represented by <I>p</I>.<BR>

<EM>Precondition: </EM><I>K.is_standard(p)</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Standard_line_2_standard_line6const_Point_2__p9_;"></A>
Standard_line_2
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.standard_line (  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns
the oriented line representing the bundle of rays defining <I>p</I>.<BR>

<EM>Precondition: </EM><I>!K.is_standard(p)</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Standard_ray_2_standard_ray6const_Point_2__p9_;"></A>
Standard_ray_2
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.standard_ray (  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    a ray
defining <I>p</I>.<BR>

<EM>Precondition: </EM><I>!K.is_standard(p)</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_2_NE69_;"></A>
<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    K.NE ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the point on the northeast frame
corner.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_2_SE69_;"></A>
<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    K.SE ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the point on the southeast frame
corner.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_2_NW69_;"></A>
<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    K.NW ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the point on the northwest frame
corner.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_2_SW69_;"></A>
<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    K.SW ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the point on the southwest frame
corner.
        </TD></TR>
        </TABLE>
<P>

<H3>Geometric kernel calls</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_2_source6const_Segment_2__s9_;"></A>
<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.source (  <A HREF="../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56">Segment_2</A> s)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the source
point of <I>s</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_2_target6const_Segment_2__s9_;"></A>
<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.target (  <A HREF="../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56">Segment_2</A> s)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the target
point of <I>s</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Segment_2_construct_segment6const_Point_2__p+_const_Point_2__q9_;"></A>
<A HREF="../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56">Segment_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.construct_segment (  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p,  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> q)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    constructs a segment <I>pq</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_int_orientation6const_Segment_2__s+_const_Point_2__p9_;"></A>
int
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.<A HREF="../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247">orientation</A> (  <A HREF="../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56">Segment_2</A> s,  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the <A HREF="../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247">orientation</A> of <I>p</I> with respect to the line through
<I>s</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_int_orientation6const_Point_2__p1+_const_Point_2__p2+_const_Point_2__p39_;"></A>
int
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.<A HREF="../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247">orientation</A> (  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p1,  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p2,  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p3)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the <A HREF="../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247">orientation</A> of <I>p3</I> with respect to
the line through <I>p1p2</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_left_turn6const_Point_2__p1+_const_Point_2__p2+_const_Point_2__p39_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.<A HREF="../Kernel_23_ref/Function_left_turn.html#Cross_link_anchor_223">left_turn</A> (  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p1,  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p2,  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p3)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    return true iff the <I>p3</I> is left of the line
through <I>p1p2</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_degenerate6const_Segment_2__s9_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.is_degenerate (  <A HREF="../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56">Segment_2</A> s)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    return true iff
<I>s</I> is degenerate.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_int_compare_xy6const_Point_2__p1+_const_Point_2__p29_;"></A>
int
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.<A HREF="../Kernel_23_ref/Function_compare_xy.html#Cross_link_anchor_183">compare_xy</A> (  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p1,  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p2)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the lexicographic order of <I>p1</I> and <I>p2</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_int_compare_x6const_Point_2__p1+_const_Point_2__p29_;"></A>
int
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.<A HREF="../Kernel_23_ref/Function_compare_x.html#Cross_link_anchor_181">compare_x</A> (  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p1,  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p2)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the order on the <MATH><I>x</I></MATH>-coordinates of <I>p1</I> and <I>p2</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_int_compare_y6const_Point_2__p1+_const_Point_2__p29_;"></A>
int
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.<A HREF="../Kernel_23_ref/Function_compare_y.html#Cross_link_anchor_189">compare_y</A> (  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p1,  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p2)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the order on the <MATH><I>y</I></MATH>-coordinates of <I>p1</I> and <I>p2</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_2_intersection6_const_Segment_2__s1+_const_Segment_2__s29_;"></A>
<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.<A HREF="../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221">intersection</A> (  <A HREF="../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56">Segment_2</A> s1,  <A HREF="../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56">Segment_2</A> s2)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the point of <A HREF="../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221">intersection</A> of the lines supported by
<I>s1</I> and <I>s2</I>.<BR>

<EM>Precondition: </EM>the <A HREF="../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221">intersection</A> point exists.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Direction_2_construct_direction6_const_Point_2__p1+_const_Point_2__p29_;"></A>
<A HREF="../Kernel_23_ref/Class_Direction_2.html#Cross_link_anchor_46">Direction_2</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.construct_direction (  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p1,  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p2)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the direction of the vector <I>p2</I> -
<I>p1</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_strictly_ordered_ccw6const_Direction_2__d1+_const_Direction_2__d2+_const_Direction_2__d39_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    K.strictly_ordered_ccw ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     <A HREF="../Kernel_23_ref/Class_Direction_2.html#Cross_link_anchor_46">Direction_2</A> d1,<BR>

<A HREF="../Kernel_23_ref/Class_Direction_2.html#Cross_link_anchor_46">Direction_2</A> d2,<BR>

<A HREF="../Kernel_23_ref/Class_Direction_2.html#Cross_link_anchor_46">Direction_2</A> d3)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>true</I> iff
<I>d2</I> is in the interior of the counterclockwise angular sector
between <I>d1</I> and <I>d3</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_strictly_ordered_along_line6_const_Point_2__p1+_const_Point_2__p2+_const_Point_2__p39_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    K.strictly_ordered_along_line ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p1,<BR>

<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p2,<BR>

<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p3)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>true</I> iff <I>p2</I> is
in the relative interior of the segment <I>p1p3</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_contains6const_Segment_2__s+_const_Point_2__p9_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.contains (  <A HREF="../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56">Segment_2</A> s,  <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns true iff <I>s</I> contains <I>p</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_first_pair_closer_than_second6_const_Point_2__p1+_const_Point_2__p2+_const_Point_2__p3+_const_Point_2__p49_;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    K.first_pair_closer_than_second ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     <A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p1,<BR>

<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p2,<BR>

<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p3,<BR>

<A HREF="../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52">Point_2</A> p4)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns true iff
<MATH><I> <IMG BORDER=0 WIDTH=6 HEIGHT=29 ALIGN=MIDDLE SRC="cc_parallel.gif"> p1-p2 <IMG BORDER=0 WIDTH=6 HEIGHT=29 ALIGN=MIDDLE SRC="cc_parallel.gif">  &lt;  <IMG BORDER=0 WIDTH=6 HEIGHT=29 ALIGN=MIDDLE SRC="cc_parallel.gif"> p3-p4 <IMG BORDER=0 WIDTH=6 HEIGHT=29 ALIGN=MIDDLE SRC="cc_parallel.gif"> </I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_const_char*_output_identifier69_;"></A>
const char*
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    K.output_identifier ()
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a unique
identifier for kernel object Input/Output. Usually this should be the
name of the model.
        </TD></TR>
        </TABLE>
<P>

<H3>Has Models</H3>
<P>

<I><A HREF="Class_Extended_cartesian.html#Cross_link_anchor_720">CGAL::Extended_cartesian</A>&lt;FT&gt;</I><BR>

<I><A HREF="Class_Extended_homogeneous.html#Cross_link_anchor_722">CGAL::Extended_homogeneous</A>&lt;RT&gt;</I><BR>

<I><A HREF="Class_Filtered_extended_homogeneous.html#Cross_link_anchor_724">CGAL::Filtered_extended_homogeneous</A>&lt;RT&gt;</I>
<P>

<HR><H3>Footnotes</H3>
<P>

<TABLE><TR><TD VALIGN=TOP>
</TD></TR><TR><TD VALIGN=TOP>
        <A NAME="Footnote_1">&nbsp;<SUP>1</SUP>&nbsp;</A></TD><TD VALIGN=TOP>
It is called extended geometry for simplicity,
though it is not a real geometry in the classical sense.
</TD></TR><TR><TD VALIGN=TOP>
        <A NAME="Footnote_2">&nbsp;<SUP>2</SUP>&nbsp;</A></TD><TD VALIGN=TOP>
A finite but very large
number.

</TD></TR></TABLE>
<div class="NavNext"><hr> <b>Next:</b> <a href="Class_Extended_cartesian.html"><I>Extended_cartesian&lt;FT&gt;</I></a> 


    
<div class="NavBottom">
<hr><!-- Bottom Navigation --------------------------------------------- -->
  <strong>Navigation:</strong>
<!Up_chapter_link_12!>
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<!-- End of Bottom Navigation ------------------------------------------ -->


<hr><!-- --------------------------------------------------------------- -->
<div class="NavAddress">

The <A HREF=http://www.cgal.org>CGAL Project</A> .

Tue, December 21, 2004 .
<hr></div>
</body>  </html>  
