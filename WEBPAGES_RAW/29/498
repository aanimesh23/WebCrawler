<!-- received="Fri Aug 30 07:11:00 1996 PDT" -->
<!-- sent="Fri, 30 Aug 1996 10:02:01 -0400" -->
<!-- name="Murray Maloney" -->
<!-- email="murray@sq.com" -->
<!-- subject="Re: Seiwald Q &amp; A -- "GET for EDIT" cookies" -->
<!-- id="2.2.32.19960830140201.006edae4@sq.com" -->
<!-- inreplyto="Seiwald Q &amp; A -- "GET for EDIT" cookies" -->
<title>Archive of Working Group on Versioning and Configuration Management of World Wide Web Content: Re: Seiwald Q &amp; A -- "GET for EDIT" cookies</title>
<h1>Re: Seiwald Q &amp; A -- "GET for EDIT" cookies</h1>
<b>Murray Maloney</b> (<a href="mailto:murray@sq.com"><i>murray@sq.com</i></a>)<br>
<i>Fri, 30 Aug 1996 10:02:01 -0400</i>
<p>
<ul>
<li> <b>Messages sorted by:</b> <a href="index.html#123">[ date ]</a><a href="thread.html#123">[ thread ]</a><a href="subject.html#123">[ subject ]</a><a href="author.html#123">[ author ]</a>
<!-- next="start" -->
<li> <b>Next message:</b> <a href="0124.html">Christopher Seiwald: "Re: Seiwald Q &amp; A -- "GET for EDIT" cookies"</a>
<li> <b>Previous message:</b> <a href="0122.html">Yaron Goland: "RE: Initial Dist. Auth. Requirements"</a>
<!-- nextthread="start" -->
<!-- reply="end" -->
</ul>
<hr>
<!-- body="start" -->
<pre>
Hi folks,

I have been lurking on this list for while.

I think that I follow Christopher's reasoning here,
and I would like to paraphrase here just to make
sure I have it right...

When a user "checks out" a document for editing,
the revision contrl system "should" record who it
is that is checking out the document so that when
the same user attempts to "check in" the document
there is a mechanism to say "Hey, remember me? I am
checking in the document that I previously checked out
for editing. Here it is." The RCS can verify that it is
the same user that is recorded and proceed, or reject
the action if it is not the same user.

Christopher is asserting that a "cookie" is the best,
if not the only, way to manage the session.

Is that about it?

Murray



At 10:00 PM 28-08-96 -0700, Christopher Seiwald wrote:
&gt;I'll try to explain the notion behind "GET for EDIT" cookies a little
&gt;since both Jim and David's responses showed that my initial explanation
&gt;left a bit to be desired.
&gt;
&gt;Me:
&gt;
&gt;| &gt;&gt;1.  A fundamental component of "GET for EDIT" has to be a cookie that
&gt;| &gt;&gt;represents any stored context in the document server that needs to be
&gt;| &gt;&gt;reunited with the document on checkin.  Most, if not all, SCM systems
&gt;| &gt;&gt;are aware of their users' activity and use this awareness to keep users
&gt;| &gt;&gt;from stomping on each other's work.
&gt;| &gt;
&gt;
&gt;Jim:
&gt;
&gt;| &gt;I think that use of cookies might be necessary in an implementation.
&gt;| &gt;However, I suspect that you can maybe do it all with only MD5
&gt;| &gt;authentication (i.e., only knowing the user).
&gt;
&gt;David:
&gt;
&gt;| I'm not sure of the role for the cookie in this (just call me dense (later
&gt;| on in this mail I guess why you might use one)). But the reservation and
&gt;| context establishment should be handled by LOCK. If a server requires
&gt;| special reservation for editing, it's the client's responsibility to obtain
&gt;| a lock on the file before doing a PUT. If the client already has a cached
&gt;| copy, a "conditional GET" based on the version at the server might be
&gt;| useful.
&gt;|
&gt;| I think decoupling the access control aspects (LOCKing and so forth) from
&gt;| the GET/PUT operations gives us a lot more generality, extremely easily. I
&gt;| don't see any situation where "get for edit" is really different from "LOCK
&gt;| resource for writing" followed by GET. If the client has a local copy, the
&gt;| GET could even be conditional on the version they have being a leaf (though
&gt;| this would not be a requirement). Then we might even be able to PUT a few
&gt;| times before releasing the lock!
&gt;|
&gt;| Attempts to PUT without a needed lock could bounce on servers that need or
&gt;| want to enforce such a discipline on their clients.
&gt;
&gt;Me again:
&gt;
&gt;Locking ("reservations") can be handled by LOCK, I quite agree.  But
&gt;SCM systems don't hang all their context on a lock: they hang it on the
&gt;"checkout".  That's when the user tells the system, "I'll be changing
&gt;this here document," and the system records that fact for the day when
&gt;the user says, "Uh, here's that document I changed." The SCM system uses
&gt;this context to keep track of the dozens (thousands?) of users out there,
&gt;all trying to change the same set of documents (but invariable all
&gt;starting with different revisions of those documents).  
&gt;
&gt;Not all SCM systems require a lock before checking in documents, and
&gt;some acquire that lock automatically, so many PUTs are likely to happen
&gt;in the absense of a LOCK.  But _all_ SCM systems (except CVS) require
&gt;some sort of checkout (locking or non-locking) before checkin.  Now you
&gt;could fudge it, and by remembering the URL and revision do a paired
&gt;checkout/checkin to establish the required context.  But this defeats
&gt;a feature that all modern SCM systems boast: tracking user activity.
&gt;They have this feature because users don't remember what they're doing,
&gt;and they certainly don't remember what other people are doing.  Half
&gt;the job of SCM systems (and by extension, version aware web servers) is
&gt;to keep track of who is doing what to what, just to remind everyone
&gt;involved.  Those scenarios I cooked up (where Joe and Jane keep stepping
&gt;on each other) weren't just from my past experience: they were from my
&gt;past week's experience.
&gt;
&gt;Only one user can LOCK a file.  If the context is established on LOCK
&gt;then there will be only one context per document, precluding Joe and
&gt;Jane from finding out that they're doctoring the same text.
&gt;
&gt;Normally SCM systems have a tight association between the checkout
&gt;context and the checked-out file, because often there is no way to work
&gt;"outside" of the SCM system.  But if the SCM system is the backend of
&gt;a version-aware web server, with the actual work happening in "stateless"
&gt;web clients, then that context must be represented by a cookie.
&gt;
&gt;The cookie belongs to the underlying SCM system; whether it is an MD5
&gt;hash of the document contents, some cryptic string churned up from bowels
&gt;of the SCM database, or "allworkandnoplaymakesjohnnyadullboy" is not
&gt;HTTP's or a Web authoring tool's business.  They just have to keep it
&gt;associated with the checked-out document so that it can be reunited with
&gt;the checkout context at checkin time.
&gt;
&gt;This cookie is the single most important component of distributed web
&gt;authoring, IMHO.
&gt;
&gt;Christopher
&gt;----
&gt;Christopher Seiwald     Perforce Software	www.perforce.com       
&gt;<a href="mailto:seiwald@perforce.com">seiwald@perforce.com</a>    f-f-f-fast SCM		1-510-865-8720
&gt;
&gt;
&gt;
Murray Maloney                   "Life is a daring adventure,
Technical Director                or it is nothing" 
SoftQuad Inc                      -- Helen Keller
</pre>
<!-- body="end" -->
<hr>
<p>
<ul>
<!-- next="start" -->
<li> <b>Next message:</b> <a href="0124.html">Christopher Seiwald: "Re: Seiwald Q &amp; A -- "GET for EDIT" cookies"</a>
<li> <b>Previous message:</b> <a href="0122.html">Yaron Goland: "RE: Initial Dist. Auth. Requirements"</a>
<!-- nextthread="start" -->
<!-- reply="end" -->
</ul>
