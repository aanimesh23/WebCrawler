<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
<head>
  <title>Syllabus</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Syllabus</h1>
<p>
<h2>ICS-46: Data Implementation and Analysis
</h2>
<p>
</center>


<!-- Introduction -->

<a name="Introduction">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Introduction</b></td>
<td width ="80%">
This page contains material that will be important and useful throughout 
  the entire quarter.
I consider it a contract with my students.
Please read it once now, and keep it handy for future reference.
You can search this page in your browser for specific information by 
  typing <b>Ctrl F</b> or selecting
       <b>Edit | Find on this page</b> (Windows IE) or
       <b>Edit | Find in This Page...</b> (Firefox), then entering
  the text that you want to locate.
Many questions that you might have about this course during the quarter are
  already answered inside this document (so become familiar with its contents).
It also contains lots of good advice on getting the most out of this course.
</td>
</tbody>
</table>



<!-- Catalog Description -->

<a name="Catalog">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Catalog Description</b></td>
<td width ="80%">
<i>"Focuses on implementation and mathematical analysis of fundamental data
     structures and algorithms.
   Covers storage allocation and memory management techniques.
   Prerequisite: CSE 45C or I&C SCI 45C or I&C SCI 65.
   CSE 45C with a grade of C or better.
   I&C SCI 45C with a grade of C or better.
   I&C SCI 65 with a grade of C or better.
   Same as CSE-46."</i>
</table>
</td>
</tbody>
</table>



<!-- Philosophy -->

<a name="Philosophy">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Course Philosophy</b></td>
<td width ="80%">
  My goal in ICS-46 is for students to acquire fluency in thinking about,
  discussing, and writing programs in C++ using appropriate abstractions.
Specifically, there are four major pillars:
<ol>
<li>Demonstrate skill solving problems/programming with Data Types: C++
     template classes, specifically the ICS46 Template Library, which includes
     the abstractions <i>Stack</i>, <i>Queue</i>, <i>Priority Queue</i>,
     <i>Set</i>, <i>Map</i> (and eventually <i>EquivalenceClass</i> and
     <i>Graph</i>), including their iterators.
<p>
<li>Demonstrate skill at using low-level C++ Data Structures (primarily
      arrays, self-referential linked structures, and combinations of these)
      to implement these Data Types correctly and efficiently.
<p>
<li>Understand O (big oh), &Omega; (big Omega), and &Theta; (big Theta)
      notation, and demonstrate the ability to use these notations to analyze
      implementations of template classes (both analytically and
      empirically), and understand the usefulness and limits of these
      notations.
<p>
<li>Understand C++ and general programming ideas that aid in 1-2:
    abstract classes, virtual functions, inheritance, recursion, hashing,
    caching, the decorator pattern, etc. 
</ol>
We will spend the first few weeks of the quarter exploring the properties of
  template classes: using them to write programs, studying simple array
  implementations,  and eventually implementing some using linked lists.
Afterward we will learn about more advanced data structures and how to use them
  to implement the more complicated data types efficiently.
<p>
This course emphasizes Object Oriented Programming (OOP).
The foundational unit of OOP is the <i>class</i>: a syntactic structure that
  describes and encapsulates both the behavior (methods implemented by control
  structures) and state (fields implementing data structures) of objects.
Classes provide an excellent motivation and context for exploring most
  interesting aspects of programming.
We can view software as a collection of interacting objects (which are
   constructed from classes; often with many objects constructed from
   the same class).
In C++, classes defintions are split into <b>.hpp</b> and <b>.cpp</b> files;
but templated classes (the ones we will mostly use/write) have just <b>.hpp</b>
  files, which are split into declaration and definition parts.
<p>
The main programming methodology that we will learn and employ is TDD
   (test-driven development).
We will use Drivers and <b>GoogleTest</b> to test our code; with
  <b>GoogleTest</b> unit tests, we can automatically test code (and retest it
  when we make changes, until it is passes all the tests: meaning it may be
  correct or the tests might be insufficient to expose errors).
<p>
Programming style is a particularly important topic: to understand
  programming, we really need to develop appropriate aesthetics that allow
  us to separate "elegant" programs from "hacks".
As in any writing activity, we must also learn to be self-critical of our own
  creations, so that we can continually improve them; this skill is difficult
  to acquire, and its importance extends well beyond the domain of
  programming.
<p>
Finally, to become an expert in any discipline, we must master its
   terminology.
Fluency with technical terms allows us to communicate -and even to think-
   more accurately and concisely.
Therefore, the materials in this course will define, illustrate, and
   repeatedly use many important technical terms concerning programming.
Take the time required to master them. An old Chinese proverb says,
     "The first step towards wisdom is calling things by their right names." 
</td>
</tbody>
</table>



<!-- Textbook -->

<a name="Textbook">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Textbook<br>(recommended)</b></td>
<td width ="80%">
The primary materials for this course will come from lectures and from my
  notes on the lectures.
I encourage students to use Google to help you learn and understand any
  C++ features that you need to learn.
<p>
I will assume that you have a book equivalent to the text for ICS-45C,
  which covers the fundamentals of C++ (and quite a few advanced topics as
  well).
<p>
  <o>
  <li><b>Savitch</b>,
      <i>Absolute C++ (5th Edition)</i>,
      Pearson
       (about $130: new at Amazon/used at the Anthill).
  </ol>
<p>
Here are two good data structures books in C++. 
<p>
  <o>
  <li><b>Goodrich and Tamassia</b>,
      <i>Data Structures & Algorithms in C++, Second Edition (2011)</i>,
      Wiley,
       (about $105: new at Amazon).
  <p>
  <li><b>Weiss</b>,
      <i>Data Structures & Algorithm Analysis in C++, Fourth Edition (2013)</i>,
      Prentice Hall
       (about $120: new at Amazon).
  </ol>
<p>
See <a href="http://www.directtextbook.com/" target="_blank">
  DirectTextbook</a>, which crawls the web for cheaper prices.
Don't forget to account for shipping costs and delivery time.
Amazon often list used copies of both books cheaper.
</td>
</tbody>
</table>



<!-- Computing Platforms and Programming Environments -->

<a name="ComputingPlatform">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Computing Platforms and Programming Environments</b></td>
<td width ="80%">
The standard computing platforms for this course are
  <ul>
    <li>Intel-based PCs running the Windows Operating System (OS).
    <li>Macintosh PCs running the Mac OS operating system
    <li>Either PC running Linux.
  </ul>
<p>
Programming courses at most schools are moving towards a model in which most
  students use their own computers (or those of their roommates or friends) to
  complete their programming assignments.
All the software used in ICS-46 is available, for free, on the web.
We are assuming that students have already installed a web browser, and have a
  high-speed connection to the World-Wide Web: e.g., via the campus network,
  or by cable, or a DSL line, or just WiFi.
  <p>
The programming environment that we will use is CLion: it is an Integrated
  Development Environment (IDE), including a project manager, editor, compiler,
  debugger, class browser, help facility, etc.
We will also use the Clang C++ compiler and runtime system with this IDE.
This software, and others useful for the course, are available through the
  <a href="../../../common/online46.html">Course Software</a>
  link (see <b>Main Software</b> under the ICS-46 heading).
  <p>
Talk to your instructor or TA immediately if you are experiencing any problems
  with your computing platform.
Typically it takes only a few days before everyone has correctly downloaded and
  installed the necessary software, and learned how to use it properly.
Using this software is integral to every programming assignment during the
  quarter, so it is best to be aggressive and master this software quickly.
</td>
</tbody>
</table>



<!-- Computers -->

<a name="Computers">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Computers:<br>ICS Labs</b></td>
<td width ="80%">
In addition to using their own machines, students can do their coursework on
  the machines in the <a href="http://www.ics.uci.edu/~lab">ICS Labs</a>,
  which are described on this link and in more detail below.
The main upside of using the ICS labs is that it will be easy to get ICS-46
  staff to help you there; the main downside is that you will not be using
  your own computer -unless you have a portable and bring it to the labs to
  get the best of both worlds.
Read the following to learn about 
  <a href="http://www.ics.uci.edu/~lab/students/acct_activate.php">
 ICS Lab Account Activation</a>.
<p>
ICS courses often schedule lab hours (to complement lecture hours), during
  which students can learn how to use software tools and work on their
  programming assignments, all under the supervision of ICS-46 staff members.
This quarter, all Labs meet in rooms <b>ICS 189</b> and <b>ICS 183</b>.
Each of these rooms contains about 45 Dell Optiplex computers running Windows
  7 and all the necessary course software.
These labs are <b>typically</b> open for class use on weekdays, during "normal"
  hours: 8:00am to 8:00pm; and, they are closed on weekends.
<p>
The lab in <b>ICS 364</b> is a general purpose lab in which no courses are
  scheduled.
It is typically open to students on weekdays and weekends during "extended"
   hours:
   MTuWThT 8:00am - 10:pm,
   F 8:00am - 8:00pm,
   and SaSu 12:00pm (noon) - 6:00pm.
You can examine the
  <a href="http://www.ics.uci.edu/~lab/lab_schedule/index.php">
  Lab Schedules</a> for all these labs.
<p>

If you find it inconvenient to use these labs, and would rather work from
  your dorm room or off campus, ICS-46 staff will also provide more limited
  online help through Instant Messaging.
The forums on MessageBoard and also an excellent way to get help.
<!---
If you have installed realVNC on your computer, we will be able to monitor and
  manipulate your computer directly from ours.
We will discuss the details of this system for help, and how to use it, early
  in the quarter.
-->
<p>
Finally, although the machines in the ICS labs also provide some external
  storage space (on a Unix system), it is an excellent idea to obtain a USB
  memory stick to backup all the work you do, both on your own computer and
  in our labs.
</td>
</tbody>
</table>






<!-- Office Hours -->

<a name="OfficeHours">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Instructor<br>Office Hours</b></td>
<td width ="80%">
I welcome students (individually, programming partners, or small groups), to
  come by and talk with me during my Office Hours.
If we need to talk, but you cannot come during my office hours, please email
  me so that we can arrange an alternative time to meet; or better yet, maybe
  we even can resolve the entire issue over email (or using the MessageBoard
  Forums, discussed below, where other students can benefit from questions and
  answers).
<p>
I will be glad to talk with you about any of the ICS-31/-32/-33/-45C/-46
   courses,  Computer Science, UCI, or whatever else you want to discuss.
Although UCI is a large school, ICS is a smaller school within it, and ICS
  promotes opportunities for close faculty-student interaction, especially
  with instructors who are lecturers.
Unfortunately, in my opinion, not enough students take advantage of this
  opportunity at UCI.
<p>
I especially encourage students who are having problems in the course to visit
  me immediately; I know that this is asking a lot, but the payoff for
  recognizing the situation and acting on it immediately is tremendous.
The primary reason that students fail to thrive in programming courses is that
  they fall behind in their work -often because of what is initially a small
  misunderstanding; but, because of the cumulative nature of this course,
  even a small misunderstanding can quickly grow into a big one.
Often, I can quickly diagnose and rectify such a problem one-on-one.
Getting help fast can critically affect your overall performance in
  this course: many times I've seen students start performing one grade
  level higher after coming in to get help during my office hours.
<p>
Unfortunately, I teach hundreds of students during a typical quarter, so my
  time is a bit limited.
But, generally I have time during office hours to talk with all the students
  who visit.
So, please come if you need help so we can try to work out your issues/problems.
Of course, you can also talk to your TA and Lab Tutors during your labs, where
  resources and time are not so tight.
</td>
</tbody>
</table>


<!-- Online Hours -->

<a name="OnlineHours">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Instructor<br>Online Hours</b></td>
<td width ="80%">
I hold online hours every day before class/lab meets: Sunday, Monday, Tuesday,
  Wednesday and Thursday  evenings (most programming assignments are due on
  Tuesday evening) from 9:00pm-10:00pm.
I will be logged  onto AIM (AOL Instant Messenger) as <b>richardepattis</b>
  during these times.
<p>
If you are not already a member of AIM (or a similar service that can message
  AIM users)  <a href="http://www.aim.com/" target="_blank">Sign Up</a> for
  this service (it is free).
Using this system, you will be able to Instant Message me.
<!---, as well as use
   an audio (voice) connection if you have a headset with a microphone.
-->
You can IM me with questions; you can also cut/paste code snippets into your
  message.
Please be aware that I may be having multiple conversations, and therefore
  react more slowly than you might expect.
</td>
</tbody>
</table>


<!-- EMail -->

<a name="Email">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Instructor/Course<br> EMail</b></td>
<td width ="80%">
If you have a small question (one requiring little back-and-forth discussion),
  and cannot directly contact me or any of staff, please ask it by sending me
  email (<a href="mailto:pattis@ics.uci.edu">pattis@ics.uci.edu</a>).
It has been my experience that the act of writing a detailed description of a
  problem (detailed enough so that someone not physically present can
  understand it) often leads a student to his/her own solution of the problem.
Frequently, before I even get a chance to read my email, I receive a second
  message saying,  "Please ignore my earlier message, I solved the problem
   myself."
I believe that the seeds of the solution are sown in the act of carefully
  composing the first email message.
Here is quote on my website about this phenomenon
<p>
<table width ="100%" cellspacing="0" cellpadding="1" border="1" rules="all">
<tr><td align="left" valign="top">
Another effective [debugging] technique is to explain your code to someone
  else.
This will often cause you to explain the bug to yourself.
Sometimes it takes no more than a few sentences, followed by an embarrassed
  "Never mind, I see what's wrong. Sorry to bother you."
This works remarkably well; you can even use non-programmers as listeners.
One university computer center kept a teddy bear near the help desk.
Students with mysterious bugs were required to explain them to the bear before
  they could speak to a human counselor. 
<p align="right"><i>- B. Kernighan & D. Pike
  (in "The Practice of Programming" pp. 123)</i></p></td></tr>
</table>
<p>
Talking about programming is important.
One of the reasons that we program in pairs is to always have someone who you
  can to talk to about your code; unlike the teddy bear, someone who has an
  interest in getting your code to work, and who might supply relevant feedback.
<p>
I try to answer email every few hours during the day.
I normally will not answer email sent after about 10:00pm until early the next
  morning (but I'll typically answer it by the next morning).
If you have problems late at night that you cannot resolve, please send me
  email (or post on the relevant MessageBoard Forum) summarizing your problems,
  and then go to work on something else (or if it is really late, go to sleep).
By planning to finish assignments early, you can protect yourself against a big
  problem that arises at night and cannot be fixed until the next day: you
  really don't want to have to fix such a problem the night that an assignment
  is due.
<p>
For most problems -ones that are of general interest to the class- I would
  prefer that you ask the question using a MessageBoard Forum (see below).
In this way, everyone in the class can see the question and its answer
  (which I might provide, or a a TA/Lab Tutor, or another student).
One of the few advantages of a big class is having lots of student activity on
  such forums, leading to peer-instruction.
<p>
Finally, the Electronic Educational Environment (EEE) at UCI creates and
  maintains course-wide mailing lists.
I have created a "merged" mailing list for all my ICS-46 students (which also
  includes those students signed up for CSE 46, both in the Sammueli School of
  Engineering and the Donald Bren School of Information and Computer Science).
All members of our course (staff and students) can use this mailing list, whose
  email address is <b>ics46-W17@classes.uci.edu</b>
All messages sent via this discussion list are archived: click
    <a href="https://eee.uci.edu/classmail/w17/36670/" target="main">
    here</a> or see the <b>Email Archive</b> link on the course website.
Mostly student-initiated questions/discussions should use the forums mentioned
  below, but sometimes students can use this email list to inform the
  instructor, staff, and other students about some timely issue: e.g., the
  Checkmate Homework Dropoff system not responding to program submissions.
</td>
</tbody>
</table>


<!-- Bboard -->

<a name="Bboard">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>MessageBoard Forums</b></td>
<td width ="80%">
<p>
If you have a question of general interest (of interest to many students in the
  course, not just you), then you should post the question on one of the
  <a href="https://eee.uci.edu/toolbox/messageboard/m18636/" target="main">
 Forums</a> on the EEE MessageBoard.
These forums allow students to ask questions (or start discussions) easily, as
  well as supply answers (or participate in the discsussion further).
For example, if a lecture note, programming assignment, etc. contains unclear
  (or even contradictory) information, post a note about it to the appropriate
  forum, asking for a clarification.
I, or someone from my staff will read and reply to whatever questions are
  asked.
In fact, if you read a question on a forum, and know the answer -or generally
  have something to contribute to the topic- I encourage you to to post a reply
  to help resolve the problem even sooner.
Thus, you can use the forums to discuss any course materials out-of-class.
<p>
Again, forums are appropriate for questions relevant to most students in the
  course; directly email me (see above) for questions of a more
  individualistic nature.
Obviously students should not use these forums to solicit nor post answers to
  take-home quizzes, programming assignments, or anything else that would be
  interpreted as academic misconduct (which is discussed in greater detail
  below).
But general informational questions and answers are fine.
I often find that students send me individual email when they should be
  posting on a forum; think before you decide which to do.
<p>
It is an excellent idea to check these forums frequently, to keep up to date
  on any coursewide discussions.
You can configure the forums to send you an email digest daily, which contains
  links to new/updated postings.
I received such a digest, and typically review and answer all outstanding
  questions early each morning.
</td>
</tbody>
</table>



<!-- Staff -->

<a name="CAs">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Staff: TAs, <!--Reader,--> Lab Tutors</b></td>
<td width ="80%">
I will have various UCI graduate and undergraduate staff members to assist me 
 in running this course.
<b>TA</b>s will supervise the labs and be assisted by <b>Lab Tutors</b>.
In labs, the Staff's primary responsibilities are to help you write and debug
  your programs, backfilling C++ material that you might need to know or
  understand better.
You can certainly discus programming and C++ in general with these staff
  members.
TAs will also be responsible for grading programming assignments; if you have
  a question about how your programs are graded, please see the TA first,
  and then come to see me if any issues remain.
TAs will also grade the weekly quizzes and in-lab, midterm, and final exams.
<p>
While in lab, the TAs and Tutors will help you diagnose any
  computer/programming problems that you have and guide you toward a solution.
They will help you learn how to program by answering your questions; but, do
  not expect them to write your programs for you.
You should approach them with a well thought-out question, and expect to answer
  questions from them about your state of understanding the issues surrounding
  the question.
Sometimes when you come to the staff with a specific question, they will show
  you how to solve a more general problem.
Be patient; the staff are just trying to teach you how to recognize and solve
  these problems by yourself.
<p>
</td>
</tbody>
</table>


<!-- Classroom Information-->

<a name = "ClassroomInformation">
<hr align="left" width="33%">
<h3>Classroom Information</h3>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="Before"><b>Before/After Class</b></td>
<td width ="80%">

I expect students to read the assigned lecture materials, either before class
  (as a way to preview the lecture) or after class (where the lecture previews
  the reading), to get the most out of both: cover the material twice.
Carefully read the lectures and examine the code they contain.
Test and explore this code in CLion to verify that you understand the
  material both theoretically and practically.
Here <b>understand</b> means "be able to use the information operationally to
  write code that solve problems".
If you have difficultly with a concept, it indicates that you should probably
  go back over the related reading -or certainly ask a question about it on the
  Forum.
One of the few advantages of a big class like this is the potental for
  peer-teaching.
</td>
</tbody>
</table>
<p>

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="During"><b>During Class</b></td>
<td width ="80%">
I expect students to attend class daily.
During the 35+ years that I have been teaching, I have observed a strong
  correlation between attending class and understanding the material (which 
  ultimately improves student grades).
Having all the course materials online is a great resource, but just as
  important is coming to class -and paying attention, once you are there-
  and participating by volunteering information when you know it and asking
  questions when you are confused.
<p>
I will lecture during class, but I prefer discussing the material and answering
  questions; asking you questions about the material, and amplifying on those
  topics that need further discussion.
I expect most "lectures" to be interactive, with students participating.
<p>
I encourage you to participate by raising your hand; sometimes I may finish
  the point I'm making before calling on you, but please keep your hand up if
  you want to speak.
If you have a question about the material, it typically means that I have
  explained something incorrectly, poorly, or incompletely, and that other
  students have (or will soon have, maybe right after they leave the classroom)
  the same question.
So, it would be best for all of us to correct the problem immediately in class
  by someone bringing it to my attention.
If you cannot ask in class, post a question later on a MessageBoard Forum.
In summary, this class runs on the Dershowitz principle:
  "Question authority; but raise your hand first".
</td>
</tbody>
</table>
<p>


<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="Decorum"><b>Class Decorum</b></td>
<td width ="80%">
I expect students to attend class daily, arriving on time.
The announcements made at the start of class are often very important.
On Wednesdays I will collect quizzes at the start of class.
I expect students to neither carry on private conversations, nor distract
  other students by using their computers to answer email, surf the web, day
  trade stocks, or perform any other activities unrelated to this course.
<p>
Ringing cell phones disrupt my lectures.
Unless you are responsible for someone's life, your cell phone should be
  turned off.
Otherwise, you should set it to operate in some silent mode (as mine will be
  set); if it rings silently, please leave the class, with a minimum of
  disruption to the rest of the students, to answer it.
If your cell phone rings audibly in class, you will be asked to leave class
  for that day.
Finally, if you know that you must leave early, please sit near a door,
  so that you can exit quietly and without disturbing the class.
<p>
Overall, please strive to be a considerate class member, both to me and to
  your fellow students.
</td>
</tbody>
</table>
<p>



<!-- Grades-->

<a name = "Grades">
<hr align="left" width="33%">
<h3>Grades</h3>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="Quizzes"><b>Quizzes</b></td>
<td width ="80%">
I will assign eight take-home Quizzes to ensure that everyone is keeping pace
 learning the course material and is able to express themselves on technical
  matters both in English and C++.
<!---
Each will have problems similar to those assigned daily in class (and similar
  to those on upcomming written exams; working these quizzes is a major way to
  "study" for these exams).
--->
These quizzes will be a take-home instrument: most will be distributed at the
  end of class on Friday and collected at the start of lecture on the
  following Wednesday.
During the weekend, you will have as much time as you need to work on the
  quizzes.
If you need clarification on any problems, please email the class discussion
  list or post on a forum (but don't post code).
<p>
The quizzes are open-book: you will be able to use any class materials, or any
  other materials from the web, to answer its questions.
The quizzes are also open-computer: by that I mean that you may use a computer
  to check your work.
But, you must work on the quizzes by yourself, not soliciting or sharing
  answers with other students.
<!-- I will allow two students to show their answers to a third student (who
    must not be enrolled in my sections), who can tell them either that their
    answers are the same or different (but add no other information).
-->
</td>
</tbody>
</table>
<p>


<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="ProgrammingAssignments"><b>Programming Assignments</b></td>
<td width ="80%">
I will assign five programming assignments to ensure that everyone is
  getting the necessary hands-on programming experience.
While working on these programs, you will acquire a solid and fine-tuned
  understanding of the course material as well as gain important
  <i>process of programming</i> skills.
Programs will typically be discussed and started in some Lab, and then be
  due (submitted electronically) about two weeks later, at 11:30pm.
For a typical programming assignment, you will have 3 lab meetings and 2
  weekends to work on it: expect to spend time out of class finishing these
  assignments.
<p>
I encourage students to work in groups of two on programming assignments.
Such an approach is called
  <a href="../../../common/handouts/pairprogramming.html" tarket ="_top">
  Pair Programming</a>.
<b>One student</b> from each pair will submit all parts of the program, with
  both their names and your lab numbers on it (in the code/files).
Apart from your pair, you can get <b>general</b> help from anyone (Instructor,
  TA, Lab Tutors, friends, etc.) on programs.
The best kind of help to get is oral: where you describe the problem, possibly
  showing your code, and then get an oral answer that you understand and can
  translate into code.
In such instances, you are learning. 
<p>
<b>You may neither copy nor transcribe (written or orally) any parts of another
    student's program.</b> 
<p>
When you submit your programs for grading, you are expected to understand all
  parts of them and have improved your <i>process of programming</i> skills
  while writing and debugging them.
<p>
You will submit your solutions to programming assignments through a special
  web page that records the time they are submitted.
To promote good time management skills, if you submit a program at least 24
  hours  before it is due, you will receive 1 point of extra credit.
If you submit a program 48 hours early, you will receive 2 points.
You can gain no more than 2 points of extra credit by early submission.
For an 60 point assignment, this extra credit is equivalent to one third a
  letter grade improvement.
<p>
Two weeks is sufficient time to complete these programming assignments.
I know from long teaching experience that students who work ahead of the
  deadlines learn more, in a less stressed envrionment; students working right
  up to a deadline are more concerned with getting the right answer and less
  concerned with learning anything.
So, on the other side of this coin, I will not accept any late programs without
  some kind of prior request (and prior typically doesn't mean the night
  before).
So, you must turn in your work on time: if you turn in a partially working
  program on time, it will receive partial credit; if you do not turn in
  anything on time, then I must assume you did no work on the program, and you
  will receive no credit.
Therefore, always turn in whatever work you have finished by the official due
  time.
</td>
</tbody>
</table>
<p>


<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="WrittenExams"><b>Written Exams</b></td>
<td width ="80%">
I will assign one Midterm Written Exam and one Final Written Exam to
  ensure that everyone is successfully integrating  all the material being
  taught.
Its problems will be similar to those assigned on the weekly quizzes, including
  code, mathematics, English answers, and drawing pictures.
These written exams are closed-book: you will not be able use any notes nor
  class materials while taking these exams.
The mathematics will be simple, and you will not be allowed to use calculators
  (so you will have to know how to compute the logarithms -in base 2- of 
  simple numbers: mostly powers of 1,000.
<p>
The best way to study for these exams is to do all the quizzes and 
  programming assignments (sometimes material related to the programming
  assignments appear on these exams) and review these quizzes (and programs).
I expect students to be able to do these problems both quickly and accurately.
<p>
The final exam is comprehensive: it will cover material from the entire
  quarter (but concentrate a bit more on material presented after the
  midterm exam).
</td>
</tbody>
</table>
<p>


<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="SolutionsReturnedWork"><b>Solutions and<br>Returned (Graded) Work</b></td>
<td width ="80%">
I will create a 
<a href="https://eee.uci.edu/toolbox/dropbox/index.php?op=openfolder&folder=486225" target="_blank">
  EEE Drop Box</a> for my solutions to all quizzes,
  programming assignments and written/programming exams soon after they are due
  (which is another reason why I accept no late work).
I expect that all students will carefully examine my solutions for immediate
  feedback.
Note that the best time for you to study my solution is the day that I
  distribute it, having just spent a good amount of time working on your own
  solution.
The sooner you examine my solutions, the more receptive you wil be to learning
  something.
Finally, my solutions sometimes contain mistakes: if you are the first person
  to email me a correction, I will award you extra credit points (the same
  number that I would take off for the mistake).
<p>
I will strive to return graded quizzes at the next class meeting (after they
   are turned in): since they are typically turned in on Wednesday, I will
   typically return them on the following Monday.
I will strive to return graded programs on Mondays; do not submit new
  programming assignments until you have received feedback on your previous
  assignment.
Finally, I will strive to return written exams within a week of when they are
  given.
<p>
<b>Important:</b>
If you believe that I have graded any of your work incorrectly, I encourage you
  to see me immediately about the discrepancy (in the case of programming
  assignments, see the TA first).
Such a discussion can have only positive outcomes: either I will agree with you
  that you deserve more credit (and, I do want you to receive all the credit
  that you are due), or you will better understand why your answer is wrong and
  what the right answer is.
This is certainly a win-win situation.
In any case, carefully examine my solution before you come to see me.
</td>
</tbody>
</table>
<p>


<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="FinalGrades"><b>Final Grades</b></td>
<td width ="80%">
Your final grade is computed from your <!-- in-class participation,-->
  quizzes, programming assignments, and written exams as follows.
<p>
<table cellspacing="0" cellpadding="5" border="1" rules="all">
<thead>
<tr><th>Instrument</th><th>#</th><th>Points Each</th><th>Points Total</th><th>% of Grade</th>
</thead>
<tbody>

<tr align="right"><td align="left">
Quizzes</td><td>8</td><td>25</td><td>200</td><td>20%</td>

<tr align="right"><td align="left">
Programming Assignments</td><td>1 + 5</td><td>1@0+5@60</td><td>300</td><td>30%</td>

<tr align="right"><td align="left">
Midterm Written Exam</td><td>1</td><td>200</td><td>200</td><td>20%</td>

<tr align="right"><td align="left">
Final Exam</td><td>1</td><td>300</td><td>300</td><td>30%</td>
</tbody>
</table>
<p>
Note that 70% of the grade is based on written work and 30% is based on
  programs; looked at another way, about half of the grade is based on
  work done supervised in class (50%) and half is based on work done in an
  unsupervised (take-home) environment (50%).
<p>
Based on your percentage, your final grade is computed as follows.
<p>
<table cellspacing="0" cellpadding="5" border="1" rules="all">
<thead>
<tr><th>Percentage</th><th>Grade</th><th>Gradiations</th>
</thead>
<tbody>
<tr align="right"><td>90%-100%</td><td>A</td><td>A- (&lt;93)</td>
<tr align="right"><td>80%-&nbsp 89%</td><td>B</td>
  <td>B-(&lt;83)&nbsp; or &nbsp; B+(&ge;87)</td>
<tr align="right"><td>70%-&nbsp 79%</td><td>C</td>
  <td>C-(&lt;73)&nbsp; or &nbsp; C+(&ge;77)</td>
<tr align="right"><td>60%-&nbsp 69%</td><td>D</td>
  <td>D-(&lt;63)&nbsp; or &nbsp; D+(&ge;67)</td>
<tr align="right"><td>&nbsp 0%-&nbsp 59%</td><td>F</td><td></td>
</tbody>
</table>
<p>
Technically, I round your score to an integer and then apply these rules.
So, if your percentage is 86.7%, it is rounded to 87% and therefore results
  in a grade of B+.
<p>
This is straight calculation, not based on a curve.
I tend to grade programming assignments liberally, but quizzes and
  written exams conservatively.
As a rule of thumb, I expect about 25% of the student to earn As, about 25% to
  earn Bs, about 25% to earn Cs, and about 25% to earn Ds or Fs.
This course is NOT graded on a curve, so these are only expectations from
  past course performance, not mandated numbers; your numbers can 
  be higher or lower.
FYI: when I last taught ICS-46 in the Winter, the actual breakdown was much
  better:
   38% As, 40% Bs, 15% Cs, and only 7% Ds or Fs.
<p>
Only after finishing 4 quizzes, 2 programming assignments, and the midterm exam
  will you have a reasonable indication of your final course grade (which, of
  course, will still heavily depend on the grades you earn afterward).
</tbody>
</table>
<p>


<!-- Cheating -->

<a name = "Cheating">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b><h3>Academic Integrity</b></td>
<td width ="80%">
No one comes into a class expecting to cheat, but I would suggest that you
  become familiar Bren School of Information and Computer Sciences
  <a href="http://www.ics.uci.edu/ugrad/policies/Academic_Honesty.php" target="main">
  Academic Honesty</a> policy, which is just one of many of the many
  <a href="http://www.ics.uci.edu/ugrad/policies/", target="main">
  Undergraduate Policies</a> with which you should become familiar.
<p>
The following information is my own restatement of this policy, as it
  applies in my courses.
You will also be asked to read and sign a handout to acknowledge that you
  understand the
  <a href="../academicintegrity.pdf", target="main">
  Academic Integrity Contract</a> that applies for this course.
</td>
</tbody>
</table>



<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="Policy"><b>Policy</b></td>
<td width ="80%">
The decision as to whether a student has cheated depends on the intent of an
  assignment, the ground rules specified by the instructor, and the behavior of
  the student. 
The following two guidelines help an instructor decide whether plagiarism has
   occurred in programming assignment, which is the fuzziest area:
<ul>
  <li> Plagiarism will be suspected if an assignment that calls for independent
         development and implementation of a program results in two or more 
         solutions so similar that one solution can be converted to the
         other(s) by a series of simple transformations.
  <li> Plagiarism will be suspected if a student who completed an assignment 
         cannot explain both the intricacies of the solution and 
         the techniques used to generate that solution.
</ul>
It is unreasonable to expect a complete definition of cheating that would cover
  all cases, because each situation is important enough to merit careful,
  individual scrutiny; however, it is helpful to have guidelines and
   precedents.
<p>
Here are some examples that are clearly cheating and clearly not cheating.
<p>
<b>Examples of CHEATING</b>:
<ul>
  <li>Turning in someone else's work, in whole or in part, as your own (with or
        without his/her knowledge), without it including a statement of
        collaboration in the solution.
  <li>Allowing another student to turn in your work, in whole or in part, as
        his/her own, without it including a statement of collaboration in the
        solution.
  <li>Turning in duplicate solution.
      Even if all the comments are changed, all the variables names are
        changed, all the whitespace is changed, and the code appears in a
        different order: it is still the same program.
  <li>Several students/pairs writing one assignment and turning in multiple
        copies, all represented (implicitly or explicitly) as an individual
        student's/pair's work, without it including a statement of
        collaboration in the solution.
  <li>After receiving graded written work, returning written work, for
        regrading, which has been altered.
  <li>Finding a solution to the same problem on the web and submitting it
        without explicit attribution in the solution; note that you may
        not post problems on the web, seeking a solution.
  <li>Stealing an examination or solution from the instructor.
</ul>
Generally, you should NOT EXAMINE, by reading hardcopy or by copying a file,
  the program of any other student (nor should you let anyone examine or make
  a copy of your files).
Doing so can easily lead to an intended or unintended academic violation.
<p>
If you ever feel that after talking to someone about a program, which is legal,
  your solution will be very similar to theirs, cite the consultation in the
  header comment in your program.
Doing so protects you from University disciplinary action (although the
  instructor is free to grade the material as he/she sees fit).
<p>
<b>Examples of NOT CHEATING</b>:
<ul>
  <li>Turning in work done alone or with the help of the course's staff.
  <li>Submitting one assignment for a group of students if group work is 
        explicitly permitted (or required, as in pair-programming).
  <li>Getting or giving help about using the computers.
  <li>Discussing assignments to better understand them.
  <li>High level discussions of course material to better understand them.
  <li>Getting or giving help about correcting simple programming errors.
</ul>
Again, the key here is not studying, verbatim, someone else's code, and then
  reproducing it as your own work.
It is too easy to copy such code without really understanding it.
Technically, for programming assignments, even understanding the resulting code
  is not enough (if someone else wrote it): you should also play an active role
  in synthesizing and debugging it.
The course is as much about skills as about knowledge.
</td>
</tbody>
</table>

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="AutomaticDetection"><b>Automatic Detection of Cheating</b></td>
<td width ="80%">
Recently, various cheating-detection software systems have become widely
  available.
Some use search engines to compare selected portions of submitted papers to
  content on the web.
In the context of programming, they compare each student's program to those
  submitted by his/her classmates (for this quarter, and any previous
  quarters if the assignment has been repeated).
This software does not compare programs exactly: it ignores format changes,
  variable name changes, and a variety of well-know transformations that
  change the look of code but not its underlying logic.
<p>
Many courses in ICS use this software to spot potential cheating cases.
Once it identifies suspicious behavior, instructors carefully examine the
  flagged code to make a final determination as to whether students will be
  prosecuted for cheating.
Often instructors can find additional evidence of cheating, once this
  software points them to the simlar code.
</td>
</tbody>
</table>


<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="Penalties"><b>Consequences</b></td>
<td width ="80%">
ICS will not condone cheating by students in its classes.
When cheating is suspected, instructors will take reasonable action to
  establish whether or not it has actually occurred.
If, in the instructor's opinion it has, the instructor will apply appropriate
  disciplinary policy.
In my courses, for a typical case of cheating, the student will be awarded
  negative credit for the assignment (under the precept that not doing an
  assignment, and receiving no points, is better than cheating on it).
For particular egregious forms of cheating (e.g., cheating on exams, stealing
  another student's work so he/she cannot submit it for credit), harsher
  consequences may apply (from loss of a full letter grade, through immediate
  failure of the course, up through suspension or expulsion from UCI).
<p>
Instructors must contact the student shortly after investigating evidence of
  academic dishonesty and evaluating the relevant work.
Notice of any action taken by an instructor must also be forwarded to the
  Associate Dean of Student Affairs (ADSA) in ICS and the ADSA of the student's
  home school (if different).
These offices act as a repository for such information, in case the student
  commits multiple infractions.
While the first infraction often results in just a grading penalty, a second
  infraction typically results in suspension for one or more quarters.
</td>
</tbody>
</table>

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="Rights"><b>Student Rights</b></td>
<td width ="80%">
Please refer to 
  <a href="http://www.ics.uci.edu/ugrad/policies/", target="main">
  The UCI Academic Senate Policies on Academic Honesty</a> for all the details.
</td>
</tr>
</table>

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><a name="FinalWords"><b>Final Words:<br>A Personal Statement</b></td>
<td width ="80%">
Cheating undermines the fabric of education.
The atmosphere at UCI (contrary to whatever opinions, prejudices, or
  superstitions you hold) is one of fostering cooperation between faculty and
  students in the pursuit of learning, knowledge, and wisdom.
This course, for example, is graded on an absolute scale, not a curve;
  so, helping other students when appropriate doesn't affect your grade.
And, if a student cheats for a higher grade, other students do not receive
  lower grades as a result.
<p>
Although it is embarrassing to fail an assignment, getting caught cheating is
  much worse (and some students get caught cheating for very few points).
I know, though, that students rarely think about getting caught.
But think about it: I often see students break down and cry when they get
  caught cheating and only then start to realize the consequences of their
  actions.
Their stress level goes through the roof and it immediately affects both the
  academic and social aspects of their lives.
The process is distressing for me too, although I must confess that I have been
  hardened by the number of times that I have had to go through it (typically
  multiple times each quarter).
Pursuing these cases at the University level takes a lot of my time, and
  reduces the time that I can spend on more important matters relating to my
  course and my students.
It is definitely a lose-lose situation.
<p>
The #1 excuse that I hear for cheating is, "I was pressed for time, so I
  cheated."
By carefully managing your time, you can avoid this problem.
If you start working early enough, and run into problems (and you should expect
  to run into problems), you will have time for the course staff to help you
  learn to solve them.
Also, I understand that some students take this course only because it is a
  requirement for their major, and that they have little intrinsic interest in
  the subject area; this is not a valid excuse for cheating either.
<p>
I have seen too many instances recently where student A asks a friend, student
  B, for help; specifically, A asks to see B's quiz or code (on paper or in a
  computer file).
Often, A copies B's code (with or without B's knowledge).
I understand that B feels pressure to give A help.
But, B is doing A no favor if A's cheating is discovered; B has made a bad 
 situation (A would receive no credit) worse (A receives negative credit and is
  reported to the Dean of Student Affairs).
And, according to UCI's rules, B is violating the Academic Integrity policy
  by these actions too.
I have seen friendships shattered because A copies B's code without telling B
  what was done, and then both get prosecuted under UCI's rules.
<p>
A similar situation arises with cheating on quiz questions.
I have seen too many students cheat on one question on a quiz and receive a
  negative score for the whole quiz (and letter to the Dean of Student
  Student Affairs), when leaving the question blank would result in a small
  point deduction and no university action.
<p>
In my final statement here, I ask you to pause and reflect on the consequences
  of choosing to cheat at UCI: this includes the impacts that it will have on
  you, your parents, your siblings, your friends, and your fellow classmates
  at UCI.
Cheating is invariably the wrong decision.
</td>
</tr>
</table>



<!-- Policy Exceptions -->

<a name="PolicyExceptions">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Exceptions to Policies</b></td>
<td width ="80%">
I have strict policies regarding attending classes, taking quizzes, submitting
  programs, and taking in-class exams; but, there are exceptions.
Exceptions to these policies include valid medical excuses (if documented by
  your Doctor or Health Care Provider), or any other officially excusable
  absence: emergencies, family problems, religious observances, job interviews
   or sports-related trips, etc. (if documented by the Office of the Dean in 
   your College, a Coach, etc).
<p>
If you need such an exception, bring a copy of the required documentation to me
  as soon as possible: do it beforehand, if you know about the problem in
  advance; if you do not have advance warning do it on the next day that you
  are able to attend class (or during my office hours) .
I will need to keep the copy for my records of all excused absences.
Again, if you have advance notice of a problem, please notify me by email
  beforehand to discuss any ramifications.
</td>
</tbody>
</table>

</body>
</html>
