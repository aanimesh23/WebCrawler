<TITLE>  Extensions for Distributed Authoring on the World Wide Web -- WEBDAV</TITLE>

<PRE>
WEBDAV Working Group                            Y.Y. Goland, Microsoft
INTERNET DRAFT                          E.J. Whitehead, Jr., UC Irvine
&lt;draft-ietf-webdav-protocol-06&gt;                     A. Faizi, Netscape
                                                   S.R. Carter, Novell
                                                     D. Jensen, Novell
Expires July, 1998                                    January 18, 1998
</PRE>

<HR>
This HTML version was converted from plaintext ASCII to HTML by <A HREF="mailto:jdavis@parc.xerox.com">Jim Davis</A>.  My sincere apologies for any errors introduced in the process.  When in doubt, consult the ascii version.
<HR>

<h1>  Extensions for Distributed Authoring on the World Wide Web -- WEBDAV</h1>


<h2>Status of this Memo</h2>

   This document is an Internet-Draft. Internet-Drafts are working
   documents of the Internet Engineering Task Force (IETF), its areas,
   and its working groups. Note that other groups may also distribute
   working documents as Internet-Drafts.

<P>Internet-Drafts are draft documents valid for a maximum of six
   months and may be updated, replaced, or made obsolete by other
   documents at any time. It is inappropriate to use Internet-Drafts as
   reference material or to cite them other than as "work in progress".

<P>To learn the current status of any Internet-Draft, please check the
   "1id-abstracts.txt" listing contained in the Internet-Drafts Shadow
   Directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
   munnari.oz.au (Pacific Rim), ds.internic.net (US East Coast), or
   ftp.isi.edu (US West Coast).

<P>Distribution of this document is unlimited. Please send comments to
   the Distributed Authoring and Versioning (WEBDAV) working group at
<PRE>   &lt;w3c-dist-auth@w3.org&gt;, which may be joined by sending a message
   with subject "subscribe" to &lt;w3c-dist-auth-request@w3.org&gt;.
</PRE>

<P>Discussions of the WEBDAV working group are archived at
<A HREF="http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth">http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth</A>.


<h3>Abstract</h3>

<P>This document specifies a set of methods, headers, and content-types
   ancillary to HTTP/1.1 for the management of resource properties,
   creation and management of resource collections, namespace
   manipulation, and resource locking (collision avoidance).

<h3>Changes</h3>

Changes since draft-ietf-webdav-protocol-06.txt

<P>[Editor's note: This section will not appear in the final form of
   this document.  Its purpose is to provide a concise list of changes
   from the previous revision of the draft for use by reviewers.]

<P>Rationale for many of the changes made in this revision of the draft
   can be found in the mailing list archives at:
<A HREF="http://lists.w3.org/Archives/Public/w3c-dist-auth/1997OctDec/0160.html">http://lists.w3.org/Archives/Public/w3c-dist-auth/1997OctDec/0160.html</A>.

<P>Where the 200 OK status code was used to indicate a successful
   response without a response entity body, 204 No Content is now used.
   Because PEP uses 420 and 421 status codes, and since PEP has been
   submitted as an Experimental RFC, the WebDAV 420 status code has
   been changed to 422, and the WebDAV 421 status code has been changed
   to 423.

<P>The 423 Destination Locked status code has been changed to 423
   Locked, and now covers all cases where an operand was locked,
   preventing the execution of the method.

<P>Removed the <TT>Destroy</TT> header, since it is not needed in this draft,
   but will be needed in the versioning draft.

<P>The <TT>Enforce-Live-Properties</TT> header was renamed to <TT>Property-Behavior</TT>,
   to more closely represent the meaning of the header now that the
   "omit" functionality is included. A keepalive field was added to the
   <TT>Property-Behavior</TT> header to make it more meaningful.

<P>Removed the <TT>INDEX</TT> method, since the functionality of <TT>INDEX</TT> can now
   be performed by the <TT>PROPFIND</TT> method.  <TT>PROPFIND</TT> provides more
   flexibility in specifying the type and amount of property
   information returned than does <TT>INDEX</TT>, which is important for
   returning information on a large number of resources.

<P>Clarified that performing a <TT>MOVE</TT> as a <TT>COPY</TT>, then <TT>DELETE</TT>, performed
   atomically, only applies to non-collection resources.

<P>Clarified the semantics of errors that are encountered in infinite
   depth move and copy of a hierarchy of resources.  For errors copying
   internal nodes of the hierarchy tree (i.e., collections), the
   operation skips that subtree, and moves on to the next subtree.  If
   an error is encountered moving/copying a leaf of the tree, then skip
   that resource, and move on to the next leaf.

<P>Removed the <TT>PATCH</TT> method.  This will be resubmitted as the document
   draft-ietf-webdav-patch-00.

<P>Added language that states that if a <TT>PROPPATCH</TT> is invoked on a null
   resource (e.g., a deleted resource), an empty resource is created,
   and the <TT>PROPPATCH</TT> directives are performed on this new resource.

<P>Added a forward reference to the <TT>source</TT> link definition (Section
   13.11) in Section 4.4.

<P>Changed all Values= to Values:.  Also changed all "values" to
   "value".

<P>References to state tokens are now restricted to sections 9.7 and
   9.8.

<P>The property-behavior header has been turned into the
   propertybehavior XML element because it contained a list of URIs
   which can thus have unbounded size.  The lock-info header has been
   turned into the lockinfo XML element for the same reason.  I have
   also made the same change of the <TT>Propfind</TT> header into the Propfind
   XML element.  We can put the property behavior header into the body
   because neither <TT>COPY</TT> nor <TT>MOVE</TT> have bodies. However we can't put
   lock-token, if-state-match, etc. in the body because they may need
   to be used with <TT>PUT</TT>. However I don't consider this a big deal
   because I sincerely doubt that there will be cases where lock-token
   or if-state-match will see large numbers of entries.

<P>Also changed omit to mean "copy properties with best effort but
   failure is acceptable."

<P>Added the external members property.

<P>Added language to 6.4 making it clear that any new resources created
   as the child of a write locked collection is added to the lock.

<P>Made the lock-token response header from a single URL to multiple
   URLs.  But all the URLs MUST refer to the exact same lock.

<P><TT>&lt;?XML version="1.0"&gt;</TT> changed to the correct form:
 <TT>&lt;?xml version="1.0"?&gt;</TT>

<P>Changed the delete rule for collections to read that if a delete in
   a collection member fails then it is the ancestors, not the progeny,
   who can not be deleted in order to maintain the namespace.

<P>Updated our reference to the XML spec.

<P>Added <TT>LOCK</TT> and <TT>UNLOCK</TT> to the list of methods covered by the write
   lock. This is necessary so that a lock-token will have to be
   submitted in order to make changes, otherwise we defeat the whole
   purpose of requiring the lock-token.

<P>Changed the title of section 6.6 from Re-Issuing Write Locks to
   Refreshing Write Locks, made it illegal to make the same lock
   request twice (you know you are making the same request because you
   had to include the lock-token to make it!) and instead made it legal
   to submit a <TT>LOCK</TT> method with no body but with a lock-token header.
   I also added a refresh example.

<P>Put in a note that an empty request body for <TT>PROPFIND</TT> means to
   return all names and values of properties on the resources.

<P>I have added a section on XML processing errors. I know, I know, it
   shouldn't be in the standard. I will move it to our compliance draft
   as soon as we prepare the first version.

<P>Removed addlocks and replaced with the depth header and the depth
   element.

<P>Changed all the as in namespace elements to all lower case.

<P>Moved all XML element declarations to the same section.  Removed the
   parent description.

<P>Updated the depth section to make it more generic, changed the
   wording for how <TT>COPY</TT>/<TT>MOVE</TT> are handled with write locks, require that
   ALL propfind responses include <TT>href</TT>, require that if a property is
   not found in a propfind then a 404 Not Found must be returned, and
   made explicit that <TT>PROPFIND</TT> responses on resources with internal
   members are returned as a flat list with no significance to its
   ordering.

<P>Removed reference to efficient update in the introduction since
   <TT>PATCH</TT> is now gone.

<P>Rewrote the write lock and null resource section to deal with the
   question of the state of the resource when it is locked and null.

<P>Changed www.ietf.org to www.iana.org.

<P>Changed the response element and added the new propstat element.
   With the prohibition that an HREF can only appear once in a
   <TT>multistatus</TT> response we can guarantee linear processing costs.

<P>Added Intellectual Property section, as required by RFC 2026.

<P>Added IANA Considerations section.

<P>Added <TT>Authorization</TT> headers to <TT>LOCK</TT> and <TT>UNLOCK</TT> examples.

<P>Changed lock tokens in examples to use string format of UUID.

<P>Since the latest HTTP revision defines a 418 and 419 status code,
   the 418 status code has been changed to 422, 419 to 423, 422 to 424,
   and 423 to 425.

<P>Changed implementation of the get* (e.g., getcontentlength)
   properties to strength MUST.

<P>Changed definition of XML elements and DAV properties to use XML
   element definitions, rather than BNF.

<P>Renumbered all sections

<h3>Contents</h3>

<PRE>
STATUS OF THIS MEMO..................................................1
ABSTRACT.............................................................1
CHANGES..............................................................1
Changes since draft-ietf-webdav-protocol-06.txt......................1
CONTENTS.............................................................5
1 INTRODUCTION.......................................................9
2 DATA MODEL FOR RESOURCE PROPERTIES................................10
2.1  The Resource Property Model....................................10
2.2  Existing Metadata Proposals....................................10
2.3  Properties and HTTP Headers....................................11
2.4  Property Values................................................11
2.5  Property Names.................................................12
3 COLLECTIONS OF WEB RESOURCES......................................12
3.1  Collection Resources...........................................12
3.2  Creation and Retrieval of Collection Resources.................13
3.3  HTTP URL Namespace Model.......................................13
3.4  Source Resources and Output Resources..........................14
4 LOCKING...........................................................15
4.1  Exclusive Vs. Shared Locks.....................................15
4.2  Required Support...............................................16
4.3  Lock Tokens....................................................16
4.4  opaquelocktoken Lock Token URI Scheme..........................17
4.5  Lock Capability Discovery......................................17
4.6  Active Lock Discovery..........................................18
5 WRITE LOCK........................................................18
5.1  Methods Restricted by Write Locks..............................18
5.2  Write Locks and Properties.....................................18
5.3  Write Locks and Null Resources.................................18
5.4  Write Locks and Collections....................................19
5.5  Write Locks and <TT>COPY</TT>/MOVE......................................19
5.6  Refreshing Write Locks.........................................19
5.7  Write Locks and The Lock-Token Request Header..................20
 5.7.1   Write Lock Token Example...................................20
6 NOTATIONAL CONVENTIONS............................................21
7 HTTP METHODS FOR DISTRIBUTED AUTHORING............................21
7.1  PROPFIND.......................................................21
 7.1.1   Example: Retrieving Named Properties.......................22
 7.1.2   Example: Using allprop to Retrieve All Properties..........23
 7.1.3   Example: Using propname to Retrieve all Property Names.....26
7.2  PROPPATCH......................................................28
 7.2.1   Status Codes...............................................28
 7.2.2   Example....................................................28
7.3  MKCOL Method...................................................30
 7.3.1   Request....................................................30
 7.3.2   Response Codes.............................................30
 7.3.3   Example....................................................31
7.4  ADDREF Method..................................................31
 7.4.1   The Request................................................31
 7.4.2   Example....................................................31
7.5  DELREF Method..................................................32
 7.5.1   The Request................................................32
 7.5.2   Example....................................................32
7.6  GET, HEAD for Collections......................................32
7.7  POST for Collections...........................................33
7.8  DELETE.........................................................33
 7.8.1   DELETE for Non-Collection Resources........................33
 7.8.2   DELETE for Collections.....................................33
7.9  PUT............................................................34
 7.9.1   PUT for Non-Collection Resources...........................34
 7.9.2   PUT for Collections........................................35
7.10 COPY Method....................................................35
 7.10.1  COPY for HTTP/1.1 resources................................35
 7.10.2  COPY for Properties........................................35
 7.10.3  COPY for Collections.......................................36
 7.10.4  Type Interactions..........................................37
 7.10.5  Status Codes...............................................37
 7.10.6  Overwrite Example..........................................38
 7.10.7  No Overwrite Example.......................................38
 7.10.8  Collection Example.........................................38
7.11 MOVE Method....................................................39
 7.11.1  MOVE for Collections.......................................40
 7.11.2  Status Codes...............................................40
 7.11.3  Non-Collection Example.....................................41
 7.11.4  Collection Example.........................................41
7.12 LOCK Method....................................................42
 7.12.1  Operation..................................................43
 7.12.2  The Effect of Locks on Properties and Collections..........43
 7.12.3  Locking Replicated Resources...............................43
 7.12.4  Depth and Locking..........................................43
 7.12.5  Interaction with other Methods.............................44
 7.12.6  Lock Compatibility Table...................................44
 7.12.7  Lock Response..............................................44
 7.12.8  Status Codes...............................................44
 7.12.9  Example - Simple Lock Request..............................45
 7.12.10  Example - Refreshing a Write Lock.........................46
 7.12.11  Example - Multi-Resource Lock Request.....................47
7.13 UNLOCK Method..................................................48
 7.13.1  Example....................................................48
8 HTTP HEADERS FOR DISTRIBUTED AUTHORING............................49
8.1  Collection-Member Header.......................................49
8.2  DAV Header.....................................................49
8.3  Depth Header...................................................49
8.4  Destination Header.............................................50
8.5  If-None-State-Match............................................50
8.6  If-State-Match.................................................51
8.7  Lock-Token Request Header......................................51
8.8  Lock-Token Response Header.....................................52
8.9  Overwrite Header...............................................53
8.10 Status-URI Response Header.....................................53
8.11 Timeout Header.................................................53
9 STATUS CODE EXTENSIONS TO HTTP/1.1................................54
9.1  102 Processing.................................................54
9.2  207 Multi-Status...............................................55
9.3  422 Unprocessable Entity.......................................55
9.4  423 Insufficient Space on Resource.............................55
9.5  424 Method Failure.............................................55
9.6  425 Locked.....................................................55
10  MULTI-STATUS RESPONSE...........................................55
11  XML ELEMENT DEFINITIONS.........................................55
11.1 activelock XML Element.........................................56
 11.1.1  depth XML Element..........................................56
 11.1.2  locktoken XML Element......................................56
 11.1.3  timeout XML Element........................................56
11.2 collection XML Element.........................................56
11.3 href XML Element...............................................56
11.4 link XML Element...............................................57
 11.4.1  dst XML Element............................................57
 11.4.2  src XML Element............................................57
11.5 lockentry XML Element..........................................57
11.6 lockinfo XML Element...........................................57
11.7 lockscope XML Element..........................................58
 11.7.1  exclusive XML Element......................................58
 11.7.2  shared XML Element.........................................58
11.8 locktype XML Element...........................................58
 11.8.1  write XML Element..........................................58
11.9 multistatus XML Element........................................58
 11.9.1  response XML Element.......................................59
 11.9.2  responsedescription XML Element............................59
11.10 owner XML Element.............................................60
11.11 prop XML element..............................................60
11.12 propertybehavior XML element..................................60
 11.12.1  keepalive XML element.....................................60
 11.12.2  omit XML element..........................................61
11.13 propertyupdate XML element....................................61
 11.13.1  remove XML element........................................61
 11.13.2  set XML element...........................................62
11.14 propfind XML Element..........................................62
 11.14.1  allprop XML Element.......................................62
 11.14.2  propname XML Element......................................62
12  DAV PROPERTIES..................................................62
12.1 creationdate Property..........................................63
12.2 displayname Property...........................................63
12.3 externalmembers Property.......................................63
12.4 getcontentlanguage Property....................................63
12.5 getcontentlength Property......................................64
12.6 getcontenttype Property........................................64
12.7 getetag Property...............................................64
12.8 getlastmodified Property.......................................64
12.9 lockdiscovery Property.........................................65
 12.9.1  Example....................................................65
12.10 resourcetype Property.........................................66
12.11 source Property...............................................66
 12.11.1  Example...................................................67
12.12 supportedlock Property........................................67
 12.12.1  Example...................................................68
13  DAV COMPLIANCE CLASSES..........................................68
13.1 Class 1........................................................69
13.2 Class 2........................................................69
14  INTERNATIONALIZATION CONSIDERATIONS.............................69
15  SECURITY CONSIDERATIONS.........................................70
15.1 Authentication of Clients......................................71
15.2 Denial of Service..............................................71
15.3 Security through Obscurity.....................................72
15.4 Privacy Issues Connected to Locks..............................72
15.5 Privacy Issues Connected to Properties.........................72
15.6 Reduction of Security due to Source Link.......................72
16  IANA CONSIDERATIONS.............................................73
17  TERMINOLOGY.....................................................73
18  COPYRIGHT.......................................................74
19  INTELLECTUAL PROPERTY...........................................74
20  ACKNOWLEDGEMENTS................................................75
21  REFERENCES......................................................76
22  AUTHORS' ADDRESSES..............................................78
23  APPENDICES......................................................79
23.1 Appendix 1 - WebDAV Document Type Definition...................79
23.2 Appendix 2 - ISO 8601 Date and Time Profile....................80
23.3 Appendix 3 - Notes on Processing XML Elements..................81
 23.3.1  XML Syntax Error Example...................................81
 23.3.2  Unknown XML Element Example................................81
</PRE>

<h2>1  Introduction</h2>

<P>This document describes an extension to the HTTP/1.1 protocol that
   allows clients to perform remote web content authoring operations.
   This extension provides a coherent set of methods, headers, request
   entity body formats, and response entity body formats that provide
   operations for:

<P>Properties: The ability to create, remove, and query information
   about Web pages, such as their authors, creation dates, etc. Also,
   the ability to link pages of any media type to related pages.

<P>Collections: The ability to create sets of related documents, and to
   receive a listing of pages at a particular hierarchy level (like a
   directory listing in a file system).

<P>Locking: The ability to keep more than one person from working on a
   document at the same time. This prevents the "lost update problem,"
   in which modifications are lost as first one author, then another
   writes changes without merging the other author's changes

<P>Namespace Operations: The ability to copy and move Web resources

<P>Requirements and rationale for these operations are described in a
   companion document, "Requirements for a Distributed Authoring and
   Versioning Protocol for the World Wide Web" [Slein et al., 1997].

<P>The sections below provide a detailed introduction to resource
   properties (Section 2), collections of resources (Section 3), and
   locking operations (Section 4).  These sections introduce the
   abstractions manipulated by the WebDAV-specific HTTP methods
   described in Section 7, "HTTP Methods for Distributed Authoring".

<P>In HTTP/1.1, method parameter information was exclusively encoded in
   HTTP headers. Unlike HTTP/1.1, WebDAV, encodes method parameter
   information either in an Extensible Markup Language (XML) [Bray,
   Paoli, Sperberg-McQueen, 1998] request entity body, or in an HTTP
   header.  The use of XML to encode method parameters was motivated by
   the ability to add extra XML elements to existing structures,
   providing extensibility, and by XML's ability to encode information
   in ISO 10646 character sets, providing internationalization support.
   As a rule of thumb, parameters are encoded in XML entity bodies when
   they have unbounded length, or when they may be shown to a human
   user and hence require encoding in an ISO 10646 character set.
   Otherwise, parameters are encoded within HTTP headers.  Section 8
   describes the new HTTP headers used with WebDAV methods.

<P>In addition to encoding method parameters, XML is used in WebDAV to
   encode the responses from methods, providing the extensibility and
   internationalization advantages of XML for method output, as well as
   input. XML elements used in this specification are defined in
   Section 11.

<P>While the status codes provided by HTTP/1.1 are sufficient to
   describe most error conditions encountered by WebDAV methods, there
   are some errors that do not fall neatly into the existing
   categories.  New status codes developed for the WebDAV methods are
   defined in Section 9.  Since some WebDAV methods may operate over
   many resources, the Multi-Status status type has been introduced to
   return status information for multiple resources.  Multi-Status
   response is described in Section 10.

<P>WebDAV employs the property mechanism to store information about the
   current state of the resource.  For example, when a lock is taken
   out on a resource, a lock information property describes the current
   state of the lock. Section 12 defines the properties used within the
   WebDAV specification.

<P>Finishing off the specification are sections on what it means to be
   compliant with this specification (Section 13), on
   internationalization support (Section 14), and on security (Section
   15).


<h2>2  Data Model for Resource Properties</h2>

<h3>2.1 The Resource Property Model</h3>

<P>Properties are pieces of data that describe the state of a resource.
   Properties are data about data.

<P>Properties are used in distributed authoring environments to provide
   for efficient discovery and management of resources.  For example, a
   'subject' property might allow for the indexing of all resources by
   their subject, and an 'author' property might allow for the
   discovery of what authors have written which documents.

<P>The DAV property model consists of name/value pairs.  The name of a
   property identifies the property's syntax and semantics, and
   provides an address by which to refer to that syntax and semantics.

<P>There are two categories of properties: "live" and "dead".  A live
   property has its syntax and semantics enforced by the server. Live
   properties include cases where a) the value of a property is read-only, maintained by the server, and b) the value of the property is
   maintained by the client, but the server performs syntax checking on
   submitted values. A dead property has its syntax and semantics
   enforced by the client; the server merely records the value of the
   property verbatim.

<h3>2.2 Existing Metadata Proposals</h3>

<P>Properties have long played an essential role in the maintenance of
   large document repositories, and many current proposals contain some
   notion of a property, or discuss web metadata more generally.  These
   include PICS [Miller et al., 1996], PICS-NG, XML [Bray, Paoli,
   Sperberg-McQueen, 1998], Web Collections, and several proposals on
   representing relationships within HTML. Work on PICS-NG and Web
   Collections has been subsumed by the Resource Definition Framework
   (RDF) metadata activity of the World Wide Web Consortium. RDF
   consists of a network-based data model and an XML representation of
   that model.

<P>Some proposals come from a digital library perspective.  These
   include the Dublin Core [Weibel et al., 1995] metadata set and the
   Warwick Framework [Lagoze, 1996], a container architecture for
   different metadata schemas.  The literature includes many examples
   of metadata, including MARC [MARC, 1994], a bibliographic metadata
   format, and RFC 1807 [Lasher, Cohen, 1995], a technical report
   bibliographic format employed by the Dienst system. Additionally,
   the proceedings from the first IEEE Metadata conference describe
   many community-specific metadata sets.

<P>Participants of the 1996 Metadata II Workshop in Warwick, UK
   [Lagoze, 1996], noted that "new metadata sets will develop as the
   networked infrastructure matures" and "different communities will
   propose, design, and be responsible for different types of
   metadata." These observations can be corroborated by noting that
   many community-specific sets of metadata already exist, and there is
   significant motivation for the development of new forms of metadata
   as many communities increasingly make their data available in
   digital form, requiring a metadata format to assist data location
   and cataloging.

<h3>2.3 Properties and HTTP Headers</h3>

<P>Properties already exist, in a limited sense, in HTTP message
   headers.  However, in distributed authoring environments a
   relatively large number of properties are needed to describe the
   state of a resource, and setting/returning them all through HTTP
   headers is inefficient.  Thus a mechanism is needed which allows a
   principal to identify a set of properties in which the principal is
   interested and to set or retrieve just those properties.

<h3>2.4 Property Values</h3>

<P>The value of a property is expressed as a well-formed XML document.

<P>XML has been chosen because it is a flexible, self-describing,
   structured data format that supports rich schema definitions, and
   because of its support for multiple character sets.  XML's self-describing nature allows any property's value to be extended by
   adding new elements.  Older clients will not break when they
   encounter extensions because they will still have the data specified
   in the original schema and will ignore elements they do not
   understand.  XML's support for multiple character sets allows any
   human-readable property to be encoded and read in a character set
   familiar to the user.

<h3>2.5 Property Names</h3>

<P>A property name is a universally unique identifier that is
   associated with a schema that provides information about the syntax
   and semantics of the property.

<P>Because a property's name is universally unique, clients can depend
   upon consistent behavior for a particular property across multiple
   resources, so long as that property is "live" on the resources in
   question.

<P>The XML namespace mechanism, which is based on URIs, is used to name
   properties because it prevents namespace collisions and provides for
   varying degrees of administrative control.

<P>The property namespace is flat; that is, no hierarchy of properties
   is explicitly recognized.  Thus, if a property A and a property A/B
   exist on a resource, there is no recognition of any relationship
   between the two properties.  It is expected that a separate
   specification will eventually be produced which will address issues
   relating to hierarchical properties.

<P>Finally, it is not possible to define the same property twice on a
   single resource, as this would cause a collision in the resource's
   property namespace.


<h2>3  Collections of Web Resources</h2>

<P>This section provides a description of a new type of Web resource,
   the collection, and discusses its interactions with the HTTP Uniform
   Resource Locator (URL) namespace. The purpose of a collection
   resource is to model collection-like objects (e.g., filesystem
   directories) within a server's namespace.

<P>All DAV compliant resources MUST support the HTTP URL namespace
   model specified herein.

<h3>3.1 Collection Resources</h3>

<P>A collection is a resource whose state consists of an unordered list
   of internal members, an unordered list of external members, and a
   set of properties.  An internal member resource MUST have a URI that
   is immediately relative to the base URI of the collection.  That is,
   the internal member's URI is equal to the parent collection's URI
   plus an additional segment where segment is defined in Section 3.2.1
   of RFC 2068 [Fielding et al., 1996].

<P>An external member resource is a resource that could not be an
   internal member resource. Any given internal or external Member MUST
   only belong to the collection once, i.e., it is illegal to have
   multiple instances of the same URI in a collection.  Properties
   defined on collections behave exactly as do properties on non-collection resources.

<P>There is a standing convention that when a collection is referred to
   by its name without a trailing slash, the trailing slash is
   automatically appended.  Due to this, a resource MAY accept a URI
   without a trailing "/" to point to a collection. In this case it
   SHOULD return a location header in the response pointing to the URL
   ending with the "/".  For example, if a client invokes a method on
   http://foo.bar/blah (no trailing slash), the resource
   http://foo.bar/blah/ (trailing slash) MAY respond as if the
   operation were invoked on it, and SHOULD return a location header
   with http://foo.bar/blah/ in it.  In general clients SHOULD use the
   "/" form of collection names.

<h3>3.2 Creation and Retrieval of Collection Resources</h3>

<P>This document specifies the <TT>MKCOL</TT> method to create new collection
   resources, rather than using the existing HTTP/1.1 <TT>PUT</TT> or <TT>POST</TT>
   method, for the following reasons

<P>In HTTP/1.1, the <TT>PUT</TT> method is defined to store the request body at
   the location specified by the Request-URI.  While a description
   format for a collection can readily be constructed for use with <TT>PUT</TT>,
   the implications of sending such a description to the server are
   undesirable.  For example, if a description of a collection that
   omitted some existing resources were <TT>PUT</TT> to a server, this might be
   interpreted as a command to remove those members.  This would extend
   <TT>PUT</TT> to perform <TT>DELETE</TT> functionality, which is undesirable since it
   changes the semantics of <TT>PUT</TT>, and makes it difficult to control
   <TT>DELETE</TT> functionality with an access control scheme based on methods.

<P>While the <TT>POST</TT> method is sufficiently open-ended that a "create a
   collection" <TT>POST</TT> command could be constructed, this is undesirable
   because it would be difficult to separate access control for
   collection creation from other uses of <TT>POST</TT>.

<P>The exact definition of the behavior of <TT>GET</TT> and <TT>PUT</TT> on collections
   is defined later in this document.

<h3>3.3 HTTP URL Namespace Model</h3>

<P>The HTTP URL Namespace is a hierarchical namespace where the
   hierarchy is delimited with the "/" character.  DAV compliant
   resources MUST maintain the consistency of the HTTP URL namespace.
   Any attempt to create a resource (excepting the root member of a
   namespace) that would not be the internal member of a collection
   MUST fail. For example, if the collection http://www.foo.bar.org/a/
   exists, but http://www.foo.bar.org/a/b/does not exist, an attempt to
   create http://www.foo.bar.org/a/b/c must fail.

<h3>3.4 Source Resources and Output Resources</h3>

<P>For many resources, the entity returned by a <TT>GET</TT> method exactly
   matches the persistent state of the resource, for example, a GIF
   file stored on a disk.  For this simple case, the URL at which a
   resource is accessed is identical to the URL at which the source
   (the persistent state) of the resource is accessed.  This is also
   the case for HTML source files that are not processed by the server
   prior to transmission.

<P>However, the server can sometimes process HTML resources before they
   are transmitted as a return entity body.  For example, server-side-include directives within an HTML file instruct a server to replace
   the directive with another value, such as the current date.  In this
   case, what is returned by <TT>GET</TT> (HTML plus date) differs from the
   persistent state of the resource (HTML plus directive).  Typically
   there is no way to access the HTML resource containing the
   unprocessed directive.

<P>Sometimes the entity returned by <TT>GET</TT> is the output of a data-producing process that is described by one or more source resources
   (that may not even have a location in the URL namespace).  A single
   data-producing process may dynamically generate the state of a
   potentially large number of output resources.  An example of this is
   a CGI script that describes a "finger" gateway process that maps
   part of the namespace of a server into finger requests, such as
   http://www.foo.bar.org/finger_gateway/user@host.

<P>In the absence of distributed authoring capabilities, it is
   acceptable to have no mapping of source resource(s) to the URI
   namespace. In fact, preventing access to the source resource(s) has
   desirable security benefits.  However, if remote editing of the
   source resource(s) is desired, the source resource(s) should be
   given a location in the URI namespace.  This source location should
   not be one of the locations at which the generated output is
   retrievable, since in general it is impossible for the server to
   differentiate requests for source resources from requests for
   process output resources.  There is often a many-to-many
   relationship between source resources and output resources.

<P>On WebDAV compliant servers, for all output resources which have a
   single source resource (and that source resource has a URI), the URI
   of the source resource SHOULD be stored in a link on the output
   resource with type http://www.iana.org/standards/dav/source (see
   Section 12.11 for a description of the <TT>source</TT> link).  Note that by
   storing the source URIs in links on the output resources, the burden
   of discovering the source is placed on the authoring client.

<h2>4  Locking</h2>

<P>The ability to lock a resource provides a mechanism for serializing
   access to that resource.  Using a lock, an authoring client can
   provide a reasonable guarantee that another principal will not
   modify a resource while it is being edited.  In this way, a client
   can prevent the "lost update" problem.

<P>This specification allows locks to vary over two client-specified
   parameters, the number of principals involved (exclusive vs. shared)
   and the type of access to be granted. This document defines locking
   for only one access type, write. However, the syntax is extensible,
   and permits the eventual specification of locking for other access
   types.

<h3>4.1 Exclusive Vs. Shared Locks</h3>

<P>The most basic form of lock is an exclusive lock.  This is a lock
   where the access right in question is only granted to a single
   principal.  The need for this arbitration results from a desire to
   avoid having to constantly merge results.

<P>However, there are times when the goal of a lock is not to exclude
   others from exercising an access right but rather to provide a
   mechanism for principals to indicate that they intend to exercise
   their access right.  Shared locks are provided for this case.  A
   shared lock allows multiple principals to receive a lock.  Hence any
   principal with appropriate access can get the lock.

<P>With shared locks there are two trust sets that affect a resource.
   The first trust set is created by access permissions.  Principals
   who are trusted, for example, may have permission to write the
   resource.  Those who are not, don't.  Among those who have access
   permission to write the resource, the set of principals who have
   taken out a shared lock also must trust each other, creating a
   (typically) smaller trust set within the access permission write
   set.

<P>Starting with every possible principal on the Internet, in most
   situations the vast majority of these principals will not have write
   access to a given resource.  Of the small number who do have write
   access, some principals may decide to guarantee their edits are free
   from overwrite conflicts by using exclusive write locks.  Others may
   decide they trust their collaborators will not overwrite their work
   (the potential set of collaborators being the set of principals who
   have write permission) and use a shared lock, which informs their
   collaborators that a principal may be working on the resource.

<P>The WebDAV extensions to HTTP do not need to provide all of the
   communications paths necessary for principals to coordinate their
   activities.  When using shared locks, principals may use any out of
   band communication channel to coordinate their work (e.g., face-to-face interaction, written notes, post-it notes on the screen,
   telephone conversation, Email, etc.)  The intent of a shared lock is
   to let collaborators know who else may be working on a resource.

<P>Shared locks are included because experience from web distributed
   authoring systems has indicated that exclusive write locks are often
   too rigid.  An exclusive write lock is used to enforce a particular
   editing process: take out exclusive write lock, read the resource,
   perform edits, write the resource, release the lock.  This editing
   process has the problem that locks are not always properly released,
   for example when a program crashes, or when a lock owner leaves
   without unlocking a resource.  While both timeouts and
   administrative action can be used to remove an offending lock,
   neither mechanism may be available when needed; the timeout may be
   long or the administrator may not be available.

<P>Despite their potential problems, exclusive write locks are
   extremely useful, since often a guarantee of freedom from overwrite
   conflicts is what is needed. This specification provides both
   exclusive write locks and the less strict mechanism of shared locks.

<h3>4.2 Required Support</h3>

<P>A WebDAV compliant server is not required to support locking in any
   form.  If the server does support locking it MAY choose to support
   any combination of exclusive and shared locks for any access types.

<P>The reason for this flexibility is that locking policy strikes to
   the very heart of the resource management and versioning systems
   employed by various storage repositories.  These repositories
   require control over what sort of locking will be made available.
   For example, some repositories only support shared write locks while
   others only provide support for exclusive write locks while yet
   others use no locking at all.  As each system is sufficiently
   different to merit exclusion of certain locking features, this
   specification leaves locking as the sole axis of negotiation within
   WebDAV.

<h3>4.3 Lock Tokens</h3>

<P>A lock token is a URI that identifies a particular lock.  A lock
   token is returned by every successful <TT>LOCK</TT> operation in the <TT>Lock-Token</TT> response header, and can also be discovered through lock
   discovery on a resource.

<P>Lock token URIs are required to be unique across all resources for
   all time. This uniqueness constraint allows lock tokens to be
   submitted across resources and servers without fear of confusion.

<P>This specification provides a lock token URI scheme called
   opaquelocktoken that meets the uniqueness requirements.  However
   resources are free to return any URI scheme so long as it meets the
   uniqueness requirements.

<h3>4.4 opaquelocktoken Lock Token URI Scheme</h3>

<P>The opaquelocktoken URI scheme is designed to be unique across all
   resources for all time.  Due to this uniqueness quality, a client
   MAY submit an opaque lock token in a <TT>Lock-Token</tt> request header and
   an <TT>If-[None]-State-Match</TT> header on a resource other than the one
   that returned it.

<P>All resources MUST recognize the opaquelocktoken scheme and, at
   minimum, recognize that the lock token was not generated by the
   resource.  Note, however, that resources are not required to
   generate opaquelocktokens in <TT>LOCK</TT> method responses.

<P>In order to guarantee uniqueness across all resources for all time
   the opaquelocktoken requires the use of the Universally Unique
   Identifier (UUID, also known as a Globally Unique Identifier, or
   GUID) mechanism, as described in [Leach, Salz, 1998].

<P>Opaquelocktoken generators, however, have a choice of how they
   create these tokens.  They can either generate a new UUID for every
   lock token they create, which is potentially very expensive, or they
   can create a single UUID and then add extension characters.  If the
   second method is selected then the program generating the extensions
   MUST guarantee that the same extension will never be used twice with
   the associated UUID.

<PRE>   OpaqueLockToken-URI = "opaquelocktoken:" UUID [Extension]  ; The
   UUID production is the string form of a UUID, as defined in [Leach,
   Salz, 1998]. Note that white space (LWS) is not allowed between
   elements of this production.
</PRE>

<PRE>   Extension = path  ; path is defined in Section 3.2.1 of RFC 2068
   [Fielding et al., 1996]
</PRE>

<h3>4.5 Lock Capability Discovery</h3>

<P>Since server lock support is optional, a client trying to lock a
   resource on a server can either try the lock and hope for the best,
   or perform some form of discovery to determine what lock
   capabilities the server supports.  This is known as lock capability
   discovery.  Lock capability discovery differs from discovery of
   supported access control types, since there may be access control
   types without corresponding lock types.  A client can determine what
   lock types the server supports by retrieving the <TT>supportedlock</TT>
   property.

<P>Any DAV compliant resource that supports the <TT>LOCK</TT> method MUST
   support the <TT>supportedlock</TT> property.

<h3>4.6 Active Lock Discovery</h3>

<P>If another principal locks a resource that a principal wishes to
   access, it is useful for the second principal to be able to find out
   who the first principal is.  For this purpose the lockdiscovery
   property is provided.  This property lists all outstanding locks,
   describes their type, and provides their lock token.

<P>Any DAV compliant resource that supports the <TT>LOCK</TT> method MUST
   support the lockdiscovery property.


<h2>5  Write Lock</h2>

<P>This section describes the semantics specific to the write access
   type for locks.  The write lock is a specific instance of a lock
   type, and is the only lock type described in this specification.  A
   DAV compliant resource MAY support the write lock.

<h3>5.1 Methods Restricted by Write Locks</h3>

<P>A write lock prevents a principal without the lock from successfully
   executing a <TT>PUT</TT>, <TT>POST</TT>, <TT>PROPPATCH</TT>, <TT>LOCK</TT>, <TT>UNLOCK</TT>, <TT>MOVE</TT>, <TT>DELETE</TT>, <TT>MKCOL</TT>,
   <TT>ADDREF</TT> or <TT>DELREF</TT> on the locked resource.  All other current methods,
   <TT>GET</TT> in particular, function independent of the lock.

<P>Note, however, that as new methods are created it will be necessary
   to specify how they interact with a write lock.

<h3>5.2 Write Locks and Properties</h3>

<P>While those without a write lock may not alter a property on a
   resource it is still possible for the values of live properties to
   change, even while locked, due to the requirements of their schemas.
   Only dead properties and live properties defined to respect locks
   are guaranteed not to change while write locked.

<h3>5.3 Write Locks and Null Resources</h3>

<P>It is possible to assert a write lock on a null resource in order to
   lock the name.  A write locked null resource acts in all ways as a
   null resource other than it MUST respond to a <TT>PROPFIND</TT> request and
   MUST support the lockdiscovery and <TT>supportedlock</TT> properties.

<P>Until a method such as <TT>PUT</TT> or <TT>MKCOL</TT> is executed, the resource stays
   in the null state with the exception of the behavior stated above.

<P>If the resource is unlocked without a <TT>PUT</TT>, <TT>MKCOL</TT>, or similar method
   having been executed, the resource is no longer required to support
   the <TT>PROPFIND</TT> method or the lockdiscovery and <TT>supportedlock</TT>
   properties.

<h3>5.4 Write Locks and Collections</h3>

<P>A write lock on a collection prevents the addition or removal of
   members of the collection by non-lock owners.  As a consequence,
   when a principal issues a request to create a new internal member of
   a write locked collection using <TT>PUT</TT> or <TT>POST</TT>, or to remove an
   existing internal member of a write locked collection using <TT>DELETE</TT>,
   this request MUST fail if the principal does not have a write lock
   on the collection.

<P>However, if a write lock request is issued to a collection
   containing internal member resources that are currently locked in a
   manner which conflicts with the write lock, the request MUST fail
   with a 425 Locked status code.

<P>If a lock owner causes a resource to be added as an internal member
   of a locked collection then the new resource is automatically added
   to the lock.  This is the only mechanism that allows a resource to

<P>be added to a write lock.  Thus, for example, if the collection
   /a/b/ is write locked and the resource /c is moved to /a/b/c then
   /a/b/c will be added to the write lock.

<h3>5.5 Write Locks and <TT>COPY</TT>/<TT>MOVE</TT></h3>

<P>A <TT>COPY</TT> method invocation MUST NOT duplicate any write locks active
   on the source.  However, as previously noted, if the <TT>COPY</TT> copies the
   resource into a collection that is depth locked then the resource
   will be added to the lock.

<P>A <TT>MOVE</TT> does not move the write lock with the resource. There are two
   exceptions to this rule. First, as noted in section 5.4, if the <TT>MOVE</TT>
   makes the resource a child of a collection that is depth locked then
   the resource will be under the same lock. Second, if a depth locked
   resource is moved to a destination that is within the scope of the
   same depth lock (e.g., within the namespace tree covered by the
   lock), the moved resource is still a member of the lock. In both
   cases a <TT>Lock-Token</TT> header MUST be submitted containing a lock token
   for the lock on the source, if locked, and on the destination.

<h3>5.6 Refreshing Write Locks</h3>

<P>A client MUST NOT submit the same write lock request twice.  Note
   that a client is always aware it is resubmitting the same lock
   request because it must include the <TT>Lock-Token</TT> header in order to
   make the request for a resource that is already locked.

<P>However, a client MAY submit a <TT>LOCK</TT> method with a <TT>Lock-Token</TT> header
   but without a body.  This form of <TT>LOCK</TT> MAY only be used to "refresh"
   a lock.  Currently, refreshing a lock only means that any timers
   associated with the lock are re-set.

<P>A server MAY return a <TT>Timeout</TT> header with a lock refresh that is
   different than the <TT>Timeout</TT> header returned when the lock was
   originally requested.  Additionally clients MAY submit Timeout
   headers of arbitrary value with their lock refresh requests.
   Servers, as always, MAY ignore <TT>Timeout</TT> headers submitted by the
   client.

<P>If an error is received in response to a refresh <TT>LOCK</TT> request the
   client MUST assume that the lock was not refreshed.

<h3>5.7 Write Locks and The Lock-Token Request Header</h3>

<P>If a user agent is not required to have knowledge about a lock when
   requesting an operation on a locked resource, the following scenario
   might occur.  Program A, run by User A, takes out a write lock on a
   resource.  Program B, also run by User A, has no knowledge of the
   lock taken out by Program A, yet performs a <TT>PUT</TT> to the locked
   resource.  In this scenario, the <TT>PUT</TT> succeeds because locks are
   associated with a principal, not a program, and thus program B,
   because it is acting with principal A's credential, is allowed to
   perform the <TT>PUT</TT>.  However, had program B known about the lock, it
   would not have overwritten the resource, preferring instead to
   present a dialog box describing the conflict to the user.  Due to
   this scenario, a mechanism is needed to prevent different programs
   from accidentally ignoring locks taken out by other programs with
   the same authorization.

<P>In order to prevent these collisions the <TT>Lock-Token</TT> request header,
   defined in Section 8.7, is introduced.

<h4>5.7.1     Write Lock Token Example</h4>

<P>&gt;&gt;Request

<PRE>
   COPY /~fielding/index.html HTTP/1.1
   Host: www.ics.uci.edu
   Destination: http://www.ics.uci.edu/users/f/fielding/index.html
   Lock-Token: &lt;opaquelocktoken:f81d4fae-7dec-11d0-a765-00a0c91e6bf6&gt;
   Authorization: Digest username="fielding",
      realm="fielding@ics.uci.edu", nonce="...",
      uri="/~fielding/index.html", response="...",
      opaque="..."
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 204 No Content
</PRE>


<P>In this example, even though both the source and destination are
   locked, only one lock token must be submitted, for the lock on the
   destination.  This is due to the source resource not being modified
   during a <TT>COPY</TT>, and hence unaffected by the write lock. The
   <TT>Authorization</TT> header provides the Digest authentication credentials
   for the principal making the request (note that the nonce, response,
   and opaque fields have not been calculated for this example). The
   source and the destination resources are both located within the
   same authentication realm, therefore only one set of Authorization
   credentials needs to be submitted.


<h2>6  Notational Conventions</h2>

<P>Since this document describes a set of extensions to the HTTP/1.1
   protocol, the augmented BNF used herein to describe protocol
   elements is exactly the same as described in Section 2.1 of
   [Fielding et al., 1997].  Since this augmented BNF uses the basic
   production rules provided in Section 2.2 of [Fielding et al., 1997],
   these rules apply to this document as well.

<P>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [Bradner,
   1997].


<h2>7  HTTP Methods for Distributed Authoring</h2>

<H3>7.1 <TT>PROPFIND</TT></H3>

<P>The <TT>PROPFIND</TT> method retrieves properties defined on the Request-URI,
   if the resource does not have any internal members, or on the
   Request-URI and potentially its member resources, if the resource
   does have internal members.  All DAV compliant resources MUST
   support the <TT>PROPFIND</TT> method.

<P>A client MAY submit a <TT>Depth</TT> header with a value of "0", "1", or
   "infinity" with a <TT>PROPFIND</TT> on a resource with internal members.  DAV
   compliant servers MUST support the "0", "1" and "infinity"
   behaviors. By default, the <TT>PROPFIND</TT> method without a <TT>Depth</TT> header
   MUST act as if a "Depth: infinity" header was included.

<P>A client MAY submit a propfind XML element in the body of the
   request method describing what information is being requested.  It
   is possible to request particular property values, all property
   values, or a list of the names of the resource's properties.  A
   client MAY choose not to submit a request body.  An empty request
   body MUST be treated as a request for the names and values of all
   properties.

<P>The response is a text/xml message body that contains a <TT>multistatus</TT>
   XML element that describes the results of the attempts to retrieve
   the various properties.  If a property was successfully retrieved
   then its value MUST be returned in a prop XML element.

<P>If there is an error retrieving a property then a proper error
   result must be included.  Requests to retrieve the value of a
   property which does not exist is an error and MUST be noted with a
   response XML element which contains a 404 Not Found status value.

<P>Consequently, the <TT>multistatus</TT> XML element for a resource with
   members MUST include a response XML element for each member of the
   resource, to whatever depth was requested. Each response XML element
   MUST contain an <TT>href</TT> XML element that identifies the resource on
   which the properties in the prop XML element are defined.  Results
   for a <TT>PROPFIND</TT> on a resource with internal members are returned as a
   flat list whose order of entries is not significant.

<P>In the case of allprop and propname, if a principal does not have
   the right to know if a particular property exists then a 404 Not
   Found MUST be returned.

<P>The results of this method SHOULD NOT be cached.

<h4>7.1.1     Example: Retrieving Named Properties</h4>

<P>&gt;&gt;Request

<PRE>
   PROPFIND  /files/ HTTP/1.1
   Host: www.foo.bar
   Depth: 0
   Content-type: text/xml
   Content-Length: xyz

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href ="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:propfind&gt;
     &lt;D:href&gt;http://www.foo.bar/boxschema/bigbox&lt;/D:href&gt;
     &lt;D:href&gt;http://www.foo.bar/boxschema/author&lt;/D:href&gt;
     &lt;D:href&gt;http://www.foo.bar/boxschema/DingALing&lt;/D:href&gt;
     &lt;D:href&gt;http://www.foo.bar/boxschema/Random&lt;/D:href&gt;
   &lt;/D:propfind&gt;
</PRE>
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href ="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;?namespace href="http://www.foo.bar/boxschema" as="R"?&gt;
   &lt;D:multistatus&gt;
     &lt;D:response&gt;
          &lt;D:href&gt;http://www.foo.bar/files/&lt;/D:href&gt;
          &lt;D:propstat&gt;
               &lt;D:prop&gt;
                    &lt;R:bigbox&gt;
                         &lt;R:BoxType&gt;Box type A&lt;/R:BoxType&gt;
                    &lt;/R:bigbox&gt;
                    &lt;R:author&gt;
                         &lt;R:Name&gt;J.J. Johnson&lt;/R:Name&gt;
                    &lt;/R:author&gt;
               &lt;/D:prop&gt;
               &lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;
          &lt;/D:propstat&gt;
          &lt;D:propstat&gt;
               &lt;D:prop&gt;&lt;R:DingALing/&gt;&lt;R:Random/&gt;&lt;/D:prop&gt;
               &lt;D:status&gt;HTTP/1.1 403 Forbidden&lt;/D:status&gt;
               &lt;D:responsedescription&gt; The user does not have access to
   the DingALing property.
               &lt;/D:responsedescription&gt;
          &lt;/D:propstat&gt;
     &lt;/D:response&gt;
     &lt;D:responsedescription&gt; There has been an access violation error.
     &lt;/D:responsedescription&gt;
   &lt;/D:multistatus&gt;
</PRE>
</PRE>

<P>In this example, <TT>PROPFIND</TT> is executed on the collection
   http://www.foo.bar/files/.  The specified depth is zero, hence the
   <TT>PROPFIND</TT> applies only to the collection itself, and not to any of
   its members.  The propfind XML element specifies the name of four
   properties whose values are being requested. In this case only two
   properties were returned, since the principal issuing the request
   did not have sufficient access rights to see the third and fourth
   properties.

<h4>7.1.2     Example: Using allprop to Retrieve All Properties</h4>

<P>&gt;&gt;Request

<PRE>
   PROPFIND  /container/ HTTP/1.1
   Host: www.foo.bar
   Depth: 1
   Content-Type: text/xml
   Content-Length: xxxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href ="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:propfind&gt;
     &lt;D:allprop/&gt;
   &lt;/D:propfind&gt;
</PRE>
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="S"?&gt;
   &lt;?namespace href="http://www.foo.bar/boxschema/" as="R"?&gt;
   &lt;S:multistatus&gt;
     &lt;S:response&gt;
          &lt;S:href&gt;http://www.foo.bar/container/&lt;/S:href&gt;
          &lt;S:propstat&gt;
               &lt;S:prop&gt;
                    &lt;R:bigbox&gt;
                         &lt;R:BoxType&gt;Box type A&lt;/R:BoxType&gt;
                    &lt;/R:bigbox&gt;
                    &lt;R:author&gt;
                         &lt;R:Name&gt;Hadrian&lt;/R:Name&gt;
                    &lt;/R:author&gt;
                   &lt;S:creationdate&gt;
                     1997-12-01T17:42:21-08:00
                   &lt;/S:creationdate&gt;
                   &lt;S:displayname&gt;
                     Example collection
                   &lt;/S:displayname&gt;
                   &lt;S:externalmembers&gt;
                     &lt;S:href&gt;http://www.acme.com/front/&lt;/S:href&gt;
                   &lt;/S:externalmembers&gt;
                   &lt;S:resourcetype&gt;&lt;S:collection/&gt;&lt;/S:resourcetype&gt;
                   &lt;S:supportedlock&gt;
                     &lt;S:lockentry&gt;
                       &lt;S:exclusive/&gt;&lt;S:write/&gt;
                     &lt;/S:lockentry&gt;
                     &lt;S:lockentry&gt;
                       &lt;S:shared/&gt;&lt;S:write/&gt;
                     &lt;/S:lockentry&gt;
                   &lt;/S:supportedlock&gt;
               &lt;/S:prop&gt;
               &lt;S:status&gt;HTTP 1.1 200 OK&lt;/S:status&gt;
          &lt;/S:propstat&gt;
     &lt;/S:response&gt;
     &lt;S:response&gt;
          &lt;S:href&gt;http://www.foo.bar/container/front.html&lt;/S:href&gt;
          &lt;S:propstat&gt;
               &lt;S:prop&gt;
                    &lt;R:bigbox&gt;
                         &lt;R:BoxType&gt;Box type B&lt;/R:BoxType&gt;
                    &lt;/R:bigbox&gt;
                   &lt;S:creationdate&gt;
                     1997-12-01T18:27:21-08:00
                   &lt;/S:creationdate&gt;
                   &lt;S:displayname&gt;
                     Example HTML resource
                   &lt;/S:displayname&gt;
                   &lt;S:getcontentlength&gt;
                     4525
                   &lt;/S:getcontentlength&gt;
                   &lt;S:getcontenttype&gt;
                     text/html
                   &lt;/S:getcontenttype&gt;
                   &lt;S:getetag&gt;
                     zzyzx
                      &lt;/S:getetag&gt;
                   &lt;S:getlastmodified&gt;
                     Monday, 12-Jan-98 09:25:56 GMT
                   &lt;/S:getlastmodified&gt;
                   &lt;S:resourcetype/&gt;
                   &lt;S:supportedlock&gt;
                     &lt;S:lockentry&gt;
                       &lt;S:exclusive/&gt;&lt;S:write/&gt;
                     &lt;/S:lockentry&gt;
                     &lt;S:lockentry&gt;
                       &lt;S:shared/&gt;&lt;S:write/&gt;
                     &lt;/S:lockentry&gt;
                   &lt;/S:supportedlock&gt;
               &lt;/S:prop&gt;
               &lt;S:status&gt;HTTP 1.1 200 OK&lt;/S:status&gt;
          &lt;/S:propstat&gt;
     &lt;/S:response&gt;
   &lt;/S:multistatus&gt;
</PRE>
</PRE>

<P>In this example, <TT>PROPFIND</TT> was invoked on the resource
   http://www.foo.bar/container/ with a <TT>Depth</TT> header of 1, meaning the
   request applies to the resource and its children, and a propfind XML
   element containing the allprop XML element, meaning the request
   should return the name and value of all properties defined on each
   resource.

<P>The resource http://www.foo.bar/container/ has seven properties
   defined on it, named http://www.foo.bar/boxschema/bigbox,
   http://www.foo.bar/boxschema/author,
   http://www.iana.org/standards/dav/creationdate,
   http://www.iana.org/standards/dav/displayname,
   http://www.iana.org/standards/dav/externalmembers,
   http://www.iana.org/standards/dav/resourcetype, and
   http://www.iana.org/standards/dav/supportedlock.  The last five
   properties are WebDAV-specific, defined in Section 12.  Since <TT>GET</TT> is
   not supported on this resource, the get-* properties (e.g., get-content-length) are not defined on this resource. The DAV-specific
   properties assert that "container" was created on December 1, 1997,
   at 5:42:21PM, in a time zone 8 hours west of GMT (creationdate), has
   a name of "Example collection" (displayname), a single external
   member resource, http://www.acme.com/front/ (externalmembers), a
   collection resource type (resourcetype), and supports exclusive
   write and shared write locks (supportedlock).

<P>The resource http://www.foo.bar/container/front.html has nine
   properties defined on it, named http://www.foo.bar/boxschema/bigbox
   (another instance of the "bigbox" property type),
   http://www.iana.org/standards/dav/creationdate,
   http://www.iana.org/standards/dav/displayname,
   http://www.iana.org/standards/dav/getcontentlength,
   http://www.iana.org/standards/dav/getcontenttype,
   http://www.iana.org/standards/dav/getetag,
   http://www.iana.org/standards/dav/getlastmodified,
   http://www.iana.org/standards/dav/resourcetype, and
   http://www.iana.org/standards/dav/supportedlock.  The DAV-specific
   properties assert that "front.html" was created on December 1, 1997,
   at 6:27:21PM, in a time zone 8 hours west of GMT (creationdate), has
   a name of "Example HTML resource" (displayname), a content length of
   4525 (getcontentlength), a MIME type of "text/html"
   (getcontenttype), an entity tag of "zzyzx" (getetag), was last
   modified on Monday, January 12, 1998, at 09:25:56 GMT
   (getlastmodified), has an undefined resource type, meaning that it
   is not a collection (resourcetype), and supports both exclusive
   write and shared write locks (supportedlock).

<h4>7.1.3     Example: Using propname to Retrieve all Property Names</h4>

<P>&gt;&gt;Request

<PRE>
   PROPFIND  /container/ HTTP/1.1
   Host: www.foo.bar
   Content-Type: text/xml
   Content-Length: xxxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href ="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:propfind&gt;
     &lt;D:propname/&gt;
   &lt;/D:propfind&gt;
</PRE>
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;?namespace href="http://www.foo.bar/boxschema/" as="R"?&gt;
   &lt;D:multistatus&gt;
     &lt;D:response&gt;
          &lt;D:href&gt;http://www.foo.bar/container/&lt;/D:href&gt;
          &lt;D:propstat&gt;
               &lt;D:prop&gt;
                    &lt;R:bigbox/&gt;
                    &lt;R:author/&gt;
                   &lt;D:creationdate/&gt;
                   &lt;D:displayname/&gt;
                   &lt;D:externalmembers/&gt;
                   &lt;D:resourcetype/&gt;
                   &lt;D:supportedlock/&gt;
               &lt;/D:prop&gt;
               &lt;D:status&gt;HTTP 1.1 200 OK&lt;/D:status&gt;
          &lt;/D:propstat&gt;
     &lt;/D:response&gt;
     &lt;D:response&gt;
          &lt;D:href&gt;http://www.foo.bar/container/front.html&lt;/D:href&gt;
          &lt;D:propstat&gt;
               &lt;D:prop&gt;
                    &lt;R:bigbox/&gt;
                   &lt;D:creationdate/&gt;
                   &lt;D:displayname/&gt;
                   &lt;D:get-content-length/&gt;
                   &lt;D:get-content-type/&gt;
                   &lt;D:get-etag/&gt;
                   &lt;D:get-last-modified/&gt;
                   &lt;D:resourcetype/&gt;
                   &lt;D:supportedlock/&gt;
               &lt;/D:prop&gt;
               &lt;D:status&gt;HTTP 1.1 200 OK&lt;/D:status&gt;
          &lt;/D:propstat&gt;
     &lt;/D:response&gt;
   &lt;/D:multistatus&gt;
</PRE>
</PRE>

<P>In this example, <TT>PROPFIND</TT> is invoked on the collection resource
   http://www.foo.bar/container/, with a propfind XML element
   containing the propname XML element, meaning the name of all
   properties should be returned.  Since no depth header is present, it
   assumes its default value of "infinity", meaning the name of the
   properties on the collection and all its progeny should be returned.

<P>Consistent with the previous example, resource
   http://www.foo.bar/container/ has seven properties defined on it,
   http://www.foo.bar/boxschema/bigbox, and
   http://www.foo.bar/boxschema/author,
   http://www.iana.org/standards/dav/creationdate,
   http://www.iana.org/standards/dav/displayname,
   http://www.iana.org/standards/dav/externalmembers,
   http://www.iana.org/standards/dav/resourcetype, and
   http://www.iana.org/standards/dav/supportedlock.  The resource
   http://www.foo.bar/container/index.html, a member of the "container"
   collection, has nine properties defined on it,
   http://www.foo.bar/boxschema/bigbox,
   http://www.iana.org/standards/dav/creationdate,
   http://www.iana.org/standards/dav/displayname,
   http://www.iana.org/standards/dav/get-content-length,
   http://www.iana.org/standards/dav/get-content-type,
   http://www.iana.org/standards/dav/get-etag,
   http://www.iana.org/standards/dav/get-last-modified,
   http://www.iana.org/standards/dav/resourcetype, and
   http://www.iana.org/standards/dav/supportedlock.


<H3>7.2 <TT>PROPPATCH</TT></H3>

<P>The <TT>PROPPATCH</TT> method processes instructions specified in the request
   body to set and/or remove properties defined on the resource
   identified by Request-URI.

<P>All DAV compliant resources MUST support the <TT>PROPPATCH</TT> method and
   MUST process instructions that are specified using the
   propertyupdate, set, and remove XML elements of the DAV schema.
   Execution of the directives in this method is, of course, subject to
   access control constraints.  DAV compliant resources SHOULD support
   the setting of arbitrary dead properties.

<P>The request message body of a <TT>PROPPATCH</TT> method MUST contain at least
   one propertyupdate XML element. Instruction processing MUST occur in
   the order instructions are received (i.e., from top to bottom).
   Instructions MUST either all be executed or none executed. Thus if
   any error occurs during processing all executed instructions MUST be
   undone and a proper error result returned. Instruction processing

<P>details can be found in the definition of the set and remove
   instructions in Section 11.13.

<P>If <TT>PROPPATCH</TT> is invoked on a null resource (e.g., a deleted
   resource), an empty resource is created, and the <TT>PROPPATCH</TT>
   directives are performed on this new resource.

<h4>7.2.1     Status Codes</h4>

<LI>   200 OK - The command succeeded.  As there can be a mixture of sets
   and removes in a body, a 201 Created seems inappropriate.

<LI>   403 Forbidden - The client, for reasons the server chooses not to
   specify, cannot alter one of the properties.

<LI>   409 Conflict - The client has provided a value whose semantics are
   not appropriate for the property.  This includes trying to set read-only properties.

<LI>   413 Request Entity Too Long - If a particular property is too long
   to be recorded then a composite XML error will be returned
   indicating the offending property.

<h4>7.2.2     Example</h4>

<P>&gt;&gt;Request

<PRE>
   PROPPATCH /bar.html HTTP/1.1
   Host: www.foo.com
   Content-Type: text/xml
   Content-Length: xxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;?namespace href="http://www.w3.com/standards/z39.50/" as="Z"?&gt;
   &lt;D:propertyupdate&gt;
     &lt;D:set&gt;
          &lt;D:prop&gt;
               &lt;Z:authors&gt;
                    &lt;Z:Author&gt;Jim Whitehead&lt;/Z:Author&gt;
                    &lt;Z:Author&gt;Roy Fielding&lt;/Z:Author&gt;
               &lt;/Z:authors&gt;
          &lt;/D:prop&gt;
     &lt;/D:set&gt;
     &lt;D:remove&gt;
          &lt;D:prop&gt;&lt;Z:Copyright-Owner/&gt;&lt;/D:prop&gt;
     &lt;/D:remove&gt;
   &lt;/D:propertyupdate&gt;
</PRE>
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;?namespace href="http://www.w3.com/standards/z39.50/" as="Z"?&gt;
   &lt;D:multistatus&gt;
     &lt;D:response&gt;
          &lt;D:href&gt;http://www.foo.com/bar&lt;/D:href&gt;
          &lt;D:propstat&gt;
               &lt;D:prop&gt;&lt;Z:Authors/&gt;&lt;/D:prop&gt;
               &lt;D:status&gt;HTTP/1.1 424 Method Failure&lt;/D:status&gt;
          &lt;/D:propstat&gt;
          &lt;D:propstat&gt;
               &lt;D:prop&gt;&lt;Z:Copyright-Owner/&gt;&lt;/D:prop&gt;
               &lt;D:status&gt;HTTP/1.1 409 Conflict&lt;/D:status&gt;
          &lt;/D:propstat&gt;
          &lt;D:responsedescription&gt; Copyright Owner can not be deleted or
   altered.&lt;/D:responsedescription&gt;
     &lt;D:response&gt;
   &lt;/D:multistatus&gt;
</PRE>
</PRE>

<P>In this example, the client requests the server to set the value of
   the http://www.w3.com/standards/z39.50/Authors property, and to
   remove the property http://www.w3.com/standards/z39.50/Copyright-Owner.  Since the Copyright-Owner property could not be removed, no
   property modifications occur.  The Method Failure status code for
   the Authors property indicates this action would have succeeded if
   it were not for the conflict with removing the Copyright-Owner
   property.


<h3>7.3 <TT>MKCOL</TT> Method</h3>

<P>The <TT>MKCOL</TT> method is used to create a new collection. All DAV
   compliant resources MUST support the <TT>MKCOL</TT> method.

<h4>7.3.1     Request</h4>

<P><TT>MKCOL</TT> creates a new collection resource at the location specified by
   the Request-URI.  If the resource identified by the Request-URI is
   non-null then the <TT>MKCOL</TT> must fail.  During <TT>MKCOL</TT> processing, a
   server MUST make the Request-URI a member of its parent collection.
   If no such ancestor exists, the method MUST fail.  When the <TT>MKCOL</TT>
   operation creates a new collection resource, all ancestors MUST
   already exist, or the method MUST fail with a 409 Conflict status
   code.  For example, if a request to create collection /a/b/c/d/ is
   made, and neither /a/b/ nor /a/b/c/ exists, the request MUST fail.

<P>When <TT>MKCOL</TT> is invoked without a request body, the newly created
   collection has no members.

<P>A <TT>MKCOL</TT> request message MAY contain a message body.  The behavior of
   a <TT>MKCOL</TT> request when the body is present is limited to creating
   collections, members of a collection, bodies of members and
   properties on the collections or members.  If the server receives a
   <TT>MKCOL</TT> request entity type it does not support or understand it MUST
   respond with a 415 Unsupported Media Type status code.  The exact
   behavior of <TT>MKCOL</TT> for various request media types is undefined in
   this document, and will be specified in separate documents.

<h4>7.3.2     Response Codes</h4>

<P>Responses from a <TT>MKCOL</TT> request are not cacheable, since <TT>MKCOL</TT> has
   non-idempotent semantics.

<LI>   201 Created - The collection or structured resource was created in
   its entirety.

<LI>   403 Forbidden - This indicates at least one of two conditions: 1)
   The server does not allow the creation of collections at the given
   location in its namespace, and 2) The parent collection of the
   Request-URI exists but cannot accept members.

<LI>   405 Method Not Allowed - <TT>MKCOL</TT> can only be executed on a
   deleted/non-existent resource.

<LI>   409 Conflict - A collection cannot be made at the Request-URI until
   one or more intermediate collections have been created.

<LI>   415 Unsupported Media Type- The server does not support the request
   type of the body.

<LI>   423 Insufficient Space on Resource - The resource does not have
   sufficient space to record the state of the resource after the
   execution of this method.

<h4>7.3.3     Example</h4>

<P>This example creates a collection called /webdisc/xfiles/ on the
   server www.server.org.

<P>&gt;&gt;Request

<PRE>
   MKCOL /webdisc/xfiles/ HTTP/1.1
   Host: www.server.org
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 201 Created
</PRE>


<h3>7.4 <TT>ADDREF</TT> Method</h3>

<P>The <TT>ADDREF</TT> method is used to add external members to a resource.
   All DAV compliant collection resources MUST support the <TT>ADDREF</TT>
   method.  All other DAV compliant resources MAY support the <TT>ADDREF</TT>
   method as appropriate.

<h4>7.4.1     The Request</h4>

<P>The <TT>ADDREF</TT> method adds the URI specified in the Collection-Member
   header as an external member to the collection specified by the
   Request-URI.

<P>It is not an error if the URI specified in the Collection-Member
   header already exists as an external member of the collection.
   However, after processing the <TT>ADDREF</TT> there MUST be only one instance
   of the URI in the collection.  If the URI specified in the
   <TT>Collection-Member</TT> header already exists as an internal member of the
   collection, the <TT>ADDREF</TT> method MUST fail with a 412 Precondition
   Failed status code.

<P>More than one <TT>Collection-Member</TT> request header MUST NOT be used with
   the <TT>ADDREF</TT> method.

<h4>7.4.2     Example</h4>

<P>&gt;&gt;Request

<PRE>
   ADDREF /~ejw/dav/ HTTP/1.1
   Host: www.ics.uci.edu
   Collection-Member: http://www.iana.org/standards/dav/
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 204 No Content
</PRE>


<P>This example adds the URI http://www.iana.org/standards/dav/ as an
   external member resource of the collection
   http://www.ics.uci.edu/~ejw/dav/.


<h3>7.5 <TT>DELREF</TT> Method</h3>

<P>The <TT>DELREF</TT> method is used to remove external members from a
   resource.  All DAV compliant collection resources MUST support the
   <TT>DELREF</TT> method.  All other DAV compliant resources MUST support the
   <TT>DELREF</TT> method only if they support the <TT>ADDREF</TT> method.

<h4>7.5.1     The Request</h4>

<P>The <TT>DELREF</TT> method removes the URI specified in the Collection-Member
   header from the collection specified by the Request-URI.

<P>DELREFing a URI which is not a member of the collection is not an
   error.  DELREFing an internal member MUST fail with a 412
   Precondition Failed status code.

<P>More than one <TT>Collection-Member</TT> request header MUST NOT be used with
   the <TT>DELREF</TT> method.

<h4>7.5.2     Example</h4>

<P>&gt;&gt;Request

<PRE>
   DELREF /~ejw/dav/ HTTP/1.1
   Host: www.ics.udi.edu
   Collection-Member: http://www.iana.org/standards/dav/
</PRE>


<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 204 No Content
</PRE>

<P>This example removes the URI http://www.iana.org/standards/dav/, an
   external member resource, from the collection
   http://www.ics.uci.edu/~ejw/dav/.


<h3>7.6 <TT>GET</TT>, <TT>HEAD</TT> for Collections</h3>

<P>The semantics of <TT>GET</TT> are unchanged when applied to a collection,
   since <TT>GET</TT> is defined as, "retrieve whatever information (in the form
   of an entity) is identified by the Request-URI" [Fielding et al.,
   1997].  <TT>GET</TT> when applied to a collection MAY return the contents of
   an "index.html" resource, a human-readable view of the contents of
   the collection, or something else altogether. Hence it is possible
   that the result of a <TT>GET</TT> on a collection will bear no correlation to
   the state of the collection.

<P>Similarly, since the definition of <TT>HEAD</TT> is a <TT>GET</TT> without a response
   message body, the semantics of <TT>HEAD</TT> are unmodified when applied to
   collection resources.

<h3>7.7 <TT>POST</TT> for Collections</h3>

<P>Since by definition the actual function performed by <TT>POST</TT> is
   determined by the server and often depends on the particular
   resource, the behavior of <TT>POST</TT> when applied to collections cannot be
   meaningfully modified because it is largely undefined.  Thus the
   semantics of <TT>POST</TT> are unmodified when applied to a collection.


<H3>7.8 <TT>DELETE</TT></H3>

<h4>7.8.1     <TT>DELETE</TT> for Non-Collection Resources</h4>

<P>If the <TT>DELETE</TT> method is issued to a non-collection resource which is
   an internal member of a collection, then during <TT>DELETE</TT> processing a
   server MUST remove the Request-URI from its parent collection.  A
   server MAY remove the URI of a deleted resource from any collections
   of which the resource is an external member.

<h4>7.8.2     <TT>DELETE</TT> for Collections</h4>

<P>The <TT>DELETE</TT> method on a collection MUST act as if a Depth = infinity
   header was used on it.  A client MUST NOT submit a <TT>Depth</TT> header on a
   <TT>DELETE</TT> on a collection with any value but infinity.

<P><TT>DELETE</TT> instructs that the collection specified in the request-URI,
   the records of its external member resources, and all its internal
   member resources, are to be deleted.

<P>If any member cannot be deleted then all of the member's ancestors
   MUST NOT be deleted, so as to maintain the namespace.

<P>Any headers included with <TT>DELETE</TT> MUST be applied in processing every
   resource to be deleted.

<P>When the <TT>DELETE</TT> method has completed processing it MUST return a
   consistent namespace.
   The response SHOULD be a Multi-Status response that describes the
   result of the <TT>DELETE</TT> on each affected resource.

<h4>7.8.2.1   Example</h4>

<P>&gt;&gt;Request

<PRE>
   DELETE  /container/ HTTP/1.1
   Host: www.foo.bar
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="d"?&gt;
   &lt;d:multistatus&gt;
     &lt;d:response&gt;
          &lt;d:href&gt;http://www.foo.bar/container/resource1&lt;/d:href&gt;
          &lt;d:href&gt;http://www.foo.bar/container/resource2&lt;/d:href&gt;
          &lt;d:status&gt;HTTP/1.1 200 OK&lt;/d:status&gt;
     &lt;/d:response&gt;
     &lt;d:response&gt;
          &lt;d:href&gt;http://www.foo.bar/container/&lt;/d:href&gt;
          &lt;d:status&gt;HTTP/1.1 424 Method Failure&lt;/d:status&gt;
     &lt;/d:response&gt;
     &lt;d:response&gt;
          &lt;d:href&gt;http://www.foo.bar/container/resource3&lt;/d:href&gt;
          &lt;d:status&gt;HTTP/1.1 425 Locked&lt;/d:status&gt;
     &lt;/d:response&gt;
   &lt;/d:multistatus&gt;
</PRE>
</PRE>

<P>In this example the attempt to delete
   http://www.foo.bar/container/resource3 failed because it is locked,
   and no lock token was submitted with the request. Consequently, the
   attempt to delete http://www.foo.bar/container/ also failed, but
   resource1 and resource2 were deleted. Even though a <TT>Depth</TT> header has
   not been included, a depth of infinity is assumed because the method
   is on a collection. As this example illustrates, <TT>DELETE</TT> processing
   need not be atomic.

<H3>7.9 <TT>PUT</TT></H3>

<h4>7.9.1     <TT>PUT</TT> for Non-Collection Resources</h4>

<P>A <TT>PUT</TT> performed on an existing resource replaces the <TT>GET</TT> response
   entity of the resource.  Properties defined on the resource MAY be
   recomputed during <TT>PUT</TT> processing but are not otherwise effected.
   For example, if a server recognizes the content type of the request
   body, it may be able to automatically extract information that could
   be profitably exposed as properties.

<P>A <TT>PUT</TT> that would result in the creation of a resource without an
   appropriately scoped parent collection MUST fail with a 409
   Conflict.

<h4>7.9.2     <TT>PUT</TT> for Collections</h4>

<P>As defined in the HTTP/1.1 specification [Fielding et al., 1997],
   the "<TT>PUT</TT> method requests that the enclosed entity be stored under
   the supplied Request-URI."  Since submission of an entity
   representing a collection would implicitly encode creation and
   deletion of resources, this specification intentionally does not
   define a transmission format for creating a collection using <TT>PUT</TT>.
   Instead, the <TT>MKCOL</TT> method is defined to create collections.  If a
   <TT>PUT</TT> is invoked on a collection resource it MUST fail.

<P>When the <TT>PUT</TT> operation creates a new non-collection resource all
   ancestors MUST already exist.  If all ancestors do not exist, the
   method MUST fail with a 409 Conflict status code.  For example, if
   resource /a/b/c/d.html is to be created and /a/b/c/ does not exist,
   then the request must fail.


<h3>7.10 <TT>COPY</TT> Method</h3>

<P>The <TT>COPY</TT> method creates a duplicate of the source resource, given by
   the Request-URI, in the destination resource, given by the
   <TT>Destination</TT> header.  The <TT>Destination</TT> header MUST be present.  The
   exact behavior of the <TT>COPY</TT> method depends on the type of the source
   resource.

<P>Support for the <TT>COPY</TT> method does not guarantee the ability to copy a
   resource. For example, separate programs may control resources on
   the same server.  As a result, it may not even be possible to copy a
   resource to a location that appears to be on the same server.

<h4>7.10.1    <TT>COPY</TT> for HTTP/1.1 resources</h4>

<P>When the source resource is not a collection the body of the
   destination resource MUST be octet-for-octet identical to the body
   of the source resource.  Subsequent alterations to the destination
   resource will not modify the source resource.  Subsequent
   alterations to the source resource will not modify the destination
   resource.  Thus, all copies are performed "by-value".

<P>All properties on the source resource MUST be duplicated on the
   destination resource, subject to modifying headers and XML elements,
   following the definition for copying properties.

<h4>7.10.2    <TT>COPY</TT> for Properties</h4>

<P>The following section defines how properties on a resource are
   handled during a <TT>COPY</TT> operation.

<P>Live properties SHOULD be duplicated as identically behaving live
   properties at the destination resource.  If a property cannot be
   copied live, then its value MUST be duplicated, octet-for-octet, in
   an identically named, dead property on the destination resource.

<P>The propertybehavior XML element can specify that properties are
   copied on best effort, that all live properties MUST be successfully
   copied or the method MUST fail, or that a specified list of live
   properties MUST be successfully copied or the method must fail. The
   propertybehavior XML element is defined in Section 11.12.

<P>If a property on the source already exists on the destination
   resource and the <TT>Overwrite</TT> header is set to "T" then the property at
   the destination MUST be overwritten with the property from the
   source.  If the <TT>Overwrite</TT> header is "F" and the previous situation
   exists, then the <TT>COPY</TT> MUST fail with a 412 Precondition Failed.

<h4>7.10.3    <TT>COPY</TT> for Collections</h4>

<P>The <TT>COPY</TT> method on a collection without a <TT>Depth</TT> header MUST act as
   if a <TT>Depth</TT> header with value "infinity" was included.  A client MAY
   submit a <TT>Depth</TT> header on a <TT>COPY</TT> on a collection with a value of "0"
   or "infinity".  DAV compliant servers MUST support the "0" and
   "infinity" behaviors.

<P>A <TT>COPY</TT> of depth infinity instructs that the collection specified in
   the Request-URI and the records of its external member resources is
   to be copied to the location specified in the <TT>Destination</TT> header,
   and all its internal member resources are to be copied to a
   location relative to it, recursively through all levels of the
   collection hierarchy.

<P>A <TT>COPY</TT> of depth "0" only instructs that the collection, the
   properties, and the records of its external members, not its
   internal members, are to be copied.

<P>Any headers included with a <TT>COPY</TT> are to be applied in processing
   every resource to be copied.

<P>The exception to this rule is the <TT>Destination</TT> header. This header
   only specifies the destination for the Request-URI. When applied to
   members of the collection specified in the request-URI the value of
   Destination is to be modified to reflect the current location in the
   hierarchy.  So, if the request-URI is "a" and the destination is "b"
   then when a/c/d is processed it MUST use a destination of b/c/d.

<P>When the <TT>COPY</TT> method has completed processing it MUST have created a
   consistent namespace at the destination.  However, if an error
   occurs while copying an internal member collection, all members of
   this collection MUST NOT be copied. In this case, after detecting
   the error, the <TT>COPY</TT> operation SHOULD try to finish as much of the
   original copy operation as possible.  So, for example, if an
   infinite depth copy operation is performed on collection /a/, which
   contains collections /a/b/ and /a/c/, and an error occurs copying
   /a/b/, an attempt should still be made to copy /a/c/. Similarly,
   after encountering an error copying a non-collection resource as
   part of an infinite depth copy, the server SHOULD try to finish as
   much of the original copy operation as possible.

<P>The response is a Multi-Status status code with an entity body that
   describes the result of the <TT>COPY</TT> on each affected resource.  The
   <TT>href</TT> XML element in the response refers to the resource that was to
   be copied, not the resource that was created as a result of the
   copy.  In other words, each entry indicates whether the copy on the
   resource specified in the <TT>href</TT> XML element succeeded or failed and
   why.

<P>The exception to this rule is for errors that occurred on the
   destination.  For example, if the destination was locked the
   response would indicate the destination URL and a 425 Locked error.

<h4>7.10.4    Type Interactions</h4>

<P>If the destination resource identifies a collection and the
   <TT>Overwrite</TT> header is "T", prior to performing the copy the server
   MUST perform a <TT>DELETE</TT> operation on the collection.

<h4>7.10.5    Status Codes</h4>

<LI>   201 Created - The source resource was successfully copied.  The copy
   operation resulted in the creation of a new resource.

<LI>   204 No Content - The source resource was successfully copied to a
   pre-existing destination resource.  Since there is no entity body in
   the response, 204 No Content is used instead of 200 OK.

<LI>   412 Precondition Failed - This status code MUST be returned if the
   server was unable to maintain the liveness of the properties listed
   in the propertybehavior XML element, or if the <TT>Overwrite</TT> header is
   "F", and the state of the destination resource is non-null.

<LI>   423 Insufficient Space on Resource - The destination resource does
   not have sufficient space to record the state of the resource after
   the execution of this method.

<LI>   425 Locked - The destination resource was locked and either a valid
   <TT>Lock-Token</TT> header was not submitted, or the <TT>Lock-Token</TT> header
   identifies a lock held by another principal.

<LI>   502 Bad Gateway - This may occur when the destination is on another
   server and the destination server refuses to accept the resource.

<h4>7.10.6    Overwrite Example</h4>

<P>This example shows resource
   http://www.ics.uci.edu/~fielding/index.html being copied to the
   location http://www.ics.uci.edu/users/f/fielding/index.html.  The
   204 No Content status code indicates the existing resource at the
   destination was overwritten.

<P>&gt;&gt;Request

<PRE>
   COPY /~fielding/index.html HTTP/1.1
   Host: www.ics.uci.edu
   Destination: http://www.ics.uci.edu/users/f/fielding/index.html
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 204 No Content
</PRE>

<h4>7.10.7    No Overwrite Example</h4>

<P>The following example shows the same copy operation being performed,
   except with the <TT>Overwrite</TT> header set to "F."  A response of 412
   Precondition Failed is returned because the destination resource has
   a non-null state.

<P>&gt;&gt;Request

<PRE>
   COPY /~fielding/index.html HTTP/1.1
   Host: www.ics.uci.edu
   Destination: http://www.ics.uci.edu/users/f/fielding/index.html
   Overwrite: F
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 412 Precondition Failed
</PRE>

<h4>7.10.8    Collection Example</h4>

<P>&gt;&gt;Request

<PRE>
   COPY /container/ HTTP/1.1
   Host: www.foo.bar
   Destination: http://www.foo.bar/othercontainer/
   Depth: infinity
   Content-Type: text/xml
   Content-Length: xxxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="d"?&gt;
   &lt;d:propertybehavior&gt;
     &lt;d:keepalive&gt;*&lt;/d:keepalive&gt;
   &lt;/d:propertybehavior&gt;
</PRE>
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="d"?&gt;
   &lt;d:multistatus&gt;
     &lt;d:response&gt;
       &lt;d:href&gt;http://www.foo.bar/othercontainer/resource1&lt;/d:href&gt;
       &lt;d:href&gt;http://www.foo.bar/othercontainer/resource2&lt;/d:href&gt;
       &lt;d:href&gt;http://www.foo.bar/othercontainer/&lt;/d:href&gt;
     &lt;d:status&gt;HTTP/1.1 201 Created&lt;/d:status&gt;
     &lt;/d:response&gt;
</PRE>

<P>  &lt;d:response&gt;
       &lt;d:href&gt;http://www.foo.bar/othercontainer/R2/&lt;/d:href&gt;
       &lt;d:href&gt;http://www.foo.bar/othercontainer/R2/D2&lt;/d:href&gt;
       &lt;d:status&gt;HTTP/1.1 412 Precondition Failed&lt;/d:status&gt;
     &lt;/d:response&gt;
<PRE>   &lt;/d:multistatus&gt;
</PRE>
</PRE>

<P>The <TT>Depth</TT> header is unnecessary as the default behavior of <TT>COPY</TT> on a
   collection is to act as if a "Depth: infinity" header had been
   submitted.  In this example most of the resources, along with the
   collection, were copied successfully. However the collection R2
   failed, most likely due to a problem with maintaining the liveness
   of properties (this is specified by the propertybehavior XML
   element). Since an error occurred copying R2, R2's member D2 was not
   copied.


<h3>7.11 <TT>MOVE</TT> Method</h3>

<P>The <TT>MOVE</TT> operation on a non-collection resource is the logical
   equivalent of a copy (<TT>COPY</TT>) followed by a delete, where the actions
   are performed atomically.  All DAV compliant resources MUST support
   the <TT>MOVE</TT> method.

<P>However, support for the <TT>MOVE</TT> method does not guarantee the ability
   to move a resource to a particular destination. For example,
   separate programs may actually control different sets of resources
   on the same server.  Therefore, it may not even be possible to move
   a resource within a namespace that appears to belong to the same
   server.

<P>If a resource exists at the destination, the destination resource
   will be DELETEd as a side effect of the <TT>MOVE</TT> operation, subject to
   the restrictions of the <TT>Overwrite</TT> header.

<h4>7.11.1    <TT>MOVE</TT> for Collections</h4>

<P>A <TT>MOVE</TT> of depth infinity instructs that the collection specified in
   the Request-URI, including the records of its external member
   resources, is to be moved to the location specified in the
   <TT>Destination</TT> header, and all its internal member resources are to be
   moved to locations relative to it, recursively through all levels of
   the collection hierarchy.

<P>The <TT>MOVE</TT> method on a collection MUST act as if a Depth "infinity"
   header was used on it.  A client MUST NOT submit a <TT>Depth</TT> header on a
   <TT>MOVE</TT> on a collection with any value but "infinity".

<P>Any headers included with <TT>MOVE</TT> are to be applied in processing every
   resource to be moved.

<P>The exception to this rule is the <TT>Destination</TT> header.  The behavior
   of this header is the same as given for <TT>COPY</TT> on collections.

<P>When the <TT>MOVE</TT> method has completed processing it MUST have created a
   consistent namespace on both the source and destination. However, if
   an error occurs while moving an internal member collection, all
   members of the failed collection MUST NOT be moved. In this case,
   after detecting the error, the move operation SHOULD try to finish
   as much of the original move as possible.  So, for example, if an
   infinite depth move is performed on collection /a/, which contains
   collections /a/b/ and /a/c/, and an error occurs moving /a/b/, an
   attempt should still be made to try moving /a/c/. Similarly, after
   encountering an error moving a non-collection resource as part of an
   infinite depth move, the server SHOULD try to finish as much of the
   original move operation as possible.

<P>As specified in the definition of <TT>MOVE</TT>, a <TT>MOVE</TT> of a collection over
   another collection causes the destination collection and all its
   members to be deleted.

<P>The response is a Multi-Status response that describes the result of
   the <TT>MOVE</TT> on each affected resource.  The <TT>href</TT> XML element in the
   response refers to the resource that was to be moved, not the
   resource that was created as a result of the move.  In other words,
   each entry indicates whether the move on the resource specified in
   the <TT>href</TT> succeeded or failed and why.

<P>The exception to this rule is for errors that occurred on the
   destination.  For example, if the destination was locked the
   response would indicate the destination URL and a 425 Locked error.

<h4>7.11.2    Status Codes</h4>

<LI>   201 Created - The source resource was successfully moved, and a new
   resource was created at the destination.

<LI>   204 No Content - The move operation was successful, and the resource
   at the destination was overwritten.

<LI>   412 Precondition Failed - This status code MUST be returned if the
   server was unable to maintain the liveness of the properties listed
   in the propertybehavior XML element, or if the <TT>Overwrite</TT> header is
   "F", and the state of the destination resource is non-null.

<LI>   425 Locked - The source or the destination resource was locked and
   either a valid <TT>Lock-Token</TT> header was not submitted, or the <TT>Lock-Token</TT> header identifies a lock held by another principal.

<LI>   502 Bad Gateway - This may occur when the destination is on another
   server and the destination server refuses to accept the resource.

<h4>7.11.3    Non-Collection Example</h4>

<P>This example shows resource
   http://www.ics.uci.edu/~fielding/index.html being moved to the
   location http://www.ics.uci.edu/users/f/fielding/index.html. The
   contents of the destination resource would have been overwritten if
   the destination resource had been non-null.  In this case, since
   there was nothing at the destination resource, the response code is
   201 Created.


<P>&gt;&gt;Request

<PRE>
   MOVE /~fielding/index.html HTTP/1.1
   Host: www.ics.uci.edu
   Destination: http://www.ics.uci.edu/users/f/fielding/index.html
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 201 Created
   Location: http://www.ics.uci.edu/users/f/fielding/index.html
</PRE>


<h4>7.11.4    Collection Example</h4>

<P>&gt;&gt;Request

<PRE>
   MOVE /container/ HTTP/1.1
   Host: www.foo.bar
   Destination: http://www.foo.bar/othercontainer/
   Overwrite: F
   Lock-Token: &lt;opaquelocktoken:fe184f2e-6eec-41d0-c765-01adc56e6bb4&gt;,
      &lt;opaquelocktoken:e454f3f3-acdc-452a-56c7-00a5c91e4b77&gt;
   Content-Type: text/xml
   Content-Length: xyz
   Authorization: Digest username="rohit",
      realm="rohit@www.foo.bar", nonce="...",
      uri="/container/", response="...",
      opaque="..."

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="d"?&gt;
   &lt;d:propertybehavior&gt;
     &lt;d:keepalive&gt;*&lt;/d:keepalive&gt;
   &lt;/d:propertybehavior&gt;
</PRE>
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: zzz

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="d"?&gt;
   &lt;d:multistatus&gt;
     &lt;d:response&gt;
       &lt;d:href&gt;http://www.foo.bar/container/resource1&lt;/d:href&gt;
       &lt;d:href&gt;http://www.foo.bar/container/resource2&lt;/d:href&gt;
       &lt;d:href&gt;http://www.foo.bar/container/&lt;/d:href&gt;
       &lt;d:status&gt;HTTP/1.1 204 No Content&lt;/d:status&gt;
     &lt;/d:response&gt;
     &lt;d:response&gt;
       &lt;d:href&gt;http://www.foo.bar/container/C2/R2&lt;/d:href&gt;
       &lt;d:status&gt;HTTP/1.1 424 Method Failure&lt;/d:status&gt;
     &lt;d:response&gt;
       &lt;d:href&gt;http://www.foo.bar/othercontainer/C2/&lt;/d:href&gt;
       &lt;d:status&gt;HTTP/1.1 425 Locked&lt;/d:status&gt;
     &lt;/d:response&gt;
   &lt;/d:multistatus&gt;
</PRE>
</PRE>

<P>In this example the client has submitted a number of lock tokens
   with the request.  A lock token will need to be submitted for every
   resource, both source and destination, anywhere in the scope of the
   method, that is locked.  In this case the proper lock token was not
   submitted for the destination http://www.foo.bar/othercontainer/C2/.
   This means that the resource /container/C2/ could not be moved.  As
   the attempt to move /container/C2/ failed then the resource
   /container/C2/R2 MUST also fail since it is a child of
   /container/C2/.


<h3>7.12 <TT>LOCK</TT> Method</h3>

<P>The following sections describe the <TT>LOCK</TT> method, which is used to
   take out a lock of any access type.  These sections on the <TT>LOCK</TT>
   method describe only those semantics that are specific to the <TT>LOCK</TT>
   method and are independent of the access type of the lock being
   requested.

<h4>7.12.1    Operation</h4>

<P>A <TT>LOCK</TT> method invocation creates the lock specified by the lockinfo
   XML element on the Request-URI.  Lock method requests SHOULD have a
   XML request body which contains an owner XML element for this lock
   request, unless this is a refresh request. The <TT>LOCK</TT> request MAY have
   a <TT>Timeout</TT> header.

<P>A successful response to a lock invocation MUST include Lock-Token
   and <TT>Timeout</TT> headers.  Clients MUST assume that locks may arbitrarily
   disappear at any time, regardless of the value given in the Timeout
   header.  The <TT>Timeout</TT> header only indicates the behavior of the
   server if "extraordinary" circumstances do not occur.  For example,
   an administrator may remove a lock at any time or the system may
   crash in such a way that it loses the record of the lock's
   existence. The response MUST also contain the value of the
   lockdiscovery property in a prop XML element.

<h4>7.12.2    The Effect of Locks on Properties and Collections</h4>

<P>The scope of a lock is the entire state of the resource, including
   its body and associated properties.  As a result, a lock on a
   resource also locks the resource's properties.

<P>For collections, a lock also affects the ability to add or remove
   members.  The nature of the effect depends upon the type of access
   control involved.

<h4>7.12.3    Locking Replicated Resources</h4>

<P>Some servers automatically replicate resources across multiple URLs.
   In such a circumstance the server MAY only accept a lock on one of
   the URLs if the server can guarantee that the lock will be honored
   across all the URLs.

<h4>7.12.4    Depth and Locking</h4>

<P>The <TT>Depth</TT> header MAY be used with the <TT>LOCK</TT> method.  Values other
   than 0 or infinity MUST NOT be used with the <TT>Depth</TT> header.

<P>A <TT>Depth</TT> header of value 0 means to just lock the resource specified
   by the request-URI.

<P>If the <TT>Depth</TT> header is set to infinity then the resource specified
   in the request-URI along with all its internal members, all the way
   down the hierarchy, are to be locked.  A successful result will
   return a single lock token which represents all the resources that
   have been locked.  If an <TT>UNLOCK</TT> is executed on this token, all
   associated resources are unlocked.  If the lock cannot be granted to
   all resources, a 409 Conflict status code MUST be returned with a
   response entity body containing a <TT>multistatus</TT> XML element describing
   which resource(s) prevented the lock from being granted.  Hence,
   partial success is not an option.  Either the entire hierarchy is
   locked or no resources are locked.

<h4>7.12.5    Interaction with other Methods</h4>

<P>The interaction of a <TT>LOCK</TT> with various methods is dependent upon the
   lock type.  However, independent of lock type, a successful <TT>DELETE</TT>
   of a resource MUST cause all of its locks to be removed.

<h4>7.12.6    Lock Compatibility Table</h4>

<P>The table below describes the behavior that occurs when a lock
   request is made on a resource.


<TABLE>
<TR><TH>   Current lock state/<BR>Lock request
<TH>      Shared Lock
<TH>       Exclusive Lock</TR>

<TR><TD>   None<TD>                     True<TD>              True</TR>

<TR><TD>   Shared Lock<TD>              True<TD>              False</TR>

<TR><TD>  Exclusive Lock<TD>           False<TD>             False*</TR>
</TABLE>


<P>Legend: True = lock MAY be granted.  False = lock MUST NOT be
   granted.  *=if the principal requesting the lock is the owner of the
   lock, the lock MUST be regranted.

<P>The current lock state of a resource is given in the leftmost
   column, and lock requests are listed in the first row.  The
   intersection of a row and column gives the result of a lock request.
   For example, if a shared lock is held on a resource, and an
   exclusive lock is requested, the table entry is "false", indicating
   the lock must not be granted.

<P>If an exclusive or shared lock is re-requested by the principal who
   owns the lock, the lock MUST be regranted.  If the lock is
   regranted, the same lock token that was previously issued MUST be
   returned.

<h4>7.12.7    Lock Response</h4>

<P>A successful lock response MUST contain a Lock-Token response
   header, a <TT>Timeout</TT> header and a prop XML element in the response body
   which contains the value of the lockdiscovery property.

<h4>7.12.8    Status Codes</h4>

<LI>   412 Precondition Failed - The included Lock-Token was not
   enforceable on this resource or the server could not satisfy the
   request in the lockinfo XML element.

<LI>   425 Locked - The resource is locked, so the method has been
   rejected.

<h4>7.12.9    Example - Simple Lock Request</h4>

<P>&gt;&gt;Request

<PRE>
   LOCK /workspace/webdav/proposal.doc HTTP/1.1
   Host: webdav.sb.aol.com
   Timeout: Infinite, Second-4100000000
   Content-Type: text/xml
   Content-Length: xyz
   Authorization: Digest username="ejw",
      realm="ejw@webdav.sb.aol.com", nonce="...",
      uri="/workspace/webdav/proposal.doc",
      response="...", opaque="..."

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:lockinfo&gt;
     &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;
     &lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;
     &lt;D:owner&gt;
       &lt;D:href&gt;http://www.ics.uci.edu/~ejw/contact.html&lt;/D:href&gt;
     &lt;/D:owner&gt;
   &lt;/D:lockinfo&gt;
</PRE>
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 200 OK
   Lock-Token: &lt;opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4&gt;
   Timeout: Second-604800
   Content-Type: text/xml
   Content-Length: xxxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href ="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:prop&gt;
     &lt;D:lockdiscovery&gt;
       &lt;D:activelock&gt;
         &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;
         &lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;
         &lt;D:owner&gt;
           &lt;D:href&gt;http://www.ics.uci.edu/~ejw/contact.html&lt;/D:href&gt;
         &lt;/D:owner&gt;
         &lt;D:timeout&gt;Second-604800&lt;/D:timeout&gt;
         &lt;D:locktoken&gt;
           &lt;D:href&gt;
     opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4
           &lt;/D:href&gt;
         &lt;/D:locktoken&gt;
       &lt;/D:activelock&gt;
     &lt;/D:lockdiscovery&gt;
   &lt;/D:prop&gt;
</PRE>
</PRE>

<P>This example shows the successful creation of an exclusive write
   lock on resource
   http://webdav.sb.aol.com/workspace/webdav/proposal.doc.  The
   resource http://www.ics.uci.edu/~ejw/contact.html contains contact
   information for the owner of the lock.  The server has an activity-based timeout policy in place on this resource, which causes the
   lock to automatically be removed after 1 week (604800 seconds).  The
   response has a <TT>Lock-Token</TT> header that gives the lock token URL that
   uniquely identifies the lock created by this lock request.  Note
   that the nonce, response, and opaque fields have not been calculated
   in the <TT>Authorization</TT> request header.

<h4>7.12.10   Example - Refreshing a Write Lock</h4>

<P>&gt;&gt;Request

<PRE>
   LOCK /workspace/webdav/proposal.doc HTTP/1.1
   Host: webdav.sb.aol.com
   Timeout: Infinite, Second-4100000000
   Lock-Token: &lt;opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4&gt;
   Authorization: Digest username="ejw",
      realm="ejw@webdav.sb.aol.com", nonce="...",
      uri="/workspace/webdav/proposal.doc",
      response="...", opaque="..."
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 200 OK
   Lock-Token: &lt;opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4&gt;
   Timeout: Second-604800
   Content-Type: text/xml
   Content-Length: xxxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href ="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:prop&gt;
     &lt;D:lockdiscovery&gt;
       &lt;D:activelock&gt;
         &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;
         &lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;
         &lt;D:owner&gt;
           &lt;D:href&gt;http://www.ics.uci.edu/~ejw/contact.html&lt;/D:href&gt;
         &lt;/D:owner&gt;
         &lt;D:timeout&gt;Second-604800&lt;/D:timeout&gt;
         &lt;D:locktoken&gt;
           &lt;D:href&gt;
     opaquelocktoken:e71d4fae-5dec-22d6-fea5-00a0c91e6be4
           &lt;/D:href&gt;
         &lt;/D:locktoken&gt;
       &lt;/D:activelock&gt;
     &lt;/D:lockdiscovery&gt;
   &lt;/D:prop&gt;
</PRE>
</PRE>

<P>This request would refresh the lock, resetting any time outs.
   Notice that the client asked for an infinite time out but the server
   choose to ignore the request. In this example, the nonce, response,
   and opaque fields have not been calculated in the Authorization
   request header.

<h4>7.12.11   Example - Multi-Resource Lock Request</h4>

<P>&gt;&gt;Request

<PRE>
   LOCK /webdav/ HTTP/1.1
   Host: webdav.sb.aol.com
   Timeout: Infinite, Second-4100000000
   Depth: infinity
   Authorization: Digest username="ejw",
      realm="ejw@webdav.sb.aol.com", nonce="...",
      uri="/workspace/webdav/proposal.doc",
      response="...", opaque="..."

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:lockinfo&gt;
     &lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;
     &lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;
     &lt;D:owner&gt;
       &lt;D:href&gt;http://www.ics.uci.edu/~ejw/contact.html&lt;/D:href&gt;
     &lt;/D:owner&gt;
   &lt;/D:lockinfo&gt;
</PRE>
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 207 Multistatus
   Content-Type: text/xml
   Content-Length: xxxxx

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:multistatus&gt;
     &lt;D:response&gt;
          &lt;D:href&gt;http://webdav.sb.aol.com/webdav/proposal.doc&lt;/D:href&gt;
          &lt;D:href&gt;http://webdav.sb.aol.com/webdav/&lt;/D:href&gt;
          &lt;D:status&gt;HTTP/1.1 424 Method Failure&lt;/D:status&gt;
     &lt;/D:response&gt;
     &lt;D:response&gt;
          &lt;D:href&gt;http://webdav.sb.aol.com/webdav/secret&lt;/D:href&gt;
          &lt;D:status&gt;HTTP/1.1 403 Forbidden&lt;/D:status&gt;
     &lt;/D:response&gt;
   &lt;/D:multistatus&gt;
</PRE>
</PRE>

<P>This example shows a request for an exclusive write lock on a
   collection and all its children.  In this request, the client has
   specified that it desires an infinite length lock, if available,
   otherwise a timeout of 4.1 billion seconds, if available. The
   request entity body contains the contact information for the
   principal taking out the lock, in this case a web page URL.

<P>The 424 Method Failure indicates that a lock was not taken out on
   these resources due to an error elsewhere.  Note that this does not
   mean that a lock would have succeeded on these resources had the
   other error not occurred.  It only means that another error has
   occurred and so the entire method has been aborted.  The error is a
   403 Forbidden response on the resource
   http://webdav.sb.aol.com/webdav/secret.  Because this resource could
   not be locked, none of the resources were locked.

<P>In this example, the nonce, response, and opaque fields have not
   been calculated in the <TT>Authorization</TT> request header.


<h3>7.13 <TT>UNLOCK</TT> Method</h3>

<P>The <TT>UNLOCK</TT> method removes the lock identified by the lock token in
   the <TT>Lock-Token</TT> header from the Request-URI, and all other resources
   included in the lock.

<P>Any DAV compliant resource which supports the <TT>LOCK</TT> method MUST
   support the <TT>UNLOCK</TT> method.

<h4>7.13.1    Example</h4>

<P>&gt;&gt;Request

<PRE>
   UNLOCK /workspace/webdav/info.doc HTTP/1.1
   Host: webdav.sb.aol.com
   Lock-Token:&lt;opaquelocktoken:a515cfa4-5da4-22e1-f5b5-00a0451e6bf7&gt;
   Authorization: Digest username="ejw",
      realm="ejw@webdav.sb.aol.com", nonce="...",
      uri="/workspace/webdav/proposal.doc",
      response="...", opaque="..."
</PRE>

<P>&gt;&gt;Response

<PRE>
   HTTP/1.1 204 No Content
</PRE>

<P>In this example, the lock identified by the lock token
   "opaquelocktoken:a515cfa4-5da4-22e1-f5b5-00a0451e6bf7" is
   successfully removed from the resource
   http://webdav.sb.aol.com/workspace/webdav/info.doc.  If this lock
   included more than just one resource, the lock is removed from all
   resources included in the lock.  The 204 status code is used instead
   of 200 OK because there is no response entity body.


<P>In this example, the nonce, response, and opaque fields have not
   been calculated in the <TT>Authorization</TT> request header.

<h2>8  HTTP Headers for Distributed Authoring</h2>

<h3>8.1 Collection-Member Header</h3>

<PRE>   CollectionMember = "Collection-Member" ":" absoluteURI   ;
   absoluteURI is defined in section 3.2.1 of [Fielding et al., 1997]
</PRE>

<P>The <TT>Collection-Member</TT> header specifies the URI of an external
   resource to be added/deleted to/from a collection.

<h3>8.2 DAV Header</h3>

<PRE>   DAV = "DAV" ":" ["1"] [",2"] ["," 1#extend]
</PRE>

<P>This header indicates that the resource supports the DAV schema and
   protocol as specified. All DAV compliant resources MUST return the
   <TT>DAV</TT> header on all <TT>OPTIONS</TT> responses.

<P>The value is a list of all compliance classes that the resource
   supports. Note that above a comma has already been added to the 2.
   This is because a resource can not be level 2 compliant unless it is
   also level 1 compliant. Please refer to Section 13 for more details.
   In general, however, support for one compliance class does not
   entail support for any other.

<h3>8.3 Depth Header</h3>

<PRE>   Depth = "Depth" ":" ("0" | "1" | "infinity")
</PRE>

<P>The <TT>Depth</TT> header is used with methods executed on resources which
   could potentially have internal members to indicate whether the
   method is to be applied only to the resource (Depth = 0), to the
   resource and its immediate children, (Depth = 1), or the resource
   and all its progeny (Depth = infinity).

<P>The <TT>Depth</TT> header is only supported if a method's definition
   explicitly provides for such support.

<P>The following rules are the default behavior for any method that
   supports the <TT>Depth</TT> header. A method MAY override these defaults by
   defining different behavior in its definition.

<P>Methods which support the <TT>Depth</TT> header MAY choose not to support all
   of the header's values and MAY define, on a case by case basis, the
   behavior of the method if a <TT>Depth</TT> header is not present. For
   example, the <TT>MOVE</TT> method only supports Depth = infinity and if a
   <TT>Depth</TT> header is not present will act as if a Depth = infinity header
   had been applied.


<P>Clients MUST NOT rely upon methods executing on members of their
   hierarchies in any particular order or on the execution being
   atomic. Note that methods MAY provide guarantees on ordering and
   atomicity.

<P>Upon execution, a method with a <TT>Depth</TT> header will perform as much of
   its assigned task as possible and then return a response specifying
   what it was able to accomplish and what it failed to do.

<P>So, for example, an attempt to <TT>COPY</TT> a hierarchy may result in some
   of the members being copied and some not.

<P>Any headers on a method with a <TT>Depth</TT> header MUST be applied to all
   resources in the scope of the method. For example, an If-Match
   header will have its value applied against every resource in the
   method's scope and will cause the method to fail if the header fails
   to match.

<P>If a resource, source or destination, within the scope of the method
   is locked in such a way as to prevent the successful execution of
   the method, then the lock token for that resource MUST be submitted
   with the request in the <TT>Lock-Token</TT> request header.

<P>The <TT>Depth</TT> header only specifies the behavior of the method with
   regards to internal children.  If a resource does not have internal
   children then the <TT>Depth</TT> header is ignored.

<P>Please note, however, that it is always an error to submit a value
   for the <TT>Depth</TT> header that is not allowed by the method's definition.
   Thus submitting a "Depth: 1" on a <TT>COPY</TT>, even if the resource does
   not have internal members, MUST result in a 400 Bad Request. The
   method should fail not because the resource doesn't have internal
   members, but because of the illegal value in the header.

<h3>8.4 Destination Header</h3>

<PRE>   Destination = "Destination" ":" URI
</PRE>

<P>The <TT>Destination</TT> header specifies a destination resource for methods
   such as <TT>COPY</TT> and <TT>MOVE</TT>, which take two URIs as parameters.

<h3>8.5 If-None-State-Match</h3>

<PRE>   If-None-State-Match = "If-None-State-Match" ":" 1#Coded-URL
   Coded-URL = "&lt;" URI "&gt;"
</PRE>


<P>The <TT>If-None-State-Match</TT> header is intended to have similar
   functionality to the <TT>If-None-Match</TT> header defined in section 14.26
   of [Fielding et al., 1997].  However the <TT>If-None-State-Match</TT> header
   is intended for use with any URI which represents state information
   about a resource, referred to as a state token.  A typical example
   is a lock token.

<P>If any of the state tokens identifies the current state of the
   resource, the server MUST NOT perform the requested method.
   Instead, if the request method was <TT>GET</TT>, <TT>HEAD</TT>, or <TT>PROPFIND</TT>, the
   server SHOULD respond with a 304 Not Modified response, including
   the cache-related entity-header fields (particularly ETag) of the
   current state of the resource.  For all other request methods, the
   server MUST respond with a status of 412 Precondition Failed.

<P>If none of the state tokens identifies the current state of the
   resource, the server MAY perform the requested method.

<P>If any of the tokens is not recognized, the method MUST fail with a
   412 Precondition Failed.

<P>Note that the "AND" and "OR" keywords specified with the <TT>If-State-Match</TT> header are intentionally not defined for If-None-State-Match,
   because this functionality is not required.

<h3>8.6 If-State-Match</h3>

<PRE>   If-State-Match = "If-State-Match" ":" ("AND" | "OR") 1#Coded-URL
</PRE>

<P>The <TT>If-State-Match</TT> header is intended to have similar functionality
   to the <TT>If-Match</TT> header defined in section 14.25 of [Fielding et al.,
   1997].  However the <TT>If-State-Match</TT> header is intended for use with
   any URI which represents state information about a resource.  A
   typical example is a lock token.

<P>If the AND keyword is used and all of the state tokens identify the
   state of the resource, then the server MAY perform the requested
   method.  If the OR keyword is used and any of the state tokens
   identifies the current state of the resource, then the server MAY
   perform the requested method.  If the keyword requirement for the
   keyword used is not met, the server MUST NOT perform the requested
   method, and MUST return a 412 Precondition Failed response.

<P>If any of the tokens is not recognized, the method MUST fail with a
   412 Precondition Failed.

<h3>8.7 Lock-Token Request Header</h3>

<PRE>   Lock-Token = "Lock-Token" ":" 1#Coded-URL
</PRE>

<P>The <TT>Lock-Token</TT> request header, containing a lock token owned by the
   requesting principal, is used by the principal to indicate that the
   principal is aware of the existence of the lock specified by the
   lock token.

<P>If the following conditions are met:

<P>1) The method is restricted by a lock type that requires the
   submission of a lock token, such as a write lock,
   2) The user-agent has authenticated itself as a given principal,
   3) The user-agent is submitting a method request to a resource on
   which the principal owns a write lock,

<P>Then:

<P>1) The method request MUST include a <TT>Lock-Token</TT> header with the lock
      token, or,
   2) The method MUST fail with a 409 Conflict status code.

<P>If multiple resources are involved with a method, such as the <TT>MOVE</TT>
   method, then the lock tokens, if any, for all affected resources,
   MUST be included in the <TT>Lock-Token</TT> request header.

<P>For example, Program A, used by user A, takes out a write lock on a
   resource.  Program A then makes a number of <TT>PUT</TT> requests on the
   locked resource.  All the requests contain a Lock-Token request
   header that includes the write lock token.  Program B, also run by
   User A, then proceeds to perform a <TT>PUT</TT> to the locked resource.
   However, program B was not aware of the existence of the lock and so
   does not include the appropriate <TT>Lock-Token</TT> request header.  The
   method is rejected even though principal A is authorized to perform
   the <TT>PUT</TT>.  Program B can, if it so chooses, now perform lock
   discovery and obtain the lock token.  Note that programs A and B can
   perform GETs without using the <TT>Lock-Token</TT> header because the ability
   to perform a <TT>GET</TT> is not affected by a write lock.

<P>Having a lock token provides no special access rights.  Anyone can
   find out anyone else's lock token by performing lock discovery.
   Locks are to be enforced based upon whatever authentication
   mechanism is used by the server, not based on the secrecy of the
   token values.

<h3>8.8 Lock-Token Response Header</h3>

<PRE>   Lock-Token = "Lock-Token" ":" 1#Coded-URL
</PRE>

<P>If a resource is successfully locked then a <TT>Lock-Token</TT> header will
   be returned containing the lock token that represents the lock.
   If multiple lock-tokens are returned then they MUST all refer to the
   same lock.  As the lock tokens all refer to the same lock a client
   need only record one of them.

<h3>8.9 Overwrite Header</h3>

<PRE>   Overwrite = "Overwrite" ":" ("T" | "F")
</PRE>

<P>The <TT>Overwrite</TT> header specifies whether the server should overwrite
   the state of a non-null destination resource during a <TT>COPY</TT> or <TT>MOVE</TT>.
   A value of "F" states that the server MUST NOT perform the <TT>COPY</TT> or
   <TT>MOVE</TT> operation if the state of the destination resource is non-null.
   By default, the value of Overwrite is "T" and a client MAY omit this
   header from a request when its value is "T". While the Overwrite
   header appears to duplicate the functionality of the If-Match: *
   header of HTTP/1.1, If-Match applies only to the Request-URI, and
   not to the Destination of a <TT>COPY</TT> or <TT>MOVE</TT>.

<P>If a <TT>COPY</TT> or <TT>MOVE</TT> is not performed due to the value of the Overwrite
   header, the method MUST fail with a 409 Conflict status code.

<h3>8.10 Status-URI Response Header</h3>

<P>The <TT>Status-URI</TT> response header MAY be used with the 102 Processing
   status code to inform the client as to the status of a method.

<PRE>   Status-URI = "Status-URI" ":" *(Status-Code "&lt;" URI "&gt;") ; Status-Code is defined in 6.1.1 of [Fielding et al., 1997]
</PRE>

<P>The URIs listed in the header are source resources which have been
   affected by the outstanding method.  The status code indicates the
   resolution of the method on the identified resource.  So, for
   example, if a <TT>MOVE</TT> method on a collection is outstanding and a 102
   "Processing" response with a <TT>Status-URI</TT> response header is returned,
   the included URIs will indicate resources that have had move
   attempted on them and what the result was.

<h3>8.11 Timeout Header</h3>

<PRE>   TimeOut = "Timeout" ":" 1#TimeType
   TimeType = ("Second-" DAVTimeOutVal | "Infinite" | Other)
   DAVTimeOutVal = 1*digit
   Other = Extend field-value   ; See section 4.2 of [Fielding et al.,
   1997]
</PRE>

<P>Clients MAY include <TT>Timeout</TT> headers in their <TT>LOCK</TT> requests.
   However, the server is not required to honor or even consider these
   requests.  Clients MUST NOT submit a <TT>Timeout</TT> request header with any
   method other than a <TT>LOCK</TT> method.

<P>A <TT>Timeout</TT> request header MUST contain at least one TimeType and MAY
   contain multiple TimeType entries. The purpose of listing multiple
   TimeType entries is to indicate multiple different values and value
   types that are acceptable to the client.  The client lists the
   TimeType entries in order of preference.

<P>The <TT>Timeout</TT> response header MUST use a Second value, Infinite, or a
   TimeType the client has indicated familiarity with.  The server MAY
   assume a client is familiar with any TimeType submitted in a Timeout
   header.

<P>The "Second" TimeType specifies the number of seconds that MUST
   elapse between granting of the lock at the server, and the automatic
   removal of the lock.  A server MUST not generate a timeout value for
   "Second" greater than 2^32-1.

<P>The timeout counter SHOULD be restarted any time an owner of the
   lock sends a method to any member of the lock, including unsupported
   methods, or methods which are unsuccessful.  However the lock MUST
   be refreshed if a refresh <TT>LOCK</TT> method is successfully received.

<P>If the timeout expires then the lock is lost.  Specifically the
   server SHOULD act as if an <TT>UNLOCK</TT> method was executed by the server
   on the resource using the lock token of the timed-out lock,
   performed with its override authority. Thus logs should be updated
   with the disposition of the lock, notifications should be sent,
   etc., just as they would be for an <TT>UNLOCK</TT> request.

<P>Servers are advised to pay close attention to the values submitted
   by clients, as they will be indicative of the type of activity the
   client intends to perform.  For example, an applet running in a
   browser may need to lock a resource, but because of the instability
   of the environment within which the applet is running, the applet
   may be turned off without warning.  As a result, the applet is
   likely to ask for a relatively small timeout value so that if the
   applet dies, the lock can be quickly harvested.  However, a document
   management system is likely to ask for an extremely long timeout
   because its user may be planning on going off-line.


<h2>9  Status Code Extensions to HTTP/1.1</h2>

<P>The following status codes are added to those defined in HTTP/1.1
   [Fielding et al., 1997].

<h3>9.1 102 Processing</h3>

<P>Methods can potentially take a long period of time to process,
   especially methods that support the <TT>Depth</TT> header.  In such cases the
   client may time-out the connection while waiting for a response.  To
   prevent this the server MAY return a 102 status code to indicate to
   the client that the server is still processing the method.

<P>If a method is taking longer than 20 seconds (a reasonable, but
   arbitrary value) to process the server SHOULD return a 102
   "Processing" response.

<h3>9.2 207 Multi-Status</h3>

<P>The response provides status for multiple independent operations.

<h3>9.3 422 Unprocessable Entity</h3>

<P>The server understands the content type of the request entity, but
   was unable to process the contained instructions.

<h3>9.4 423 Insufficient Space on Resource</h3>

<P>The resource does not have sufficient space to record the state of
   the resource after the execution of this method.

<h3>9.5 424 Method Failure</h3>

<P>The method was not executed on a particular resource within its
   scope because some part of the method's execution failed causing the
   entire method to be aborted.  For example, if a resource could not
   be moved as part of a <TT>MOVE</TT> method, all the other resources would
   fail with a 424 Method Failure.

<h3>9.6 425 Locked</h3>

<P>The source or destination resource of a method is locked, and either
   the request did not contain a valid <TT>Lock-Token</TT> header, or the lock
   token in the <TT>Lock-Token</TT> header identifies a lock held by another
   principal.


<h2>10 Multi-Status Response</h2>

<P>The default 207 Multi-Status response body is a text/xml HTTP entity
   that contains a single XML element called <TT>multistatus</TT>, which
   contains a set of XML elements called response, one for each 200,
   300, 400, and 500 series status code generated during the method
   invocation.  100 series status codes MUST NOT be recorded in a
   response XML element.


<h2>11 XML Element Definitions</h2>

<P>In the section below, the final line of each section gives the
   element type declaration using the format defined in [Bray, Paoli,
   Sperberg-McQueen, 1998]. The "Value" field, where present, specifies
   futher restrictions on the allowable contents of the XML element
   using BNF (i.e., to further restrict the values of a PCDATA
   element).

<h3>11.1 activelock XML Element</h3>

<BR>   Name:       activelock
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Describes a lock on a resource.

<PRE>   &lt;!ELEMENT activelock (locktype, lockscope, depth?, owner, timeout,
   locktoken) &gt;
</PRE>

<h4>11.1.1    depth XML Element</h4>

<BR>   Name:       depth
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    The value of the depth header used to create a lock.
<BR>   Description: If this element is not included in a lockinfo element
   then the client MUST assume that the lock is of depth 0.
<BR>   Value:      "0" | "infinity"

<PRE>   &lt;!ELEMENT depth (#PCDATA) &gt;
</PRE>

<h4>11.1.2    locktoken XML Element</h4>

<BR>   Name:       locktoken
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    The lock token associated with a lock.
<BR>   Description: The <TT>href</TT> contains an opaque lock token URI (i.e., the
   OpaqueLockToken-URI production in Section 4.4).

<PRE>   &lt;!ELEMENT locktoken (href) &gt;
</PRE>

<h4>11.1.3    timeout XML Element</h4>

<BR>   Name:       timeout
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    The timeout associated with a lock
<BR>   Value:      TimeType

<PRE>   &lt;!ELEMENT timeout (#PCDATA) &gt;
</PRE>

<h3>11.2 collection XML Element</h3>

<BR>   Name:       collection
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Identifies the associated resource as a collection. The
   <TT>resourcetype</TT> property of a collection resource MUST have this value.

<PRE>   &lt;!ELEMENT collection EMPTY &gt;
</PRE>

<h3>11.3 <TT>href</TT> XML Element</h3>

<BR>   Name:       <TT>href</TT>
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Identifies the content of the element as a URI.
<BR>   Value:      URI ; See section 3.2.1 of [Fielding et al., 1997]

<PRE>   &lt;!ELEMENT href (#PCDATA)&gt;
</PRE>

<h3>11.4 link XML Element</h3>

<BR>   Name:       link
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Identifies the property as a link and contains the
   source and destination of that link.
<BR>   Description: The link XML element is used to provide the sources and
   destinations of a link.  The name of the property containing the
   link XML element provides the type of the link.  Link is a multi-valued element, so multiple links may be used together to indicate
   multiple links with the same type.

<PRE>   &lt;!ELEMENT link (src+, dst+) &gt;
</PRE>

<h4>11.4.1    <TT>dst</TT> XML Element</h4>

<BR>   Name:       <TT>dst</TT>
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Indicates the destination of a link
<BR>   Value:      URI

<PRE>   &lt;!ELEMENT dst (#PCDATA) &gt;
</PRE>

<h4>11.4.2    <TT>src</TT> XML Element</h4>

<BR>   Name:       <TT>src</TT>
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Indicates the source of a link.
<BR>   Value:      URI

<PRE>   &lt;!ELEMENT src (#PCDATA) &gt;
</PRE>

<h3>11.5 lockentry XML Element</h3>

<BR>   Name:       lockentry
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Defines the types of locks that can be used with the
   resource.

<PRE>   &lt;!ELEMENT lockentry (lockscope, locktype) &gt;
</PRE>

<h3>11.6 lockinfo XML Element</h3>

<BR>   Name:       lockinfo
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    The lockinfo XML element is used with a <TT>LOCK</TT> method to
   specify the type of lock the client wishes to have created.

<PRE>   &lt;!ELEMENT lockinfo (lockscope, locktype, owner?) &gt;
</PRE>

<h3>11.7 lockscope XML Element</h3>

<BR>   Name:       lockscope
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Specifies whether a lock is an exclusive lock, or a
   shared lock.

<PRE>   &lt;!ELEMENT lockscope (exclusive | shared) &gt;
</PRE>

<h4>11.7.1    exclusive XML Element</h4>

<BR>   Name:       exclusive
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Specifies an exclusive lock

<PRE>   &lt;!ELEMENT exclusive EMPTY &gt;
</PRE>

<h4>11.7.2    shared XML Element</h4>

<BR>   Name:       shared
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Specifies a shared lock

<PRE>   &lt;!ELEMENT shared EMPTY &gt;
</PRE>

<h3>11.8 locktype XML Element</h3>

<BR>   Name:       locktype
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Specifies the access type of a lock.  At present, this
   specification only defines one lock type, the write lock.

<PRE>   &lt;!ELEMENT locktype (write) &gt;
</PRE>

<h4>11.8.1    write XML Element</h4>

<BR>   Name:       write
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Specifies a write lock.

<PRE>   &lt;!ELEMENT write EMPTY &gt;
</PRE>

<h3>11.9 <TT>multistatus</TT> XML Element</h3>

<BR>   Name:       <TT>multistatus</TT>
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Contains multiple response messages.
<BR>   Description: The responsedescription at the top level is used to
   provide a general message describing the overarching nature of the
   response.  If this value is available an application MAY use it
   instead of presenting the individual response descriptions contained
   within the responses.

<PRE>   &lt;!ELEMENT multistatus (response+, responsedescription?) &gt;
</PRE>

<h4>11.9.1    response XML Element</h4>

<BR>   Name:       response
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Holds a single response describing the effect of a
   method on resource and/or its properties.
<BR>   Description: A particular <TT>href</TT> MUST NOT appear more than once as the
   child of a response XML element under a <TT>multistatus</TT> XML element.
   This requirement is necessary in order to keep processing costs for
   a response to linear time.  Essentially, this prevents having to
   search in order to group together all the responses by <TT>href</TT>.  There
   are, however, no requirements regarding ordering based on <TT>href</TT>
   values.

<PRE>   &lt;!ELEMENT response (href, ((href*, status)|(propstat+)),
   responsedescription?) &gt;
</PRE>

<h4>11.9.1.1  propstat XML Element</h4>

<BR>   Name:       propstat
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Groups together a prop and status element that is
   associated with a particular <TT>href</TT> element.
<BR>   Description: Prop MUST contain one or more empty XML elements
   representing the names of properties.  Multiple properties may be
   included if the same response applies to them all.

<PRE>   &lt;!ELEMENT propstat (prop, status) &gt;
</PRE>

<h4>11.9.1.2  status XML Element</h4>

<BR>   Name:       status
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Holds a single HTTP status-line
<BR>   Value:      status-line   ;status-line defined in [Fielding et al.,
   1997]

<PRE>   &lt;!ELEMENT status (#PCDATA) &gt;
</PRE>

<h4>11.9.2    responsedescription XML Element</h4>

<BR>   Name:       responsedescription
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Contains a message that can be displayed to the user
   explaining the nature of the response.
<BR>   Description: This XML element provides information suitable to be
   presented to a user.

<PRE>   &lt;!ELEMENT responsedescription (#PCDATA) &gt;
</PRE>

<h3>11.10     owner XML Element</h3>

<BR>   Name:       owner
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Provides information about the principal taking out a
   lock.
<BR>   Description: The owner XML element provides information sufficient
   for either directly contacting a principal (such as a telephone
   number or Email URI), or for discovering the principal (such as the
   URL of a homepage) who owns a lock.

<PRE>   &lt;!ELEMENT owner (#PCDATA, ANY)* &gt;
</PRE>

<h3>11.11     prop XML element</h3>

<BR>   Name:       prop
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Contains properties related to a resource.
<BR>   Description: The prop XML element is a generic container for
   properties defined on resources.  All elements inside prop MUST
   define properties related to the resource.  No other elements may be
   used inside of a prop element.

<PRE>   &lt;!ELEMENT prop ANY&gt;
</PRE>

<h3>11.12     propertybehavior XML element</h3>

<BR>   Name:       propertybehavior
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Specifies how properties are handled during a <TT>COPY</TT> or
   <TT>MOVE</TT>.
<BR>   Description: The propertybehavior XML element specifies how
   properties are handled during a <TT>COPY</TT> or <TT>MOVE</TT>.  If this XML element
   is not included in the request body then the server is expected to
   act as defined by the default property handling behavior of the
   associated method.

<PRE>   &lt;!ELEMENT propertybehavior (omit | keepalive) &gt;
</PRE>

<h4>11.12.1   keepalive XML element</h4>

<BR>   Name:       keepalive
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Specifies requirements for the copying/moving of live
   properties.
<BR>   Description: If a list of URIs is included as the value of keepalive
   then the named properties MUST be "live" after they are copied
   (moved) to the destination resource of a <TT>COPY</TT> (or <TT>MOVE</TT>).  If the
   value "*" is given for the keepalive XML element, this designates
   that all live properties on the source resource MUST be live on the
   destination.
<BR>   Value:      "*" ; #PCDATA value can only be "*"

<PRE>   &lt;!ELEMENT keepalive (#PCDATA | href+) &gt;
</PRE>

<h4>11.12.2   omit XML element</h4>

<BR>   Name:       omit
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Indicates that the associated method MAY succeed even if
   the server is not able to copy/move every property on the source
   resource, even in a dead form.
<BR>   Description: The default behavior for a <TT>COPY</TT> or <TT>MOVE</TT> is to copy/move
   all properties or fail the method.  In certain circumstances, such
   as when a server copies a resource over another protocol such as
   FTP, it may not be possible to copy/move the properties associated
   with the resource. Thus any attempt to copy/move over FTP would
   always have to fail because properties could not be moved over, even
   as dead properties. The omit XML element instructs the server that
   it should use best effort to copy properties but a failure to copy a
   property should not cause the method to fail.

<PRE>   &lt;!ELEMENT omit EMPTY &gt;
</PRE>

<h3>11.13     propertyupdate XML element</h3>

<BR>   Name:       propertyupdate
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Contains a request to alter the properties on a
   resource.
<BR>   Description: This XML element is a container for the information
   required to modify the properties on the resource.  This XML element
   is multi-valued.

<PRE>   &lt;!ELEMENT propertyupdate (remove | set)+ &gt;
</PRE>

<h4>11.13.1   remove XML element</h4>

<BR>   Name:       remove
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Lists the DAV properties to be removed from a resource.
<BR>   Description: Remove instructs that the properties specified in prop
   should be removed.  Specifying the removal of a property that does
   not exist is not an error.  All the XML elements in prop MUST be
   empty, as only the names of properties to be removed are required.

<PRE>   &lt;!ELEMENT remove (prop) &gt;
</PRE>

<h4>11.13.2   set XML element</h4>

<BR>   Name:       set
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Lists the DAV property values to be set for a resource.
<BR>   Value:      prop
<BR>   Description: This XML element MUST contain only a prop XML element.
   The elements contained by prop specify the name and value of
   properties that are set on the Request-URI.  If a property already
   exists then its value is replaced.

<PRE>   &lt;!ELEMENT set (prop) &gt;
</PRE>

<h3>11.14     propfind XML Element</h3>

<BR>   Name:       propfind
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Specifies the properties to be returned from a <TT>PROPFIND</TT>
   method.  Two special elements are specified for use with propfind,
   allprop and propname.

<PRE>   &lt;!ELEMENT propfind (allprop | propname | href+) &gt;
</PRE>

<h4>11.14.1   allprop XML Element</h4>

<BR>   Name:       allprop
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    The allprop XML element specifies that all property
   names and values on the resource are to be returned.

<PRE>   &lt;!ELEMENT allprop EMPTY &gt;
</PRE>

<h4>11.14.2   propname XML Element</h4>

<BR>   Name:       propname
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose: the propname XML element specifies that only a list of
   property names on the resource is to be returned.

<PRE>   &lt;!ELEMENT propname EMPTY &gt;
</PRE>


<h2>12 DAV Properties</h2>

<P>For DAV properties, the name of the property is also the same as the
   name of the XML element which contains its value. In the section
   below, the final line of each section gives the element type
   declaration using the format defined in [Bray, Paoli, Sperberg-McQueen, 1998]. The "Value" field, where present, specifies futher
   restrictions on the allowable contents of the XML element using BNF
   (i.e., to further restrict the values of a PCDATA element).

<h3>12.1 creationdate Property</h3>

<BR>   Name:       creationdate
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Records the time and date the resource was created.
<BR>   Value:      ;The time and date MUST be given in ISO 8601 format
   defined in Appendix 2
<BR>   Description: This property SHOULD be defined on all DAV compliant
   resources.  If present, it contains a timestamp of the moment when
   the resource was created (i.e., the moment it had non-null state).

<PRE>   &lt;!ELEMENT creationdate (#PCDATA) &gt;
</PRE>

<h3>12.2 displayname Property</h3>

<BR>   Name:       displayname
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Provies a name for the resource that is suitable for
   presentation to a user.
<BR>   Description: This property SHOULD be defined on all DAV compliant
   resources.  If present, the property contains a description of the
   resource that is suitable for presentation to a user.

<PRE>   &lt;!ELEMENT displayname (#PCDATA) &gt;
</PRE>

<h3>12.3 externalmembers Property</h3>

<BR>   Name:       externalmembers
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Provides the list of external members defined on the
   resource.
<BR>   Description: This property MUST be defined on any DAV compliant
   resource with external members.  If defined it MUST contain the full
   list of external members.  Resources MAY make this property read-only, thus only allowing its value to be altered using the
   <TT>ADDREF</TT>/<TT>DELREF</TT> methods.

<PRE>   &lt;!ELEMENT externalmembers (href*) &gt;
</PRE>

<h3>12.4 getcontentlanguage Property</h3>

<BR>   Name:       getcontentlanguage
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Contains the <TT>Content-Language</TT> header returned by a <TT>GET</TT>
   without accept headers
<BR>   Description: This property MUST be defined on any DAV compliant
   resource which supports <TT>GET</TT>, with the exception that if no <TT>Content-Language</TT> header is available, this property MUST NOT exist.
<BR>   Value:      language-tag   ;language-tag is defined in section 14.13
   of [Fielding et al., 1997]

<PRE>   &lt;!ELEMENT getcontentlanguage (#PCDATA) &gt;
</PRE>

<h3>12.5 getcontentlength Property</h3>

<BR>   Name:       getcontentlength
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Contains the <TT>Content-Length</TT> header returned by a <TT>GET</TT>
   without accept headers.  If no <TT>Content-Length</TT> header is available,
   this property MUST NOT exist.
<BR>   Description: This property MUST be defined on any DAV compliant
   resource which returns the <TT>Content-Length</TT> header in response to a
   <TT>GET</TT>.
<BR>   Value:      content-length ; see section 14.14 of [Fielding et al.,
   1997]

<PRE>   &lt;!ELEMENT getcontentlength (#PCDATA) &gt;
</PRE>

<h3>12.6 getcontenttype Property</h3>

<BR>   Name:       getcontenttype
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Contains the <TT>Content-Type</TT> header returned by a <TT>GET</TT>
   without accept headers.  If no <TT>Content-Type</TT> header is available,
   this property MUST NOT exist.
<BR>   Description: This property MUST be defined on any DAV compliant
   resource which returns the <TT>Content-Type</TT> header in response to a <TT>GET</TT>.
<BR>   Value:      media-type   ; defined in Section 3.7 of [Fielding et
   al., 1997]

<PRE>   &lt;!ELEMENT getcontenttype (#PCDATA) &gt;
</PRE>

<h3>12.7 getetag Property</h3>

<BR>   Name:       getetag
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Contains the <TT>ETag</TT> header returned by a <TT>GET</TT> without
   accept headers.
<BR>   Description: Note that the ETag on a resource may reflect changes in
   any part of the state of the resource, not necessarily just a change
   to the response to the <TT>GET</TT> method.  For example, a change to a
   resource's access permissions may cause the ETag to change. This
   property MUST be defined on any DAV compliant resource which returns
   the <TT>Etag</TT> header in response to a <TT>GET</TT>, except for the case if no ETag
   header is returned, this property MUST NOT exist.
<BR>   Value:      entity-tag  ; defined in Section 3.11 of [Fielding et
   al., 1997]

<PRE>   &lt;!ELEMENT getetag (#PCDATA) &gt;
</PRE>

<h3>12.8 getlastmodified Property</h3>

<BR>   Name:       getlastmodified

<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Contains the <TT>Last-Modified</TT> header returned by a <TT>GET</TT>
   method without accept headers.
<BR>   Description: Note that the last-modified date on a resource may
   reflect changes in any part of the state of the resource, not
   necessarily just a change to the response to the <TT>GET</TT> method.  For
   example, a change in a property may cause the last-modified date to
   change. This property MUST be defined on any DAV compliant resource
   which returns the <TT>Last-Modified</TT> header in response to a <TT>GET</TT>, except
   for the case if no <TT>Last-Modified</TT> header is returned, this property
   MUST NOT exist.
<BR>   Value:      HTTP-date  ; defined in Section 3.3.1 of [Fielding et
   al., 1997]

<PRE>   &lt;!ELEMENT getlastmodified (#PCDATA) &gt;
</PRE>

<h3>12.9 lockdiscovery Property</h3>

<BR>   Name:       lockdiscovery
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Describes the active locks on a resource
<BR>   Description: The lockdiscovery property returns a listing of who has
   a lock, what type of lock he has, the timeout type and the time
   remaining on the timeout, and the associated lock token.  The server
   is free to withhold any or all of this information if the requesting
   principal does not have sufficient access rights to see the
   requested data.  A server which supports locks MUST provide the
   lockdiscovery property on any resource with locks on it.

<PRE>   &lt;!ELEMENT lockdiscovery (activelock)* &gt;
</PRE>

<h4>12.9.1    Example</h4>

<P>&gt;&gt;Request

<PRE>
   PROPFIND /container/ HTTP/1.1
   Host: www.foo.bar
   Content-Length: xxxx
   Content-Type: text/xml

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:propfind&gt;
     &lt;D:prop&gt;&lt;lockdiscovery/&gt;&lt;/D:prop&gt;
   &lt;/D:propfind&gt;
</PRE>
</PRE>

<P>&gt;&gt;Response
<PRE>

<P>HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx
<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href ="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:multistatus&gt;
     &lt;D:response&gt;
       &lt;D:propstat&gt;
          &lt;D:prop&gt;
            &lt;D:lockdiscovery&gt;
              &lt;D:activelock&gt;
                &lt;D:locktype&gt;write&lt;/D:locktype&gt;
                &lt;D:lockscope&gt;exclusive&lt;/D:lockscope&gt;
                &lt;D:Depth&gt;0&lt;/D:Depth&gt;
                &lt;D:owner&gt;Jane Smith&lt;/D:owner&gt;
                &lt;D:timeout&gt;Infinite&lt;/D:timeout&gt;
                &lt;D:locktoken&gt;
                    &lt;D:href&gt;
                  opaquelocktoken:f81de2ad-7f3d-a1b2-4f3c-00a0c91a9d76
                    &lt;/D:href&gt;
                &lt;/D:locktoken&gt;
              &lt;/D:activelock&gt;
            &lt;/D:lockdiscovery&gt;
          &lt;/D:prop&gt;
          &lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;
       &lt;/D:propstat&gt;
     &lt;/D:response&gt;
   &lt;/D:multistatus&gt;
</PRE>
</PRE>

<P>This resource has a single exclusive write lock on it, with an
   infinite timeout.  Note that the Depth element could have been
   omitted as 0 is the default value of Depth.

<h3>12.10     <TT>resourcetype</TT> Property</h3>

<BR>   Name:       <TT>resourcetype</TT>
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    Specifies the nature of the resource.
<BR>   Description: This property MUST be defined on all DAV compliant
   resources.  The default value is empty.

<PRE>   &lt;!ELEMENT resourcetype ANY &gt;
</PRE>

<h3>12.11     source Property</h3>

<BR>   Name:       source
<BR>   Namespace:  http://www.iana.org/standards/dav/link/
<BR>   Purpose:    The destination of the source link identifies the
   resource that contains the unprocessed source of the link's source.
<BR>   Description: The source of the link (src) is typically the URI of
   the output resource on which the link is defined, and there is
   typically only one destination (dst) of the link, which is the URI
   where the unprocessed source of the resource may be accessed.  When
   more than one link destination exists, this specification asserts no
   policy on ordering.

<PRE>   &lt;!ELEMENT source (link)* &gt;
</PRE>

<h4>12.11.1   Example</h4>

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;?namespace href="http://www.foocorp.com/Project/" as="F"?&gt;
   &lt;D:prop&gt;
     &lt;D:source&gt;
          &lt;D:link&gt;
               &lt;F:projfiles&gt;Source&lt;/F:projfiles&gt;
               &lt;D:src&gt;http://foo.bar/program&lt;/D:src&gt;
               &lt;D:dst&gt;http://foo.bar/src/main.c&lt;/D:dst&gt;
          &lt;/D:link&gt;
          &lt;D:link&gt;
               &lt;F:projfiles&gt;Library&lt;/F:projfiles&gt;
               &lt;D:src&gt;http://foo.bar/program&lt;/D:src&gt;
               &lt;D:dst&gt;http://foo.bar/src/main.lib&lt;/D:dst&gt;
          &lt;/D:link&gt;
          &lt;D:link&gt;
               &lt;F:projfiles&gt;Makefile&lt;/F:projfiles&gt;
               &lt;D:src&gt;http://foo.bar/program&lt;/D:src&gt;
               &lt;D:dst&gt;http://foo.bar/src/makefile&lt;/D:dst&gt;
          &lt;/D:link&gt;
     &lt;/D:source&gt;
   &lt;/D:prop&gt;
</PRE>

<P>In this example the resource http://foo.bar/program has a source
   property that contains three links.  Each link contains three
   elements, two of which, <TT>src</TT> and <TT>dst</TT>, are part of the DAV schema
   defined in this document, and one which is defined by the schema
   http://www.foocorp.com/project/ (Source, Library, and Makefile).  A
   client which only implements the elements in the DAV spec will not
   understand the foocorp elements and will ignore them, thus seeing
   the expected source and destination links.  An enhanced client may
   know about the foocorp elements and be able to present the user with
   additional information about the links.  This example demonstrates
   the power of XML markup, allowing element values to be enhanced
   without breaking older clients.

<h3>12.12     <TT>supportedlock</TT> Property</h3>

<BR>   Name:       <TT>supportedlock</TT>
<BR>   Namespace:  http://www.iana.org/standards/dav/
<BR>   Purpose:    To provide a listing of the lock capabilities supported
   by the resource.
<BR>   Description: The <TT>supportedlock</TT> property of a resource returns a
   listing of the combinations of scope and access types which may be
   specified in a lock request on the resource.  Note that the actual
   contents are themselves controlled by access controls so a server is
   not required to provide information the client is not authorized to
   see.  If <TT>supportedlock</TT> is available on "*" then it MUST define the
   set of locks allowed on all resources on that server.

<PRE>   &lt;!ELEMENT supportedlock (lockentry)* &gt;
</PRE>

<h4>12.12.1   Example</h4>

<P>&gt;&gt;Request

<PRE>
   PROPFIND  /container/ HTTP/1.1
   Host: www.foo.bar
   Content-Length: xxxx
   Content-Type: text/xml

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:propfind&gt;
     &lt;D:prop&gt;&lt;supportedlock/&gt;&lt;/D:prop&gt;
   &lt;/D:propfind&gt;
</PRE>
</PRE>

<P>&gt;&gt;Response
<PRE>

<P>HTTP/1.1 207 Multi-Status
   Content-Type: text/xml
   Content-Length: xxxxx
</PRE>

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href ="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:multistatus&gt;
     &lt;D:response&gt;
       &lt;D:propstat&gt;
         &lt;D:prop&gt;
           &lt;D:supportedlock&gt;
             &lt;D:LockEntry&gt;
               &lt;D:locktype&gt;&lt;D:Write/&gt;&lt;/D:locktype&gt;
               &lt;D:lockscope&gt;&lt;D:Exclusive/&gt;&lt;/D:lockscope&gt;
             &lt;/D:LockEntry&gt;
             &lt;D:LockEntry&gt;
               &lt;D:locktype&gt;&lt;D:Write/&gt;&lt;/D:locktype&gt;
               &lt;D:lockscope&gt;&lt;D:Shared/&gt;&lt;/D:lockscope&gt;
             &lt;/D:LockEntry&gt;
           &lt;/D:supportedlock&gt;
         &lt;/D:prop&gt;
         &lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;
       &lt;/D:propstat&gt;
     &lt;/D:response&gt;
   &lt;/D:multistatus&gt;
</PRE>


<h2>13 DAV Compliance Classes</h2>

<P>A DAV compliant resource can choose from two classes of compliance.
   A client can discover the compliance classes of a resource by
   executing <TT>OPTIONS</TT> on the resource, and examining the "DAV" header
   which is returned.

<P>Since this document describes extensions to the HTTP/1.1 protocol,
   minimally all DAV compliant resources, clients, and proxies MUST be
   compliant with [Fielding et al., 1997].

<P>Compliance classes are not necessarily sequential. A resource that
   is class 2 compliant MUST also be class 1 compliant; but if
   additional compliance classes are defined later, a resource that is
   class 1, 2, and 4 compliant might not be class 3 compliant.

<h3>13.1 Class 1</h3>

<P>A class 1 compliant resource MUST meet all "MUST" requirements in
   all sections of this document.

<P>Class 1 compliant resources MUST return, at minimum, the value "1"
   in the <TT>DAV</TT> header on all responses to the <TT>OPTIONS</TT> method.

<h3>13.2 Class 2</h3>

<P>A class 2 compliant resource MUST meet all class 1 requirements and
   support the <TT>supportedlock</TT> property as well as the <TT>LOCK</TT> method. It
   MUST also support the lockdiscovery property, since Section 12.9
   specifies that the <TT>LOCK</TT> method MUST also support the lockdiscovery
   property.

<P>Class 2 compliant resources MUST return, at minimum, the value "2"
   in the <TT>DAV</TT> header on all responses to the <TT>OPTIONS</TT> method.


<h2>14 Internationalization Considerations</h2>

<P>In the realm of internationalization, this specification complies
   with the IETF Character Set Policy [Alvestrand, 1998]. In this
   specification, human-readable fields can be found either in the
   value of a property, or in an error message returned in a response
   entity body.  In both cases, the human-readable content is encoded
   using XML, which has explicit provisions for character set tagging
   and encoding, and requires that XML processors read XML elements
   encoded using the UTF-8 and UCS-2 encodings of the ISO 10646 basic
   multilingual plane.  Furthermore, XML contains provisions for
   encoding XML elements using other encoding schemes, notable among
   them UCS-4, which permits encoding of characters from any ISO 10646
   character plane.

<P>The default character set encoding for XML data in this
   specification, and in general, is UTF-8.  WebDAV compliant
   applications MUST support the UTF-8 and UCS-2 character set
   encodings for XML elements, and SHOULD support the UCS-4 encoding.
   The XML character set encoding declaration for each supported
   character set MUST also be supported, since it is by using this
   encoding declaration that an XML processor determines the encoding
   of an element.

<P>XML also provides a language tagging capability for specifying the
   language of the contents of a particular XML element.  XML uses
   either IANA registered language tags (see RFC 1766, [Alvestrand,
   1995]) or ISO 639 language tags [ISO-639] in the "xml:lang"
   attribute of an XML element to identify the language its content and
   attributes.

<P>Names used within this specification fall into three categories:
   names of protocol elements such as methods and headers, names of XML
   elements, and names of properties.  Naming of protocol elements
   follows the precedent of HTTP, using English names encoded in
   USASCII for methods and headers.  Since these protocol elements are
   not visible to users, and are in fact simply long token identifiers,
   they do not need to support encoding in multiple character sets.
   Similarly, though the names of XML elements used in this
   specification are English names encoded in UTF-8, these names are
   not visible to the user, and hence do not need to support multiple
   character set encodings.

<P>The name of a property defined on a resource is a URI.  Although
   some applications (e.g., a generic property viewer) will display
   property URIs directly to their users, it is expected that the
   typical application will use a fixed set of properties, and will
   provide a mapping from the property name URI to a human-readable
   field when displaying the property name to a user.  It is only in
   the case where the set of properties is not known ahead of time that
   an application need display a property name URI to a user. We
   recommend that applications provide human-readable property names
   wherever feasible.

<P>For error reporting, we follow the convention of HTTP/1.1 status
   codes, including with each status code a short, English description
   of the code (e.g., 425 Locked).  While the possibility exists that a
   poorly crafted user agent would display this message to a user,
   internationalized applications will ignore this message, and display
   an appropriate message in the user's language and character set.

<P>Since interoperation of clients and servers does not require locale
   information, this specification does not specify any mechanism for
   transmission of this information.


<h2>15 Security Considerations</h2>

<P>This section is provided to detail issues concerning security
   implications of which WebDAV applications need to be aware.

<P>All of the security considerations of HTTP/1.1 also apply to WebDAV.
   In addition, the security risks inherent in remote authoring require
   stronger authentication technology, and introduce several new
   privacy concerns, and may increase the hazards from poor server
   design. These issues are detailed below.

<h3>15.1 Authentication of Clients</h3>

<P>Due to their emphasis on authoring, WebDAV servers need to use
   authentication technology to protect not just access to a network
   resource, but the integrity of the resource as well.  Furthermore,
   the introduction of locking functionality requires support for
   authentication.

<P>A password sent in the clear over an insecure channel is an
   inadequate means for protecting the accessibility and integrity of a
   resource as the password may be intercepted.  Since Basic
   authentication for HTTP/1.1 performs essentially clear text
   transmission of a password, Basic authentication MUST NOT be used to
   authenticate a WebDAV client to a server unless the connection is
   secure. Furthermore, a WebDAV server MUST NOT send Basic
   authentication credentials in a <TT>WWW-Authenticate</TT> header unless the
   connection is secure.  Examples of secure connections include a
   Transport Layer Security (TLS) connection, or a connection over a
   network which is physically secure, for example, an isolated network
   in a building with restricted access.

<P>WebDAV applications MUST support the Digest authentication scheme
   [Franks, et al., 1997]. Since Digest authentication verifies that
   both parties to a communication know a shared secret, a password,
   without having to send that secret in the clear, Digest
   authentication avoids the security problems inherent in Basic
   authentication while providing a level of authentication which is
   useful in a wide range of scenarios.

<h3>15.2 Denial of Service</h3>

<P>Denial of service attacks are of special concern to WebDAV servers.
   WebDAV plus HTTP enables denial of service attacks on every part of
   a system's resources.

<P>The underlying storage can be attacked by PUTting extremely large
   files.

<P>Asking for recursive operations on large collections can attack
   processing time.

<P>Making multiple pipelined requests on multiple connections can
   attack network connections.

<P>WebDAV servers need to be aware of the possibility of a denial of
   service attack at all levels.

<h3>15.3 Security through Obscurity</h3>

<P>WebDAV provides, through the <TT>PROPFIND</TT> method, a mechanism for
   listing the member resources of a collection.  This greatly
   diminishes the effectiveness of security or privacy techniques which
   rely only on the difficulty of discovering the names of network
   resources.  Users of WebDAV servers are encouraged to use access
   control techniques to prevent unwanted access to resources, rather
   than depending on the relative obscurity of their resource names.

<h3>15.4 Privacy Issues Connected to Locks</h3>

<P>When submitting a lock request a user agent may also submit an owner
   XML field giving contact information for the person taking out the
   lock (for those cases where a person, rather than a robot, is taking
   out the lock). This contact information is stored in a lockdiscovery
   property on the resource, and can be used by other collaborators to
   begin negotiation over access to the resource.  However, in many
   cases this contact information can be very private, and should not
   be widely disseminated.  Servers SHOULD limit read access to the
   lockdiscovery property as appropriate.  Furthermore, user agents
   SHOULD provide control over whether contact information is sent at
   all, and if contact information is sent, control over exactly what
   information is sent.

<h3>15.5 Privacy Issues Connected to Properties</h3>

<P>Since property values are typically used to hold information such as
   the author of a document, there is the possibility that privacy
   concerns could arise stemming from widespread access to a resource's
   property data.  To reduce the risk of inadvertent release of private
   information via properties, servers are encouraged to develop access
   control mechanisms that separate read access to the resource body
   and read access to the resource's properties.  This allows a user to
   control the dissemination of their property data without overly
   restricting access to the resource's contents.

<h3>15.6 Reduction of Security due to Source Link</h3>

<P>HTTP/1.1 warns against providing read access to script code because
   it may contain sensitive information.  Yet WebDAV, via its source
   link facility, can potentially provide a URL for script resources so
   they may be authored.  For HTTP/1.1, a server could reasonably
   prevent access to source resources due to the predominance of read-only access.  WebDAV, with its emphasis on authoring, encourages
   read and write access to source resources, and provides the source
   link facility to identify the source.  This reduces the security
   benefits of eliminating access to source resources.  Users and
   administrators of WebDAV servers should be very cautious when
   allowing remote authoring of scripts, limiting read and write access
   to the source resources to authorized principals.


<h2>16 IANA Considerations</h2>

<P>This document defines two namespaces, the namespace of property
   names, and the namespace of WebDAV-specific XML elements used within
   property values.

<P>URLs are used for both names, for several reasons. Assignment of a
   URL does not require a request to a central naming authority, and
   hence allow WebDAV property names and XML elements to be quickly
   defined by any WebDAV user or application.  URLs also provide a
   unique address space, ensuring that the distributed users of WebDAV
   will not have collisions among the property names and XML elements
   they create.

<P>This specification defines a distinguished set of property names and
   XML elements which are understood by all WebDAV applications.  The
   property names and XML elements in this specification are all
   derived from the base URL: http://www.iana.org/standards/dav/ by
   adding a suffix to this URL, for example,
   http://www.iana.org/standards/dav/creationdate for the
   "creationdate" property.

<P>To ensure correct interoperation of this specification, IANA MUST
   reserve the URL namespace starting with
   http://www.iana.org/standards/dav/ for use by this specification,
   its revisions, and related WebDAV specifications.


<h2>17 Terminology</h2>

<P>Collection - A resource that contains member resources.

<P>Member Resource - A resource contained by a collection.  There are
   two types of member resources: external and internal.

<P>Internal Member Resource - A member resource of a collection whose
   URI is relative to the URI of the collection.

<P>External Member Resource - A member resource of a collection with an
   absolute URI that is not relative to its parent's URI.

<P>Property - A name/value pair that contains descriptive information
   about a resource.

<P>Live Property - A property whose semantics and syntax are enforced
   by the server.  For example, a live "content-length" property would
   have its value, the length of the entity returned by a <TT>GET</TT> request,
   automatically calculated by the server.

<P>Dead Property - A property whose semantics and syntax are not
   enforced by the server.  The server only records the value of a dead
   property; the client is responsible for maintaining the consistency
   of the syntax and semantics of a dead property.


<h2>18 Copyright</h2>

<P>The following copyright notice is copied from RFC 2026 [Bradner,
   1996], Section 10.4, and describes the applicable copyright for this
   document.

<P>Copyright (C) The Internet Society January 18, 1998. All Rights
   Reserved.

<P>This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph
   are included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

<P>The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assignees.

<P>This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


<h2>19 Intellectual Property</h2>

<P>The following notice is copied from RFC 2026 [Bradner, 1996],
   Section 10.4, and describes the position of the IETF concerning
   intellectual property claims made against this document.

<P>The IETF takes no position regarding the validity or scope of any
   intellectual property or other rights that might be claimed to
   pertain to the implementation or use other technology described in
   this document or the extent to which any license under such rights
   might or might not be available; neither does it represent that it
   has made any effort to identify any such rights.  Information on the
   IETF's procedures with respect to rights in standards-track and
   standards-related documentation can be found in BCP-11.  Copies of
   claims of rights made available for publication and any assurances
   of licenses to be made available, or the result of an attempt made
   to obtain a general license or permission for the use of such
   proprietary rights by implementors or users of this specification
   can be obtained from the IETF Secretariat.

<P>The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights which may cover technology that may be required to practice
   this standard.  Please address the information to the IETF Executive
   Director.


<h2>20 Acknowledgements</h2>

<P>A specification such as this thrives on piercing critical review and
   withers from apathetic neglect.  The authors gratefully acknowledge
   the contributions of the following people, whose insights were so
   valuable at every stage of our work.

<P>Terry Allen, Harald Alvestrand, Alan Babich, Dylan Barrell, Bernard
   Chester, Tim Berners-Lee, Dan Connolly, Jim Cunningham, Ron Daniel,
   Jr., Jim Davis, Keith Dawson, Mark Day, Brian Deen, Martin Duerst,
   David Durand, Lee Farrell, Chuck Fay, Roy Fielding, Mark Fisher,
   Alan Freier, George Florentine, Jim Gettys, Phill Hallam-Baker,
   Dennis Hamilton, Steve Henning, Alex Hopmann, Andre van der Hoek,
   Ben Laurie, Paul Leach, Ora Lassila, Karen MacArthur, Steven Martin,
   Larry Masinter, Michael Mealling, Keith Moore, Henrik Nielsen, Kenji
   Ota, Bob Parker, Glenn Peterson, Jon Radoff, Saveen Reddy, Henry
   Sanders, Christopher Seiwald, Judith Slein, Mike Spreitzer, Einar
   Stefferud, Ralph Swick, Kenji Takahashi, Richard N. Taylor, Robert
   Thau, John Turner, Sankar Virdhagriswaran, Fabio Vitali, Gregory
   Woodhouse, and Lauren Wood.

<P>Two from this list deserve special mention.  The contributions by
   Larry Masinter have been invaluable, both in helping the formation
   of the working group and in patiently coaching the authors along the
   way.  In so many ways he has set high standards we have toiled to
   meet. The contributions of Judith Slein in clarifying the
   requirements, and in patiently reviewing draft after draft, both
   improved this specification and expanded our minds on document
   management.

<P>We would also like to thank John Turner for developing the XML DTD.

<h2>21 References</h2>

<P>   [Alvestrand, 1995] H. T. Alvestrand, "Tags for the Identification of
   Languages." RFC 1766. Uninett. March, 1995.

<P>   [Alvestrand, 1998] H. T. Alvestrand, "IETF Policy on Character Sets
   and Languages." RFC XXXX, BCP YY. Maxware. January, 1998.

<P>   [Bradner, 1996] S. Bradner, "The Internet Standards Process -Revision 3."  RFC 2026, BCP 9. Harvard University. October, 1996.

<P>   [Bradner, 1997] S. Bradner, "Key words for use in RFCs to Indicate
   Requirement Levels."  RFC 2119, BCP 14. Harvard University. March,
   1997.

<P>   [Bray, Paoli, Sperberg-McQueen, 1998] T. Bray, J. Paoli, C. M.
   Sperberg-McQueen, "Extensible Markup Language (XML)." World Wide Web
   Consortium Recommendation REC-XML-ZZZZ. <A HREF="http://www.w3.org/TR/PR-xml-971208">http://www.w3.org/TR/PR-xml-971208</A>.

<P>   [Fielding et al., 1997] R. Fielding, J. Gettys, J. Mogul, H.
   Frystyk, T. Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1."
   RFC 2068. U.C. Irvine, DEC, MIT/LCS.  January, 1997.

<P>   [ISO-639] ISO (International Organization for Standardization). ISO
   639:1988. "Code for the representation of names of languages."

<P>   [ISO-8601] ISO (International Organization for Standardization). ISO
   8601:1988. "Data elements and interchange formats - Information
   interchange - Representation of dates and times."

<P>   [Lasher, Cohen, 1995] R. Lasher, D. Cohen, "A Format for
   Bibliographic Records," RFC 1807. Stanford, Myricom. June, 1995.

<P>   [Leach, Salz, 1997] P. J. Leach, R. Salz, "UUIDs and GUIDs."
   Internet-draft (expired), work-in-progress, February, 1997.
   <A HREF="http://www.internic.net/internet-drafts/draft-leach-uuids-guids-00.txt">http://www.internic.net/internet-drafts/draft-leach-uuids-guids-00.txt</A>

<P>   [MARC, 1994] Network Development and MARC Standards, Office, ed.
   1994. "USMARC Format for Bibliographic Data", 1994. Washington, DC:
   Cataloging Distribution Service, Library of Congress.

<P>   [Miller et al., 1996] J. Miller, T. Krauskopf, P. Resnick, W.
   Treese, "PICS Label Distribution Label Syntax and Communication
   Protocols" Version 1.1, World Wide Web Consortium Recommendation
   REC-PICS-labels-961031. <A HREF="http://www.w3.org/pub/WWW/TR/REC-PICS-labels-961031.html">http://www.w3.org/pub/WWW/TR/REC-PICS-labels-961031.html</A>.

<P>   [Slein et al., 1997] J. A. Slein, F. Vitali, E. J. Whitehead, Jr.,
   D. Durand, "Requirements for Distributed Authoring and Versioning
   Protocol for the World Wide Web." RFC XXXX. Xerox, Univ. of Bologna,
   U.C. Irvine, Boston Univ. YYY, 1997.

<P>   [Weibel et al., 1995] S. Weibel, J. Godby, E. Miller, R. Daniel,
   "OCLC/NCSA Metadata Workshop Report."
   <A HREF="http://purl.oclc.org/metadata/dublin_core_report">http://purl.oclc.org/metadata/dublin_core_report</A>.

<P>   [Yergeau, 1997] F. Yergeau, "UTF-8, a transformation format of
   Unicode and ISO 10646." RFC 2044. Alis Technologies. October, 1996.

<h2>22 Authors' Addresses</h2>

<PRE>
   Y. Y. Goland
   Microsoft Corporation
   One Microsoft Way
   Redmond, WA 98052-6399
   Email: yarong@microsoft.com

<P>E. J. Whitehead, Jr.
   Dept. Of Information and Computer Science
   University of California, Irvine
   Irvine, CA 92697-3425
   Email: ejw@ics.uci.edu

<P>A. Faizi
   Netscape
   685 East Middlefield Road
   Mountain View, CA 94043
   Email: asad@netscape.com

<P>S. R. Carter
   Novell
   1555 N. Technology Way
   M/S ORM F111
   Orem, UT 84097-2399
   Email: srcarter@novell.com


<P>D. Jensen
   Novell
   1555 N. Technology Way
   M/S ORM F111
   Orem, UT 84097-2399
   Email: dcjensen@novell.com
</PRE>

<h2>23 Appendices</h2>

<h3>23.1 Appendix 1 - WebDAV Document Type Definition</h3>

<P>This section provides a document type definition, following the
   rules in [Bray, Paoli, Sperberg-McQueen, 1998], for the XML elements
   used in the protocol stream and in the values of properties. It
   collects the element definitions given in Sections 11 and 12.

<PRE>   &lt;!DOCTYPE webdav-1.0 [
</PRE>

<PRE>   &lt;!--============ XML Elements from Section 11 ==================--&gt;
</PRE>

<PRE>   &lt;!ELEMENT activelock (locktype, lockscope, depth?, owner, timeout,
   locktoken) &gt;
</PRE>

<PRE>   &lt;!ELEMENT lockentry (lockscope, locktype) &gt;
   &lt;!ELEMENT lockinfo (lockscope, locktype, owner?) &gt;
</PRE>

<PRE>   &lt;!ELEMENT locktype (write) &gt;
   &lt;!ELEMENT write EMPTY &gt;
</PRE>

<PRE>   &lt;!ELEMENT lockscope (exclusive | shared) &gt;
   &lt;!ELEMENT exclusive EMPTY &gt;
   &lt;!ELEMENT shared EMPTY &gt;
</PRE>

<PRE>   &lt;!ELEMENT depth (#PCDATA) &gt;
</PRE>

<PRE>   &lt;!ELEMENT owner (#PCDATA, ANY)* &gt;
</PRE>

<PRE>   &lt;!ELEMENT timeout (#PCDATA) &gt;
</PRE>

<PRE>   &lt;!ELEMENT locktoken (href) &gt;
</PRE>

<PRE>   &lt;!ELEMENT href (#PCDATA) &gt;
</PRE>

<PRE>   &lt;!ELEMENT link (src+, dst+) &gt;
   &lt;!ELEMENT dst (#PCDATA) &gt;
   &lt;!ELEMENT src (#PCDATA) &gt;
</PRE>

<PRE>   &lt;!ELEMENT multistatus (response+, responsedescription?) &gt;
</PRE>

<PRE>   &lt;!ELEMENT response (href, ((href*, status)|(propstat+)),
   responsedescription?) &gt;
   &lt;!ELEMENT status (#PCDATA) &gt;
   &lt;!ELEMENT propstat (prop status) &gt;
   &lt;!ELEMENT responsedescription (#PCDATA) &gt;
</PRE>

<PRE>   &lt;!ELEMENT prop ANY &gt;
</PRE>

<PRE>   &lt;!ELEMENT propertybehavior (omit | keepalive) &gt;
   &lt;!ELEMENT omit EMPTY &gt;
</PRE>

<PRE>   &lt;!ELEMENT keepalive (#PCDATA | href+) &gt;
</PRE>

<PRE>   &lt;!ELEMENT propertyupdate (remove | set)+ &gt;
   &lt;!ELEMENT remove (prop) &gt;
   &lt;!ELEMENT set (prop) &gt;
</PRE>

<PRE>   &lt;!ELEMENT propfind (allprop | propname | href+) &gt;
   &lt;!ELEMENT allprop EMPTY &gt;
   &lt;!ELEMENT propname EMPTY &gt;
</PRE>

<PRE>   &lt;!ELEMENT collection EMPTY &gt;
</PRE>


<PRE>   &lt;!--=========== Property Elements from Section 12 ===============--&gt;
</PRE>

<PRE>   &lt;!ELEMENT creationdate (#PCDATA) &gt;
   &lt;!ELEMENT displayname (#PCDATA) &gt;
   &lt;!ELEMENT externalmembers (href*) &gt;
   &lt;!ELEMENT getcontentlanguage (#PCDATA) &gt;
   &lt;!ELEMENT getcontentlength (#PCDATA) &gt;
   &lt;!ELEMENT getcontenttype (#PCDATA) &gt;
   &lt;!ELEMENT getetag (#PCDATA) &gt;
   &lt;!ELEMENT getlastmodified (#PCDATA) &gt;
   &lt;!ELEMENT lockdiscovery (activelock)* &gt;
   &lt;!ELEMENT resourcetype ANY &gt;
   &lt;!ELEMENT source (link)* &gt;
   &lt;!ELEMENT supportedlock (lockentry)* &gt;
</PRE>

<P>]&gt;

<h3>23.2 Appendix 2 - ISO 8601 Date and Time Profile</h3>

<P>The creationdate property specifies the use of the ISO 8601 date
   format.  This section defines a profile of the ISO 8601 date format
   for use with this specification.  This profile is quoted verbatim
   from draft-newman-datetime-01.txt (expired).

<P>date-time       = full-date "T" full-time

<P>full-date       = date-fullyear "-" date-month "-" date-mday
   full-time       = partial-time time-offset

<P>date-fullyear   = 4DIGIT
   date-month      = 2DIGIT  ; 01-12
   date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on
   month/year
   time-hour       = 2DIGIT  ; 00-23
   time-minute     = 2DIGIT  ; 00-59
   time-second     = 2DIGIT  ; 00-59, 00-60 based on leap second rules
   time-secfrac    = "." 1*DIGIT
   time-numoffset  = ("+" / "-") time-hour ":" time-minute
   time-offset     = "Z" / time-numoffset
   partial-time    = time-hour ":" time-minute ":" time-second
                    [time-secfrac]


<P>Numeric offsets are calculated as local time minus UTC (Coordinated
   Universal Time).  So the equivalent time in UTC can be determined by
   subtracting the offset from the local time.  For example, 18:50:00-04:00 is the same time as 22:58:00Z.

<P>If the time in UTC is known, but the offset to local time is
   unknown, this can be represented with an offset of "-00:00".  This
   differs from an offset of "Z" which implies that UTC is the
   preferred reference point for the specified time.

<h3>23.3 Appendix 3 - Notes on Processing XML Elements</h3>

<P>XML is a flexible data format that makes it easy to submit data that
   appears legal but in fact is not.  The philosophy of "Be flexible in
   what you accept and strict in what you send" still applies, but it
   must not be applied inappropriately.  XML is extremely flexible in
   dealing with issues of white space, element ordering, inserting new
   elements, etc.  This flexibility does not require extension,
   especially not in the area of the meaning of elements.

<P>There is no kindness in accepting illegal combinations of XML
   elements.  At best it will cause an unwanted result and at worst it
   can cause real damage.

<h4>23.3.1    XML Syntax Error Example</h4>

<P>The following request body for a <TT>PROPFIND</TT> method is illegal.

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href ="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;D:propfind&gt;
     &lt;D:allprop/&gt;
     &lt;D:propname/&gt;
   &lt;/D:propfind&gt;
</PRE>

<P>The definition of the propfind element only allows for the allprop
   or the propname element, not both.  Thus the above is an error and
   MUST be responded to with a 400 Bad Request.

<P>Imagine, however, that a server wanted to be "kind" and decided to
   pick the allprop element as the true element and respond to it.  A
   client running over a bandwidth limited line who intended to execute
   a propname would be in for a big surprise if the server treated the
   command as an allprop.

<h4>23.3.2    Unknown XML Element Example</h4>

<P>The previous example was illegal because it contained two elements
   that were explicitly banned from appearing together in the propfind
   element.  However, XML is an extensible language, so one can imagine
   new elements being defined for use with propfind.  Below is the
   request body of a <TT>PROPFIND</TT> and, like the previous example, MUST be
   rejected with a 400 Bad Request by a server that does not understand
   the expired-props element.

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href ="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;?namespace href="http://www.foo.bar/standards/props/" as="E"?&gt;
   &lt;D:propfind&gt;
     &lt;E:expired-props/&gt;
   &lt;/D:propfind&gt;
</PRE>

<P>To understand why a 400 Bad Request is returned let us look at the
   request body as the server unfamiliar with expired-props sees it.

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href ="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;?namespace href="http://www.foo.bar/standards/props/" as="E"?&gt;
   &lt;D:propfind&gt;
   &lt;/D:propfind&gt;
</PRE>

<P>As the server does not understand the expired-props element, by the
   rules of XML, it MUST ignore it.  Thus the server sees an empty
   propfind, which by the definition of the propfind element is
   illegal.

<P>Please note that had the extension been additive it would not
   necessarily have resulted in a 400 Bad Request.  For example,
   imagine the following request body for a <TT>PROPFIND</TT>:

<PRE>   &lt;?xml version="1.0"?&gt;
   &lt;?namespace href ="http://www.iana.org/standards/dav/" as="D"?&gt;
   &lt;?namespace href="http://www.foo.bar/standards/props/" as="E"?&gt;
   &lt;D:propfind&gt;
     &lt;D:propname/&gt;
     &lt;E:leave-out&gt;*boss*&lt;/E:leave-out&gt;
   &lt;/D:propfind&gt;
</PRE>

<P>The previous example contains the fictitious element leave-out. Its
   purpose is to prevent the return of any property whose name matches
   the submitted pattern.  If the previous example were submitted to a
   server unfamiliar with leave-out, the only result would be that the
   leave-out element would be ignored and a propname would be executed.
