<html><head><title>Toolkit Integration Technique Benefits</title>
</head>
<body bgcolor="#FFFFFF" text="#000000">
<HR><TABLE WIDTH=100%><TR ALIGN=CENTER><TD><A HREF="prototype.html">Proof-of-Concept Prototype</A></TD><TD><A HREF="index.html#toc">Table of Contents</A></TD><TD><A HREF="relatedwork.html">Related Work</A></TD></TR><TR ALIGN=CENTER><TD>(Previous)</TD><TD></TD><TD>(Next)</TD></TR></TABLE><HR>
<H2>4. Benefits of toolkit integration technique</H2>
<P>
The TI technique provides the following benefits.
</P>
<BLOCKQUOTE>
<P>
<STRONG>Minimally-Invasive</STRONG>: The technique extends the services of the target toolkit without extensive modifications. In fact, the prototype of the previous section did not modify the Java AWT at all. Instead only new code was written to implement the hypermedia infrastructure. The HButton class gained most of its functionality via inheritance. This approach allows existing toolkit applications to continue to function, while allowing new applications to make use of the new services. Existing applications must be modified to use the integrated toolkit. The cost of doing so is mitigated by the near identical interface of the extended widgets in comparison to the original widgets.
</P>
<P>
<STRONG>Incremental</STRONG>: The target user-interface toolkit can be extended incrementally. Developers are not forced to wait for the entire integration to occur but can take advantage of integrated widgets as they become available. In fact, the minimum work required of a toolkit integrator as demonstrated by the proof-of-concept prototype is providing the interface to the hypermedia system and implementing the service which manages a connection with the OHS. At that point, widgets and common services can be incrementally built using an iterative development process.
</P>
<P>
<STRONG>Reusable</STRONG>: The extensions to the toolkit can be built such that code specific to a particular user-interface toolkit or OHS is localized. Subsequent implementations of the technique can reuse a large portion of the code implementing the extensions. The primary task in moving to a new toolkit or hypermedia system is mapping the new system to the abstract toolkit/hypermedia interfaces.
</P>
<P>
<STRONG>Maintainable</STRONG>: The resulting architecture is maintainable for two reasons. First, code specific to the user-interface toolkit or OHS is localized, making it easier to locate problems concerning their use. Second, changes to either one of the two subsystems results only in work for the toolkit integrator who must modify the extensions to comply with the changes or take advantage of new services. Application which use the integrated toolkit are completely shielded from changes to the hypermedia system, and in fact will transparently take advantage of any new services, once the extensions have been updated by the toolkit integrator. Changes to the user-interface toolkit may impact developers who use the integrated toolkit, but these changes would have affected them anyway.
</P>
<P>
<STRONG>Pervasive</STRONG>: Applications which contain integrated widgets provide hypermedia services pervasively throughout their user-interface. These services provide end-users with several advantages. First, hypermedia services are consistent across applications. Users can reuse the hypermedia-related skills learned in one application in all others. Second, users have the power to create hypermedia links throughout their computing environment. Third, depending on the link-traversal behavior implemented for the integrated widgets, users can perform a limited type of scripting in which traversals started in one application can control the actions of other applications. Finally, toolkit applications can interoperate with any existing client of the OHS. Since most open hypermedia systems have the power to integrate third-party applications, such as word processors, spreadsheets, and Web browsers, the range of applications and data which can be linked into the hyperweb is considerable.
</P>
<P>
<STRONG>Scalable</STRONG>: Finally, this technique is partially scalable in the sense that it should be possible to substitute some other system in place of the OHS and produce widgets that access the services of this system. For instance, as discussed in <A HREF="relatedwork.html">Section&nbsp;5</A>, groupware is a likely target domain for this technique. This type of scalability is limited, however, since there is no guarantee widgets integrated with one service will interoperate with the integrated widgets of another. In addition, there is no guarantee widgets can be integrated with multiple services in a cost-effective manner. Scalability issues are discussed further in <A HREF="futurework.html#sec6.3">Section&nbsp;6.3</A>.
</P>
</BLOCKQUOTE>
<HR><TABLE WIDTH=100%><TR ALIGN=CENTER><TD><A HREF="prototype.html">Proof-of-Concept Prototype</A></TD><TD><A HREF="index.html#toc">Table of Contents</A></TD><TD><A HREF="relatedwork.html">Related Work</A></TD></TR><TR ALIGN=CENTER><TD>(Previous)</TD><TD></TD><TD>(Next)</TD></TR></TABLE>
<hr>
</body></html>
