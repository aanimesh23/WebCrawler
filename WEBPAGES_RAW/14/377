<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
<title>CompSci 261, Winter 261, Homework 4</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script type="text/javascript" src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
</head>
<body>
<h1>CompSci 261, Winter 261, Homework 4</h1>
<ol>
<li><p>Suppose that, starting from an empty Fibonacci heap, we perform a sequence of $n$ insertions followed by a single delete-min operation. Describe, as a function of $n$, the numbers of nodes in each tree of the resulting heap.</p>
<p>(Hint: consider the binary representation of $n$. The answer will not depend on the priorities of the elements nor on the order in which trees are merged in the delete-min operation.)</p></li>
<li><p>Recall that, in any Fibonacci heap, the $i$th child of any node (for $i=1,2,3,\dots$ in sorted order by the times at which the children became children of that node) must have degree at least $\max(0,i-2)$.</p>
<ol type="a">
<li><p>Suppose that a tree $T$ obeys this property and that its root node has three children. What is the smallest possible total number of nodes in $T$?</p></li>
<li><p>Find a sequence of Fibonacci heap operations (insert an item with priority $x$, decrease the priority of an item from $x$ to $y$, or delete-min) such that performing these operations starting from an empty heap will construct a tree $T$ whose root has three children and whose total number of nodes is your answer to part (a).</p>
<p>(Hint: you will need to form a larger tree and then reduce its size by decrease-priority operations. It is ok for the heap to contain more than one tree as long as at least one of its trees solves the problem.)</p></li>
</ol></li>
<li><p>The solution to homework 1 problem 1 can be used to find a potential function such that, for a binary heap, the amortized time for an insertion operation is still $O(\log n)$ but the amortized time for a delete-min operation is $O(1)$.</p>
<ol type="a">
<li><p>With this potential function, what would be the amortized time to initialize a new binary heap with $n$ elements?</p></li>
<li><p>Can this idea be used to reduce the time bound for Dijkstra's algorithm using binary heaps? Explain how if yes, or why not if no.</p></li>
</ol></li>
</ol>
</body>
</html>
