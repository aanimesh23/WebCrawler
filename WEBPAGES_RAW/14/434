<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1">
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay">
<META HTTP-EQUIV="UPDATED" CONTENT="Tuesday, February 1, 2000 3:09 PM">
<TITLE>Notes on Scheme</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="21A2E910">
<META HTTP-EQUIV=KEYWORDS CONTENT="Scheme, high-order functions, recusion, list processing">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="Class notes for an introduction to functional programming in Scheme, with illustrations of high-order functions and a database of restaurants.  David G. Kay, Information and Computer Science, University of California, Irvine.">
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 1995-1999 by David G. Kay.  All rights reserved.">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<A NAME="_top"></A>
<P>
<FONT FACE="Palatino">Information &amp; Computer Science &#160; David G.
Kay
<BR>
UC Irvine &#160; ICS 141
<BR>
<FONT SIZE=5>Notes on Scheme</FONT></P>
<UL>
<LI>
<FONT FACE="Palatino">Scheme is a lexically scoped dialect of Lisp</FONT></LI>
<BR>
<UL>
<LI>
<FONT FACE="Palatino">Functional paradigm, but not purely; can do OOP, imperative,
even logic</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino">Dynamic storage is automatic (automatic garbage collection)</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino">Procedures are first-class objects (and all procedures
are functions)</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino">Unified numeric types</FONT></LI>
<BR><BR>
</UL>
<LI>
<FONT FACE="Palatino">Programming environment:  Traditionally interactive
and interpreted, but many non-student-oriented Scheme systems allow building
standalone applications.</FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Palatino">Data in Scheme:</FONT></LI>
<BR>
<UL>
<LI>
<FONT FACE="Palatino">Characters:  </FONT><FONT FACE="Courier"><TT>A</TT></FONT><FONT FACE="Palatino">-</FONT><FONT FACE="Courier"><TT>Z
a</TT></FONT><FONT FACE="Palatino">-</FONT><FONT FACE="Courier"><TT>z 0</TT></FONT><FONT FACE="Palatino">-</FONT><FONT FACE="Courier"><TT>9
% + - * / = ? ! #</TT></FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino">Atom:  String of characters without blanks</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino">Numbers (unified), booleans (</FONT><FONT FACE="Courier"><TT>#t</TT></FONT><FONT FACE="Palatino">,
</FONT><FONT FACE="Courier"><TT>#f</TT></FONT><FONT FACE="Palatino">), strings,
characters</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino">List:  Parentheses enclosing any combination of atom(s)
and list(s).  Nested; empty.</FONT></LI>
<BR>
<UL>
<LI>
<FONT FACE="Courier"><TT>cons</TT></FONT><FONT FACE="Palatino"> and </FONT><FONT FACE="Courier"><TT>list</TT></FONT><FONT FACE="Palatino">.</FONT><FONT FACE="Courier"><TT>
null?</TT></FONT><FONT FACE="Palatino"> (a predicate)</FONT></LI>
<BR>
<LI>
<FONT FACE="Courier"><TT>car</TT></FONT><FONT FACE="Palatino"> and </FONT><FONT FACE="Courier"><TT>cdr</TT></FONT><FONT FACE="Palatino">
(IBM 704; contents of address/decrement register).  More mnemonically, &quot;</FONT><FONT FACE="Courier"><TT>first</TT></FONT><FONT FACE="Palatino">&quot;
and &quot;</FONT><FONT FACE="Courier"><TT>rest</TT></FONT><FONT FACE="Palatino">&quot;</FONT></LI>
<BR>
</UL>
<LI>
<FONT FACE="Palatino">Vectors.  Structures.  </FONT><FONT FACE="Courier" SIZE=2><TT>(define-structure
rest (name cuisine phone dish price))</TT></FONT></LI>
<BR>
<UL>
<LI>
<FONT FACE="Palatino">=&gt; </FONT><FONT FACE="Courier"><TT>(make-rest n
c p d $)</TT></FONT><FONT FACE="Palatino">; constructor of a rudimentary
object</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino">=&gt; </FONT><FONT FACE="Courier"><TT>(rest? R)</TT></FONT><FONT FACE="Palatino">;
type checker</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino">=&gt; </FONT><FONT FACE="Courier"><TT>(rest-name R)</TT></FONT><FONT FACE="Palatino">;
selector.  Similarly for cuisine, phone, dish, price</FONT></LI>
<BR>
</UL>
</UL>
<LI>
<FONT FACE="Palatino">Evaluation of expressions:  (  <I><U><FONT SIZE=2>FUNCTION</FONT></U>
  <U><FONT SIZE=2>ARGUMENTS</FONT></U> </I> ).  Read-eval-print loop.</FONT></LI>
<BR>
<UL>
<LI>
<FONT FACE="Palatino">Quoting:  So you don't evaluate &quot;constants&quot;.
 </FONT><FONT FACE="Courier"><TT>(quote blah)</TT></FONT><FONT FACE="Palatino">,
or </FONT><FONT FACE="Courier"><TT>'blah</TT></FONT><FONT FACE="Palatino">.</FONT></LI>
<BR>
</UL>
<LI>
<FONT FACE="Courier"><TT>if, cond</TT></FONT><FONT FACE="Palatino"> -- control
structures for selection.</FONT></LI>
<BR>
<LI>
<FONT FACE="Courier"><TT>lambda</TT></FONT><FONT FACE="Palatino">, </FONT><FONT FACE="Courier"><TT>let</TT></FONT><FONT FACE="Palatino">
-- creating procedures (which are first-class objects) and local variables</FONT></LI>
<BR>
<LI>
<FONT FACE="Courier"><TT>display</TT></FONT><FONT FACE="Palatino"> and </FONT><FONT FACE="Courier"><TT>newline</TT></FONT><FONT FACE="Palatino">
-- to generate output (as a side effect, apart from return value)</FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Palatino">Scheme reading list (in roughly ascending order by
difficulty):</FONT></LI>
<BR>
<UL>
<LI>
<FONT FACE="Palatino"><I>The Schemer&#39;s Guide,</I> 2nd ed., by Ferguson
and Kaufman (Schemers, Inc., 1996)</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino"><I>Simply Scheme,</I> by Brian Harvey and Matthew
Wright (MIT Press, 1994)</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino"><I>Concrete Abstractions,</I> by Hailperin, Kaiser,
and Knight (PWS, 1999)</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino"><I>The Schematics of Computation</I> by Manis and
Little (Prentice-Hall, 1995)</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino"><I>The Little Schemer,</I> 4th ed., by Friedman and
Felleisen (SRA 1996)</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino"><I>Scheme and the Art of Programming,</I> by Springer
and Friedman (McGraw-Hill)</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino"><I>Structure and Interpretation of Computer Programs,</I>
2nd ed., by Abelson and Sussman  &#160; (MIT/McGraw-Hill, 1996)</FONT></LI>
<BR>
<LI>
<FONT FACE="Palatino">See also </FONT><FONT FACE="Courier"><TT><A HREF="http://www.ics.uci.edu/~kay/courses/22/scheme-refs.html">http://www.ics.uci.edu/~kay/courses/22/scheme-refs.html</A></TT></FONT></LI>
<BR><BR>
</UL>
<LI>
<FONT FACE="Palatino">Defining procedures</FONT><FONT FACE="Courier"><TT>--lambda</TT></FONT></LI>
<BR><BR>
<UL>
<LI>
<FONT FACE="Courier"><TT>(define Thai?</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160; (lambda (R)</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; (equal? 'Thai (rest-cuisine
R))))</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Courier"><TT>(define match-cuisine? &#160; ; Let user specify
which cuisine</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160; (lambda (R C) &#160;  &#160; ; to
check for</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; (equal? C (rest-cuisine R))))</TT></FONT>
<BR>
<HR>
</LI>
<BR>
</UL>
<LI>
<FONT FACE="Palatino">Define a restaurant collection ADT, as a list of restaurants.</FONT></LI>
<BR><BR>
<UL>
<LI>
<FONT FACE="Palatino">(The following examples take advantage of procedures
being first-class objects in Scheme.  That is, a procedure can take procedures
as arguments and can also <I>return</I> a procedure.  As you go through
the following examples, ask yourself, &quot;What is the &#39;data type&#39;
of each argument?  What is the type of the returned value?&quot;  In some
cases, the answer will be, &quot;A procedure [that itself takes some arguments
and returns some value].&quot;)</FONT>
<BR>
<FONT FACE="Palatino" SIZE=1>&#160;  </FONT></LI>
<BR>
<LI>
<FONT FACE="Courier"><TT>(define find-thai   ; return the first Thai restaurant
in RC</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160; (lambda (RC) </TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; (cond </TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160; ((null? RC) '()) </TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160; ((Thai? (first RC))
(first RC)) </TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160; (else (find-thai (rest
RC))))))</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Courier"><TT>(define find-match  ; return restaurant that satisfies
any &#39;test?&#39;</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160; (lambda (RC test?) </TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; (cond </TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160; ((null? RC) '()) </TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160; ((test? (first RC))
(first RC)) </TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160; (else (find-match
(rest RC) test?)))))</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Palatino">Call with </FONT><FONT FACE="Courier"><TT>(find-match
RC Thai?)</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Palatino">Define </FONT><FONT FACE="Courier"><TT>Chinese?</TT></FONT><FONT FACE="Palatino">
or other predicates to call </FONT><FONT FACE="Courier"><TT>find-match</TT></FONT><FONT FACE="Palatino">
with.</FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Courier"><TT>(find-match RC </TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160; (lambda (R) </TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; (equal? 'Indonesian (rest-cuisine
R))))</TT></FONT></LI>
<BR><BR>
<UL>
<LI>
<FONT FACE="Palatino">You can use &quot;anonymous lambda&quot; rather than
making up a name.</FONT></LI>
<BR><BR>
</UL>
<LI>
<FONT FACE="Palatino">A function that returns a function,--this will build
a checker for any cuisine.</FONT>
<BR>
<FONT FACE="Courier"><TT>(define make-cuisine-checker &#160; </TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160; (lambda (C) &#160;    ; (make-cuisine-checker
C) takes a cuisine</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; (lambda (R)  ;  and returns
a function that takes a Rest.</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;                 ;   and checks whether its
cuisine matches C.</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160; (equal? C (rest-cuisine
R)))))</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Courier"><TT>(define Indonesian? (make-cuisine-checker 'Indonesian))</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Courier"><TT>(find-match RC Indonesian?)</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Courier"><TT>(find-match RC (make-cuisine-checker 'Indonesian))</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Courier"><TT>(define make-checker</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160; (lambda (field-selector comparison-function
value)</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; (lambda (R)</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;     (comparison-function (field-selector
R) value))))</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Courier"><TT>(define cheap? (make-checker rest-price &lt; 10.00))</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Courier"><TT>(find-match RC cheap?)</TT></FONT>
<HR>
</LI>
</UL>
<LI>
<FONT FACE="Palatino">List manipulation [Assume the restaurant collection
is a Lisp list]</FONT></LI>
<BR><BR>
<UL>
<LI>
<FONT FACE="Courier"><TT>(define all-cheap?</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160; (lambda (Rlist)</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; (cond ((null? Rlist) #t)</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160;  ((cheap? (first Rlist))
</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160;  &#160; (all-cheap?
(rest Rlist)))</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160;  (else #f))))</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Courier"><TT>(define all-cheap-restaurants</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160; (lambda (Rlist)</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; (cond ((null? Rlist) '())</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;       ((cheap? (first Rlist))</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160;     (cons (first Rlist)</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160;      &#160;      (all-cheap-restaurants
(rest Rlist))))</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;       (else (all-cheap-restaurants
(rest Rlist))))))</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Courier"><TT>(define find-all-matches</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160; (lambda (Rlist test?)</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; (cond ((null? Rlist) '())</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;       ((test? (first Rlist))</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160;     (cons (first Rlist)</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160;  &#160;      (find-all-matches
(rest Rlist) test?)))</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;       (else (find-all-matches
(rest Rlist) test?)))))</TT></FONT></LI>
<BR><BR>
<LI>
<FONT FACE="Courier"><TT>(define remove-all-matches</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160; (lambda (Rlist test?)</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160; (cond ((null? Rlist) '())</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;       ((test? (first Rlist))</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160;     (remove-all-matches
(rest Rlist) test?))</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;       (else (cons (first Rlist)</TT></FONT>
<BR>
<FONT FACE="Courier"><TT>&#160;&#160;  &#160;  &#160;  &#160;         (remove-all-matches
(rest Rlist)  &#160;  &#160;  &#160;  &#160;                           
 test?))))))</TT></FONT></LI>
<BR><BR>
</UL>
<LI>
<FONT FACE="Palatino">Notice that </FONT><FONT FACE="Courier"><TT>find-all-matches</TT></FONT><FONT FACE="Palatino">
and </FONT><FONT FACE="Courier"><TT>remove-all-matches</TT></FONT><FONT FACE="Palatino">
are identical except that the actions in the </FONT><FONT FACE="Courier"><TT>test?</TT></FONT><FONT FACE="Palatino">
clause and the </FONT><FONT FACE="Courier"><TT>else</TT></FONT><FONT FACE="Palatino">
clause are interchanged.  We can combine these by including a boolean parameter
(true if we want to keep matches, false if we want to remove them) and applying
some logic to recognize that we want to </FONT><FONT FACE="Courier"><TT>cons</TT></FONT><FONT FACE="Palatino">
the first item onto the result of the recursive call if the test and the
keep-matches parameter are equal--both true or both false. </FONT>
<BR><BR>
<FONT FACE="Courier" SIZE=2><TT>(define handle-all-matches</TT></FONT>
<BR>
<FONT FACE="Courier" SIZE=2><TT>&#160;&#160; (lambda (Rlist test? keep-matches)</TT></FONT>
<BR>
<FONT FACE="Courier" SIZE=2><TT>&#160;&#160;  &#160; (cond</TT></FONT>
<BR>
<FONT FACE="Courier" SIZE=2><TT>&#160;&#160;  &#160;   ((null? Rlist) '())</TT></FONT>
<BR>
<FONT FACE="Courier" SIZE=2><TT>&#160;&#160;  &#160;   ((equal? keep-matches
(test? (first Rlist)))</TT></FONT>
<BR>
<FONT FACE="Courier" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (cons (first
Rlist)</TT></FONT>
<BR>
<FONT FACE="Courier" SIZE=2><TT>&#160;&#160;  &#160;  &#160;  &#160; (handle-all-matches
(rest Rlist) test? keep-matches)))</TT></FONT>
<BR>
<FONT FACE="Courier" SIZE=2><TT>&#160;&#160;  &#160;   (else (handle-all-matches
(rest Rlist) test? keep-matches)))))</TT></FONT>
<BR><BR>
<FONT FACE="Courier" SIZE=2><TT>(define find-all-matches</TT></FONT>
<BR>
<FONT FACE="Courier" SIZE=2><TT>&#160;&#160; (lambda (Rlist test?)</TT></FONT>
<BR>
<FONT FACE="Courier" SIZE=2><TT>&#160;&#160;  &#160; (handle-all-matches
Rlist test? #t)))</TT></FONT>
<BR><BR>
<FONT FACE="Courier" SIZE=2><TT>(define remove-all-matches</TT></FONT>
<BR>
<FONT FACE="Courier" SIZE=2><TT>&#160;&#160; (lambda (Rlist test?)</TT></FONT>
<BR>
<FONT FACE="Courier" SIZE=2><TT>&#160;&#160;  &#160; (handle-all-matches
Rlist test? #f)))</TT></FONT></LI>
</UL>
<BR CLEAR=ALL>
</BODY>
</HTML>
