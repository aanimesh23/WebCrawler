<HTML>
<head>
<title>  Java  </title>
<h1> Why Java? </h1>
<hr><hr>
 <em> Java: a language for team programming </em>
<h3> Java Texts </h3>
  <ul>
   <li> <em>The Java Programming Language </em> by Ken Arnold and James
   Gosling. 
    <br> Covers fundamentals of language, but not important packages.
   <li> <em> Computing Concepts using Java Essentials </em> by Cay Horstmann.
   <br> Covers Java for the beginning programming student. Used in 1A.
   <li> <em>Core Java 2nd Ed </em> by Cay Horstmann and Gary Cornell
    <br> language + applets, user-interface, delegation event-model (JDK 1.1),
     and new graphical widgets (e.g. scrollpane).
   <li> <em> Java in a Nutshell (2nd Edition)</em> (JDK 1.1)
   <br> A complete  brief description of the language plus a list of the
  methods and classes in the JDK 1.1 packages. JDK 1.0 had 8 packages
and JDK 1.1 has 23. Moreover the old packages have been extended.
These new packages cover important extensions such
as JavaBeans, reflections, serialization, JAR, and a new delegation
event-model which replaces the old model.
   <li> <em> Thinking in Java </em> by Bruce Eckel. 
<br>This text covers
 JDK 1.1 with some information about JDK 1.2.  It is meant
for the serious programmer who
has already programmed in some language, preferably C++. I like this
text a lot. He provides practical advice. The text covers  the
topics in Java in a Nutshell in greater depth.
   <li> <em>Graphic Java 1.1: Mastering the AWT </em> 2nd Ed.
   <br> thorough discussion of components, lightweight components, custom
  components. More than you want  to know. Good reference.
   <li> <em>Symantic Visual Caf&eacute; Sourcebook </em> by Cary Jardin and Pam
 Dixon. A complete guide to Creating Java Applets and applications with
 <em>Visual Caf&eacute; </em>. Note: only similar to Visual Cafe Pro.
   <li> For an up-to-date discussion of the Java and its use, see  
 http://www.javasoft.com/.
   <li> Any book that covers JDK1.1 that you can learn from. Everyone
  learns differently.
 </ul>
<h3> Java History </h3>
   <ul>
    <li> Sun (Gosling) creates Oak, a language for embedded systems.
    <li> Specification of virtual machine yields platform independence.
    <li> Internet access promotes multi-platform languages.
    <li> Oak becomes Java.
    <li> World goes crazy.
    <li> Warning: Java is changing.
   </ul>
<h3> Object-Oriented Language History </h3>
  <ul>
    <li>  1967  Simula - perceived as simulation language
    <li>  1970's study: limited programmer memory/comprehension
    <li>  1980's Smalltalk -  slow,  graphical, totally object-oriented
    <li>  1980's Object  Pascal (basis of Delphi) dynamic types, database
          and window event access
    <li>  1986  Eiffel: correctness
    <li>  1985 (first release) C++ : a better, object-oriented C
    <li>  1990 CLOS  Common Lisp Object System
    <li>  1995 Sun released Java : multi-platform, maintenance
   </ul>
<h3> Special Purpose Languages </h3>
 Matlab, Mathematica, SPSS, Latex, html, vrml, ...
<h3> Evolution of Programming Languages </h3>
  <ul>
    <li> More than 1000 programming languages: Why?
    <li> User Problems  --> Software Solutions --> Hardware Implementations
    <li> Machine Languages --> Assembly Language --> General Purpose Languages
    <li> Early Concerns
        <ul>
           <li> Efficiency
           <li> Code size
           <li> Compiler correctness
           <li> Compiler uniformity
         </ul>
    <li> Trends
    <ul>
    <li>  addresses --> variable --> local variable --> records
    <li>  instructions --> macros --> functions and procedures
    <li>  run-time errors --> compile-time errors --> assertions+exceptions
    <li>  code gets shorter
    <li>  languages and compilers more complicated
    <li>  increased functionality
    <li> increased information hiding via encapsulation
    <li>  run-time increases
   </ul>
    <li> What have we learned?
    <li> Multiple Goals: Sometimes  goals conflict, other times they
         support one another.
    <li> Language design decisions relate to a preference of one goal over
     another, e.g. automatic array bounds checking, pointer arithmetic,
     memory release, etc. 
    <li> Where do people (cognitive abilities and foibles) fit in?
    <li> What's wrong/right with Java.
  </ul>
<h3>General Purpose Programming Language Goals </h3>
  For a good discussion of programming language design issues see:
 <em> Design and Evolution of C++ </em> by Bjorne Stroustrup.
<br> For principles of Object-oriented design see
</ul>
 <h3> Java summary </h3>
<ul>
 <li> A Java program is a collection of classes definitions plus
   one special class, called the "driver".
 <li> Every class is a descendant of the class Object. 
 <li> Java is Object-oriented, simpler than C++, safer than C++ (not always),
   multi-programmer, multi-platform, graphical, efficient (but slower than
   C++), comprehensible.
 </ul>
<h3> What Java doesn't have </h3>
 Are these bad or good features?
  <ul>
    <li> Assertions (pre, post, invariant)
    <li> Multiple Inheritance
    <li> Genericity:
      <ul>
        <li> can't have types as arguments
        <li> e.g.  can't have Vector of reals where compiler
       checks type.
     </ul>
    <li> Classes can't be created dynamically
  </ul>
 <h3> Warning: Java is not extension of C </h3>
 <h3> Java Differences with C </h3>
 <ul>
   <li> Most C expressions are legal in Java, but not all.
   <li> <b>goto </b> is a reserved word in Java, but it does not have
        a goto statement. Instead Java has a labelled break statement.
   <li> Java has the class String, which has over 30 methods and several
     constructors. The method length() returns the length of the string.X
   <li> You cannot do pointer arithmetic in Java.
   <li> You cannot free memory in Java. Instead Java uses garbage
        collection, which runs  asynchronously in a separate thread.
   <li> You cannot pass functions as parameters in Java. Instead
   you define a function-object class and pass these objects around.
   <li> There are no global functions or variables in Java.
   <li> You cannot pass function pointers in Java. 
   <li> Arrays are unusually objects in Java. 
     <ul>
       <li>  int[] myarray = new int[10]; creates an array of integers of size 10.
        <li> Arrays are created dynamically at run-time.
       <li> As is C, array indexing starts at 0.
       <li> myarray.length returns the size of the array. 
       <li> Array bounds are checked at runtime.
       <li> Unlike most objects, you cannot inherit from arrays.
      </ul>
 </ul>
<h2> <a href="classes.html"> Classes </a> </h2>
<h2> <a href="inheritance.html"> Inheritance </a></h2>
<h2> <a href="interfaces.html"> Interfaces </a> </h2>
<h2> <a href="applet.html"> Applets </a> </h2>
<h2> <a href="ui.html"> User-Interface </a> </h2>
<h2> <a href="event.html"> Event Handling </a> </h2>






<h3> Glossary </h3>
  <ul>
   <li> An <em> Abstract method </em> is a method prototype, i.e.
   one without a body.
   <li> <em> Abstract class </em> has at least one abstract method.
   <li> An <em> interface </em> specifies only abstract methods and
       static data members.
   <li> The <em> signature </em> of a method is the types of the
    arguments together with the method name.  It does not include the
    return type.
   <li> The <em> scope </em> of a variable is the region in the
    program where the variable can be accessed.
   <li> The <em> lifetime </em> of a variable is the range of instructions
   where storage is bound to the variable.
   <li> <em> Declaring </em> a variable/object allocates no storage and
      notifies the compiler that the variable is defined elsewhere.
  <li> <em> Defining </em> a variable/object causes storage to be allocated
     and defines the meaning or interpretation of the storage.
  <li> <em> Short-circuit </em> evaluation means that boolean expressions
are evaluate only as far as they need to be. Once the value is known,
further evaluation stops.
  <li> <em> Static </em> members are globals to the class. 
  <li> <em> Max Gobble rule</em>  means the lexical analyzer defines a
lexeme to be the longest string that matches a keyword. For example
  i+++j means i++ + j and not i + ++j.
 <li> A <em>package </em> is a related collection of classes. If no
 accessibility priviledges are specified, each member of the collection
 is visible to all  within the package.

 </ul>


<H1> Style Guidelines  </H1>
<hr><hr>

<ul>
<li>  Braces should line-up one under another.
<li>  Spaces should  support parsing.
<li>  Comments should explain what a method does, not how.
<li>  For documentation use javadoc.
<li>  No magic constants.
</ul>

<hr>
<H1> Design Guidelines </H1>
<hr><hr>

<ul>
<li> If code isn't correct, it is worthless.
<li> Code should be understandable.
<li> Code should be as efficient as it needs to be.
<li> Code should be modifiable.
<li> Use object decomposition, problem decomposition,
    and function decomposition.
<li> Encapsulate.
<li> Copy and edit suggests making a class.
</ul>

</BODY>
</HTML>
