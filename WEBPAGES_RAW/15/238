<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="../../course.css" type="text/css" />

<title>ICS 33 Summer 2013, Unit Testing and Test-Driven Development with unittest, Step-by-Step Examples</title>
</head>

<body>

<div class="navbar">

<p>
ICS 33 Summer 2013 |
<a href="../../index.html">News</a> |
<a href="../../CourseReference.html">Course Reference</a> |
<a href="../../Schedule.html">Schedule</a> |
<a href="../../ProjectGuide">Project Guide</a> |
<a href="../../CodeExamples">Code Examples</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 33 Summer 2013<br />
   Unit Testing and Test-Driven Development with <i>unittest</i><br />
   Step-by-Step Examples</p>

</div>

<div class="section">

<hr />

<p class="title">The examples</p>

<p>In lecture, we went through an iterative process of developing some functionality for a class called SongCollection, which, as its name suggests, was intended to define a kind of object that stores and manages a collection of songs.  This document briefly explains the motivation behind each step we took, then provides links to the complete version of the code (including, of course, the tests) after each complete iteration.  (Each iteration added one small piece of functionality to our class.)</p>

</div>

<div class="section">

<hr />

<p class="title">Iteration 1: The size of a newly-created collection is zero</p>

<p>Our first iteration adds one simple piece of functionality to our SongCollection class: ensuring that the size of a newly-created collection is zero.  We tried our best in lecture to follow the steps explained in the <a href="index.html">What We Did and How We Did It</a> document; I'll follow them more rigorously here.  It's not a bad idea to follow the steps religiously at the beginning; as you get more accustomed to test-driven development and you understand the way it requires you to think about writing programs, you can feel a bit more free to take some liberties that you know don't violate the spirit of the process.</p>

<p class="subtitle">Writing a test</p>

<p>The first step is writing a test of our new feature, before we've actually written the feature.  Using the <b>unittest</b> module in Python, we're able to write a minimal amount of code to perform the test.  By leveraging the <b>unittest</b> module's handling of many of the tedious details, we can concentrate our efforts on what we're trying to test (i.e. what the intended behavior is), rather than worrying about details of how to gather test results and present them to a user.</p>

<p>We'll begin by defining a class to test our SongCollection class; a reasonable name for it is SongCollectionTest.  The SongCollectionTest class will contain all of the tests that are focused on our SongCollection class.  In order to plug into the <b>unittest</b> framework, our class needs to inherit from the built-in <b>unittest.TestCase</b> class.  So we'll start by creating such a class.</p>

<pre>
    class SongCollectionTest(unittest.TestCase):
        pass
</pre>

<p>Next, we need a test that checks whether the size of a newly-created collection is zero.  To write a <b>unittest</b>-based test, we add a method to a test class whose name begins with <b>test_</b>.  The name we choose for the test is critical; it should say specifically the behavior we expect.  I quite often write tests with fairly long names, because <b>unittest</b> reports failures by showing you the name of the test that failed; quite often, that, along with a short error message, is all you'll need to see in order to understand how to fix a problem.  A good name might be <b>test_newly_created_collections_have_length_zero</b>.</p>

<p>Like any other Python method, a <b>unittest</b> test method is considered to have failed if it raised an exception and succeeded if it doesn't.  Assertions are used to implement these methods easily.  An assertion is something that you believe should be true at some point in your test &mdash; that two values are equal, that a Boolean expression is true, that a function will raise an exception, etc.  If the asserted behavior occurs, no exception is raised; if it isn't, an exception is raised.  In this case, we're interested in knowing whether two things are equal: the length of a new collection and zero.  Zero is what we expect; the size of the collection is what we observe.  The method <b>self.assertEqual</b> (which, along with other "assert" methods is inherited from <b>unittest.TestCase</b>) can be called to make this kind of comparison between what we expect and what we observe.  It raises an exception if the comparison fails and has no effect if it succeeds.</p>

<pre>
    class SongCollectionTest(unittest.TestCase):
        def test_newly_created_collections_have_length_zero(self):
            collection = SongCollection()
            self.assertEqual(len(collection), 0)
</pre>

<p class="subtitle">Preparing to run our test</p>

<p>There are a variety of ways to execute <b>unittest</b> test methods, but the simplest is for each of your test modules to contain an <b>if __name__ == '__main__':</b> block that executes all of the tests in that module.  To do that, you'd add this to the end of your test module.</p>

<pre>
    if __name__ == '__main__':
        unittest.main(exit = False)
</pre>

<p>Executing this module (e.g., using F5 in IDLE) will cause all of the test methods in this module to automatically be found and executed for you; you'll see the result of the tests as the module's output.</p>

<p class="subtitle">Making the test run</p>

<p>We now run the test, which fails with the following error message:</p>

<blockquote>
NameError: global name 'SongCollection' is not defined
</blockquote>

<p>The error message is telling us that the SongCollection class is missing.  This is no surprise, since we haven't created it yet.  In order to make the test run, we'll need to create one &mdash; in a separate module, as tests shouldn't live in the same module as the code under test, because tests aren't really a part of the program we're building; they're just a tool to help us build it.</p>

<p>Since creating a SongCollection class is all the error messages are telling us, that's all we should do, then try running the test again.  So we'll create one in a separate module:</p>

<pre>
    class SongCollection:
        pass
</pre>

<p>Then import it from our new module.  Suppose that module is called <b>songs</b>; if so, we'd add this to the top of our test module:</p>

<pre>
    from songs import *
</pre>

<p>Now when we run the tests again, we get a different error message:</p>

<blockquote>
TypeError: object of type 'SongCollection' has no len()
</blockquote>

<p>The problem here is that we're asking for the length of a SongCollection object, but not all objects have a length.  If we want an object to have a length, as we've seen, we write a <b>__len__</b> method.  We don't care at this stage what it does; we just want this problem to be solved.  So we'll write a method that always returns 0.</p>

<pre>
    class SongCollection:
        def __len__(self):
            return 0
</pre>

<p>Next, we'll run the test, which succeeds.  The success, in this case, is accidental, but nice.  If the test had failed, we'd now write the minimum amount of code that makes the test pass.</p>

<p>It may make you a little bit uncomfortable to have written code that is clearly going to be wrong in a future iteration, but you have to remember what the goal is: we use tests to drive the behavior we're looking for.  If there's no test for it, our code isn't expected to do it.  The only test we have involves asking an empty collection for its length, and our SongCollection handles that correctly.  So, for now, we're on stable ground, and we'll worry about future iterations when we get to them.</p>

<p class="subtitle">Refactoring</p>

<p>Since we're just getting started, there aren't any improvements that can be made in either the test or the code, so we're done with the first iteration.  What we have now is a SongCollection class with our one feature: the size of a new list is zero.  Also, we have a test that will allow us to verify that this feature will continue to work going forward.</p>

<p class="subtitle">The test and the code at the end of the iteration</p>

<ul>
  <li><a href="Iteration1/songs_test.py">songs_test.py</a></li>
  <li><a href="Iteration1/songs.py">songs.py</a></li>
</ul>

</div>

<div class="section">

<hr />

<p class="title">Iteration 2: The size of a collection after creating it and adding a song is 1</p>

<p>In this iteration, we'll add one piece of functionality: verifying that after adding one song to a newly-created collection, the size of the collection is 1.  We'll begin by writing the test.</p>

<pre>
    class SongCollectionTest(unittest.TestCase):
        ...

        def test_after_adding_one_song_to_a_collection__length_is_1(self):
            collection = SongCollection()
            collection.add(Song())
            self.assertEqual(len(collection), 1)
    }
</pre>

<p>Now we need to make the test run, which necessitates a Song class.  Since we're not depending on the Song class actually doing anything, we won't need to put any code into it yet.  (Remember: we don't write code until we have a test that shows that it will work when you're done with it.)</p>

<pre>
    class Song:
        pass
</pre>

<p>We also need to put an <b>add</b> method into the SongCollection class.  Note that the goal, at present, is to make the test run, so we don't write any code into this method, since the method will run without any code in it.</p>

<pre>
    class SongCollection:
        ...

        def add(self, song_to_add):
            pass
</pre>

<p>At this point, the test will run, but it will fail, since, of course, we haven't added the code to make the size of the list be 1 after we add a song.  The fix for this problem is to add a new attribute to SongCollection that stores the number of songs.  This requires a constructor to initialize it, along with minor changes to the __len__() and add() methods.</p>

<pre>
    class SongCollection:
        def __init__(self):
            self._count = 0

        def __len__(self):
            return self._count

        def add(self, song_to_add):
            self._count = 1
</pre>

<p>Notice that we did something here that we know will be wrong later: we set the _count attribute to 1 in the add() method, rather than adding 1 to it.  The reason is that the code we wrote is a direct way to make our test pass.  We'll worry about the case of adding two or more songs in the next iteration; for now, the only thing we want is for the number of songs to be 1 after we add a song.</p>

<p>After every little step we take in making these modifications, we should run the tests.  This keeps us honest and helps us to ensure that none of the changes we're making will break the functionality that already worked.  And once the tests pass, we're done and ready to move on.</p>

<p>Here are links to the completed code at this point:</p>

<ul>
  <li><a href="Iteration2/songs_test.py">songs_test.py</a></li>
  <li><a href="Iteration2/songs.py">songs.py</a></li>
</ul>

<p class="subtitle">It's time for a little refactoring</p>

<p>Always remember that when you've implemented the functionality you want in one iteration, you're not actually done with the iteration; you still need to see if any refactoring can be done, either on the code or the tests.  At this point, there are two tests in my SongCollectionTest class that create and manipulate a SongCollection.  We also have a pretty good sense that all of our tests will probably need to do this.  That doesn't seem like such a big deal on the face of it; what's the harm of having to create the collection each time?  Consider what would happen if we had 25 tests written, then we changed our design so that the SongCollection constructor required a parameter.  What would we have to do to all 25 tests?  Ugh!  By isolating the code that creates SongCollections for our tests in one place, we set things up so this will only have to change in one place.</p>

<p>The <b>unittest</b> framework in Python provides a nice solution to this problem.  If you write a <b>setUp</b> method in your test class, it will be called automatically (on a freshly-created object of your SongCollectionTest class) each time one of your tests is executed, so each test will be executed in a fresh environment, with <b>setUp</b> providing common initialization.</p>

<p>In this case, we could create a SongCollection object in the <b>setUp</b> method and store it in an attribute, so that we can use it in each of the test methods.</p>

<pre>
    class SongCollectionTest(unittest.TestCase):
        def setUp(self):
            self._collection = SongCollection()

        def test_newly_created_collections_have_length_zero(self):
            self.assertEqual(len(self._collection), 0)

        def test_after_adding_one_song_to_a_collection__length_is_1(self):
            self._collection.add(Song())
            self.assertEqual(len(self._collection), 1)
</pre>

<p>Once again, we'll be careful to make only one very minor change at a time, running the tests along the way to ensure that we haven't made any mistakes.  This refactoring hasn't changed what the tests do in any meaningful way, but it has improved the design of the code somewhat, eliminating some duplicate code.  That's the goal of refactoring: improve the design of the code without changing what it does.</p>

<p>Similarly, we realize that we're creating a Song by using the Song constructor, which will work until we get further with our code and realize that we need Songs to have artists, titles, and so on; if that Song constructor even starts requiring parameters, we may have a lot of changes to make in our tests.  So we'll isolate the code that creates a new Song in one place, too.</p>

<pre>
    class SongCollectionTest(unittest.TestCase):
        def setUp(self):
            self._collection = SongCollection()

        def test_newly_created_collections_have_length_zero(self):
            self.assertEqual(len(self._collection), 0)

        def test_after_adding_one_song_to_a_collection__length_is_1(self):
            self._collection.add(self._create_test_song())
            self.assertEqual(len(self._collection), 1)

        def _create_test_song(self):
            return Song()
</pre>

<p>The new version of the code is available at this link:</p>

<ul>
  <li><a href="Iteration2.1/songs_test.py">songs_test.py</a></li>
  <li><a href="Iteration2.1/songs.py">songs.py</a></li>
</ul>

</div>

<div class="section">

<hr />

<p class="title">Iteration 3: Continuing to add songs will continue to increase the size by 1 each time</p>

<p>Combined with the functionality from the first two iterations, this iteration will allow us to feel confident that the handling of the size of the collection as we add songs will continue to work no matter how many songs we add.  As always, we'll start with the test, which will verify that the size increases each time we add one of a hundred songs.</p>

<pre>
    class SongCollectionTest(unittest.TestCase):
        ...

        def test_continuing_to_add_songs_continues_to_increase_length(self):
            for song_number in range(1, 101):
                self._collection.add(self._create_test_song())
                self.assertEqual(len(self._collection), song_number)
</pre>

<p>The test runs, but it doesn't pass, since the size of the collection will remain 1, even after adding two or more songs.  We can fix this problem by making a relatively minor change in the add() method in the SongCollection class:</p>

<pre>
    class SongCollection:
        ...

        def add(self, song_to_add):
            self._count += 1
</pre>

<p>Now the tests pass!  Here is the complete set of code, as it stands now:</p>

<ul>
  <li><a href="Iteration3/songs_test.py">songs_test.py</a></li>
  <li><a href="Iteration3/songs.py">songs.py</a></li>
</ul>

<p>The only remaining question is whether any refactoring can be done.  Everything smells pretty good at this point, so we'll move on to our next iteration.</p>

</div>

<div class="section">

<hr />

<p class="title">Iteration 4: After a song is added to the collection, the collection contains the song</p>

<p>We now tackle the problem of ensuring that the collection contains a song after that song has been added.  First, we need a test.</p>

<pre>
    class SongCollectionTest(unittest.TestCase):
        ...

        def test_after_adding_song_to_collection__collection_contains_song(self):
            new_song = self._create_test_song()
            self._collection.add(new_song)
            self.assertTrue(self._collection.contains(new_song))
</pre>

<p>Notice that this test uses a different assertion method, called <b>assertTrue()</b>, which takes a Boolean value as a parameter and raises an exception if the value is not true.  This is how we can assert a more general condition than "This value is equal to that value."  In this case, we want to assert that it's true that the collection contains the song after having added it.</p>

<p>(Note that there is a fairly long list of assert methods available, which are listed in <a href="http://docs.python.org/3.3/library/unittest.html">the documentation for the <b>unittest</b> module</a>.)</p>

<p>Of course, when we run the test, we discover that it fails, because we've dreamed up a <b>contains()</b> method that doesn't yet exist.  So, we'll need to add one to the SongCollection class.</p>

<pre>
    class SongCollection:
        ...

        def contains(self, song_to_find):
            return True
</pre>

<p>Again, we've focused on solving only the problem at hand, so our new method is returning <b>True</b> in every case, even though we know that will be wrong in the future.</p>

<p>After making this change, our test runs successfully, so we're ready to move on.  We could continue by anticipating that our next test would be opposite condition &mdash; ensuring that a collection does not contain a song that has not been added &mdash; so, at this point, I'll need to choose an underlying collection and start storing songs in it.  Since we're not sure at this point what kinds of searches we might be doing, we might as well begin with the simplest data structure: a list.  If we discover later that we need fast searching based on some key, we can make a different decision about our data structure and implement the appropriate changes.  Remember: the goal of test-driven development is to write the minimum amount of code to make a test pass, with decisions deferred until they need to be made for some justifiable reason.  This doesn't mean that lists are the right data structure ultimately, but that they are often the right first choice until we get a better idea of what we'll actually need.</p>

<p>The updated version of the program, after adding support for our new feature and verifying that the tests indeed pass, looks like this:</p>

<ul>
  <li><a href="Iteration4/songs_test.py">songs_test.py</a></li>
  <li><a href="Iteration4/songs.py">songs.py</a></li>
</ul>

<p class="subtitle">Do we need any refactoring?</p>

<p>The test class smells pretty good at this point, so no refactoring is necessary.  But something is rotten in the SongCollection class.  It's doing work that lists already do, namely the tracking of the number of songs stored in the collection.  We need to remove our own code to track this number and let the list do the work instead.  As always, we make one minor change at a time, compiling and re-running the tests at each step to make sure we haven't screwed up.  Note that we do not need to write any new tests; we want the program to behave the same way, but to improve its design.</p>

<p>After this process, the code looks like this:</p>

<ul>
  <li><a href="Iteration4.1/songs_test.py">songs_test.py</a></li>
  <li><a href="Iteration4.1/songs.py">songs.py</a></li>
</ul>

</div>

<div class="section">

<hr />

<p class="title">Continue this for a while and see where it goes!</p>

<p>This is as far as we got in lecture.  Try taking this process a little bit farther yourself, adding features, one at a time, using just this same process.  Remember to keep the features simple, remember to write the tests first, and remember to use the compiler and the tests to ensure &mdash; after every step you take &mdash; that you haven't made any mistakes.  Every few minutes, at most &mdash; and sometimes more than once per minute &mdash; you should be again standing on stable ground, with tests that all pass and the minimum amount of code to make them pass.</p>

</div>

<div class="history">

<hr />

<ul class="nomarker">
  <li>Adapted from a similar document written by Alex Thornton for ICS 22, Winter 2005 - Fall 2012.</li>
</ul>

</div>

</body>
</html>
