<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head>
<title>David Eppstein - Publications</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body bgcolor="#ffffff" text="#000000">
<h1>David Eppstein - Publications</h1>
<hr><p>
<h2>
Miscellaneous
</h2>
<ul>
<li><b>A heuristic approach to program inversion</b>.<br>
D. Eppstein.<br>
<a href="Epp-IJCAI-85.pdf"><i>9th Int. Joint Conf. Artificial
Intelligence,</i> Los Angeles, 1985, pp. 219&ndash;221</a>.
<p>
Program transformation.
Given a (lisp) program for an invertible function, how do we automatically
find a program for the inverse function?
Considers more general simultaneous inverses of multiple functions.
The heuristic part involves type inference for finding conditionals
to use in certain if statements.
<p>(<a href="/~eppstein/bibs/eppstein.html#A heuristic approach to program inversion">BibTeX</a> --
<a href="Epp-IJCAI-85.lsp">MacLISP source code</a> --
<a href="//www.ispt.waseda.ac.jp/keinv/">Kawabe's Common Lisp
port</a> --
<a href="//fano.ics.uci.edu/cites/Document/A-heuristic-approach-to-program-inversion.html">Citations</a> --
<a href="//citeseer.ist.psu.edu/eppstein85heuristic.html">CiteSeer</a>)
<p>
<li><b>Reset sequences for monotonic automata</b>.<br>
D. Eppstein.<br>
<i>15th Int. Coll. Automata, Languages and Programming,</i>
Tampere, Finland, 1988.<br>
Springer, <i>Lecture Notes in Comp. Sci.</i> 317, 1988, pp. 230&ndash;238.<br>
<a href="Epp-SJC-90.pdf"><i>SIAM J. Computing</i> 19 (3): 500&ndash;510, 1990</a>.
<p>
Automata theory.
A reset sequence for a DFA is an input such that, no matter which
state the DFA starts in, it ends up after the input in a known state.
These have been used by Natarajan and Goldberg for certain robot motion
planning problems (in fact the conference version of this paper used
the title "Reset sequences for finite automata
with application to design of parts orienters"), and also in coding
theory where they arise in the design of
self-synchronizing codes.  This paper considers DFAs in which the
transition functions respect a given cyclic ordering of the states, and
shows that their shortest reset sequences can be found quickly.
It also considers parallel algorithms for the problem.
There remains open a gap between <i>n<sup>2</sup></i> and <i>n<sup>3</sup></i>
in the maximum length of reset sequences for general automata.
<p>(<a href="/~eppstein/bibs/eppstein.html#Reset sequences for monotonic automata">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Reset-sequences-for-monotonic-automata.html">Citations</a> --
<a href="//citeseer.ist.psu.edu/eppstein90reset.html">CiteSeer</a> --
<a href="//portal.acm.org/citation.cfm?id=681434">ACM DL (ICALP)</a> --
<a href="//portal.acm.org/citation.cfm?id=80025">ACM DL (SJC)</a>)
<p>
<li><b>On reset sequence length</b>.<br>
D. Eppstein.<br>
Tech. Rep. CUCS-440-89, Computer Science Dept., Columbia University, 1989.
<p>(<a href="/~eppstein/bibs/eppstein.html#On reset sequence length">BibTeX</a>)
<p>
<li><b>Simultaneous strong separations of
probabilistic and unambiguous complexity classes</b>.<br>
D. Eppstein,
<a href="//www.cs.rochester.edu/u/lane/">
L. Hemachandra</a>, J. Tisdall, and B. Yener.<br>
<i>Int. Conf. Computing and Information,</i> Toronto,
North-Holland, 1989, pp. 65&ndash;70.<br>
Tech. Rep. 335, Dept. Comp. Sci., U. Rochester, 1990.<br>
<a href="EppHemTis-MST-92.pdf"><i>Mathematical Systems Theory</i> 25 (1): 23&ndash;36, 1992</a>.
<p>
Structural complexity theory.
Constructs oracles in which BPP (a probabilistic complexity class)
and UP (the class of problems with a unique "witness")
contain languages that in a very strong sense are not contained in the
other class.
The conference version used the title
"Probabilistic and unambiguous computation are incomparable".
<p>(BibTeX: <a href="/~eppstein/bibs/eppstein.html#Probabilistic and unambiguous computation are incomparable">ICCI</a>,
<a href="/~eppstein/bibs/eppstein.html#Simultaneous strong separations of probabilistic and unambiguous complexity classes">MST</a> --
Citations:
<a href="//fano.ics.uci.edu/cites/Document/Probabilistic-and-unambiguous-computation-are-incomparable.html">ICCI</a>,
<a href="//fano.ics.uci.edu/cites/Document/Simultaneous-strong-separations-of-probabilistic-and-unambiguous-complexity-classes.html">MST</a> --
<a href="//citeseer.ist.psu.edu/eppstein92simultaneous.html">CiteSeer</a>)
<p>
<li><b>Persistence, offline algorithms, and space compaction</b>.<br>
D. Eppstein.<br>
<a href="Epp-TR-91-54.pdf">Tech. Rep. 91-54</a>, ICS, UCI, 1991.
<p>
Considers persistence for a naive form of dynamic algorithm in
which each update rebuilds a static solution.
The space bounds for this can often be reduced 
by maintaining an offline
solution over a sequence of updates constructed
from an Euler tour of the persistent update history tree.
<p>(<a href="/~eppstein/bibs/eppstein.html#Persistence, offline algorithms, and space compaction">BibTeX</a>)
<p>
<li><b>Minimum range balanced cuts via dynamic subset sums</b>.<br>
D. Eppstein.<br>
<a href="tr.html">Tech. Rep. 95-10</a>, ICS, UCI, 1995.<br>
<a href="//doi.org/10.1006/jagm.1996.0841">
<i>J. Algorithms</i> 23: 375&ndash;385, 1997</a>.
<p>
Describes data structures for maintaining the solution of a dynamically
changing subset sum problem, and uses them to find a cut in a graph
minimizing the difference between the heaviest and lightest cut edge.
<p>(<a href="/~eppstein/bibs/eppstein.html#Minimum range balanced cuts via dynamic subset sums">BibTeX</a> --
<a href="//portal.acm.org/citation.cfm?id=248763">ACM DL</a>)
<p>
<p>
<li><b>Choosing subsets with maximum weighted average</b>.<br>
D. Eppstein and 
<a href="//www.ics.uci.edu/~dan/">
D. S. Hirschberg</a>.<br>
<a href="EppHir-TR-95-12.pdf">Tech. Rep. 95-12, ICS, UCI, 1995</a>.<br>
<a href="ftp://ams.sunysb.edu/pub/geometry/msi-workshop/95/eppstein.ps.gz">
<i>5th MSI Worksh. on Computational Geometry</i>, 1995, pp. 7&ndash;8</a>.<br>
<a href="//doi.org/10.1006/jagm.1996.0849"><i>J. Algorithms</i> 24: 177&ndash;193, 1997</a>.
<p>
Uses geometric optimization techniques to find, among <i>n</i> weighted values,
the <i>k</i> to drop so as to maximize the weighted average of the remaining values.
The feasibility test for the corresponding decision problem involves
<i>k</i>-sets in a dual line arrangement.
<p>(<a href="/~eppstein/bibs/eppstein.html#Choosing subsets with maximum weighted average">BibTeX</a> --
<a href="EppHir-Algs-97.pdf">Full paper</a> --
<a href="//citeseer.ist.psu.edu/eppstein95choosing.html">CiteSeer</a> --
<a href="//portal.acm.org/citation.cfm?id=258407">ACM DL</a>)
<p>
<li><b>Guest editor's forward to special issue of papers from the 34th Annual Symposium on Foundations of Computer Science</b>.<br>
D. Eppstein.<br>
<i>J. Comp. Sys. Sci.</i> 54:263, 1997.
<p>(<a href="/~eppstein/bibs/eppstein.html#Guest editor's forward to special issue of papers from the 34th Annual Symp. on Foundations of Computer Science">BibTeX</a>)
<p>
<li><b>Reference caching using unit distance redundant codes for
activity reduction on address buses</b>.<br>
D. Eppstein and
<a href="//www.ics.uci.edu/~givargis">T. Givargis</a>.<br>
<a href="//rtas2002.cs.tamu.edu/ESCODES/">Worksh. Embedded System
Codesign (ESCODES'02)</a>, San Jose, 2002, pp. 43&ndash;48.<br>
<a href="//givargis.ics.uci.edu/pubs/J12.pdf"><i>J. Microprocessors &amp; Microsystems</i> 29 (4): 145&ndash;153, 2005.</a>
<p>
We study the problem of minimizing transitions in address signals
on a bus.  The UDRC part of the title refers to an algorithm for coding
signals with at most one transition per signal (using an increased number of
wires); we combine this with a scheme for caching previously coded addresses
and use trace data to compare our technique with previous approaches.
<p>
(<a href="//www.ics.uci.edu/~eppstein/bibs/eppstein.html#Reference caching using unit distance redundant codes for activity reduction on address buses">BibTeX</a> --
<a href="//fano.ics.uci.edu/cites/Document/Reference-caching-using-unit-distance-redundant-codes-for-activity-reduction-on-address-buses.html">Citations</a> --
<a href="//citeseer.ist.psu.edu/givargis02reference.html">CiteSeer</a>)
<p>
<li><b>Improved combinatorial group testing for
real-world problem sizes.</b><br>
D. Eppstein,
<a href="//www.ics.uci.edu/~goodrich/">M. T. Goodrich</a>,
and <a href="//www.ics.uci.edu/~dan/">D. S. Hirschberg</a>.<br>
<i>9th Worksh. Algorithms and Data Structures,</i> Waterloo, 2005.<br>
Springer, <i>Lecture Notes in Comp. Sci.</i> 3608, 2005, pp. 86&ndash;98.<br>
<a href="//arxiv.org/abs/cs.DS/0505048">arXiv:cs.DS/0505048</a>.<br>
<i>SIAM J. Computing</i> 36 (5): 1360&ndash;1375, 2007.
<p>
We study practically efficient methods for finding few
flawed items among large sets of items, by testing whether there
exist flaws in each of a small number of batches of items.
<p>
(<a href="//www.ics.uci.edu/~eppstein/bibs/eppstein.html#Improved combinatorial group testing for real-world problem sizes">BibTeX</a> --
<a href="EppGooHir-WADS-05.pdf">Mike's WADS talk slides</a>)
<p>
<li><b>On the approximability of geometric and geographic generalization
and the min-max bin covering problem</b>.<br>
W. Du,
D. Eppstein,
<a href="//www.ics.uci.edu/~goodrich/">M. T. Goodrich</a>,
<a href="//www.ics.uci.edu/~lueker/">G. Lueker</a>.<br>
<a href="//arxiv.org/abs/0904.3756">arXiv:0904.3756</a>.<br>
Algorithms and Data Structures Symposium (WADS), Banff, Canada.<br>
Springer, <i>Lecture Notes in Comp. Sci.</i> 5664, 2009, pp. 242&ndash;253.
<p>
We investigate several simplified models for k-anonymization in
databases, show them to be hard to solve exactly, and provide
approximation algorithms for them.
<p>
The min-max bin covering problem is
closely related to one of our models. An input to this problem consists
of a collection of items with sizes and a threshold size. The items must
be grouped into bins such that the total size within each bin is at
least the threshold, while keeping the maximum bin size as small as possible.
<p>
(<a href="WADS09-talks/anonymity.ppt">Slides</a>)
<p>
<li><b>Questions answered. In theory.</b><br>
Clarke, Eppstein, Ghasemloo, Reyzin, Salamon, Shor, Sterling, and Venkatasubramanian.<br>
<a href="//doi.org/10.1145/1907450.1907532">ACM SIGACT News 41 (4), 2010</a>.
<p>
An overview of
the <a href="//cstheory.stackexchange.com/">Theoretical Computer
Science</a> question and answer exchange web site.
<p>
<li><b>Privacy-enhanced methods for comparing compressed DNA sequences</b>.<br>
D. Eppstein,
<a href="//www.ics.uci.edu/~goodrich/">M. T. Goodrich</a>, and
<a href="//www.igb.uci.edu/~pfbaldi/">P. Baldi</a>.<br>
<a href="//arxiv.org/abs/1107.3593">arXiv:1107.3593</a>.
<p>
<li><b>Combinatorial pair testing: distinguishing workers from slackers</b>.<br>
D. Eppstein,
<a href="//www.ics.uci.edu/~goodrich/">M. T. Goodrich</a>,
and <a href="//www.ics.uci.edu/~dan/">D. S. Hirschberg</a>.<br>
<a href="//arxiv.org/abs/1305.0110">arXiv:1305.0110</a>.<br>
13th Int. Symp. Algorithms and Data Structures (WADS 2013), London, Ontario.<br>
<a href="//doi.org/10.1007/978-3-642-40104-6_28">Springer, <i>Lecture Notes in Comp. Sci. 8037</i>, 2013, pp. 316&ndash;327</a>.<br>
<p>
We study the problem of distinguishing workers (people who complete
their assigned tasks) from slackers (people who do not contribute
towards the completion of their tasks) by grouping people in pairs and
assigning a task to each group.
<p>
<li><b>Wear minimization for cuckoo hashing: how not to throw a lot of
eggs into one basket</b>.<br>
D. Eppstein,
<a href="//www.ics.uci.edu/~goodrich/">M. T. Goodrich</a>,
<a href="//www.eecs.harvard.edu/~michaelm/">M .Mitzenmacher</a>, and
<a href="//www.ics.uci.edu/~ppszona/">P. Pszona</a>.<br>
<a href="//arxiv.org/abs/1404.0286">arXiv:1404.0286</a>.<br>
<i>Proc. 13th International Symposium on Experimental Algorithms (SEA
2014)</i>, Copenhagen, Denmark, 2014.<br>
<a href="//doi.org/10.1007/978-3-319-07959-2_14">Springer, <i>Lecture Notes in Comp. Sci.</i> 8504, pp. 162&ndash;173, 2014</a>.
<p>
We study cuckoo hashing data structures in a model of flash memory in
which each memory cell has a limited number of times it can be changed,
so the goal is to prevent hot spots that change many times.
<p>
<li><b>Linear-time algorithms for proportional apportionment</b>.<br>
Z. Cheng and D. Eppstein.<br>
<a href="//arxiv.org/abs/1409.2603">arXiv:1409.2603</a>.<br>
<i>Proc. 25th Int. Symp. Algorithms and Computation (ISAAC 2014)</i>,
Jeonju, Korea, 2014.<br>
<a href="//doi.org/10.1007/978-3-319-13075-0_46">Springer, <i>Lecture
Notes in Comp. Sci.</i> 8889, 2014, pp. 581&ndash;592.</a><br>
<p>
We consider a broad class of <a href="Highest averages method">highest
averages methods</a> for proportional allocation (the problems of
allocating seats to parties after a parliamentary election, or of
allocating congressmen to states based on total population).
We show that these methods can be simulated by an algorithm whose
running time is proportional only to the number of parties or states,
independent of the number of seats allocated or the number of voters.
<p>
<li><b>From discrepancy to majority</b>.<br>
D. Eppstein
and <a href="//www.ics.uci.edu/~dan/">D. S. Hirschberg</a>.<br>
<a href="//arxiv.org/abs/1512.06488">arXiv:1512.06488</a>.<br>
<i>Proc. 12th Latin American Theoretical Informatics Symposium (LATIN
2016)</i>, Ensenada, Mexico</i>.<br>
<a href="//doi.org/10.1007/978-3-662-49529-2_29">Springer, <i>Lecture Notes in Comp. Sci.</i> 9644 (2016), pp. 390&ndash;402</a>.
<p>
We provide upper and lower bounds on the query complexity of a problem
in which the input is a collection
of two-colored items, and the problem is to either find an item of the
majority color or to determine that there is no majority,
by performing queries that determine the discrepancy of fixed-size
subsets of the items.
<p>
(<a href="EppHir-LATIN-16-slides.pdf">Slides</a>)
<p>
<li><b>Cuckoo filter: simplification and analysis</b>.<br>
D. Eppstein.<br>
<a href="//arxiv.org/abs/1604.06067">arXiv:1604.06067</a>.<br>
<i>Proc. 15th Scandinavian Symposium and Workshops on Algorithm
Theory (SWAT 2016)</i>, Reykjavik, Iceland.<br>
<a href="//doi.org/10.4230/LIPIcs.SWAT.2016.8">Leibniz International
Proceedings in Informatics (LIPIcs) 53, pp. 8.1&ndash;8.12</a>.
<p>
A cuckoo filter is an approximate set data structure that can be used in
place of a Bloom filter, but with several practical advantages: it uses
less space, has better locality of reference, and can handle element
deletions. We provide the first theoretical analysis of a simplified
variation of cuckoo filters, showing that these advantages can be
guaranteed to hold theoretically and not just experimentally.
<p>
(<a href="Epp-SWAT-16-slides.pdf">Slides</a>)
<p>
<li><b>Scheduling autonomous vehicle platoons through an unregulated
intersection</b>.<br>
J. Besa,
<a href="//www.ics.uci.edu/~wdevanny/">W. E. Devanny</a>,
D. Eppstein, and
<a href="//www.ics.uci.edu/~goodrich/">M. T. Goodrich</a>.<br>
<i>Proc. 16th Worksh. Algorithmic Approaches for Transportation
Modelling, Optimization and Systems (ATMOS 2016)</i>, Aarhus, Denmark,
2016.<br>
<a href="//doi.org/10.4230/OASIcs.ATMOS.2016.5">OpenAccess Series in Informatics (OASIcs) 54, Schloss
Dagstuhl (2016), pp. 5:1&ndash;5.16</a>.<br>
<a href="//arxiv.org/abs/1609.04512">arXiv:1609.04512</a>.<br>
<p>
We consider a model of vehicle scheduling in which vehicles arrive at an
intersection in indivisible platoons (or individual vehicles of variable
length) and the goal is to find a schedule for them to all cross the
intersection without collisions, minimizing the maximimum delay incurred
by any platoon. We show that for many types of intersections, an optimal
schedule can be found in polynomial time by a combination of dynamic
programming and parametric search.
<p>
</ul>

<hr><p>
<a href="/~eppstein/pubs/">Publications</a> --
<a href="/~eppstein/">David Eppstein</a> --
<a href="/~theory/">Theory Group</a> --
<a href="/">Inf. &amp; Comp. Sci.</a> --
<a href="//www.uci.edu/">UC Irvine</a>
<p>
<small>Semi-automatically <a href="filter.html">filtered</a>
from a common source file.</small>
</body></html>
