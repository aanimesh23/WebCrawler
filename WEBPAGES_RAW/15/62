<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1">
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay">
<META HTTP-EQUIV="UPDATED" CONTENT="Wednesday, February 22, 2006 6:40 PM">
<TITLE>Lab Assignment E</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="AD90E02A">
<META HTTP-EQUIV=KEYWORDS CONTENT="CS 2, CS2, assignment, Java, OOP">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="A lab assignment for Informatics 42, a second-quarter course in computer science for Informatics majors in the Bren School of Information and Computer Sciences, UC Irvine.">
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2005 by David G. Kay.  All rights reserved.">
<link href="/~kay/courses/i42/code.css" rel="stylesheet" type="text/css" />
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<P><FONT FACE="Goudy Old Style">Informatics 42 &bull; Winter 2012 &bull; David G. Kay
  &bull; UC Irvine</FONT></P>
<P> <FONT FACE="Goudy Old Style" SIZE=6><B>Lab Assignment E</B></FONT></P>
<P>
<FONT FACE="Goudy Old Style">This assignment is due at the end of lab on
Monday, March 5. </FONT></P>
<P>
<FONT FACE="Goudy Old Style">This will be your first real opportunity to
explore and enhance the simulator, whose home page is at </FONT><FONT FACE="Courier New" SIZE=2><A HREF="http://www.ics.uci.edu/~kay/courses/i42/wildride/">http://www.ics.uci.edu/~kay/courses/i42/wildride/</A></FONT><FONT FACE="Goudy Old Style">.</FONT></P>
<P>
<FONT FACE="Goudy Old Style"><B>(a)</B>  Spend at least 20 minutes running
the simulator, using the larger sets of test data available on the web page
and perhaps other sets you make up.  As you work on this assignment, develop
a list of improvements or enhancements to the simulator, including at least
two in each of these categories:</FONT></P>
<UL>
<LI>
<FONT FACE="Goudy Old Style">The functionality&mdash;what features the program
provides.  But your suggestions here have to be something that you think
you could implement, if you had enough time; don&#39;t just ask for the moon. You won't be obligated actually to implement the enhancements you suggest, but they should be something you basically understand how to build.</FONT></LI>
<BR>
<LI>
<FONT FACE="Goudy Old Style">The user interface&mdash;how the program interacts
with its user.  Again, suggest only things that you think you could implement.
 Don&#39;t just say, &quot;Make a GUI with little animations for each customer
and ride.&quot;</FONT></LI>
<BR>
<LI>
<FONT FACE="Goudy Old Style">The coding style of the program, including
variable/class/method names and physical arrangement of the code.</FONT></LI>
<BR>
<LI>
<FONT FACE="Goudy Old Style">The program&#39;s overall design&mdash;how the problem
was organized into classes, the responsibilities of each class and the relationships
between classes.  The question here is whether there could be changes to
this organization that would make modifications or enhancements easier.
 (This one may be a little tough at this point, but it&#39;s the central
issue in software design, so give it some thought.)</FONT></LI>
<BR>
<LI>
<FONT FACE="Goudy Old Style">The run-time efficiency of the program&mdash;how
the choice of data structures and algorithms affects the performance.  (This
one is optional at this point, because we haven&#39;t gotten deeply into
the program&#39;s internal design.)</FONT><BR>
</LI></UL>
<P>
<FONT FACE="Goudy Old Style"><B>(b)</B>  Pick one of the functionality changes
you propose above and give a sketch of how you would implement it.  This
should be about half a page of text, possibly with some diagrams, that describes
at a high level which part(s) of the program would have to change (which
classes, which methods) and what those changes should be.</FONT></P>
<P><FONT FACE="Goudy Old Style"><B>(c)</B>  Devise at least three &quot;micro
test cases&quot; that you can use to verify that the actual, step-by-step
behavior of the rides and customers matches the specification.  An example
might be a park with one ride and one customer, whose progress you can track,
tick by tick.  Other cases can examine other types of customers or rides,
or different locations in the park.  Feel free to coordinate these tests
with other groups so you don&#39;t all test the same things.</FONT></P>
<P>
  <FONT FACE="Goudy Old Style">Along with each set of data, describe what
    behavior you&#39;re trying to test (e.g., the loading behavior of cycle
    rides or the movement of a customer around the park), what results you expected,
    and what results you actually obtained.  If you got something different
    from what you expected, determine whether the discrepancy was due to an
    ambiguity or misunderstanding of the specifications, a mistake in your hand-calculation
of the expected result, or a bug in the code.</FONT> <FONT FACE="Goudy Old Style"> Any group(s) that can identify and document an actual bug in the code (a place where the behavior clearly contradicts the specification) will receive a reward; those who identify questionable program behavior or ambiguities in the spec will also receive (lesser) rewards. Bring these to the TA's attention.</FONT></P>
<P><FONT FACE="Goudy Old Style"><B>(d)</B> Pick two functions that are part of one class in the simulator, and write &quot;unit tests&quot; for each. That is, write a set of <code>assert</code> statments that test thoroughly that the function works correctly, in the same spirit as we wrote <code>check-expect</code> expressions in Racket. You may need to create some simple test objects to use in your assertions, depending on which functions you choose.</FONT> Then run your code to make sure none of the assertions fails.</P>
<P><font face="Goudy Old Style">Writing these tests isn't really hard, but it does take some time. That's why we haven't been insisting that you write them comprehensively for every function in every program you've done this quarter: We have to choose where our limited time is most effectively spent. But in any kind of serious programming, the effort spent in writing good unit tests in advance is well paid back over the life of the software.</font></P>
<P><FONT FACE="Goudy Old Style"><B>(e)</B>  Now it&#39;s time to modify the
  code.  Make a copy and work on the copy.  Each time you add a feature and
  test it successfully, make another copy and continue working on the new
  copy.  That way, if you get into trouble, you can &quot;roll back&quot;
  to the previous copy without having messed up all your previous work.</FONT></P>
<P>
  <FONT FACE="Goudy Old Style">The simulator displays some statistics about attractions and some statistics about customers. It should also display these overall statistics about the customers: the total number of visitors to the park; the number of people who didn't get into the park (because they arrived after closing time); the total time they
  spent in the park, in line, and riding rides; and the average time per customer
spent in the park, in line, and riding rides.</FONT></P>
<P>
<FONT FACE="Goudy Old Style">Likewise, calculate and print the following
overall statistics about the attractions:  the total number of attractions
in the park, the total number of riders and average riders per ride, the
total time spent riding and average riding time per ride, and the total
time spent waiting in line and average waiting time per ride.</FONT></P>
<FONT FACE="Goudy Old Style"><B>(f)</B>  Using your random sentence generator
(either yours or your partner&#39;s or parts of both),  generate random customer data for the simulator, along the
lines we discussed in class.  Optionally, you could find on the web lists of popular names—family names and male/female given names—and have your grammar generate a realistically representative list of names. (You may optionally also generate random ride
data.  Presumably that would just involve preparing a different grammar,
but we&#39;re not requiring that now.)  </FONT>
<P>
  <FONT FACE="Goudy Old Style">At least your test data generator should generate
    valid data; it would be nice if it could choose realistic-seeming names
    and numbers in plausible ranges.  Test your generated data by asking the
simulator to read it in.</FONT> Turn in a text document containing your grammar for customer data and some sample customers it generated.</P>
<FONT FACE="Goudy Old Style"><B>(g)</B>  Suppose you wanted to make each
tick of the clock last one second instead of one minute.  What would you
have to change in the program (and data)?  Make a list of those changes,
but don&#39;t implement them yet (or, optionally, implement them on a separate
copy of the code.)  Why hesitate to make this change?  Think about your
micro test cases; it&#39;s a lot more tedious to track the behavior second-by-second.</FONT> <BR>
<P>
<FONT FACE="Goudy Old Style"><B>(h)</B>  (optional) While walking to a ride,
a customer might change his or her mind.  The customer might walk by a ride
that looks interesting (or that has a short line), or the customer might
get hungry and stop for a snack.  We can&#39;t model every kind of mind-changing
behavior, but we can allow the customer to recalculate his or her priorities
every <I>n</I> steps.  We might think of <I>n</I> as a measure of decisiveness;
if <I>n</I> is high (or zero), the customer seldom re-thinks; if it&#39;s
low, the customer frequently reevaluates.  </FONT></P>
<P>
<FONT FACE="Goudy Old Style">Modify the simulator to allow customers in
transit to reprioritize their agendas (according to their existing strategy,
which means that they might decide to keep going to the same place) every
<I>n</I> steps.  Specify <I>n</I> for each customer in the input, at the
beginning of the line that currently specifies the customer type.</FONT></P>
<P>
<FONT FACE="Goudy Old Style">Make this modification on a separate copy of
the simulator.  You may want to go back to the original version for later
assignments.</FONT></P>
<BR>
<P>
<FONT FACE="Goudy Old Style">The usual admonitions, advice, and administrivia
apply to this assignment:</FONT></P>
<UL>
<LI>
<FONT FACE="Goudy Old Style">Get started early.</FONT><BR>
</LI><LI>
<FONT FACE="Goudy Old Style">Read and re-read the specifications.</FONT><BR>
</LI><LI>
<FONT FACE="Goudy Old Style">Do this with a partner you haven&#39;t worked
with yet this quarter and make sure Joel knows whom you're pairing with.</FONT><BR>
</LI><LI>
<FONT FACE="Goudy Old Style">Use Checkmate for your submissions as usual;
each pair should submit just one solution.</FONT><BR>
<UL>
  <LI>
    <FONT FACE="Goudy Old Style">For parts <B>(a)</B> and <B>(b)</B>, submit a text
      document (Word or PDF or RTF or plain text) with your suggestions and your
      implementation sketch.  (Actual sketches or other graphics are welcome,
      but not required.)</FONT><BR>
  </LI>
  <LI> <FONT FACE="Goudy Old Style">For parts <B>(c)</B>, <B>(f)</B>, and <strong>(g)</strong>, submit
    text documents.</FONT><BR>
  </LI>
  <LI>For part <strong>(d)</strong>, your unit tests should remain in the simulator code you turn in later, so there's nothing separate to turn in here.</LI>
  <LI><FONT FACE="Goudy Old Style">For part <B>(e)</B>, submit all the source
    code in one </FONT><FONT FACE="Courier New" SIZE=2>.py</FONT><FONT FACE="Goudy Old Style">
      file.</FONT> The same goes for optional part <strong>(h)</strong>.</LI>
  <BR>
</UL>
</LI>
<LI>
<FONT FACE="Goudy Old Style">The usual <A HREF="http://www.ics.uci.edu/~kay/courses/i42/hw/assignments_index_files/grading_criteria_for_lab.html">grading criteria</A>
for lab assignments apply. </FONT></LI>
<BR>
<LI>
<FONT FACE="Goudy Old Style">Fill out a partner evaluation at EEE.</FONT></LI>
</UL>
<BR>
<P>
<FONT FACE="Helvetica" SIZE=1>Written by David G. Kay, Winter 2005; modified by Alex Thornton, Winter 2007, and by David G. Kay, 
Winter 2006, Winter 2008, and Winter 2012.</FONT></P>
<BR CLEAR=ALL>
</BODY>
</HTML>