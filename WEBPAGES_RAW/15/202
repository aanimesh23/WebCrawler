<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>CHEM.datatype.finger.Finger</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="CHEM-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="CHEM-module.html">Package&nbsp;CHEM</a> ::
        <a href="CHEM.datatype-module.html">Package&nbsp;datatype</a> ::
        <a href="CHEM.datatype.finger-module.html">Module&nbsp;finger</a> ::
        Class&nbsp;Finger
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="CHEM.datatype.finger.Finger-class.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<!-- ==================== CLASS DESCRIPTION ==================== -->
<h1 class="epydoc">Class Finger</h1><br /><br />
<pre class="base-tree">
<a href="CHEM.datatype.finger._object-class.html">_object</a> --+
          |
         <strong class="uidshort">Finger</strong>
</pre>

<hr />
<pre class="literalblock">

This class encapsulates most fingerprint operations.

Blank fingerprint:

&gt;&gt;&gt; print Finger(128)
128.----------------------

Of course, a valid length must be passed:
&gt;&gt;&gt; print Finger(-2394)
Traceback (most recent call last):
    ...
ValueError: FPmk: Len must &gt; 0.


From Finger object:

&gt;&gt;&gt; print ImmutableFinger(Finger('128.fue*3kdfj-J2dkf7Mk1*--'))
128.fue*3kdfj-J2dkf7Mk1*--

From string:

Fingerpints can be generated from fingerprint string consisting of:
1. an integer length
2. a period '.'
3. any number of characters selected from [a-z,A-Z,0-9,-,*]
&gt;&gt;&gt; print Finger('128.fue*3kdfj-J2dkf7Mk1*') 
128.fue*3kdfj-J2dkf7Mk1*--

Extra characters are truncated:
&gt;&gt;&gt; print Finger('128.fue*3kdfj-J2dkf7Mk1*----------343432')
128.fue*3kdfj-J2dkf7Mk1*--

Illegal characters generates an exception.
&gt;&gt;&gt; print Finger('182.*#,$$(Q*')
Traceback (most recent call last):
    ...
ValueError: FPin: error reading fingerprint. Most likely illegal character.


From random:

Fingerprints can be generated from a random number generator:
&gt;&gt;&gt; f=Finger(120,.3)

A valid lenght and density must be used:
&gt;&gt;&gt; f=Finger(-1,12.0)
Traceback (most recent call last):
    ...
ValueError: FPrand: len must &gt; 0 and density must be bewteen 0 and 1 (inclusive).

</pre><br /><br />

<!-- ==================== INSTANCE METHODS ==================== -->
<a name="section-InstanceMethods"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Instance Methods</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-InstanceMethods"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a name="__repr__"></a><span class="summary-sig-name">__repr__</span>(<span class="summary-sig-arg">self</span>)</span></td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#__init__" class="summary-sig-name">__init__</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">*args</span>)</span><br />
      __init__(self, Finger f) -&gt; Finger
__init__(self, char c) -&gt; Finger
__init__(self, int len, double density) -&gt; Finger
__init__(self, int len) -&gt; Finger

This class encapsulates most fingerprint operations.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#__str__" class="summary-sig-name">__str__</a>(<span class="summary-sig-arg">*args</span>)</span><br />
      __str__(self, void ?) -&gt; char</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#__len__" class="summary-sig-name">__len__</a>(<span class="summary-sig-arg">self</span>)</span><br />
      * In this module there are a large number of functions.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#__cmp__" class="summary-sig-name">__cmp__</a>(<span class="summary-sig-arg">*args</span>)</span><br />
      __cmp__(self, Finger other) -&gt; int</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#__getitem__" class="summary-sig-name">__getitem__</a>(<span class="summary-sig-arg">*args</span>)</span><br />
      __getitem__(self, int idx) -&gt; int</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#__and__" class="summary-sig-name">__and__</a>(<span class="summary-sig-arg">*args</span>)</span><br />
      __and__(self, Finger o) -&gt; Finger</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#__or__" class="summary-sig-name">__or__</a>(<span class="summary-sig-arg">*args</span>)</span><br />
      __or__(self, Finger o) -&gt; Finger</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#__setitem__" class="summary-sig-name">__setitem__</a>(<span class="summary-sig-arg">*args</span>)</span><br />
      __setitem__(self, int idx, int v)</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#density" class="summary-sig-name">density</a>(<span class="summary-sig-arg">self</span>)</span><br />
      * In this module there are a large number of functions.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#bitcount" class="summary-sig-name">bitcount</a>(<span class="summary-sig-arg">self</span>)</span><br />
      * In this module there are a large number of functions.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#Bitcount" class="summary-sig-name">Bitcount</a>(<span class="summary-sig-arg">self</span>)</span><br />
      * In this module there are a large number of functions.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#__hash__" class="summary-sig-name">__hash__</a>(<span class="summary-sig-arg">self</span>)</span><br />
      Once a Fingerprint is created, if it is an ImmutableFinger, it can
      be hashed:</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.datatype.finger.Finger-class.html#__reduce__" class="summary-sig-name">__reduce__</a>(<span class="summary-sig-arg">self</span>)</span><br />
      This function implements the __reduce__ method so Finger instances
      can be pickled and unpickled.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
<!-- ==================== CLASS VARIABLES ==================== -->
<a name="section-ClassVariables"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Class Variables</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-ClassVariables"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a name="__swig_setmethods__"></a><span class="summary-name">__swig_setmethods__</span> = <code title="{}">{}</code>
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a name="__setattr__"></a><span class="summary-name">__setattr__</span> = <code title="lambda self, name, value:">lambda self, name, value:</code>
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a name="__swig_getmethods__"></a><span class="summary-name">__swig_getmethods__</span> = <code title="{}">{}</code>
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a name="__getattr__"></a><span class="summary-name">__getattr__</span> = <code title="lambda self, name:">lambda self, name:</code>
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a name="__swig_destroy__"></a><span class="summary-name">__swig_destroy__</span> = <code title="_finger.delete_Finger">_finger.delete_Finger</code>
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
        <a name="__del__"></a><span class="summary-name">__del__</span> = <code title="lambda self:">lambda self:</code>
    </td>
  </tr>
</table>
<!-- ==================== METHOD DETAILS ==================== -->
<a name="section-MethodDetails"></a>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Method Details</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-MethodDetails"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
</table>
<a name="__init__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__init__</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">*args</span>)</span>
    <br /><em class="fname">(Constructor)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <pre class="literalblock">

__init__(self, Finger f) -&gt; Finger
__init__(self, char c) -&gt; Finger
__init__(self, int len, double density) -&gt; Finger
__init__(self, int len) -&gt; Finger

This class encapsulates most fingerprint operations.

Blank fingerprint:

&gt;&gt;&gt; print Finger(128)
128.----------------------

Of course, a valid length must be passed:
&gt;&gt;&gt; print Finger(-2394)
Traceback (most recent call last):
    ...
ValueError: FPmk: Len must &gt; 0.


From Finger object:

&gt;&gt;&gt; print ImmutableFinger(Finger('128.fue*3kdfj-J2dkf7Mk1*--'))
128.fue*3kdfj-J2dkf7Mk1*--

From string:

Fingerpints can be generated from fingerprint string consisting of:
1. an integer length
2. a period '.'
3. any number of characters selected from [a-z,A-Z,0-9,-,*]
&gt;&gt;&gt; print Finger('128.fue*3kdfj-J2dkf7Mk1*') 
128.fue*3kdfj-J2dkf7Mk1*--

Extra characters are truncated:
&gt;&gt;&gt; print Finger('128.fue*3kdfj-J2dkf7Mk1*----------343432')
128.fue*3kdfj-J2dkf7Mk1*--

Illegal characters generates an exception.
&gt;&gt;&gt; print Finger('182.*#,$$(Q*')
Traceback (most recent call last):
    ...
ValueError: FPin: error reading fingerprint. Most likely illegal character.


From random:

Fingerprints can be generated from a random number generator:
&gt;&gt;&gt; f=Finger(120,.3)

A valid lenght and density must be used:
&gt;&gt;&gt; f=Finger(-1,12.0)
Traceback (most recent call last):
    ...
ValueError: FPrand: len must &gt; 0 and density must be bewteen 0 and 1 (inclusive).

</pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="__str__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__str__</span>(<span class="sig-arg">*args</span>)</span>
    <br /><em class="fname">(Informal representation operator)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>__str__(self, void ?) -&gt; char</p>
  <p>* In this module there are a large number of functions. They are 
  partially organized by different * prefixes. * * FP = General purpose 
  functions and functions for operating on standard folded fingerprints. * 
  * FPD = Bit Decoders used to read fingerprints as binary data. This set 
  of functions is used to * by the more complex compression schemes to 
  decode fingerprints encoded by golomb.py. * * And a few definitions of 
  different compressed types of fingerprints. Each of these types has a * 
  special digit (G,S,P, or M) used at times to signal there usage in 
  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a
  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = 
  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse 
  fingerprints, storing 32-bit integers in system format. * FPP = Modified 
  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = 
  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>
  Some of these names may seem cryptic. Many of them are renamed much 
  prettier names in prettyfinger.py.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="__len__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__len__</span>(<span class="sig-arg">self</span>)</span>
    <br /><em class="fname">(Length operator)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>* In this module there are a large number of functions. They are 
  partially organized by different * prefixes. * * FP = General purpose 
  functions and functions for operating on standard folded fingerprints. * 
  * FPD = Bit Decoders used to read fingerprints as binary data. This set 
  of functions is used to * by the more complex compression schemes to 
  decode fingerprints encoded by golomb.py. * * And a few definitions of 
  different compressed types of fingerprints. Each of these types has a * 
  special digit (G,S,P, or M) used at times to signal there usage in 
  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a
  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = 
  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse 
  fingerprints, storing 32-bit integers in system format. * FPP = Modified 
  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = 
  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>
  Some of these names may seem cryptic. Many of them are renamed much 
  prettier names in prettyfinger.py.
  <dl class="fields">
    <dt>Returns:</dt>
        <dd><pre class="literalblock">
int

</pre></dd>
  </dl>
</td></tr></table>
</div>
<a name="__cmp__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__cmp__</span>(<span class="sig-arg">*args</span>)</span>
    <br /><em class="fname">(Comparison operator)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>__cmp__(self, Finger other) -&gt; int</p>
  <p>* In this module there are a large number of functions. They are 
  partially organized by different * prefixes. * * FP = General purpose 
  functions and functions for operating on standard folded fingerprints. * 
  * FPD = Bit Decoders used to read fingerprints as binary data. This set 
  of functions is used to * by the more complex compression schemes to 
  decode fingerprints encoded by golomb.py. * * And a few definitions of 
  different compressed types of fingerprints. Each of these types has a * 
  special digit (G,S,P, or M) used at times to signal there usage in 
  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a
  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = 
  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse 
  fingerprints, storing 32-bit integers in system format. * FPP = Modified 
  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = 
  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>
  Some of these names may seem cryptic. Many of them are renamed much 
  prettier names in prettyfinger.py.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="__getitem__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__getitem__</span>(<span class="sig-arg">*args</span>)</span>
    <br /><em class="fname">(Indexing operator)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>__getitem__(self, int idx) -&gt; int</p>
  <p>* In this module there are a large number of functions. They are 
  partially organized by different * prefixes. * * FP = General purpose 
  functions and functions for operating on standard folded fingerprints. * 
  * FPD = Bit Decoders used to read fingerprints as binary data. This set 
  of functions is used to * by the more complex compression schemes to 
  decode fingerprints encoded by golomb.py. * * And a few definitions of 
  different compressed types of fingerprints. Each of these types has a * 
  special digit (G,S,P, or M) used at times to signal there usage in 
  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a
  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = 
  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse 
  fingerprints, storing 32-bit integers in system format. * FPP = Modified 
  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = 
  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>
  Some of these names may seem cryptic. Many of them are renamed much 
  prettier names in prettyfinger.py.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="__and__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__and__</span>(<span class="sig-arg">*args</span>)</span>
    <br /><em class="fname">(And operator)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>__and__(self, Finger o) -&gt; Finger</p>
  <p>* In this module there are a large number of functions. They are 
  partially organized by different * prefixes. * * FP = General purpose 
  functions and functions for operating on standard folded fingerprints. * 
  * FPD = Bit Decoders used to read fingerprints as binary data. This set 
  of functions is used to * by the more complex compression schemes to 
  decode fingerprints encoded by golomb.py. * * And a few definitions of 
  different compressed types of fingerprints. Each of these types has a * 
  special digit (G,S,P, or M) used at times to signal there usage in 
  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a
  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = 
  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse 
  fingerprints, storing 32-bit integers in system format. * FPP = Modified 
  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = 
  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>
  Some of these names may seem cryptic. Many of them are renamed much 
  prettier names in prettyfinger.py.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="__or__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__or__</span>(<span class="sig-arg">*args</span>)</span>
    <br /><em class="fname">(Or operator)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>__or__(self, Finger o) -&gt; Finger</p>
  <p>* In this module there are a large number of functions. They are 
  partially organized by different * prefixes. * * FP = General purpose 
  functions and functions for operating on standard folded fingerprints. * 
  * FPD = Bit Decoders used to read fingerprints as binary data. This set 
  of functions is used to * by the more complex compression schemes to 
  decode fingerprints encoded by golomb.py. * * And a few definitions of 
  different compressed types of fingerprints. Each of these types has a * 
  special digit (G,S,P, or M) used at times to signal there usage in 
  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a
  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = 
  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse 
  fingerprints, storing 32-bit integers in system format. * FPP = Modified 
  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = 
  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>
  Some of these names may seem cryptic. Many of them are renamed much 
  prettier names in prettyfinger.py.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="__setitem__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__setitem__</span>(<span class="sig-arg">*args</span>)</span>
    <br /><em class="fname">(Index assignment operator)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>__setitem__(self, int idx, int v)</p>
  <p>* In this module there are a large number of functions. They are 
  partially organized by different * prefixes. * * FP = General purpose 
  functions and functions for operating on standard folded fingerprints. * 
  * FPD = Bit Decoders used to read fingerprints as binary data. This set 
  of functions is used to * by the more complex compression schemes to 
  decode fingerprints encoded by golomb.py. * * And a few definitions of 
  different compressed types of fingerprints. Each of these types has a * 
  special digit (G,S,P, or M) used at times to signal there usage in 
  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a
  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = 
  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse 
  fingerprints, storing 32-bit integers in system format. * FPP = Modified 
  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = 
  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>
  Some of these names may seem cryptic. Many of them are renamed much 
  prettier names in prettyfinger.py.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="density"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">density</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>* In this module there are a large number of functions. They are 
  partially organized by different * prefixes. * * FP = General purpose 
  functions and functions for operating on standard folded fingerprints. * 
  * FPD = Bit Decoders used to read fingerprints as binary data. This set 
  of functions is used to * by the more complex compression schemes to 
  decode fingerprints encoded by golomb.py. * * And a few definitions of 
  different compressed types of fingerprints. Each of these types has a * 
  special digit (G,S,P, or M) used at times to signal there usage in 
  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a
  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = 
  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse 
  fingerprints, storing 32-bit integers in system format. * FPP = Modified 
  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = 
  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>
  Some of these names may seem cryptic. Many of them are renamed much 
  prettier names in prettyfinger.py.
  <dl class="fields">
    <dt>Returns:</dt>
        <dd><pre class="literalblock">
double

</pre></dd>
  </dl>
</td></tr></table>
</div>
<a name="bitcount"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">bitcount</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>* In this module there are a large number of functions. They are 
  partially organized by different * prefixes. * * FP = General purpose 
  functions and functions for operating on standard folded fingerprints. * 
  * FPD = Bit Decoders used to read fingerprints as binary data. This set 
  of functions is used to * by the more complex compression schemes to 
  decode fingerprints encoded by golomb.py. * * And a few definitions of 
  different compressed types of fingerprints. Each of these types has a * 
  special digit (G,S,P, or M) used at times to signal there usage in 
  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a
  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = 
  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse 
  fingerprints, storing 32-bit integers in system format. * FPP = Modified 
  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = 
  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>
  Some of these names may seem cryptic. Many of them are renamed much 
  prettier names in prettyfinger.py.
  <dl class="fields">
    <dt>Returns:</dt>
        <dd><pre class="literalblock">
int

</pre></dd>
  </dl>
</td></tr></table>
</div>
<a name="Bitcount"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">Bitcount</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>* In this module there are a large number of functions. They are 
  partially organized by different * prefixes. * * FP = General purpose 
  functions and functions for operating on standard folded fingerprints. * 
  * FPD = Bit Decoders used to read fingerprints as binary data. This set 
  of functions is used to * by the more complex compression schemes to 
  decode fingerprints encoded by golomb.py. * * And a few definitions of 
  different compressed types of fingerprints. Each of these types has a * 
  special digit (G,S,P, or M) used at times to signal there usage in 
  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a
  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = 
  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse 
  fingerprints, storing 32-bit integers in system format. * FPP = Modified 
  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = 
  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>
  Some of these names may seem cryptic. Many of them are renamed much 
  prettier names in prettyfinger.py.
  <dl class="fields">
    <dt>Returns:</dt>
        <dd><pre class="literalblock">
float

</pre></dd>
  </dl>
</td></tr></table>
</div>
<a name="__hash__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__hash__</span>(<span class="sig-arg">self</span>)</span>
    <br /><em class="fname">(Hashing function)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Once a Fingerprint is created, if it is an ImmutableFinger, it can be 
  hashed:
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span>hash(ImmutableFinger(<span class="py-string">'128.12319fj329jewi93j1'</span>))
<span class="py-output">1186272689</span>
<span class="py-output"></span><span class="py-prompt">&gt;&gt;&gt; </span>hash(Finger(<span class="py-string">'128.12319fj329jewi93j1'</span>))
<span class="py-except">Traceback (most recent call last):</span>
<span class="py-except">    ...</span>
<span class="py-except">TypeError: This object is mutable and unhashable.</span></pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="__reduce__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__reduce__</span>(<span class="sig-arg">self</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  This function implements the __reduce__ method so Finger instances can
  be pickled and unpickled.
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> pickle
<span class="py-prompt">&gt;&gt;&gt; </span>f1=Finger(128,.3)
<span class="py-prompt">&gt;&gt;&gt; </span>f1.id=100
<span class="py-prompt">&gt;&gt;&gt; </span>s=pickle.dumps(f1)
<span class="py-prompt">&gt;&gt;&gt; </span>f2=pickle.loads(s)
<span class="py-prompt">&gt;&gt;&gt; </span>f1==f2
<span class="py-output">1</span>
<span class="py-output"></span><span class="py-prompt">&gt;&gt;&gt; </span>f2.id==f1.id
<span class="py-output">1</span></pre>
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="CHEM-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:33 2007
    </td>
    <td align="right" class="footer">
      <a href="http://epydoc.sourceforge.net">http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie()
  // -->
</script>
  
</body>
</html>
