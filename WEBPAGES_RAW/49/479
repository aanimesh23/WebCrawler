<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1" />
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay" />
<META HTTP-EQUIV="UPDATED" CONTENT="Tuesday, November 22, 2005 5:38 AM" />
<TITLE>Lab Assignment 9</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="D21ADA26" />
<META HTTP-EQUIV=KEYWORDS CONTENT="CS 1, CS1, assignment, Scheme" />
<META HTTP-EQUIV="DESCRIPTION" CONTENT="An assignment for ICS H21, an honors first-quarter course in computer science in Information and Computer Science, UC Irvine, using How to Design Programs by Matthias Felleisen et al." />
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2001 by David G. Kay.  All rights reserved." />
<link href="/~kay/courses/i41/code.css" rel="stylesheet" type="text/css" /></HEAD>
</HTML>
<HTML>
<HEAD>
<script type="text/javascript">
<!--
function MM_popupMsg(msg) { //v1.0
  alert(msg);
}
function MM_openBrWindow(theURL,winName,features) { //v2.0
  window.open(theURL,winName,features);
}
//-->
</script>

</HEAD>
<BODY BGCOLOR="#FFFFFF">
<P><FONT size="2" FACE="Goudy Old Style">INFORMATICS 41 &bull; DAVID G. KAY &bull; UC IRVINE &bull; FALL 2011</FONT></P>
<P><FONT FACE="Goudy Old Style" SIZE=6><B>Lab Assignment 9 </B></FONT></P>
<P>
<FONT FACE="Goudy Old Style">This assignment is due at the end of lab on
Friday, December 2.  </FONT></P>
<P>
<FONT FACE="Goudy Old Style">Choose a partner for this assignment, someone
you haven&#39;t worked with already. It will work best if you choose someone whose level of commitment to developing programming ability is close to your own (whether that's high or low).</FONT></P>
<P><FONT FACE="Goudy Old Style">Professor Andrea Anteater wants you to design
  a grade management system for her students in Applied Epistemology 101.
  This system will read and write students&#39; scores from a file and allow
  the user to produce statistics and histograms (frequency graphs) of the
  scores.</FONT></P>
<P> <FONT FACE="Goudy Old Style">Your task this week is to create this program
  from scratch.  It&#39;s not really from scratch, though, so don't panic:  We provide a set
  of specifications for you to implement and you can use all of the example
  programs we&#39;ve seen all quarter.  Hardly any programming today is totally
  from scratch; we have application frameworks (skeleton programs with all
  the infrastructure supplied), we have function libraries that provide commonly
  useful tasks, we have object libraries and class hierarchies that we can
  adopt and adapt to our own purposes.</FONT></P>
<P> <FONT FACE="Goudy Old Style">To help you along, here are six pieces of
  development advice:</FONT></P>
<ul>
  <li> <FONT FACE="Goudy Old Style">Read the specifications carefully, more
    than once.  Technical documents must be milked for all the detailed information
    they contain; you can&#39;t just read them one time quickly, like a mystery
    novel.</FONT></li>
  <li> <FONT FACE="Goudy Old Style">Follow the model-view-controller organization;
    have a separate top-level &quot;front end&quot; part of your program (the view and controller part) that handles interaction
    with the user and a &quot;back end&quot; part (the model) that implements the operations
    on the different classes of data. This is how the restaurants program is organized.</FONT></li>
  <li> <FONT FACE="Goudy Old Style">As you build the &quot;model&quot; part
    of the program, follow the design recipes, especially for creating examples
    and tests in advance.</FONT></li>
  <li><font face="Goudy Old Style">How do you know if you have enough tests, or the right tests? One simple measure of test effectiveness is called &quot;code coverage&quot;&mdash;your tests should, at the very least, evaluate each expression in the code. DrScheme helps you with this: After running your program, if you haven't tested every expression, some of the code appears highlighted in black. The highlighted code hasn't been evaluated, so you should add  tests to exercise those parts of the program.</font></li>
  <li> <FONT FACE="Goudy Old Style">Implement one small feature at a time, test
    it thoroughly, and then save a copy of your program so far.  That way, if
    your next phase of development runs into trouble, you can &quot;roll back&quot;
    to the previous version and start over.</FONT></li>
  <li><font face="Goudy Old Style">Nearly every technique needed for this lab is something you've seen or done earlier this quarter. If you find yourself working on something that seems much more complex or convoluted than we've done before, reconsider your approach.</font></li>
</ul>
<P> <FONT FACE="Goudy Old Style">You&#39;ll be using Advanced Student Scheme
  for this program, with the </FONT><FONT FACE="Courier New" SIZE=2><A HREF="http://www.ics.uci.edu/~kay/scheme/advanced-file-io.ss">advanced-file-io.ss</A> </FONT><FONT FACE="Goudy Old Style">teachpack. (Download the file; don't just copy and paste the code.)</FONT></P>
<P><FONT FACE="Goudy Old Style">One more thing before you get started: This assignment has two different starting points; you and your partner can choose either, and we'll make sure that either way, successful work is rewarded. If you're interested in software development, software engineering, or building your programming skills, start with part <strong>(a)</strong> below; that's the fully &quot;from-scratch&quot; approach, including building the input and output (&quot;view&quot;) part. If you're less committed to software development, though, you can start with part <strong>(c)</strong>, skipping parts <strong>(a)</strong> and <strong>(b)</strong> and using our "<a href="http://www.ics.uci.edu/~kay/scheme/gradebook.rkt">starter version</a>" of the program; this will let you focus on the more substantial parts of the assignment and skip the input and output, which is important as a practical matter but kind of tedious to code up. If you choose the second approach, you'll still need to read through parts <strong>(a)</strong> and <strong>(b)</strong> below to understand what's involved, and read through the starter version of the program to understand how it works and how to modify it.</FONT></P>
<P><FONT FACE="Goudy Old Style"><B>(a)</B> Your program</FONT><FONT FACE="Goudy Old Style"> will handle these
  classes of data: </FONT></P>
<UL>
  <LI> <FONT FACE="Goudy Old Style">Assignments, each represented by a name, a
    weight in computing the course grade [the weights of all assignments should
    sum to 100, though we&#39;re not requiring you to check this], and a number
    of points possible [which is independent of the weight; a three-point assignment
    could be worth 50% of the course grade].  (&quot;Graded item&quot; would
    be a better term, since it includes things like exams and projects.  But
    we&#39;ll use &quot;assignment&quot; just because it&#39;s shorter.)</FONT></LI>
  <BR />
  <LI> <FONT FACE="Goudy Old Style">A collection of assignment descriptions that
    together describe the graded items in the course</FONT><BR />
    <BR />
  </LI>
  <LI> <FONT FACE="Goudy Old Style">Students, each represented by a name, an ID
    number, and a vector of scores (which should be the same size as the collection
    of assignments, one score for this student on each assignment)</FONT></LI>
  <BR />
  <LI> <FONT FACE="Goudy Old Style">A collection of students</FONT></LI>
</UL>
<P> <FONT FACE="Goudy Old Style">To start out, make sure you understand these
  data structures:  Make up some examples; draw a picture; get comfortable
with how they&#39;re organized.  Then you&#39;ll want to define  functions to display the information in an assignment and a student clearly; base these on <code>rrant-print</code>.
Then, test out those functions with objects you construct using <code>make-assignment</code> and 
<code>make-student</code>. </FONT><FONT FACE="Goudy Old Style"><a href="javascript:void(0)" onClick="MM_openBrWindow('http://www.ics.uci.edu/~kay/courses/i41/OOPterms.html','Terminology','width=500,height=900')">[Note on terminology]</a></FONT></P>
<P> <FONT FACE="Goudy Old Style"><B>(b)</B> When your program starts, it will
  read the collection of assignments from a plain text file called </FONT><FONT FACE="Courier New" SIZE=2>Assignments.txt</FONT><FONT FACE="Goudy Old Style">.
    (If you place your program file and these data files in the same directory/folder,
    DrScheme will find them without your having to do anything fancy.)  Then
    it will read the collection of students from a text file called </FONT><FONT FACE="Courier New" SIZE=2>Students.txt</FONT><FONT FACE="Goudy Old Style">.
      Since the user can create these files without knowing any Scheme, your
      program won&#39;t have to handle changes to the data (although that&#39;s
      an enhancement we discuss below).</FONT></P>
<P> <FONT FACE="Goudy Old Style">The user can create these files using a plain
  ASCII text editor like NotePad (or from Word by using Save As and the Text
  Only format, which saves plain ASCII without the additional Word formatting
  information that your Scheme program can&#39;t read). </FONT></P>
<P> <FONT FACE="Goudy Old Style">For a course with a 75-point midterm worth
  40% of the grade and a 100-point final worth 60%, the assignments file would
  look like this:</FONT></P>
<P><code>2 <br />
  Midterm Exam<br />
  40 75<br />
  Final Exam<br />
  60 100</code></P>
<P> <FONT FACE="Goudy Old Style">The first line contains the number of assignments.
  Then each assignment has two lines, the first containing the assignment&#39;s
  name and the second containing two numbers, the weight followed by the possible
  points. [The code for creating one assignment should be similar to the rrant-get-info
function, except that it's reading from a file instead of from the keyboard.]</FONT></P>
<P> <FONT FACE="Goudy Old Style">A file of students for this course would look
  like this:</FONT></P>
<P><code>2<br />
  Aardvark, Aaron<br />
  11223344<br />
  68 85<br />
  Tapir, Tamara<br />
  44332211<br />
  74 92</code></P>
<P> <FONT FACE="Goudy Old Style">The first line contains the number of students.
  Then each student has three lines, the first containing the student&#39;s
  name, the second containing the student&#39;s ID, and the third containing
  the student&#39;s scores on each assignment, in order.</FONT></P>
<P><FONT FACE="Goudy Old Style">Here are two lines of code to set up the reading from the two files listed above (in the same folder as your Scheme code):</FONT></P>
<P><code>(define assignment-port (open-input-file &quot;Assignments.txt&quot;))<br />
  (define student-port (open-input-file &quot;Students.txt&quot;))</code></P>
<P><FONT FACE="Goudy Old Style">Here are two examples of reading from the files:</FONT></P>
<P><code>(read assignment-port) ; Read one expression from the assignments file<br /> 
  (read-line student-port 'any) ; Read one line from the students file and return it as a string.</code></P>
<P> <FONT FACE="Goudy Old Style">The <code>'any</code> argument to <code>read-line</code> will handle files on both Windows and Mac; these systems use different characters to signal the end of a line.</FONT></P>
<P><FONT FACE="Goudy Old Style">As you read the input files, remember that the </FONT><FONT FACE="Courier New" SIZE=2>read-line</FONT><FONT FACE="Goudy Old Style"> function reads an entire line of input and returns a string (this is useful
  for reading strings that may contain blanks, without requiring the user
  to enclose the strings in quotation marks).  The </FONT><FONT FACE="Courier New" SIZE=2>read</FONT><FONT FACE="Goudy Old Style"> function reads the next Scheme expression (e.g., a single number) from the
    input.  You&#39;ll also want to call </FONT><FONT FACE="Courier New" SIZE=2>read-line</FONT><FONT FACE="Goudy Old Style"> (ignoring its return value) after reading numbers from a line; this will
      put you at the start of the next line so you&#39;re ready to read what&#39;s
      there.   Some <A HREF="http://www.ics.uci.edu/~kay/scheme/copy-file.scm">sample code</A> using </FONT><FONT FACE="Courier New" SIZE=2>read-line</FONT><FONT FACE="Goudy Old Style"> is available. </FONT></P>
<P><FONT FACE="Goudy Old Style">[This organization of the input files should make it easy for you to use </FONT><FONT FACE="Courier New" SIZE=2>read</FONT><FONT FACE="Goudy Old Style"> and </FONT><FONT FACE="Courier New" SIZE=2>read-line</FONT><FONT FACE="Goudy Old Style"> to create the internal representation of the data in your program; your task is to fit these components together, and you should spend some time trying to do that. But if you decide you need some additional guidance, start by reading the assignments file, because it's simpler. As always when designing programs with more than one &quot;layer&quot; of data structures, you should treat one layer at a time. For the file of assignments, for example, you should have (a) a function to read the information for one assignment and create that assignment, and (b) a function to read the number of assignments (from the first line of the assignments file), call the single-assignment-creation function that number of times, and finally create the collection of assignments. Do make sure you </FONT><FONT FACE="Goudy Old Style"> understand how to use </FONT><FONT FACE="Courier New" SIZE=2>read</FONT><FONT FACE="Goudy Old Style"> and </FONT><FONT FACE="Courier New" SIZE=2>read-line</FONT><FONT FACE="Goudy Old Style">: Choose the right function for the right kind of data, as described above.]</FONT></P>
<P> <FONT FACE="Goudy Old Style">Define functions that will fill the assignment
  and student collections by reading these files. It will also be helpful to write functions that print out these collections legibly; they'll help you in testing.</FONT></P>
<P> <FONT FACE="Goudy Old Style"><B>(c)</B> Since assignments don&#39;t necessarily
  all have the same number of points possible, it will be useful to compute
  and store a scaled score on each assignment (i.e., a number from 0 to 100,
  calculated from the student&#39;s raw score and the number of points possible
  on the assignment).  It might be easiest to implement this by storing for
  each student a second, parallel vector of scaled scores.</FONT></P>
<P> <FONT FACE="Goudy Old Style">You should also compute and store for each
  student the weighted overall score in the course, a number from 0 to 100
  calculated from the scaled scores and the weights of each assignment.</FONT></P>
<P> <FONT FACE="Goudy Old Style">To make the output look reasonable, use the
  function </FONT><FONT FACE="Courier New" SIZE=2><A HREF="http://www.ics.uci.edu/~kay/scheme/format-decimal.scm">format-decimal</A>.</FONT><FONT FACE="Goudy Old Style"> It takes two numbers (the first is the value to display, the second is
    the number of digits after the decimal point) and returns a string, suitable
    for use as an argument to </FONT><FONT FACE="Courier New" SIZE=2>display</FONT><FONT FACE="Goudy Old Style">.
      So, </FONT><FONT FACE="Courier New" SIZE=2>(format-decimal 25 2)</FONT><FONT FACE="Goudy Old Style"> returns </FONT><FONT FACE="Courier New" SIZE=2>&quot;25.00&quot;</FONT><FONT FACE="Goudy Old Style"> and </FONT><FONT FACE="Courier New" SIZE=2>(format-decimal 17.9876 3)</FONT><FONT FACE="Goudy Old Style"> returns </FONT><FONT FACE="Courier New" SIZE=2>&quot;17.988&quot;</FONT><FONT FACE="Goudy Old Style">.</FONT></P>
<P> <FONT FACE="Goudy Old Style"><B>(d)</B> Your program will have a text-based
  menu interface like the one in the restaurants programs.  It should include
  commands to</FONT></P>
<UL>
  <LI> <FONT FACE="Goudy Old Style">Search for a student by name or by ID (and
    display the student&#39;s information).</FONT><BR />
    <BR />
  </LI>
  <LI> <FONT FACE="Goudy Old Style">Display all the students&#39; information sorted
    by name or by overall score.  [If your collection of students is a list,
    you can use the predefined </FONT><FONT FACE="Courier New" SIZE=2>quicksort</FONT><FONT FACE="Goudy Old Style"> function with a carefully constructed lambda expression to accomplish this
      automatically.]</FONT><BR />
    <BR />
  </LI>
  <LI> <FONT FACE="Goudy Old Style">Display the information for all the assignments.</FONT><BR />
      <BR />
  </LI>
  <LI> <FONT FACE="Goudy Old Style">Display a histogram for overall course scores
    or for the scores on a single assignment (see below).</FONT><BR />
    <BR />
  </LI>
  <LI> <FONT FACE="Goudy Old Style">Quit.</FONT></LI>
</UL>
<P> <FONT FACE="Goudy Old Style">[Your first step here should be to write the
  menu-handling code, based on the restaurants programs, before writing code
  to do anything when the user selects a given command.  For each menu command besides Quit, just print out &quot;Received command X,&quot; where X is the command; we call this a &quot;program stub,&quot; a simple placeholder so you can see that the menu framework works before you write the code that actually performs each command. Then take each command, one by one, and code and test its implementation. You should use the restaurants code as a starting point, just changing the things you need to change for this task; don't try to create a new view/controller from scratch. Start with displaying the assignment information (because that&#39;s
  the easiest).]</FONT></P>
<P> <FONT FACE="Goudy Old Style"><B>(e)</B> A histogram is a bar graph showing
  the distribution of all the students&#39; scores, from highest to lowest.
  Given a list of scores, for example</FONT></P>
<P><code>(list 23 23 20 18 25 14 16 18 15 16 23)</code></P>
<P> <FONT FACE="Goudy Old Style">the histogram should display</FONT></P>
<P><code>&nbsp;&nbsp; 25 *<br />
  &nbsp;&nbsp; 24<br />
  &nbsp;&nbsp; 23 ***<br />
  &nbsp;&nbsp; 22<br />
  &nbsp;&nbsp; 21<br />
  &nbsp;&nbsp; 20 *<br />
  &nbsp;&nbsp; 19<br />
  &nbsp;&nbsp; 18 **<br />
  &nbsp;&nbsp; 17<br />
  &nbsp;&nbsp; 16 **<br />
  &nbsp;&nbsp; 15 *<br />
  &nbsp;&nbsp; 14 *</code></P>
<P> <FONT FACE="Goudy Old Style">Hints:  You might find it particularly convenient
  to create a vector of frequencies where </FONT><FONT FACE="Courier New" SIZE=2>(vector-ref
    freqency-vector N)</FONT><FONT FACE="Goudy Old Style"> contains the number
      of students whose score was N.  A simpler histogram would display the frequencies
      of scaled (0 to 100) scores, with 101 lines from 100 down to 0; start by
      implementing it that way.  You&#39;ll want to use the predefined </FONT><FONT FACE="Courier New" SIZE=2>round</FONT><FONT FACE="Goudy Old Style"> function to convert all the scores to integers.</FONT></P>
<P> <FONT FACE="Goudy Old Style"><B>(f)</B> Implement at least one of the following
  enhancements.  In a comment at the top of your definitions, list which one(s)
  you implemented.  Note that it is never acceptable (in class or in the real
  world) to submit buggy code.  It is much better to deliver fewer features,
  but features that work correctly, than to provide fancier functionality
  that &quot;almost works.&quot;   [This doesn&#39;t mean that you have to
  implement every single aspect of a bullet item below, but it does mean that
  whatever you do implement must work correctly and consistently with the
  rest of your program.]</FONT></P>
<UL>
  <LI> <FONT FACE="Goudy Old Style">Allow the user to change assignment and student
    information within the program, rather than just by editing the data files.
    Of course this also requires recomputing scaled and weighted scores and
    writing the files out when the user quits the program.</FONT><BR />
    <BR />
  </LI>
  <LI> <FONT FACE="Goudy Old Style">Allow the user to add new students and new
    assignments, and to remove students and assignments, within the program
    rather than just by editing the data files.  This will require creating
    new, larger (or smaller) vectors (or else creating vectors with a default
    size and keeping separate track for each vector of how much of it is actually
    being used).  Adding a new student would require adding scores for that
    student on each assignment (although you could implement a default score
    of zero), and adding a new assignment would require adding scores for all
    students on that assignment (though you might handle it by reading the new
    scores in from a separate file).</FONT><BR />
    <BR />
  </LI>
  <LI> <FONT FACE="Goudy Old Style">Improve the interface somehow (to give the
    user clearer or better organized information, help the user navigate through
    the functions and menus, or make it easier and less error-prone to enter
    data--not just to add decoration that doesn&#39;t serve any purpose).  For
    example, you could allow the user to request a list of students sorted by
    score on an individual assignment (or to specify sorting in ascending or
    descending order).  Or, you could implement a log file that saves a record
    of each transaction (each operation that changes the data); this could be
    useful for reconstructing the data files if they get damaged or deleted.
    <!-- You could even implement a web interface!-->
    </FONT><BR />
    <BR />
  </LI>
  <LI> <FONT FACE="Goudy Old Style">Implement some error checking.  What if the
    input file doesn&#39;t exist (or what if it does exist when you ask to create
    a new file)?  What if the input data are not in the right order or format?
    Do the weights of the assignments add up to 100%?  And so on.</FONT><BR />
     <BR />
  </LI>
  <LI> <FONT FACE="Goudy Old Style">Implement hierarchical, nested assignments.
    In a typical course, there might be lab assignments worth 30% of the course
    grade (let&#39;s say five assignments, each equally weighted at 20% of the
    total lab assignment score), a midterm worth 25% of the course grade, and
    a final exam worth 45% of the course grade (made up of eight problems whose
    points total to 100).  The point is that each graded item can be a single
    item (as we&#39;ve been handling all along) or it can be a compound item
    (with its overall weight in the course along with some number of subcomponents
    (each of which has its own name, possible points, and weight as part of
    its parent component).   Of course that means a subcomponent is just a graded
    item, and that there&#39;s no reason subcomponents can&#39;t have their
    own subcomponents.  You&#39;ll need to represent these graded items in the
    &quot;model&quot; part of the program and work out how to read, write, and
    display them.</FONT><BR />
    <BR />
  </LI>
  <LI> <FONT FACE="Goudy Old Style">Enhance the file-handling.  You could get a
    name or number for each course; incorporating that into the names of the
    data files would allow using the program for more than one course.  Then,
    when the program starts, you&#39;d need to ask the user which course to
    handle.  You might also give the user the option to create a new class rather
    than reading information from an existing one, or to choose any name for
    the assignment and student files.</FONT></LI>
  <br />
  <LI><FONT FACE="Goudy Old Style">Add a command to produce a histogram of the scores for a given graded item (e.g., just the midterm).</FONT></LI>
  <BR />
  <LI> <FONT FACE="Goudy Old Style">Enhance the histogram in a variety of ways:</FONT></LI>
  <BR />
  <UL>
    <LI> <FONT FACE="Goudy Old Style">The original histogram displays scores in one-point
      intervals.  That could lead to a pretty big histogram on a 100-point test.
      This interval is sometimes called the &quot;bin size.&quot; You can allow
      the user to specify the bin size and display scores grouped accordingly.</FONT></LI>
    <BR />
    <LI> <FONT FACE="Goudy Old Style">Make the upper end of the top bin&#39;s interval
      the highest score on the list (so if nobody scored above, say, 80, you don&#39;t
      have empty space between 80 and 100.  Likewise, don&#39;t go lower than
      the lowest score.</FONT><BR />
      <BR />
    </LI>
    <LI> <FONT FACE="Goudy Old Style">Take the number of bins as the parameter (so
      you&#39;d calculate the bin size based on the top score, the bottom score,
      and how many bins the user wants).</FONT></LI>
    <BR />
    <LI> <FONT FACE="Goudy Old Style">Take the lowest 5% of the scores and collect
      them into the bottom bin, &quot;N points and under.&quot;  This may spare
      the feelings of the person who had the very lowest score in the class.</FONT><BR />
      <BR />
    </LI>
    <LI> <FONT FACE="Goudy Old Style">Scale the histogram horizontally, too:  The
      bars may be too wide if the class is large.  Let the user specify the length
      of the widest bar and scale the others accordingly.</FONT></LI>
    <BR />
    <LI> <FONT FACE="Goudy Old Style">Print the histogram horizontally (on its back,
      so to speak).</FONT><BR />
      <BR />
    </LI>
    <LI> <FONT FACE="Goudy Old Style">Use the functions in the </FONT><FONT FACE="Courier New" SIZE=2>picturing-programs.rkt</FONT><FONT FACE="Goudy Old Style"> teachpack to produce the histograms graphically.</FONT><BR />
        <BR />
    </LI>
  </UL>
  <LI> <FONT FACE="Goudy Old Style">Implement the collection of students as a binary
    search tree, sorted by the students&#39; names.</FONT></LI>
  <BR />
  <LI> <FONT FACE="Goudy Old Style">Distinguish between no score (which would be
    appropriate if someone missed an assignment entirely) and a zero (for someone
    who did the assignment but earned zero credit).</FONT></LI>
</UL>
<P> <FONT FACE="Goudy Old Style"><B>(g)</B> Submit the file containing all
  your definitions as usual via Checkmate.</FONT></P>
<P> <FONT FACE="Goudy Old Style"><B>(h)</B> Complete your  last partner evaluation
  form at eee.uci.edu.  Please do this by Saturday morning at the latest,
  or you won&#39;t get credit.</FONT><BR />
</P>
<P> <FONT FACE="Helvetica" SIZE=1>Written by David G. Kay for the innaugural Informatics Core Course, Fall 2004, and modified Fall 2005, Fall 2008, and Fall 2009. Modified Fall 2010 by David G. Kay to reflect the <em>Picturing Programs</em> text and Fall 2011 to include multiple starting points.</FONT></P>
<HR />
<FONT FACE="Goudy Old Style"><A HREF="http://www.ics.uci.edu/~kay/">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />
<font size="2" face="Goudy Old Style">
<!-- #BeginDate format:fcAm1a -->Wednesday, November 23, 2011 12:12 PM<!-- #EndDate -->
</font></span>
</BODY>
</HTML>
