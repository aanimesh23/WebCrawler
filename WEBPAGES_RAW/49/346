<!DOCTYPE HTML SYSTEM "html.dtd">
<HTML CHARSET="head">
<HEAD>   <TITLE>Low-Power processors</TITLE>	</HEAD>

<font color="cc9876">
<BODY><H2> Reducing power consumption in <br> embedded and high-performance processors.
</H2> 
</font>

<p>
Power dissipation is a major issue in processor design. In particular, CMOS technology scaling<br>
has significantly increased the leakage power dissipation so that it accounts for an increasingly large<br>
fraction of processor power dissipation.  One of the main issue is how to achieve power savings without loss<br>
of performance.<br>
</p>

<p>
Much of our work in this area has focused on cache power dissipation.  We addressed issues<br>
in L1 I- and D-cache dynamic as well as static power consumption. This included way caching to save<br>
static and dynamic power in high-associativity caches (as an alternative to way prediction),<br>
cached load-store queue as a low-cost alternative to L0 cache, using branch prediction information<br>
to save power in instruction caches. We addressed L2 power consumption, in particular leakage power<br>
in L2 peripheral circuits.  The results of this research are applicable in both embedded and<br>
high-performance processors.<br>
</p>

<p>
Another aspect of this research is low-power instruction queue design for out-of-order processors.<br>
CAM-based instruction queues are not scalable and consume significant amount of power due to wide<br>
issue and CAM search on each cycle.  One approach we proposed used a banked queue, thus dividing a<br>
CAM into smaller banks with faster search. A pointer table indicates which bank an instruction belongs to.<br>
A more complex approach disposed of CAM-based queue altogether and used instruction dependence pointers<br>
and RAM-based queue for "direct" wakeup.  It solved the problem of how to achieve fast branch <br> 
misprediction recovery when using pointers while using dependent pointers. <br>
</p>

<p>
Finally, we investigated the problem of power consumption in the register file.  Content-aware register file<br>
utilized knowledge of instruction operand and effective address width to reduce the number<br>
of bits read from the RF and to speed up TLB access using an "L0 TLB".  This type of register file was also <br>
shown to enable a new type of clustered processor with improved performance and reduced power.<br>
</p>

See recent publication list for papers with details of the above.
</BODY></HTML>
