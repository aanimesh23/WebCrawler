<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- Page automatically generated from latex_to_html converter. -->
<!-- by cc_extract_html, $Revision: 3.19 $ -->
<!-- LaTeX source file: './Optimisation_ref/WidthTraits_3.tex' -->
<html> <head>  
<title>WidthTraits_3</title>
</head>  
<link href="../latex_to_html.css" rel="STYLESHEET">
<body bgcolor="white">
<!-- ------------------------------------------------------------------- -->


<!-- Top Navigation ---------------------------------------------------- -->
<div class="NavTop">
<hr>
  <strong>Navigation:</strong>
<a href="Chapter_intro.html">Up</a>, 
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<hr><!-- End of Top Navigation ----------------------------------------- -->
</div>


<A NAME="Cross_link_anchor_1203"></A>

      
     
     
     
<A NAME="Index_anchor_1256"></A> 

   
<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC="cc_Concept.gif"></TD></TR></TABLE>


    <A NAME="ccRef_WidthTraits_3"></A>
<h2><I>WidthTraits_3</I></h2>
<P>

<H3>Definition</H3>
<P>

This concept defines the requirements for traits classes of
<I><A HREF="Class_Width_3.html#Cross_link_anchor_1200">Width_3</A>&lt;Traits&gt;</I>.
<P>

<H3>Types</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_WidthTraits_3.html#Cross_link_anchor_1203">WidthTraits_3</A>::<A HREF="../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74">Point_3</A>
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    The point type. The (in)equality tests must be
  available. Access to the point coordinates is done via the <I>get_.()</I>
  functions. Constructing a point is done with the <I>make_point( )</I>
  operation.
<P>

</TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_WidthTraits_3.html#Cross_link_anchor_1203">WidthTraits_3</A>::<A HREF="../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A>
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    The plane type. Access to the coefficients of the
  plane is made via the <I>get_.()</I> functions. Constructing a plane is
  done with the <I>make_plane()</I> operation.
<P>

</TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_WidthTraits_3.html#Cross_link_anchor_1203">WidthTraits_3</A>::<A HREF="../Kernel_23_ref/Class_Vector_3.html#Cross_link_anchor_86">Vector_3</A>
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    The vector type. There is no need to access the
  coefficients of a vector; only constructing is required and is done with
  the <I>make_vector</I> operation.
<P>

</TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_WidthTraits_3.html#Cross_link_anchor_1203">WidthTraits_3</A>::ChullTraits
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    The traits class for using the convex hull
  algorithm. It must be a model of the concept <A HREF="../Convex_hull_3_ref/Concept_ConvexHullTraits_3.html#Cross_link_anchor_637">ConvexHullTraits_3</A>.
  This class is used only if the width is computed from a set
  of points.
<P>

</TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_WidthTraits_3.html#Cross_link_anchor_1203">WidthTraits_3</A>::RT
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    Ring type numbers. Internally all numbers are treated as
  ring type numbers, i.e., neither <MATH><I>/</I></MATH>-operator nor <MATH><I><A HREF="../NumberTypeSupport_ref/Function_sqrt.html#Cross_link_anchor_1414">sqrt</A>(.)</I></MATH> nor other
  inexact operations are used. But because the algorithm does not use any
  divisions, but multiplication instead, the numbers can get really big.
  Therefore it is recommended to use a ring type number, that provides
  values of arbitrary length. Furthermore it is assumed that the underlying
  number type of <I><A HREF="../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74">Point_3</A></I>, <I><A HREF="../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A></I> and <I><A HREF="../Kernel_23_ref/Class_Vector_3.html#Cross_link_anchor_86">Vector_3</A></I> equals
  <I>RT</I>.
<P>

</TD></TR>
        </TABLE>
<P>

<I>Notes:</I> If you want to compute the width of a <I>polyhedron</I>
then you have to make sure that the point type in the traits class and
the point type in the polyhedron class are the same! The same holds
for <I>Traits::<A HREF="../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A></I> and <I>Polyhedron::<A HREF="../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A></I>.
<P>

<H3>Creation</H3>
<P>

Only a default constructor is required.
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Concept_WidthTraits_3.html#Cross_link_anchor_1203">WidthTraits_3</A> traits;
        </I></NOBR>
        </TD></TR>
<P>

</TABLE>
<P>

<H3>Operations</H3>Whatever the coordinates of the points are, it is required for the
width-algorithm to have access to the homogeneous representation of
points.
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_RT_get_hx6const_Point_3__p9_const;"></A>
RT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    get_hx (  <A HREF="../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74">Point_3</A> p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the
  homogeneous <MATH><I>x</I></MATH>-coordinate of point <MATH><I>p</I></MATH>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_RT_get_hy6const_Point_3__p9_const;"></A>
RT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    get_hy (  <A HREF="../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74">Point_3</A> p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the
  homogeneous <MATH><I>y</I></MATH>-coordinate of point <MATH><I>p</I></MATH>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_RT_get_hz6const_Point_3__p9_const;"></A>
RT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    get_hz (  <A HREF="../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74">Point_3</A> p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the
  homogeneous <MATH><I>z</I></MATH>-coordinate of point <MATH><I>p</I></MATH>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_RT_get_hw6const_Point_3__p9_const;"></A>
RT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    get_hw (  <A HREF="../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74">Point_3</A> p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the
  homogenizing coordinate of point <MATH><I>p</I></MATH>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_get_point_coordinates6const_Point_3__p+_RT__px+_RT__py+_RT__pz+_RT__ph9_const;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    get_point_coordinates ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     <A HREF="../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74">Point_3</A> p,<BR>

RT&amp; px,<BR>

RT&amp; py,<BR>

RT&amp; pz,<BR>

RT&amp; ph)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns all homogeneous coordinates
  of point <MATH><I>p</I></MATH> at once.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_RT_get_a6const_Plane_3__f9_const;"></A>
RT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    get_a (  <A HREF="../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A> f)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the first
  coefficient of plane <MATH><I>f</I></MATH>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_RT_get_b6const_Plane_3__f9_const;"></A>
RT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    get_b (  <A HREF="../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A> f)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the second
  coefficient of plane <MATH><I>f</I></MATH>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_RT_get_c6const_Plane_3__f9_const;"></A>
RT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    get_c (  <A HREF="../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A> f)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the third
  coefficient of plane <MATH><I>f</I></MATH>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_RT_get_d6const_Plane_3__f9_const;"></A>
RT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    get_d (  <A HREF="../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A> f)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the fourth
  coefficient of plane <MATH><I>f</I></MATH>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_void_get_plane_coefficients6const_Plane_3__f+_RT__a+_RT__b+_RT__c+_RT__d9_const;"></A>
void
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    get_plane_coefficients ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     <A HREF="../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A> f,<BR>

RT&amp; a,<BR>

RT&amp; b,<BR>

RT&amp; c,<BR>

RT&amp; d)</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns all four plane coefficients of <MATH><I>f</I></MATH> at once.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_3_make_point6const_RT__hx+_const_RT__hy+_const_RT__hz+_const_RT__hw9_const;"></A>
<A HREF="../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74">Point_3</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    make_point (  RT hx,  RT hy,  RT hz,  RT hw)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a point of type
  <I><A HREF="../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74">Point_3</A></I> with homogeneous coordinates <MATH><I>hx</I></MATH>, <MATH><I>hy</I></MATH>, <MATH><I>hz</I></MATH> and <MATH><I>hw</I></MATH>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Plane_3_make_plane6const_RT__a+_const_RT__b+_const_RT__c+_const_RT__d9_const;"></A>
<A HREF="../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    make_plane (  RT a,  RT b,  RT c,  RT d)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a plane of type <I><A HREF="../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A></I>
  with coefficients <MATH><I>a</I></MATH>, <MATH><I>b</I></MATH>, <MATH><I>c</I></MATH> and <MATH><I>d</I></MATH>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Vector_3_make_vector6const_RT__a+_const_RT__b+_const_RT__c9_const;"></A>
<A HREF="../Kernel_23_ref/Class_Vector_3.html#Cross_link_anchor_86">Vector_3</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    make_vector (  RT a,  RT b,  RT c)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a vector of type <I><A HREF="../Kernel_23_ref/Class_Vector_3.html#Cross_link_anchor_86">Vector_3</A></I> with the four
  homogeneous coefficients <MATH><I>a</I></MATH>, <MATH><I>b</I></MATH>, <MATH><I>c</I></MATH> and 1.
        </TD></TR>
        </TABLE>
<P>

<H3>Has Models</H3>
<P>

<I><A HREF="Class_Width_default_traits_3.html#Cross_link_anchor_1201">CGAL::Width_default_traits_3</A>&lt;K&gt;</I>
<P>

<H3>See Also</H3>
<P>

<A NAME="Index_anchor_1257"></A> 

   
 
    

<I><A HREF="Class_Width_3.html#Cross_link_anchor_1199">CGAL::Width_3</A>&lt;Traits&gt;</I>
<P>

<div class="NavNext"><hr> <b>Next:</b> <a href="Class_Polytope_distance_d.html"><I>Polytope_distance_d&lt;Traits&gt;</I></a> 


    
<div class="NavBottom">
<hr><!-- Bottom Navigation --------------------------------------------- -->
  <strong>Navigation:</strong>
<!Up_chapter_link_52!>
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<!-- End of Bottom Navigation ------------------------------------------ -->


<hr><!-- --------------------------------------------------------------- -->
<div class="NavAddress">

The <A HREF=http://www.cgal.org>CGAL Project</A> .

Tue, December 21, 2004 .
<hr></div>
</body>  </html>  
