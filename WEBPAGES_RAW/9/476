<title>ProcessorAggregation</title>
<body bgcolor=#ffffff>
<h2> Aggregating Processor Free Time for Energy Reduction </h2>
  
<a
href="http://www.ics.uci.edu/~aviral/papers/processorAggregation.pdf"><img
src="pdf.png" alt="pdf" width="34" height="34" border="0"></a>

<a href="http://www.ics.uci.edu/~aviral/papers/processorAggregation.ppt"><img src="ppt.png" alt="ppt" width="34" height="34" border="0"></a>

<p><i>
<a href="http://www.ics.uci.edu/~aviral"> Aviral Shrivastava </a>,
<a href="http://search2.intel.com/corporate/default.aspx?culture=en-US&q=Eugene+Earlie"> Eugene Earlie</a>,
<a href="http://www.ics.uci.edu/~dutt"> Nikil Dutt </a>, and
<a href="http://www.ics.uci.edu/~nicolau"> Alex Nicolau</a> 
</i>

<p><b>CODES+ISSS 2005: </b><i>Proceedings of the 3rd IEEE/ACM/IFIP
International Conference on Hardware/Software Codesign and 
System Synthesis</i>

<p><b>Abstract: </b>
Even after carefully tuning the memory characteristics to the
application properties and the processor speed, during the execution
of real applications there are times when the processor
stalls, waiting for data from the memory. Processor stall
can be used to increase the throughput by temporarily switching
to a different thread of execution, or reduce the power
and energy consumption by temporarily switching the processor
to low-power mode. However, any such technique has
a performance overhead in terms of switching time. Even
though over the execution of an application the processor is
stalled for a considerable amount of time, each stall duration
is too small to profitably perform any state switch. In
this paper, we present code transformations to aggregate processor
free time. Our experiments on the Intel XScale and
Stream kernels show that up to 50,000 processor cycles can
be aggregated, and used to profitably switch the processor to
low-power mode. We further show that our code transformations
can switch the processor to low-power mode for up
to 75% of kernel runtime, achieving up to 18% of processor
energy savings on multimedia applications. Our technique
requires minimal architectural modifications and incurs negligible
(< 1%) performance loss.
<p>

<hr>

<table cellpadding="2" cellspacing="2" border="0" width="100%">
  <tbody>
    <tr>
      <td valign="left">
      Center For Embedded Computer Systems,<br> 
      Department of Information and Computer Science,<br>
      University of California, Irvine.
      </td>
    
      <td valign="right">
      Strategic CAD Labs,<br>
      Intel Corporation, <br>
      Hudson, Massachussets.
      </td>
    </tr>
  </tbody>
</table>
