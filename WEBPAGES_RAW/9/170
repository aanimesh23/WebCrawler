<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Python Programming in the Eclipse IDE</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Python Programming in the Eclipse IDE</h1>
<p>
</center>


<!-- Introduction -->

<a name="Introduction">
<hr align="left" width="100%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Introduction</b></td>
<td width ="80%">

This handout introduces Python programming in the Eclipse Integrated
  Development Environment (IDE).
It is presented partly as a tutorial and partly in a "cook book" style: read
  the text and follow the instructions to gain some hands-on experience
  operating this software, which we will use extensively when we write, test,
  and debug our own programs.
Use the resulting screen shots (checking them against what appears on your
  computer) to ensure that you are correctly following these instructions.
<p>

You will be instructed to type Python statements and even small programs, using
  language features that we will cover later in the quarter.
We will briefly discuss these features, but for now, do not worry about
  completely understanding what you type.
Instead concentrate on ensuring that you type everything exactly as it appears
  here: character-for-character, using the same upper-case or lower-case
  letters, punctuation, and even spacing.
<p>

In the sections below you will learn how to
<ul>
<li>Start and Stop Eclipse
<li>Recognize the parts of the Eclipse Workbench
<li>Test code in the Python Interpreter
<li>Create a New a Project in the Eclipse Workbench
<li>Enter and Edit a Script (a module that runs as a program)
<li>Run a Script
<li>Find and Correct Errors in a Script
<li>Finish a Project
<li>Use an Old/Existing Project in the Eclipse Workbench
</ul>
<p>

The Eclipse project itself resides on the
  <a href="http://www.eclipse.org/" target= "_blank">
  Eclipse.org</a> web page.
If you have not already done so, check the second message (<b>Install Course
  Sofware</b>) on the
  <a href="../../ICS-31/announcements.html" target="_top">Announcements</a>
  link for instructions on how to install Python, Eclipse, and configure
  Eclipse to run Python.
<p>

It is an excellent idea to create a shortcut to Eclipse on the desktop;
and once you have created an Eclipse workspace, a shortcut to it on the desktop.
</td>
</tbody>
</table>


<!-- Starting/Stopping Ecliplse -->

<a name="StartStop"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Starting and<br>Stopping Eclipse</b></td>
<td width ="80%">
We start Eclipse by double-clicking (a shortcut to) its icon, which is
  commonly referred to as the <b>Death Star</b> (from the Star Wars movies).
<p>
  <img src="pyimages/deathstar.jpg">
<p>
The instructions for downloading/installing Eclipe include creating this
  shortcut; for lab machines, you must select
  <b>Start | All Programs | Python</b> and then double-click
  <b>Eclipse</b> to start Eclipse.
<p>

While it is loading, Eclipse displays the following splash screen.
Note that says Version 4.2 (Juno), but you may see a more recent release
  of Eclipse.
<p>
<!-- see Eclipse4.2/plugins/org.eclipse.platform_4.2.0v.../splash.bmp-->
<img src="pyimages/splash.bmp">
<p>
After loading, Eclipse next displays the <b>Workspace Launcher</b> window.
If this is the first time that we have started Eclipse, this window will
  display a suggested workspace typed in the <b>Workspace</b> pull-down box,
  as shown below.
If we examine this pull-down box, there will be no other items in it.
<p>
<img src="pyimages/workspacelauncher.jpg">.
<p>

The form of the suggested workspace is
  <b>C:\Users\<i>username</i>\workspace</b>,
  where <b><i>username</i></b> appears above as <b>Pattis</b>.
<p>

On subsequent statups, the contents of the pull-down box will default to
  the last workspace that we used.
It is possible to create/use multiple workspaces: the most recently used ones
  will appear as items in the <b>Workspace</b> pull-down box, with the workspace
  that we used most recently visible at the top.
This information is stored in the <b>eclipse</b> folder (created when Eclipse
  was installed), in the file
  <b>configuration\.settings\org.eclipse.ui.ide.prefs</b> (which is a text file
  that we can read and even edit).
<p>

If we use just one workspace (recommended), we can put a check in the checkbox
  <b>Use this as the default and do not ask again</b>, to avoid
  this window's prompt altogether.
Or, we can leave this box unchecked (recommended), at the small cost of having
  to click the <b>OK</b> button in this window every time that we start
  Eclipse; on the positive side, whenever we start Eclipse we will be reminded
  of the folder that it is using for our workspace, which is useful if we need
  to know the workspace's name but forget which folder we are using as the
  workspace.
<p>

Go ahead now and click the <b>OK</b> button to select the default work space.
The progress bar on the bottom of the splash screen progresses to the end
  (should take under a minute), at which point the splash screen will disappear
  and Eclipse should appear in the following form (although its window will be
  bigger on our screen).
If you see a screen with a tab that says <b>Welcome</b>, click where it says
  <b>Workbench</b>); this screen appears only when you select a new workspace.
</td>
</tbody>
</table>
<!---
<p>
<img src="pyimages/welcome.jpg">.
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>&nbsp</b></td>
<td width ="80%">
This screen appears only the first time that you start Eclipse on your
  computer.
Click the <b>X</b> to the right of the <b>Welcome</b> tab and Eclipse will
  display its standard window.
</td>
</tbody>
</table>
--->
<p>
<img src="pyimages/eclipsestart.jpg">
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>&nbsp</b></td>
<td width ="80%">
To stop Eclipse, we can either select <b>File | Exit</b> from the left-most
  pull-down menu, or more simply just click the standard terminate window
  button (<b>X</b>) in the upper-righthand corner.
If the latter, Eclipse will prompt for confirmation of termination with the
  following window.
<p>
<img src="pyimages/confirmexit.jpg">.
<p>

Here too, we can put a check in the <b>Always exit without prompt</b> checkbox
  to avoid this window's prompt altogether.
Or, we can leave this box unchecked (recommended), at the cost of having to
  click the <b>OK</b> button in this window every time that we stop Eclipse
  by clicking the terminate window button; on the positive side, we won't
  accidentally terminate Eclipse, because we need to confirm the termination.
<p>

If we ever put a check in one of these "do not prompt again" checkboxes,
  but later want to restore these prompts, we can do it as follows.
Once Eclipse appears on the screen, select <b>Window | Preferences</b>.
Then disclose <b>General</b> (click its plus) and <b>Startup and Shutdown</b>
  (ditto) and then click on the <b>Workspaces</b> entry.
We should ultimately see the following window (I am running this on my
  own computer, where my <i>username</i> is <b>Pattis</b>).
<p>
<img src="pyimages/startupshutdownworkspacespreferences.jpg">.
<p>
We can check or uncheck the <b>Prompt for workspace on startup</b> box for
   our preference, then click <b>Apply</b>, and finally click <b>OK</b>
  (recommended to leave this box checked).
<p>

Now click on <b>Startup and Shutdow</b> entry. 
You should see the following window.
<p>
<img src="pyimages/startupshutdownpreferences.jpg">.
<p>

We can check or uncheck the <b>Confirm exit when closing last window</b> box
  for our preference, then click <b>Apply</b>, and finally click <b>OK</b>
  (recommended to leave this box checked).
<p>

Practice starting and stopping Eclipse, setting these prompt/confirm
  preferences as described above, and observing their behavior.
After starting Eclipse, change the size of its main window, and note that when
  you stop and then restart it, the window will be the same size: Eclipse
  remembers the size of this window.
In fact, once we start using Eclipse for real programming, whenever it starts
  it will appear exactly as it appeared when we last stopped it.
Therefore, it is simple to resume working in exactly the same context that we
  were in when we stopped Eclipse.
<p>
While we are examining preferences, let's illustrate one more that is 
  useful.
Select <b>Window | Preferences | PyDev | Editor | Auto Imports</b> and
  uncheck the <b>Do auto import?</b> checkbox (illustrated below) and
  then click <b>Apply</b> following by <b>OK</b>.
<p>
<img src="pyimages/autoimportpreferences.jpg">.
<p>
Doing so is especially important for Mac users, relating to our automatic
  grading program, which I run on my PC.
</td>
</tbody>
</table>


<!-- Nomenclature -->

<a name="Nomenclature"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Eclipse Nomenclature</b></td>
<td width ="80%">
This section contains a terse description of Eclipse using <b>highlighted</b>
  technical terms to describe its basic layout and operation.
Start becoming familar with these terms now; we will repeatedly use them during
  the course, so we will become very familiar with them.
Because Eclipse is an <i>industrial-strength</i> tool, and we are using it in
  an academic setting (an early programming course), we will focus on only its
  simpler aspects.
The most important terms that we will discuss and use are <b>workbench</b>,
  <b>workspace</b>, <b>perspective</b>, <b>view</b>, and <b>toolbar</b>.
<p>

<b>Workbench</b>/<b>Workspace</b>:
These two terms are closely connected, to the point of having the same prefix:
  <b>work</b>.
The <b>workbench</b> (or more accurately, the workbench window -see the window
  below) is the Eclipse interface to a <b>workspace</b>.
The <b>workspace</b> is a folder that comprises a collection of files/subfolders
  that store the workspace's preferences (how the workbench window appears on
  the screen and how it displays/manipulates it contents) and projects
  (collections of related programming resources -primarily Python modules).
We interact with a workspace -view and manipulate its preferences and projects-
  through a workbench window.
One of the primary ways we interact with projects in Eclipse is by editing
  their Python modules resources.
<p>

Preferences specify how a workbench window displays a workspace; projects
  specify the software that we can develop using the workbench window.
In the section above, we started Eclipse and created a new, "empty" workspace;
  actually, it is not really empty: it stores all the standard preferences for
  the workbench window (stored in a folder named <b>.metadata</b>), but no
  projects yet.
Then, the workbench window displayed this "empty" workspace.
The workspace also records whether each project it contains is open or closed
  for use (for more details, see the section on 
  <a href="lecture.html#Finishing" target="main">Closing Workspaces</a>).
Finally a workspace stores preferences that apply to all its projects, and
  also apply to the workbench displaying the workspace.
<p>

Eclipse is general: we can have any number of workbench windows open, each 
  referring to a unique workspace.
For simplicity, we will always use just one workbench window, and it will
  always refer to the same workspace.
In fact, in the following discussion we often will say <b>Eclipse</b> when we
  mean a <b>workbench window referring to our standard workspace</b>.
Below is an example of Eclipse using all the standard preferences, with
  labels affixed to many of it interesting features.
It shows the "Demo" project that we are developing.
The rest of the this section will examine other technical terms explaining its
  layout and operation.
</td>
</tbody>
</table>
<img src="pyimages/workbench.jpg">
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>&nbsp</b></td>
<td width ="80%">
<b>Perspective</b>: At any given time, Eclipse displays one <b>perspective</b>
  of the many that it can display.
Each different perspective is suited to one specific programming task.
The perspective shown above in Eclipse is the <b>PyDev</b> perspective,
  which we use to develop Python modules (write/run/edit them).
Notice that the name of the perspective, <b>PyDev</b> appears depressed (it
  is active) towards the top-right of the workbench.
It is followed by another tab, indicating the <b>Debug</b> perspective,
  which we use to debug Python modules (find/correct errors in them).
We can switch to any perspective by clicking its tab; click the <b>Debug</b>
  perspective and you will see its views (discussed below; many are the same);
  then click the <b>PyDev</b> perspective to return to its views.
<p>

<b>View</b>: Each perspective contains a variety of <b>views</b> that allow
  us to view, navigate, and edit information about a project.
So, views are not just for looking: we can use views to change information too.
A view may appear as a single tab, or it may be one of many tabs in a tabbed
  window, containing many views, of which only one is active at a time- the
  top one.
The <b>PyDev</b> perspective contains a variety of standard views illustrated
  above.
Going clockwise from the top left,
<ul>
<li>The <b>Package Explorer</b> view is the only tab in a window that shows
      all the code (modules and libraries, and their files) under a
      project name.
    Here the project name is <b>Demo</b> and it contains a module named
      <b>Script.py</b>.
<p>

<li>An <b>Editor</b> view is a tabbed window containing one tab per file being
       edited; here the only file being edited is a module named
      <b>Script.py</b> so there is only one tab in this editor window.
    The tab contains the name of the resource being edited; if we hover over
      the tab that views a <b>.py</b> file, Eclipse displays the name of the
      project folder (and the package containing the module, if there is one)
      and finally the module name itself: here <b>Demo/Script.py</b>.
    If the resource is not in a project (e.g., a module in a library), its path
      is displayed before its folder's name.
<p>

<li>The <b>Outline</b> view is the only tab in a window that shows a high-level
      outline: where names (imports, variables, and functions/methods) in the
      module in the active editor tab are defined or redefined.
    When can click a name in the Outline view, the Python code (re)defining
      that name will appear in its Editor tab; so the Outline view is one way
      to navigate a large file containing Python code.
<p>

<li>The <b>Problems</b> view (it is one tab in a window, containing other tabs
      of which <b>Console</b> is the most important) shows a list of all the
      errors the Python Interpreter found in the project.
    The <b>Console</b> view shows the input to and output from the script when
      it runs; this view can also show interaction with the Pythyon Interpreter
     (see  <a href="lecture.html#RunInterpreter" target="main">Running the
      Python Interpreter</a>).
</ul>
We can adjust the sizes of all the views in a perspective.
If we remove a view from a perspective, we can restore that view by selecting
  <b>Window | Show View</b> and then clicking the
  view to restore, as illustrated below.
<p>
<img src="pyimages/restoreview.jpg">.
<p>

Because these views are related, some information is propagated into multiple
  views: e.g., the red indicators that there are syntax errors in the code.
When such errors appear/disappear in/from one window, they often simultaneously
  appear/disappear in/from others.
<p>

<b>Toolbar</b>: The workbench toolbar appears under the menu bar that
  includes the drop-down menus labeled <b>File</b>, <b>Edit</b>, <b>Source</b>,
  etc.
The toolbar's buttons here act as short cuts for common operations in a
  perspective; we can also invoke these operations with the pull-down menus,
  but clicking these buttons is faster.
The picture above labels the make <b>New</b>, <b>Debug</b>, and <b>Rerun</b>
  buttons, which are the most useful.
The buttons on the toolbar change when we change the perspective.
We can customize toolbars within a perspective, but we will not cover
  this topic here.
<p>

Generally, we can manipulate the perspective and views (in a perspective) in a
  few interesting  ways.<p>
<b>Perspectives</b>:
<ul>
<li>We can remove a perspective name from the workbench by right-clicking its
       icon and selecting <b>Close</b>: we do this for the <b>Java</b>
       perspective, which we don't need but initially appears in Eclipse.
<li>We can restore a closed perspective name <b><i>P</i></b> by selecting 
     <b>Window | Open Perspective | <i>P</i></b> or by clicking the
     <b>Open Perspective</b> button and selecting <b><i>P</i></b>.
<li>We can elide a perspective name, just displaying its icons by 
       right-clicking any perspective and then selecting <b>Show Text</b>
      (toggling whether its text is shown).
<li>We can rearrange the order of perspectives by closing them all and then
      restoring them in the order we want them to appear: <b>PyDev</b> followed
      by <b>Debug</b> is recommended.
</ul>
<p>

<b>View</b>:
<ul>
<li>We can remove a view by right-clicking its tab and selecting <b>Close</b>,
      or pressing the <b>X</b> on its tab after the view's name.
<li>We can restore a view <b><i>V</i></b> by selecting
     <b>Window | Open View | <i>V</i></b>.
<li>If two view tabs share a vertical boundary, we can drag the boundary left or
      right to change the relative size of the tabs (lengthing one and
      shotening the other);
    if two view tabs share a horizontal boundary, we can drag the boundary up or
      down to change the relative size of the tabs (lengthing one and
      shotening the other)
<li>We can dock view tabs/windows to create different tilings of a perspective,
      by dragging and dropping a tab/window in the desired configuration.
<li>We can restore all standard views for a perspective (and their standard
      tiling) by selecting <b>Window | Reset Perspective</b> from the menu.
</ul>


</td>
</tbody>
</table>



<!-- Running the Interpreter -->

<a name="RunInterpreter"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Running the Python Interpreter</b></td>
<td width ="80%">
In this section we will discuss how to run the Python Interpreter in Eclipse.
We run the interpreter to experiment easily with small amounts of Python code.
As beginners, we can easily perform experiments with the Python Interpreter to
  help us learn the simple Python language features: as more experienced
  programmers, we can easily investigate more complicated language features and
  libraries, while writing programs without leaving Eclipse.
We will take both roles as the quarter progresses, so it is important to know
  how to access the Python Interpreter in Eclipse.
<p>

The Python Interpreter runs in a <b>Console</b> tab.
When we start Eclipse we should see one Console tab; if we don't, we can select
  the <b>Window | Show View</b> command illustrated in the previous section to
  create a console tab.
Once we see a Console tab, click it, then click the Open Console control
icon <img src="pyimages/openconsolecontrol.jpg"> (located on the toolbar
  holding the Console tab) and then click <b>5 PyDev Console</b> as illustrated
  below.
<p>
<img src="pyimages/openconsolemenu.jpg">
<p>

The following pop-up menu will appear, with either the first
  (<b>Console for currently active editor</b>) or second
  (<b>Python console</b>) radio button pushed (as is shown below).
<p>
<img src="pyimages/whichinterpreter.jpg">
<p>
Click <b>OK</b>.
The following will appear in the Console tab (which appears every time we
  start the Python Interpreter).
<p>
<img src="pyimages/pythoninconsole.jpg">
<p>

We can type Python code at the green triple chevron prompt (&gt;&gt;&gt;);
  when we press the &crarr; key (Enter), the Python Interpreter will run
  our code, print its result, and prompt us again.
Enter the Python code that appears in blue below, and verify that the Python
  Interpreter prints the information that appears in black.
<p>
<img src="pyimages/pythoninterpreter.jpg">
<p>

If we enter a line with an error (e.g., misspell <b>sqrt</b> as <b>sqr</b>)
  the Python Interpreter will display a red error message: there is no
   <b>sqr</b> function in the <b>math</b> module.
Instead of retyping this line correctly, we can press the <b>&uarr;</b>
  (up arrow) key located on the right of the keyboard on 8 (make sure
  <b>NumLock</b> is off).
This causes the Python Interpreter to redisplay the previous line that we typed,
  and we can now edit this line: e.g., by using the <b>&larr;</b> (left arrow)
  key located on the right of the keyboard on 4, to move the cursor left to the
  spot where we forgot to type the <b>t</b>, and type the <b>t</b>.
Then we can press the <b>End</b> key located on the right of the keyboard on 1
  to move the cursor to the end of the line and finally press &crarr;.
<p>
Alternatively, we can press the <b>PgUp</b> button and see a
<b>Command history</b> scrollable window, in which we can select any command
  we typed previously to re-execute.
If we type characters in the bottom text field, the main window will show only
  those commands that typed starting with those characters.
<p>
<img src="pyimages/pythoninterpretererror.jpg">
<p>

Note that when we are editing a line in the Python Interpreter, we can also use
  the <b>Home</b> key to move the cursor to the start of a line, the &rarr; key
  to move the cursor right, the <b>Backspace</b> key to remove the character
  before the cursor and the <b>Del</b> key to remove the character after the
  cursor.
In this way it we can easily correct any code we mistype in the interpreter.
By experimenting with the interprester, typing correct and incorrect commands
  -and fixing the incorrect ones- we can become proficient in using the
  interpreter.
<p>

We can fill the Eclipse window with the Console by double-clicking its tab or 
  by clicking the Maximimze icon <img src="pyimages/maximizeicon.jpg">.
The result appears as follows (with the PyDev Package Explorer, Script, and
  Outline views minimized: the first on the left; the second two on the right
  (Outline on top of Script).
</td>
</tbody>
</table>
<img src="pyimages/consolemaximized.jpg">
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>&nbsp</b></td>
<td width ="80%">
We can return it to its original size by double-clicking its tab again, or by
  clicking the Restore icon <img src="pyimages/restoreicon.jpg">.
</td>
</tbody>
</table>



<!-- Starting a Programming Project -->

<a name="StartProject"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Starting a New Programming Project</b></td>
<td width ="80%">
In this section we will discuss how to start a new programming project,
  and how to manipulate the perspectives and views on the workbench window
  displaying that project.
In the next few sections we will learn what we need to know to develop programs
  in a project: how to write and edit modules; how to run modules as
  scripts; and how to find and fix syntax and execution errors in modules.
<p>
Start Eclipse as described above, which should look as follows.
</td>
</tbody>
</table>
<img src="pyimages/startnewproject.jpg">
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>&nbsp</b></td>
<td width ="80%">
Note that we should start with the <b>PyDev</b> perspective active; click it
  if it is not depressed.

<p>
To start a new project, click the down-arrow that is directly to the right of
  the <b>New</b> icon (<img src="pyimages/newicon.jpg">) on the main toolbar
  for the <b>PyDev</b> perspective and then select <b>PyDev Project</b>, as
  shown below.
<p>
<img src="pyimages/newpydevproject.jpg">
<p>

Eclipse will display the following window.
<p>
<img src="pyimages/newpydevprojectwindow.jpg">
<p>

In this window, I have started creating a new project folder.
I have typed in the project name <b>Demo</b>.
Eclipse has automatically filled in the Directory textbox with the name of the
  workspace folder it is using (because the <b>Use default</b> checkbox is
  checked), followed by the project name that I typed.
When we are done entering all the information (typing the project's name and
  ensuring all the radio buttons and puldown menus are corect), we click
  <b>Finish</b>.
<p>

Eclipse will create a folder with the name <b>Demo</b> in its workspace folder;
  when we create modules (files ending in <b>.py></b>; see below) for this
  project, they will be created in this <b>Demo</b> folder.
Eclipse will update its workbench to show <b>Demo</b> project in its
  <b>PyDev Package Explorer</b> view; we can disclose the project to see
  it contents (when we create modules, they will appear here).
Here is what the <b>PyDev Package Explorer</b> view looks like, with a
  disclosed project
<p>
<img src="pyimages/emptyproject.jpg">.
<p>
Note that if we misspell the project name, we can right-click it and choose
  the <b>Rename</b> option.
<p>

To create a new module (the script that we are going to run) inside this
  project, first select the Demo project (which should appear as
  <img src="pyimages/selectedproject.jpg">) and then click the down-arrow on
  the <b>New</b> icon (<img src="pyimages/newicon.jpg">) that we used to create
  a new project, but this time select <b>PyDev Module</b>, as shown below.
<p>
<img src="pyimages/newpydevmodule.jpg">
<p>
Eclipse will display the following window.
<p>
<img src="pyimages/newpydevmodulewindow.jpg">
<p>

In this window I have started creating a new module.
Eclipse has automatically filled in the Source Folder textbox with the name of
  the project folder (<b>Demo</b>) so the module file (<b>Script.py</b>) will
  be put there.
If you do not see anything in the Source Folder textbox the best thing to do is
  to <b>Cancel</b> the module, then go back and select the <b>Demo</b> project
  and start creating a new module again (or you can type <b>/Demo</b> into this
  textbox).
<p>
Eclipse puts the cursor in the <b>Package</b> textbox.
Leave that textbox empty and select the <b>Name</b> textbox.
I have typed in the module name <b>Script</b> there.
Eclipse has also automatically selected <b>&lt;Empty&gt;</b> for the Template,
  which is generally what we want.
When we are done, we click <b>Finish</b>.
<p>

Eclipse will create a file named <b>Script.py</b> in the project folder of the
  <b>Demo</b> project and puts the contents of the file in an editor tab with
  then name <b>Script</b>.
Initially, this module contains a comment about when the module was created and
  by whom.
<p>

Eclipse will update its workbench to look as follows.
Notice that Eclipse will automatically put information into any file it creates
  (even ones whose template is <b>&lt;Empty&gt;</b>).
</td>
</tbody>
</table>
<img src="pyimages/demoproject.jpg">.
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>&nbsp</b></td>
<td width ="80%">
Note that if we misspell the module name, we can right-click it and choose the
  <b>Rename</b> option.
Before continuing to the next section (how to write and edit Python code), we
   will briefly explore how to manipulate windows and views, to customize them.
<p>
<ul>
<li><b>Change Eclipse (Workbench Window) Size</b>:
    We can increase or decrease the size of the entire Eclipse window by
      hovering over one of its boundaries (or corners) until the cursor turns
          into two opposite-pointing arrows, and then dragging and dropping the
          boundary (corner) to the desired location
    The view windows will adjust their size proportionately.
<p>

<li><b>Change Horizontal/Vertical Window Space Allocation</b>:
    We can change the horizontal space allocation among windows by moving the
      mouse to the blue vertical boundary between any windows (the mouse icon
      becomes two horizontal arrows), and then dragging the boundary left
      or right.
    Likewise, we can change the vertical space allocation among windows by
      moving the mouse to the blue horizontal boundary between any windows (the
      mouse icon becomes two vertical arrows), and then dragging the boundary
      up or down.
    Window(s) on one side of the boundary expand as window(s) on the other
      side shrink.
    Scrolling bars may appear/disappear as needed by these adjustments.
<p>

<li><b>Minimize/Restore/Maximize Views</b>:
    We can minimize or maximize any window by pressing the required
      icon, which appears at the right of any tabs in that window: 
      (<img src="pyimages/minimizemaximize.jpg">).
    If we minimize a window, we can restore it similarly
      (<img src="pyimages/restoreicon.jpg">);
    if we maximize a window, we can minimize or restore it as well
      (<img src="pyimages/minimizerestore.jpg">).
    We can also toggle between a restored/maximized view by double-clicking
      its tab (the most useful operation of the bunch).
<p>
<li><b>Delete/Restore Views</b>:
    We can delete any view/tab by clicking its terminate (X) button.
    We can restore any deleted view <b><i>V</i></b> via the <b>Window</b>
       pull-down  menu by selecting <b>Window | Show View | <i>V</i></b>.
<p>
<li><b>Move Views/Tabs</b>:
    We can move any tab to any view.
    We do so by dragging the tab to the view that we want it to be positioned
      in: before, after, or between any other tabs for that view.
    We can also use this mechanism to change the order of the tabs in any
      view.
    For example, we can move the <b>Problems</b> tab so that it appears to the
      right of the <b>Console</b> tab, and then move it back.
<p>
<li><b>Rearrange View/Tab Window Docking Structure</b>:
    We can rearrange how the windows dock with each, to allow for increased
      flexibility in how views appear within a perspective.
    In docking operations, we click a tab or engire view (to select it) or to
      and then drag and drop it to the desired location (which can even be
      outside the Eclipse window!).
    When dragged, one of a set of possible outlines will appear that indicates
      how the new docking will be performed.
    Here is a short movie illustrating 
      <a href ="pyimages/docking.avi">docking commands</a> in Eclipse.
   <p>
   By choosing <b>Window | Reset Perspective</b> from the menu, Eclipse will
     restore all the views in a perspective to the standard one for that
     perspective.
<p>
<li><b>Disclose in the Package Explorer View</b>:
    In the <b>Package Explorer</b> view, click the disclosure squares to
      examine/discose their contents (going from + to -) or hide/elide their
      contents (going from - to +).
</ul>
Practice all these operations until you can make Eclipse (the workbench window)
   appear in any format that you desire.
</td>
</tbody>
</table>


<!-- Editing a Module -->

<a name="EditModule"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Editing a Module/Script File</b></td>
<td width ="80%">
We edit Python modules in tabs in the Editor view, mostly using standard text
  editing commands.
Click the <b>Edit</b> pull-down menu for a list of commands and their
  keyboard shorcuts.
Also click the <b>Source</b> pull-down menu for additional commands involving
  commenting, reformatting, and generating/organizing the code in a module.
<p>

Whenever we create a new module, or double click any module in the package
  <b>Package Explorer</b>, Eclipse will add a view/tab for editing that module
  in the editor window (if such a view is not already present).
To add a second Editor view/tab for a module -so that we can view two parts of
  it simultaneously- we select the tab to duplicated and select the
  <b>Window | New Editor</b> command: a second tab with the same name
  will appear in the Editor view.
Within an editor window, we can manipulate views/tabs as described above, 
  including dividing one editor window into two editor windows, vertically
  (as shown below) or horizontally.
</td>
</tbody>
</table>
<p>
<img src="pyimages/neweditorpostdock.jpg">.
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>&nbsp</b></td>
<td width ="80%">

Try to duplicate the tiling of views shown above: two Editor views split
  vertically.
Then, terminate one of the <b>Script</b> tabs to return the perspective to
  it original views.
<p>

Before we learn how to edit modules, we should first configure Eclipse so that
  files we edit show their line numbers; as programmers, we will find multiple
  uses for these numbers.
To configure Eclipse, right-click in the left margin in any Editor view
  (e.g., under the Python module <img src="pyimages/pythonmoduleicon.jpg"> icon)
  and then select <b>Show Line Numbers</b> to toggle its "check".
We can use the same command to remove line numbers, by toggling its "check".
<p>
<img src="pyimages/showlinenumbers.jpg">
<p>
Multi-digit line numbers will be right-aligned.
Finally, once we configure Eclipse this way, it will continue to show line
  number each time that we start Eclipse (unless we explicitly reconfigure it).
<p>

Here is the most important information about the Eclipse editor:
<ul>
<li>a single click positions the cursor
<li>a double click selects the entire clicked token
<li>a triple click selects the entire clicked line
</ul>
After clicking, dragging the cursor selects multiple characters, tokens, or
  lines (depending on whether the dragging started after a single-, double-, or
  triple-click).
This information is especially important for deleting code and copying/pasting
  code.
When you start editing your own modules, practice selecting text (characters,
  tokens, and lines) and copying/pasting it.
<p>

Here is the Python code for a complete Python module that I typed into Eclipse:
  both the Editor and Outline views are present, because Eclipse changes the
  Outline view as I type code into the Editor view.
For now, read the information below to learn how to interpret the contents of
  the Editor and Outline views.
At the end of this section you will be asked to duplicate this code in Eclipse.
And in the next section, we will learn how to runs this code.
</td>
</tbody>
</table>
<p>
<img src="pyimages/editedfirstscript.jpg">.
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>&nbsp</b></td>
<td width ="80%">
Note the annotations indicating
<ul>
<li>The file being edited has changed (see the file-change indicator).
<li>Disclosure circles appear for multi-line code: here a multi-line string and
      a multi-line function/method definition.
<li>Which lines have changed (see the purple coloring of the line numbers);
      if the change is one or more deleted lines, a small horizontal line
      appears where the lines <i>used to</i> be).
<li>As the Editor view changes, the contents of the Outline view changes:
      here we have defined a <b>cheer_up</b> as a function/method (note the
      <b>M</b>) and <b>sadness</b> as a variable.
</ul>
<p>

To save the changed contents of an Editor view to its file, right-click in the
  view and select <b>Save</b>; note that this option will not be selectable
  if the file has not changed: if the file-change indicator is absent.
Another way to issues this command is just by typing <b>strl/s</b> on the
  keyboard when this tab is selected.
After issuing this command, the file is updated to contain all the information
  currently in the tab for this module.
<p>

If instead we right-clicked the view and selected the <b>Revert File</b>
  command, the view would would be restored to the file's contents when it was
  last saved.
So, use <b>Save</b> and <b>Revert File</b> carefully: we will be using
   <b>Save</b> much more than <b>Revert File</b>, and we can always select the
   <b>Edit | Undo Typing</b> command (or just press <b>ctrl/z</b> to undo any
   changes (and selecting this command multiple times undoes multiple changes).
If we issued the <b>Save</b> command in the window above, it would be updated
  and appear as follows.
<p>
<img src="pyimages/savedfirstscript.jpg">
<p>
Note the disappearance of the asterisk (ther file-changed indicator) and the
  purple change bars.
Often, if we forget to save a file, and perform some othe operation in Eclipse
 -such as running a script- Eclipse will ask us whether to save the file(s)
 first.
<p>
In the Eclipse editor, whenever we type an opening delimiter -e.g., a
  parenthesis, brace, bracket, or quotation mark- the editor automatically
  supplies the matching closing delimeter, and then repositions the cursor
  between the two so, that we can easily type the delimited entity.
Related to this behavior, if the cursor is followed by a closing delimiter, and
  we type that closing delimiter, the Editor just moves the cursor past it.
This editor behavior can be a little confusing, until we get used to it; and
  for writing programs, it is a useful behavior.
<p>
Likewise, whenever we double-click directly after an opening delimiter (except
  for the quotation mark), the editor automatically highlights all information
  between that delimiter and its matching closing delimiter.
Below I double-clicked just to the right of the first opening parenthesis on 
  line 10.
<p>
<img src="pyimages/delimiterhighlight.jpg">
<p>
This operation -matching opening and closing delimiters- is often useful when
  we are debugging (removing errors from) our programs.
<p>

We can hide any mult-line code (here the top string and <b>cheer_up</b>
  function/method) from the Editor view by clicking its disclosure
  circle.
Generally throughout Eclipse clicking on a <b>+</b> means disclose the elided
  information; clicking on a <b>-</b> means hide the disclosed information.
In the Editor view below, we have hidden the <b>cheer_up</b> function/method:
  notice how it shows the header of the method, but not its body, instead 
  showing <img src="pyimages/elideicon.jpg">.
With this mechanism we can temporarily hide the parts of our Python code that
  we are not currently interested in seeing in detail, allowing us to see
  more code in the tab that we are interested in seeing.
<p>
<img src="pyimages/elidededitorwindow.jpg">
<p>

In fact, if we hover over a disclosure circle that is eliding information, the
  cursor will change to a hand (not shown below) and Eclipse will temporarily
  display the elided information in a yellow box, while keeping it elided in
  the Editor view (so we can peek at it).
<p>
<img src="pyimages/hoverelided.jpg">
<p>

If we hover over a name in an Editor view, Eclipse shows us something 
  interesting about that name: often where it was defined (and thus showing its
  definition).
<p>
<img src="pyimages/hovername.jpg">
<p>

If we click on a name in the Editor view, Eclipse selects that name as a token
  and shows us other places in that Editor window where this same name appears,
  by putting the name in a yellow background.
<p>
<img src="pyimages/clickname.jpg">
<p>

Likewise, in complicated modules, with many names, we can use the <b>Outline</b>
  view to rapidly examine selected names in the module.
By clicking an entry in the Outline view, Eclipse shows us where it was defined
  in the Editor view (and thus show its definition).
<p>
<img src="pyimages/outlinetoeditor.jpg">
<p>

Finally, whenever we start typing a token, Eclipse displays possible
  completions for that token based on Python keywords.
Until it recognizes a correct token, Eclipse marks the code with a syntax
  error icon (<img src="pyimages/syntaxerroricon.jpg">), indicating an error
  (as illustrated below).
We will soon learn how to find and fix Python syntax errors in Eclipse.
<p>

We can continue typing the token, or double-click one of the keywords to have
  Eclipse complete the token.
If we press &crarr; Eclipse will complete the token with the highlighted
  completion (and we can use the &uarr; and &darr; keys to scroll through the
  possible completions before using &crarr; to make our selection).
Don't be distracted by this mechanism; it is probably best to just keep
  typing your code and ignore the completions.
<p>
<img src="pyimages/keywordcompletion.jpg">
<p>

In addition if we press the <b>ctrl/space</b> command when Eclipse present us
  with keyword completions, it will present us with other "useful" code that
  might go here.
Below I have highlighted the <b>pow</b> selection, and Eclipse provides me with
  information about it in yellow on the right.
I can scroll through or select one of these entries as described above.
<p>
<img src="pyimages/othercompletions.jpg">
<p>
Again, it is probably best to ignore these other completions for now.
<p>
Now it is time to go back and enter into Eclipse all the code illustrated in
  this section, and reread and practice doing all the operations discussed.
Remember to type the code carefully, with letters in their correct case, proper
  punctuation, and proper spacing.
Watch carefully what happens when you pres &crarr; on lines that do or don't
  end with a colon (and what the backspace key does on indented lines).
Once you are done entering this code, you can go to the next section and learn
  about executing/runnning it.
</td>
</tbody>
</table>


<!-- Running a Module/Script -->

<a name="RunScript"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Running a Module/Script</b></td>
<td width ="80%">
A module of Python code that is runnable is called a script; other modules 
  contain code that acts as a library of names, and these aren't runnable.
To run a script that we are editing
<ul>
<li> Save it: right-click in the editor view and select <b>Save</b>
     or press <b>ctrl/s</b>; in either case the file-changed indicator should
     disappear
<li> Run it: right-click in the editor view for that class, and 
       then select <b>Run As</b> and <b>Python Run</b>
</ul>
We assume here that there are no syntax or execution errors in our script (there
  won't be if we typed it exactly as shown above): see the next section for
  information on correcting syntax and execution errors.
<p>
If we run a Python script before saving it, we will see the following window
<p>
<img src="pyimages/saveandlaunch.jpg">
<p>
If we ever see this window, we should put a check in the
  <b>Always save resources before launching</b> 
  checkbox and then click <b>OK</b>.
In this way, whenever we run the script, Eclipse will automatically save our
  script before Eclipse runs our script; and we won't see this window again.
<p>
Before running a script in the <b>PyDev</b> perspective, ensure that a
  <b>Console</b> view is present; we can show this view by selecting
  <b>Window | Show View | Console</b>.
We have already seen <b>Console</b> views in connection with running the
 Python Interpreter.
In fact, if we already have a <b>Console</b> view that shows the Python
  Interpreter running, it is replaced by a <b>Console</b> view that shows the
  the script running; the Python Interpreter is still running, and we will see
  how to bring it back into the <b>Console</b> view at the end of this section.
When run this way, the Python script above displays the following.
</td>
</tbody>
</table>
<p>
<img src="pyimages/run.jpg">
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>&nbsp</b></td>
<td width ="80%">
First, notice that information entered by the user appears in a green font;
  information displayed by the computer appears in a black font.
Also notice that the line below the <b>Console</b> tab shows that the
  script has run to completion: it is <b>terminated</b>.
The interaction appears in the contents of the <b>Console</b> view: if it
  does note fit entirely in this view, its contents can be scrolled -both
  vertically and horizontally.
Of course we change the relative sizes of the <b>Editor</b> and <b>Console</b>
  views, or can double-click the <b>Console</b> view to maximize it.
<p>
There are two useful tool buttons to the right of the <b>Console</b> tab.
Immediately to the right is the <b>Terminate</b> button, a faded-red square
  that stops a running script (it is faded here, because it cannot be
  selected: the script already is terminated).
The next one is is the <b>Remove Launch</b> button, a grey X, which clears the
  contents of the console (Eclipse does this automatically, when it reruns a
  script).
<p>
If we were running the Python Interpreter in the <b>Console</b> view and run
  a script, the Python Interpreter will disappear to show the script.
If the script terminates and we click the <b>Remove Launch</b> button, the
  Python Interpreter will appear in the <b>Console</b> view.
<p>
The <b>Console</b> view below shows this script in the middle of running;
  it is waiting for the user to enter a number.
<p>
<img src="pyimages/running.jpg">
<p>
Here the line below the <b>Console</b> tab does NOT indicate that the
  script has terminated.
So, the <b>Terminate</b> button is bright red; pressing it will terminate
  the script.
If we rerun the same script, Eclipse will reuse the <b>Console</b>
  view with this terminated script, erasing its original contents first.
<p>
Once we have successfully run a script, we can use the <b>Rerun</b>
  button on the workbench toolbar (<img src="pyimages/rerunicon.jpg">) to
  rerun the script easily.
How do we know whether or not we can use this shortcut?
If we hover over this button it will will typicall display
  <b>Run <i>P S</i></b> where <b><i>P</i></b> is the name of 
  the Project and <b><i>S</i></b> is the name of the file that contains the
  script Eclipse will run if we click this button
  (here <b>Run Demo Script.py</b>).
So, if we have previously run the <b>Script</b> script in the <b>Demo</b>
  project, hovering over this button would show.
<p>
<img src="pyimages/rerunhover.jpg">
<p>
<!---
Hovering over this button might also show <b>Run As...</b>.
If it does, clicking this button will bring up the following window.
<p>
<img src="pyimages/runas.jpg">
<p>
In which case we can select <b>Python Run</b> and click <b>OK</b> or
  double-click <b>Python Run</b>.
Heck, also talk about the triangle pulldown from which we can launch
  any recently run scrips
--->
If it does not show the script we want to run, revert to the standard way to
  run a script: right-click in the Editor tab for that script, and 
  then select <b>Run As</b> and <b>Python Run</b>.
<p>
Finally let's briefly examine the most useful buttons (labeled below) on the
  Console toolbar.
They are useful when we are running scripts and the Python Intepreter (to switch
  between them) or running multiple scripts.
Note that sometimes some of these buttons are missing or gray, in which case
  Eclipse believes that they would be useless in the current context.
<img src="pyimages/consoletoolbar.jpg">
<p>
<ol>
<li><b>Terminate</b>: terminate the script running in the Console tab.
It might be waiting for input, producing lots of/no output (talkative and
  silent infinite loops).
<b>It is an excellent idea to ensure that each running script is terminated
  before you rerun it</b>
<p>
<li><b>Remove Launch</b>: remove the terminated script from the Console tab.
If there are other scripts running (or the Python Interpreter is runnning)
  one of those will take the place of the removed launch in the Console tab.
See <b>Display Selected Console</b> to select any other to see.
<p>
<li><b>Remove All Terminated Launches</b>:
   remove all terminated scripts from appear in the Console tab.
This is a cleanup operation to get rid of (so they will never be seen again)
  all terminated scripts.
<p>
<li><b>Display Selected Console</b>:
   select which console to show in the Console tab.
Click the black triangle to get a list of all scripts (running or terminated
  but not removed) and all Python Interpreters, which can be shown in the
  Console tab; choose which one to show.
If we click this button by itself, it cycles through all scripts (running and
  terminated but not removed) and all Python Interpreters that can be selected.
<p>
<li><b>Open Console</b>:
   we used this to open the Python Interpreter in a Console tab.
We can also use it to create more Console tabs, that that option is
  currently of limited use.
<p>
</ol>
<p>
The biggest problems with consoles is that whenever we run a script, it takes
  over the console.
If we are running the Python Interpreter in the Console view, it disappears.
If we need to see it, we need to use the black triangle to the right of the
  <b>Display Selected Console</b> button to get it back; likewise, if after
  using the Python Interpreter we need to get back to the script, we must use
  the triangle to the right of the <b>Display Selected Console</b> button
  to get back to the script.
<p>
Practice all these operations until you are comfortable using the
  <b>Console</b> view while running and rerunning programs, and using the
  Python Interpreter.
</td>
</tbody>
</table>




<!-- Correcting Syntax Errors-->

<a name="CorrectingSyntax"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Finding and Fixing<br>Syntax and Execution Errors</b></td>
<td width ="80%">
The process of debugging involves first correcting syntax errors, so the
  program can run, and then correcting execution errors, so that the program
  will run correctly (produce the correct results).
This section discusses how to debug both syntax errors and execution errors,
  using the standard <b>PyDev</b> perspective; a later handout discusses how to
  use the <b>Debug</b> perspective to help debug execution errors.
<p>
The universal color for a syntax error indicator in Eclipse is red; the
  universal indicator for a syntax error in Eclipse is a red backgound:
  typically Editor tabs show a red circle containing a white X
  (e.g., <img src="pyimages/syntaxerroricon.jpg">) to the left of any line
  with a syntax error (with a red rectangle at the end of the line, while the
  <b>PyDev Package Explorer</b> view shows a red rectangle containing a white X
  (e.g., <img src="pyimages/syntaxerroricon2.jpg">) next to any module that
  contains one or more errors.
<p>
Often a single syntax error results in multiple red boxes appearing in multiple
  views.
Likewise, the universal color for a warning indicator in Eclipse is yellow.
You must stop and fix an error, but you just need to be cautious with a warning
  (just like road signs).
We will discuss when to pay close attention to warnings later in the quarter.
<p>
Note that if we click the <b>Project</b> pull-down menu, the item
  <b>Build Automatically</b> should be checked: if it isn't, click it,
  and the next time you click this pull-down menu it should be checked
  (clicking toggles it).
<p>
Eclipse tries hard to spot syntax errors while we are typing/editing our
  modules, to help us fix them immediately.
In the following sequence we will type in parts of a script file named
  <b>Errors.py</b> to observe how we interact with Eclipse to fix syntax
  errors.
For example, if we mistype <b>import prompt</b> as <b>import propt</b>,
  Eclipse indicates a syntax error on that line.
<p>
<img src="pyimages/syntax1.jpg">
<p>
When we hover over the error icon, Eclipse shows us the following information.
<p>
<img src="pyimages/syntax1explain.jpg">
<p>
When we correct the spelling, Eclipse indicates a syntax warning on that line.
When we hover over it, we see the following.
<p>
<img src="pyimages/syntax2.jpg">
<p>
Here Eclipse warns us that although we have imported a module correctly, we
  haven't used it anywhere: of course, since we have just started to type a
  program, this doesn't concern us.
So in this case we can ignore the warning; it will disappear once we write
  code that uses <b>prompt</b>.
<p>
When we use <b>prompt</b> in the next line, but use it incorrectly (there is no
  <b>for_inp</b> function defined in this module), Eclipse removes the
  warning on line 1 but shows us an error on line 3.
<p>
<img src="pyimages/syntax3.jpg">
<p>
When we hover over the error icon, Eclipse shows us the following information.
<p>
<img src="pyimages/syntax3explain.jpg">
<p>
When we correct the spelling of the function name to <b>for_int</b> in that
  line, but write a call to the <b>print</b> function incorrectly on line 5
  (it includes a comma before the string <b>'Answer is '</b>), Eclipse
  indicates a syntax error on that line.
<p>
<img src="pyimages/syntax4.jpg">
<p>
When we remove this comma, Eclipse shows no syntax errors in our module.
Notice the names <b>prompt</b> and <b>x</b> in the Outline view: these
  are the two name we define in this script.
Now that this script has no syntax errors, we will run it.
If we do, we get the following interaction in the Console view.
</td>
</tbody>
</table>
<p>
<img src="pyimages/execution1.jpg">
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>&nbsp</b></td>
<td width ="80%">
Python executed the import statement and the assignment to <b>x</b> (calling the
  <b>for_int</b> function in the <b>prompt</b> module) correctly, but when it
  tried to execute line 5 it found an execution error.
It 
<ol>
<li>Identifies that it detected an execution error with the
     <b>Traceback</b> line.
<li>Identifies the file and line number where it detected the execution error.
<li>Identifies the code on the line on which it detected the execution error.
<li>Provides an error message to help us understand the execution error.
</ol>
If we click this blue-underlined information showing the line number, the
  Editor tab for Error will scroll to line 5 and all the code on that line
  will be highlighted.
<p>
So, there are two kinds of errors in programming.
Eclipse can detect syntax errors before it runs a script and execution errors
  after it runs a script.
We will learn much more about avoiding, interpreting, and fixing syntax and
  execution errors throughout the quarter.
To fix this error we must edit the script so that it calls the function
  <b>str</b> with <b>s</b> as its argument.
Doing so leads to the following interaction.
</td>
</tbody>
</table>
<p>
<img src="pyimages/execution2.jpg">
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>&nbsp</b></td>
<td width ="80%">

The interactions among editing, saving, and running a script can sometimes be
  a bit subtle and confusing.
Confusion especially arises concerning the synchonization of the files we are
  editing and Eclipse's reporting of syntax errors in various views.
For one example, sometimes we type a few lines before Eclipse detects a syntax
  error on one of the lines (there can be a few seconds of lag).
As another example, if we fix an error, its associated error indicators may
  disappear from some -but not all views; we must sometimes perform further
  operations, like saving to synchronize all these views. 
<p>
There is no substitute for using Eclipse repeated to better understand its
  operation.
<b>It is always an excellent idea, if you are confused, to save the file</b>
  to see what syntax errors Eclipse detects.
<p>
The following shows what Eclipse would display, if we had continued typing code
  without fixing the syntax errors.
We can do this and come back to fix these errors later, but it is probably
  better to try to fix each syntax error as we Eclipse discovers it (but not
  necessarily each warning, as we've seen some warnings go away by themself).
Note how errors show themselves in many of the views.
</td>
</tbody>
</table>
<p>
<img src="pyimages/syntaxmany.jpg">
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>&nbsp</b></td>
<td width ="80%">
<p>
</td>
</tbody>
</table>


<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Advice for Debugging Syntax Errors</b></td>
<td width ="80%">
Interpret syntax errors/warnings liberally.
<ul>
<li>
When Eclipse detects a problem at a token, often either that token is
  wrong, or the one before it is wrong (less frequently the incorrect token
  appears even earlier in the script, and even less frequently later).
Check all places in the appropriate order.
<li>
Sometimes an error/warning message makes no sense: it says that there is one
  kind of problem in our code, but we actually have to correct a different kind
  of problem.
<li>
Problems snowball: one mistake can cause many error/warning messages to
  appear; by fixing one mistake, many message may disappear.
</ul>
To debug the syntax errors in a program
<ul>
<li>
Fix the first problem (or if you are confident, the first few)
  <b>Problems</b> view.
If the first error makes no sense, a subsequent error might be causing the
  problem (snowballing).
Always find and fix at least one error; don't spend time fixing more than a
  few (because recompiling is so quick).
<li>Save the script to see what syntax errors Eclipse reports.
<li>Repeat this process until there are no syntax errors left.
<li>
To make progress, we must correct at least one error during each editing
  session before saving the file.
And, fixing only one error at a time ensures that we won't get confused by
 snowball errors.
</ul>     

</td>
</tbody>
</table>


<!-- Closing/Removing Projects -->

<a name="Finishing"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Finishing a Project: Closing/Removing It</b></td>
<td width ="80%">
As we have seen before, when we terminate Eclipse, it saves all the preferences
  and projects that appear in our workbench.
When we restart Eclipse, it initializes itself in exactly the same state as
  when it terminated.
Therefore, we can seemlessly start Eclipse, create/work on our projects, stop
  it, restart it, and continue working on our projects just where we left off.
<p>
Now let us explore three options for finishing a project.
We need to find out what happens to such projects both on our workbench and
  in our workspace: knowing the distinction between these terms is citical to
  understanding these three options.
<p>
The simplest option is to just leave a finished project alone.
It will continue to be present on our workbench and in our workspace; we can
  can undisclose the project so it appears as just one line.
This is a safe option, although our workbench can be come cluttered, and we
  might accidentally change a project that we meant to leave alone.
So, we will explore two other options: closing and deleting.
<p>
<b>Closing</b>: First, we can just close the project by right-clicking the
  project name/folder an choosing <b>Close Project</b> in the menu
  (right below Refresh/F5).
<p>
<img src="pyimages/closeinmenu.jpg">
<p>
Closed projects will still appear in the <b>Package Explorer</b> view in our
  workbench (and are still stored as folders in our workspace folder), but with
  appear with no disclosure square: we cannot examine, run, or modify our code
  in closed  projects.
Here is what a closed project looks like in the <b>Package Explorer</b> view.
<p>
<img src="pyimages/closedproject.jpg">
<p>
One of the few operations that we can perform on a closed project is to
  reopen it: by right-clicking its name and then selecting <b>Open Project</b>
  (which replaces <b>Close Project</b> on the window above).
Once this is done, we can explore the contents of the project again.
So, if we are done with a project, we can close it (to avoid accidentally
  changing it) but reopen it later, if we need to examine/change it.
<p>
Note that we can always copy a project (or just its <b>.py</b> files) from the
  workspace to any other folder, say to back-up the information.
Another option we have is removing a project from the workbench (not just
  closing it), which we will discuss  next.
<p>
<b>Deleting</b>: Our second option is actually removing a project from our
  workbench (and possibly the workspace too).
In this case, the project disappears altogether from our workbench (is not
  visible in the <b>Package Explorer</b> view), as if it were never there; we
  have the option of leaving it in the workspace (the default), or deleting the
  all the contents there.
We delete a project by right-clicking its name and then selecting
  (<img src="pyimages/deleteicon.jpg">) as shown in the menu above;
  by doing so, Eclipse pops-up the following <b>Delete Resources</b>
  confirmation window.
<p>
<img src="pyimages/deleteresources.jpg">
<p>
If we leave the <b>Delete project contents on disk (cannot be undone)</b>
  checkbox <b>unchecked</b>, Eclipse removes the project from its workbench,
  but the folders and files containing all its resources remain intact in the
  workspace.
In such a case, we can leave this information where it is, or copy/move it
  elsewhere; at a later time, if we want to recreate the project, it will be
  easy to do if we have not deleted the project folder and its resources
  (see the next section for information about how to do this).
<p>
But, if we <b>check</b>the
  <b>Delete project contents on disk (cannot be undone)</b>
  checkbox, then Eclipse will not only remove the project from its workbench,
  but also will delete the project folder and all the files (<b>.py</b>,
  but sometimes others) containing all its resources.
<p>
Obviously this latter choice is very dangerous, and I recommend NEVER putting a
  check in this checkbox, which always defaults to being unchecked.
If need be, and after we are done done with this operation, we can then
  explicitly delete the project folder ourself, or better yet, archive it by
  moving it to any other directory on our computer.
In any case, at this point Eclipse does not know the project exists, whether
  or not it is still in our workspace folder.
</td>
</tbody>
</table>


<!-- Creating a Programming Project from Existing Sources -->

<a name="ExistingSources"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%">
  <b>Starting an Existing (Old) Programming Project</b></td>
<td width ="80%">
We have already seen in detail how to start a new project in Eclipse.
When started, these projects contain no modules.
We have also seen how to create modules in these projects, edit their files,
  and run scripts.
In this section, we will learn how to start a project using an
  existing/old project folder that likely already contains modules.
<p>
For example, we might download from the web a folder that contains a
  one or more modules and then run one of these modules as a script.
My <b>Sample Programs</b> link (in the index of the course page) leads to a
  repository of such project folders.
Later in the quarter, I will ask you to download programming project folders
  that contain some starter code in modules that I have written.
<p>
The easiest way to create a project from an existing/old project folder is
  first to copy (or move) that folder into the workspace folder (if it is
  not already there).
In fact, as we just learned, if we delete a project from a workspace, but
  do not delete its contents, the project folder remains in the workspace.
By deleting the <b>Demo</b> project above, and not deleting its contents, we
  now have an empty workbench, but the <b>Demo</b> project folder is still
  in our workspace.
<p>
To start a project from an existing/old project folder in the workspace,
  first ensure that there are no <b>.project</b> nor <b>.pydevproject</b>
  files in that folder: if there are, delete them.
Then click the down-arrow that is directly to the right of the <b>New</b> icon
  (<img src="pyimages/newicon.jpg">) on the main toolbar for the <b>PyDev</b>
  perspective and then select <b>PyDev Project</b>, as shown below.
<p>
<img src="pyimages/newpydevproject.jpg">
<p>
Eclipse will display the following window.
<p>
<img src="pyimages/oldpydevprojectwindow.jpg">
<p>
By typing <b>Demo</b>, the name of a project folder already in the
  workspace, and clicking <b>Finish</b>, Eclipse creates a project from it,
  including all the resources that it contains.
We must be careful to spell the name of the existing project folder correctly;
  if we misspell the name, Eclipse weill create a new project folder, rather
  than use the old one that already exists.
If we do misspell the old project folder's name, and Eclipse creates a new
  project folder for us with this wrong name, we can delete this new project
  (including its contents, to completely delete it from the workspace), and
  then repeat these operations but spelling the project folder name correctly.
<p>
<!----
Although it is convenient and useful to keep/copy old project folders in the
  workspace (recommended); we can create projects using old project folders in
  other locations (like on the desktop).
<p>
First, we must get a project folder that contains a project.
Click to the <b>Sample Programs</b> link on the course web page and download
  and unzip the program labelled <b>Collatz</b>; put the unzipped folder
  (named <b>collatz</b>) on the desktop.
<p>
To start a project from an existing/old project folder NOT in the workspace,
  click the down-arrow that is directly to the right of the <b>New</b> icon
  (<img src="pyimages/newicon.jpg">) on the main toolbar for the <b>PyDev</b>
  perspective and then select <b>PyDev Project</b>.
Eclipse will display the following window.
<p>
<img src="pyimages/old2pydevprojectwindow.jpg">
<p>
I typed <b>Old Collatz</b>, for the the name of a project folder already in the
  workspace, and clicking <b>Finish</b>, Eclipse creates a project from it,
  including all the resources that it contains.

This time, I have created a project and named it <b>Demo2</b>; 
  the contents of this project is already stored in the <b>bouncingballs</b>
  folder on my desktop (if you haven't already, download and unzip this file
  on your desktop first: right-click and <b>Save Target As...</b> on 
  <a href="../../../ICS-23/programs//bouncingballs.zip">bouncingballs</a>).
<p>
Note that another option is to <b>not</b> type a name for the project; then,
  by not using the default location, and instead selecting the
   <b>bouncingballs</b> folder, the project will also be automatically named
   <b>bouncingballs</b>.
<p>
So long as a project referring to this folder exists is in my workbench, the
  <b>bouncingballs</b> folder should remain in this location, because although
  this information is not stored in the workspace, the workbench refers to it.
Most importantly, all changes made to files in this project by Eclipse will
  actually be made in the folder containing its resources.
If we delete the project from the workbench, and do not delete its contents,
  the <b>bouncingballs</b> folder will remain intact.
<p>
To run this script, disclose the <b>Demo2</b> and <b>(default package)</b>
  in the leftmost, <b>Package Explorer</b> window.
Then right-click on <b>Application.Java</b> and select <b>Run As</b> and
  then <b>Java Application</b>.
Click in various locations on the white screen (to place balls) and then click
  on the <b>Start</b> button; you can also <b>Reset</b> the simulation or
  <b>Reverse</b> it.
In fact, after running it <b>Reset</b> it, then click 20-30 times in the same
  location, then <b>Start</b> the simulation and let it run for a minute, and
  finally <b>Reverse</b> it and let it run for the same amout of time: an
  interesting thing happens.
<p>
Next, we will learn how to add existing Java files and Java archives to a
  project.
<p>
<b>Java File</b>:
First, suppose that we find a Java class stored in file, and that class is
  useful in some project.
We add it to a project by right-clicking the project's name in the 
   <b>Package Explorer</b> view and then selecting <B>Import</b>.
We will see the following <b>Import</b> window.
<p>
<img src="images/importfile.gif">
<p>
Either double-click <b>File System</b> or select it and click <b>Next</b>.
We will next see the following <b>Import</b> window.
<p>
<img src="images/importfilesystem.gif">
<p>
In this window we can select exactly which files we want to import to the
  project.
In this example, we can import all the files in the <b>Useful Java Files</b>
  folder by checking its box in the left pane; or, we can import individual
  files from this folder by checking their individual boxes in the right pane.
In addition, we can use the <b>Select All</b> and <b>Deselect All</b>
  buttons for further selection control.
If I import the <b>Ball</b> and <b>BallPanel</b> classes by checking
  them and clicking <b>Finish</b>, the <b>Package Explorer</b> view will show
  the following
<p>
<img src="images/packageafterimport.gif">
<p>
Eclipse actually copies these <b>.java</b> files into the project folder
  (and still exist in their original location).
<p>
<b>Archive/JAR File</b>:
Next, suppose that we find a Java Archive/JAR file that is useful in some
  project.
There are two ways to add it to the project.
We can import it (following instructions similar to those listed above)
  in which case all its resources are copied from the archive file into
  the project folder.
Or, we can add it to a project's build-path by right-clicking the project's
  name in the  <b>Package Explorer</b> view and then selecting
   <b>Build Path | Add External Archives</b>.
In a <b>JAR Selection</b> window we just double-click the Java archive
  we want to use, or click it and click <b>OK</b>.\
Eclipse then puts this Java archive on the build path.
So long as this project refers to the archive, it should remain in its
  original location: unlike in the previous case, nothing is copied into
  the project.
<p>
You can down load sample programs from your course web site to practice both
  methods of creating projects from existing resources.
Later in the quarter, you will need to review the material showing how to
  add class files and archives to projects.

  If a project's resources include a JAR file, we'll have to click
    next not finish, and add the jar file to the build path.
  Advanced: later.
</td>
</tbody>
</table>


<!-- Preferences

<a name="Preferences"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Some Useful Preferences</b></td>
<td width ="80%">
Eclipse allows us to specify a huge number of personal preferences for the
  workbench.
We can even name collections of preferences, and export them to other users
  (or import preferences from other users).
We set most preferences by first selecting <b>Window | Preferences</b>,
  which is the last option in the <b>Window</b> pull-down menu.
From there, we use disclosure boxes to navigate to the preference that we
  want to find.
<p>
Here are some useful preference to know about.
<ul>
<li>Disclose <b>General</b> and then select <b>Startup and shutdown</b>:
   determines whether or not the user is prompted when Eclipse starts (for
   the workspace) and stops (for confirmation).
<p>
<li>Disclose <b>Java | Compiler</b> and then select <b>Error/Warnings</b>:
   allows us to specify whether to ignore certain anomolies or mark them
   as errors or warnings.
For example, disclose <b>Unnecessary Code</b> and see that
  <b>Local variable is never read</b> is set to <b>Warning</b>
  (I want to know about this inconsistency, but I don't want to stop
   a program with this problem from running).
<p>
<li>Disclose <b>Java | Editors</b> and then select <b>Content Assist</b>:
   allows us to check/uncheck <b>Enable auto activation</b>.
   I prefer disabling this feature, and manually pressing <b>ctrl/space</b>
    when I want it.
<!---
<p>
<li>Disclose <b>Java | Code Style</b> and then select
      <b>Formatter</b>; then click the <b>Show...</b> button and ensure you
      are looking at the <b>Indentation</b> tab:
      allows us to specify standard tab size for nested control structures
     (I prefer a <b>Tab size:</b> of 2, but you can leave this number as the
      default, 4).
  ;disclose <b>Potential programming problems</b> and set
  <b>Serializable class without serialVersionUID</b> to <b>ignore</b>.
--->
</ul>

</td>
</tbody>
</table>


<p>
<hr align="left" width="100%">

</body>
</html>
