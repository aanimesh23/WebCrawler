def readSequencesFromFastaFile(filename):
    fastaFile = open(filename)

    sequenceList = []

    readingSequence = False

    for line in fastaFile:
        line = line[0 : len(line) - 1]

        if readingSequence:
            if line[0] == '>':
                readingSequence = False
                sequenceList.append(sequence)
            else:
                sequence = sequence + line

        else:
            if line[0] != ';' and line[0] != '>':
                readingSequence = True
                sequence = line

    sequenceList.append(sequence)

    fastaFile.close()

    return sequenceList


def findReverseComplement(dnaSequence):
    basePairTranslator = {}
    basePairTranslator['A'] = 'T'
    basePairTranslator['C'] = 'G'
    basePairTranslator['G'] = 'C'
    basePairTranslator['T'] = 'A'

    reverseStrand = ""

    for i in range(len(dnaSequence)-1, -1, -1):
        c = dnaSequence[i]
        reverseC = basePairTranslator[c]
        reverseStrand = reverseStrand + reverseC

    return reverseStrand


def convertDnaSequenceToAminoAcids(dnaSequence):
    dnaToAminoAcid = { 'TTT':'F', 'TTC':'F', 'TTA':'L', 'TTG':'L',
                       'TCT':'S', 'TCC':'S', 'TCA':'S', 'TCG':'S',
                       'TAT':'Y', 'TAC':'Y', 'TAA':'!', 'TAG':'!',
                       'TGT':'C', 'TGC':'C', 'TGA':'!', 'TGG':'W',
                       'CTT':'L', 'CTC':'L', 'CTA':'L', 'CTG':'L',
                       'CCT':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P',
                       'CAT':'H', 'CAC':'H', 'CAA':'Q', 'CAG':'Q',
                       'CGT':'R', 'CGC':'R', 'CGA':'R', 'CGG':'R',
                       'ATT':'I', 'ATC':'I', 'ATA':'I', 'ATG':'M',
                       'ACT':'T', 'ACC':'T', 'ACA':'T', 'ACG':'T',
                       'AAT':'N', 'AAC':'N', 'AAA':'K', 'AAG':'K',
                       'AGT':'S', 'AGC':'S', 'AGA':'R', 'AGG':'R',
                       'GTT':'V', 'GTC':'V', 'GTA':'V', 'GTG':'V',
                       'GCT':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A',
                       'GAT':'D', 'GAC':'D', 'GAA':'E', 'GAG':'E',
                       'GGT':'G', 'GGC':'G', 'GGA':'G', 'GGG':'G' }

    aminoAcidSequence = ""

    for i in range(0, len(dnaSequence)-2, 3):
        aminoAcidSequence = aminoAcidSequence + dnaToAminoAcid[dnaSequence[i : i+3]]

    return aminoAcidSequence


def printCandidateGenes(dnaSequence, isGivenStrand):
    for i in range(0, len(dnaSequence)-2):
        if dnaSequence[i : i+3] == 'ATG':
            for j in range(i+3, len(dnaSequence)-2, 3):
                if dnaSequence[j : j+3] == 'TAA' or dnaSequence[j : j+3] == 'TAG' or dnaSequence[j : j+3] == 'TGA':
                    if j+3-i >= 60:
                        print "-----"

                        if isGivenStrand:
                            print "Candidate gene found on given strand"
                        else:
                            print "Candidate gene found on reverse strand"

                        print "     Start position     :", (i+1)
                        print "     Length (in codons) :", (j+3-i)/3
                        print "     Amino acid sequence:", convertDnaSequenceToAminoAcids(dnaSequence[i:j])
                    break



filename = raw_input("Enter name of FASTA file: ")

sequences = readSequencesFromFastaFile(filename)

for sequence in sequences:
    printCandidateGenes(sequence, True)
    printCandidateGenes(findReverseComplement(sequence), False)
