<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Sample Programs</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Sample Programs</h1>
<p>
<h2>Introduction to Computer Science I
<br>
ICS-21: Lecture A/Labs 1-3<br>
Spring 2012<br>
</h2><p>
</center>

<hr align="left" width="100%">
<p>
The following is a list of zipped Eclipse programming project files (more
  might be added during the semester).
Please feel free to download, unzip, and study these programs (both their code
  and their run-time behavior).
Programmers gain tremendous insight into all facets of programming by studying
  the code of other programmers (especially those with more experience; and I
  am happy to improve my code based on your observations -nothing is perfect).
A good programmer typically makes elegant use of the required language
  features, resulting in smaller, more elegant code.
<p>
All downloaded projects are listed alphabetically.
All are zip files, so unzip them first.
Most project files require the standard course library 
 (<b>edu.uci.ics.pattis.introlib</b>;
 if you followed the Eclipse installation instructions, you should be fine with
 this <b>jar</b> file: reread the direction if necessary).
<p>

<hr align="left" width="33%">
<p>


Download: <a href="programs/arraydemo.zip">Array Demonstration</a><br>
This program shows how to declare, initialize, and manipulate simple
  arrays of <b>int</b>/<b>String</b> values using a variety of <b>for</b> 
  loops.
<p>

Download: <a href="programs/simple2darraydemo.zip">
          2-D Array Demonstration</a><br>
This program shows how to declare, initialize, and manipulate simple
  2-d (rectangular) arrays of <b>int</b> values using a variety of
  <b>for</b> loops.
<p>

Download: <a href="programs/average.zip">Average</a><br>
The Average program prompts the user to enter the name of a file containing
  test score date; then it reads that file (starting with the maximum
  possibe score for the test) followed by a sequence of scores ended by the
  sentinel <b>-1</b>.
Finally, it prints some statistics about the scores in this file.
<p>

Download: <a href="programs/backtracking.zip">Backtracking</a><br>
These programs use a generalized backtracking search to search an implicit
  game tree.
See the <b>backTrack</b> package, which contains the <b>Problem</b> interface,
  and the <b>Solver</b> class, which solves any problem expressible by a class
  implementing this interface.
The <b>NQueens</b> package contains a <b>NQueens</b> class and a simple
  application that uses <b>Solver</b> to solve it (how to place N queens on
  a chessboard so that none can attack another).
The <b>Satifiability</b> package contains a <b>Satisfiability</b> class and a 
  simple application that uses <b>Solver</b> to solve it (how to assign T/F
  values to variables in a formula to satisfy it -make it evaluated to true).
The <b>Sudoku</b> package contains a <b>Sudoku</b> class and a simple
  application that reads a Sudoku puzzle and uses <b>Solver</b> to solve it
 (how to assign 1-9 values to cells in a Sudoku puzzle to satisfy its
 constraints).
<p>

Download: <a href="programs/bouncingballs.zip">Bouncing Balls</a><br>
The program is implemented using the Model-View-Controller pattern.
It simulate balls bouncing in a box.
The user can create new balls by clicking in the box.
The user also can press buttons to start/stop/reset the simulation.
<p>

Download: <a href="programs/classexamples.zip">
  Class Examples</a><br>
This program illustrates how to construct and use (call methods on) objects
   from a variety of simple classes:
  <b>DiceEnsemble</b>, 
  <b>StringTokenizer</b>, 
  <b>Timer</b>, 
  <b>TypedBufferReader</b>, 
  <b>DecimalFormat</b>, 
  <b>BigInteger</b>, 
  <b>Integer</b>, and 
  <b>String</b>.
<p>

Download: <a href="programs/colorcalculator.zip">Color Calculator</a><br>
The program is implemented using the Model-View-Controller pattern.
It allows us to see a color (and its hexidecimal value) as we change its red,
  green, and blue components in the range [0..255].
These colors are all represented by <code>ModularCounter</code>s, and
  the <b>Model</b> class has a <b>main</b> method so that it can be
  tested independently form the Controller and View.
Note, the hex value can be used in HTML to specify a color.
<p>

<!-- Now a programming assignment
Download: <a href="programs/collatzwithobjects.zip">
  Collatz Conjecture</a><br>
The Collatz conjecture states: starting with any positive number, repeat the
  process "If it is even, halve it; if it is odd, multiply it by three and
  add one" and eventually the remaining value reduces to one.
No one has been able to prove this conjecture, but a short program allows you
  to investigate it.
It is interesting to obseve the number of cycles required to reduce the
  starting number to 1, looking for a pattern.
This program uses the <code>BigInteger</code> class to allow arbitrarily large
  values (not restricted to the bounded type <b>int</b>) and the
  <code>Timer</code> class to keep track of the processing time.
<p>
--->

Download: <a href="programs/collatzfordebugging.zip">
  Collatz Conjecture <b>FOR DEBUGGER HANDOUT</b></a><br>
The Collatz conjecture states: starting with any positive number, repeat the
  process "If it is even, halve it; if it is odd, multiply it by three and
  add one" and eventually the remaining value reduces to one.
No one has been able to prove this conjecture, but a short program allows you
  to investigate it.
It is interesting to obseve the number of cycles required to reduce the
  starting number to 1, looking for a pattern.
Unlike the program above, this is a simpler one, using the <code>int</code>
  type, useful for illustrating the debugger.
<p>

Download: <a href="programs/controllers.zip">
  Controller Demonstrations</a><br>
Demonstrations of using Controllers in the MVC pattern.
The <b>mouse</b> project illustrates all mouse controllers (each associated 
  with a trivial behavior).
The <b>grabbag</b> project illustrate many other controllers:
  <b>JButton</b>, <b>JTextField</b>, <b>JRadioButton</b>, <b>JTextArea</b>,
  <b>JScrollPane</b>, <b>RadioButtonPanel</b>, and <b>SliderPanel</b>.
<p>

Download: <a href="programs/crapsstatistics.zip">
  Craps Statistics</a><br>
This program prompts the user for the number of craps games to play (craps
  is a dice game whose rules are explained in the opening comment in the
  Application.java file).
It then simulates that many games of craps, printing the number of wins,
  losses, dice throws, elapsed time, and playing speed.
This program uses the <code>DiceEnsemble</code> and <code>Timer</code> 
  classes.
<p>

Download: <a href="programs/crapsstatisticsfordebugging.zip">
  Craps Statistics <b>FOR DEBUGGER HANDOUT</b></a><br>
This program prompts the user for the number of craps games to play (craps
  is a dice game whose rules are explained in the opening comment in the
  Application.java file).
It then simulates that many games of craps, printing the number of wins,
  losses, dice throws, elapsed time, and playing speed.
Unlike the program above, this is a simpler one, not using classes,
  useful for illustrating the debugger.
<p>

Download: <a href="programs/datecalculator1.zip">
  Date Calculator #1</a><br>
A small program for for computing some information about dates.
This program illustrates how to use five <b>static</b> methods and twelve
  <b>static</b> fields written directly in the <b>Application</b> class.
<p>

Download: <a href="programs/datecalculator2.zip">
  Date Calculator #2</a><br>
A small program for for computing some information about dates.
This program illustrates how to use five <b>static</b> methods and twelve
  <b>static</b> fields written in the <b>DateUtility</b> class (included in
  this project folder).
When learning to write classes (that are just libraries of <b>static</b>
   methods), this is a good place to start.
<p>

Download: <a href="programs/dicedemo.zip">
  DiceEnsemble Demonstration</a><br>
A driver program for testing the <code>DiceEnsemble</code> class
  (from the course library).
<p>

Download: <a href="programs/directorylister.zip">
  Directory Lister</a><br>
A program that lists the contents of any folder and computes statistics about
  its subfolders and files.
This program uses Java's <b>File</b> class (defined in the <b>java.io</b>
  package), which represents an N-ary tree by using arrays.
These N-ary trees are processed by both iteration and recursion.
<p>

Download: <a href="programs/expressiontrees.zip">
  Expression Trees</a><br>
A program that reads an expression in standard Java form (literals only,
  no variables) and then builds an expression tree for it (using parentheses
  and operator precedence to guide it) and then evaluates the tree and
  prints its postfix form.
It uses a <b>SimpleStack</b> as an critical data structure.
<p>

Download: <a href="programs/extendedexpressiontrees.zip">
  Expression Trees (Extended)</a><br>
A program that reads an expression in standard Java form (<b>BigInteger</b>
  literals and variables) and then builds an expression tree for it (using
  parentheses, operator precedence, and associativity to guide it) and then
  evaluates the tree and prints its postfix form (and shows the variable
  <b>Map</b>).
It uses a <b>SimpleStack</b> as an critical data structure.
<p>

Download: <a href="programs/fileinput.zip">
  File Input</a><br>
A simple program illustrating the pattern used to read input files (including
  a <b>try-catch</b> statment to terminate the file reading loop when there is
  no more input).
This program actually recovers from errors on a line by line basis, as
  described in the lecture on the
  <a href="lectures/usingclasses/lecture.html#RealFileIO" target="_blank">
  TypedBufferReader</a> class for Java file input.
<p>

Download: <a href="programs/hashing.zip">
  Testing <b>Hashing</b> on Strings</a><br>
Two drivers.
One tests chained hashing on Strings in two ways: random Strings
  and all String up to N characters; one tests open hashing on
  random Strings with linear or quadratic probing.
There are lots of ways to run these drivers (or just choose the
  defaults).
If you want, use your own hashing function, testing its speed and
  ability to put distribute the values among the bins.
<p>

Download: <a href="programs/interfacedemo.zip">Interface Demonstration</a><br>
A simple program illustrating two Java interfaces <b>DecisionInt</b> and
   <b>Univariate</b> and how they are used, as described in the lecture on the
  <a href="../lectures/interfaces/lecture.html#" target="_blank">
   Interfaces</a>.
This is the beginning of real object-oriented programming.
The name of the interface is uses as a parameter type in a method, and many
  classes are defined to <b>implement</b> that interface.
<p>

Download: <a href="programs/java5examples.zip">
  Java 1.5 Examples</a><br>
Illustrates various features new to Java 1.5: extended for loops,
  autoboxing, var-args, c-style formatting, and using generic collection
  class.
<p>

Download: <a href="programs/junitstackdemo.zip">
  JUnit: Stack Test</a><br>
Uses JUnit to test a stack class (which is correct).
I recommend that you insert bugs into the stack class and see
  if they are diagnosed (so you will get familiar with
  interpreting errors from JUnit.
See also the <b>Course Software</b> download <b>JUnit Testing Framework</b>
  (reachable via the <b>Online Resources</b> link).
<p>

Download: <a href="programs/layouts.zip">
  Layout Manager Demonstrations</a><br>
Demonstrations for four standard Layout Managers: <b>FlowLayout</b>,
  <b>BoxLayout</b>, <b>GridLayout</b> and <b>BorderLayour</b>.
Also includes a demonstration of recursively combining these <b>JPanel</b>s
  and their layouts.
Finally, includes a demonstration <b>TwoColumnLayout</b>, showing how to write
 new, simple layout managers.
<p>

Download: <a href="programs/mindistance.zip">
  Minimum Distance between Points: 3 Algorithmis</a><br>
A driver program for using the three algorithms on arrays of
   randomly generated <b>Point2D.Double</b>s.
The brute force algorithm is O(N^2), the sorting/recursive algorithm
  is O(NlogN), and the hash algorithm is O(N), although empirically
  it runs more slowly than the sort/recursive algorithm.
<p>

Download: <a href="programs/modularcounterdemo.zip">
  ModularCounter Demonstration</a><br>
A driver program for testing the <code>ModularCounter</code> class
  (from the <b>introlib</b> library).
<p>

Download: <a href="programs/oolistdemo.zip">
  Object-Oriented List Demo</a><br>
A driver program for testing Object-Oriented Linked Lists.
Included are interfaces for list algorithms, the declaration
  of the classes needed to implement linked lists, and
  various classes that specify algorithms.
Uses the singleton and strategy pattern.
See also
  <a href="http://www.exciton.cs.rice.edu/research/SIGCSE99/PatDatAlgo.doc">
  Patterns for Decoupling Data Structurs and Algorithms</a>
<p>

Download: <a href="programs/orderedcollection.zip">
  Ordered Collection Demonstration</a><br>
A driver program for testing all the ordered collection classes:
  <code>ArrayStack</code>, <code>ListStack</code>,
  <code>ArrayQueue</code>, <code>ListQueue</code>,
  <code>ArrayPriorityQueue</code>, and <code>ArrayUnsortedPriorityQueue</code>.
All the relevant interfaces, abstract classes, and classes are included in
  this driver, which can generically test each of these concrete classes.
<p>

Download: <a href="programs/positionalshapedemo.zip">
  Positional Shape Inheritance Demonstration</a><br>
A program using abstract classes and inheritance.
The classes in this program is described in the <b>first</b> design in the
  <a href="../lectures/abstractclasses/index.html" target="_blank">
    Abstract Classes</a> lecture.
<p>

Download: <a href="programs/positionalshapedemo2.zip">
  Positional Shape Inheritance Demonstration 2</a><br>
A program using interfaces, abstract classes, and inheritance.
The classes in this program is described in the <b>second</b> design in the
  <a href="../lectures/abstractclasses/index.html" target="_blank">
    Abstract Classes</a> lecture.
<p>

Download: <a href="programs/rationaldemo.zip">
  Rational Demonstration</a><br>
A driver program for testing the <code>Rational</code> class
  (from the <b>introlib</b> library).
<p>

Download: <a href="programs/reflectivetestdriver.zip">
  Reflective Test Driver</a><br>
Using Java's powerful reflection mechanism, this test driver
  allows you to test any Java class!
Just enter its full name (prefixed by its package) and
  then you'll get to choose a constructor (and arguments)
  and repeatedly be able to call methods on it (and supply arguments).
Truly amazing!
<p>

Download: <a href="programs/simpledicedemo.zip">
  SimpleDiceEnsemble Demonstration</a><br>
A driver program for testing the <code>SimpleDiceEnsemble</code> class
  (a slightly simpler version than the one in the <b>introlib</b> library;
  it doesn't
  use arrays and has no <b>getPips</b> method) which is discussed in the
  <a href="lectures/writingclasses/index.html"  target="_blank">
    Writing Classes</a> lecture.
<p>

Download: <a href="programs/simplequeuedemo.zip">
  SimpleQueue Demonstration</a><br>
A driver program for using the <b>SimpleQueue</b> collection class
    described in the lecture on the
  <a href="lectures/arrays1d/lecture.html#Queue" target="_blank">
    1-d Arrays...</a>.
It declares an instance variable that is an array that grows to
   acccomodate all the required references stored in the queue.
Queues support first-in/first-out behavior.
<p>

Download: <a href="programs/simplequeuedemo with List.zip">
  SimpleQueue Demonstration with List</a><br>
A driver program for using the <b>SimpleQueue</b> collection class
    described in the lecture on the
  <a href="lectures/arrays1d/lecture.html#Queue" target="_blank">
    1-d Arrays...</a>.
It declares an instance variable that is an array that grows to
   acccomodate all the required references stored in the queue.
Queues support first-in/first-out behavior.
<b>Note, this version is implemented with a List,not an array</b>
<p>

Download: <a href="programs/simplequeuewithiteratordemo.zip">
  SimpleQueue with Iterator Demonstration</a><br>
A driver program for using the <b>SimpleQueue</b> collection class
    described first in the lecture on the
  <a href="lectures/arrays1d/lecture.html#Queue" target="_blank">
    1-d Arrays...</a> and then modified to include iterators in the lecture
  <a href="lectures/collectionsi/index.html" target="_blank">
    Collection Classes: Basics</a>.
It declares an instance variable that is an array that grows to
   acccomodate all the required references stored in the stack.
Queues support first-in/first-out behavior.
The menu has been enlarged to include testing the iterator inner-class.
<p>

Download: <a href="programs/simplestackdemo.zip">
  SimpleStack Demonstration</a><br>
A driver program for using the <b>SimpleStack</b> collection class
    described in the lecture on the
  <a href="lectures/arrays1d/lecture.html#Stack" target="_blank">
    1-d Arrays...</a>.
It declares an instance variable that is an array that grows to
   acccomodate all the required references stored in the stack.
Stacks support last-in/first-out behavior.
<p>

Download: <a href="programs/examBST-size.zip">
  size in BST</a><br>
A solution to a problem even too simple to put on the programming exam, for
  computing the <b>size</b> of a <b>BST</b> using the classes appearing
  on the second programming exam.
<p>

Download: <a href="programs/sortingwithinterfaces.zip">
  Sorting (with Interfaces) Demonstration</a><br>
A driver program for using the <b>Arrays.sort</b> method on arrays of
   <b>Point</b>s.
It includes classes that implement the <b>Comparator</b> interface,
   for sorting by X coordinate, by Y coordinate, by distance from the
   origin, and by angle from the origin (in all cases, both increasing
   and decreasing through the use of the <b>ReverseAComparator</b>
   decorator.
<p>

Download: <a href="programs/sorting.zip">Sorting Methods Demonstraction</a><br>
This program is a driver for the sorting methods in the <b>Sort</b> class
  (included in this download).
It allows the testing and timing of all these sort methods, and
  <b>Arrays.sort</b>.
It also contains an executable, that you can run immediately.
<p>

Download: <a href="programs/statespacesearch.zip">State Space Search</a><br>
These programs use a generalized state-space searching to solve various
  various problems involving applying operators.
See the <b>stateSpace</b> package, which contains the <b>Problem</b> interface,
  and the <b>Solver</b> class, which solves any problem expressible by a class
  implementing this interface.
The <b>puzzleNxN</b> package contains a <b>PuzzleNxN</b> class and a simple
  application that uses <b>Solver</b> to solve it (how to acheive a standard
  puzzle configuration).
The <b>waterJugs</b> package contains a <b>WaterJugs</b> class and a simple
  application that uses <b>Solver</b> to solve it (how to achieve a certain
  configuration).
<p>

Download: <a href="programs/supermarket.zip">Supermarket Simulation</a><br>
This program simulates a supermarket using queues (for the checkout lines)
  and priority queues (for the scheduling events; the event to happen most
  closely in the future has the highest priority).
The simulated supermarket is specified by an array storing the maximum number
  of items that can be checked-out in each line.
The events are "enter the store and start shopping" (at random intervals),
  "enter a checkout line" (based on the number of items bought, the sizes
  of the lines, and how many items are allowable), start checkout process
 (keep track of shopper's wait time: from entering a line to checking out),
  and "exit store".
The unhappiness of a custom is computed (line wait time/shop time) and
  an average over all shoppers is reported.
The program also reports the running time and simulation speed (# of events
  processed/second).
<p>

Download: <a href="programs/threads.zip">Thread Demonstrations</a><br>
This folder contains four small programs that demonstrate threads:
<b>Thread</b>/<b>Runnable</b> illustrate two ways to use threads.
<b>Timer</b> illustrates how to use an action listener which is activated
  regularly.
<b>Animation</b> shows how such a time can be used to run a tiny GUI animation.
<p>

Download: <a href="programs/treeheights.zip">Tree Heights</a><br>
This folder contains a program and an executable that builds random trees
  and shows a histogram of their heights.
It illustrates the heights of random trees, which are much closer to
  their minimum than their maximums.
<p>

Download: <a href="programs/tripplanner.zip">Trip Planner</a><br>
This program prompts the user for information about the price of gas
  and the length of a trip and computes the number of tanks of gas
  needed, the cost, and the amount of few remaining in the tank on arrival.
<p>

Download: <a href="programs/views.zip">
  View Demonstrations</a><br>
Demonstrations of using <b>JFrame</b>s and <b>JPanel</b>s.
The <b>JFrame</b> demonstration shows how to create, position, size,
  and label windows.
The <b>JPanel</b> demonstrations show how to draw figures, put text,
  put icons (and animate them), and put buttons into <b>JPanel</b>s.
<p>

Download: <a href="programs/xref.zip">X (cross) Reference</a><br>
This program produces a cross-reference list of any text file.
It uses the map and list collection classes to do so: the
  <b>Application</b> class uses non-generic collections (pre Java 1.5)
  and the <b>GenericApplication</b> class uses Java 1.5 Generic
  collections (and one Java 1.5 <b>for</b> loop).
The download includes a complete copy of Mark Twain's "Tom Sawyer"
  and the correct output for this input.
<p>

<!--Download: <a href="programs/faceflasher.zip">Face Flasher</a>--->
Download: <a href="../misc/preclass/midtermgrades.xls">Face Flasher</a>

<hr align="left" width="100%">
</body>
</html>
