<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- Page automatically generated from latex_to_html converter. -->
<!-- by cc_extract_html, $Revision: 3.19 $ -->
<!-- LaTeX source file: './Kernel_23_ref/Iso_rectangle_2.tex' -->
<html> <head>  
<title>Iso_rectangle_2&lt;Kernel&gt;</title>
</head>  
<link href="../latex_to_html.css" rel="STYLESHEET">
<body bgcolor="white">
<!-- ------------------------------------------------------------------- -->


<!-- Top Navigation ---------------------------------------------------- -->
<div class="NavTop">
<hr>
  <strong>Navigation:</strong>
<a href="Chapter_main.html">Up</a>, 
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<hr><!-- End of Top Navigation ----------------------------------------- -->
</div>


<A NAME="Cross_link_anchor_47"></A>

<A NAME="Cross_link_anchor_48"></A>

      
     
     
     
<A NAME="Index_anchor_45"></A> 

   
<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC="cc_Class.gif"></TD></TR></TABLE>


    <A NAME="ccRef_CGAL::Iso_rectangle_2<Kernel>"></A>
<h2><I>CGAL::Iso_rectangle_2&lt;Kernel&gt;</I></h2>
<P>

<H3>Definition</H3>An object <MATH><I>s</I></MATH> of the data type <I><A HREF="Class_Iso_rectangle_2.html#Cross_link_anchor_48">Iso_rectangle_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;</I> is a
rectangle in the Euclidean plane <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC="cc_mathbb_E.gif"> <SUP>2</SUP></I></MATH> with sides <A HREF="Function_parallel.html#Cross_link_anchor_249">parallel</A> to the <MATH><I>x</I></MATH> and
<MATH><I>y</I></MATH> axis of the coordinate system.
<P>

Although they are represented in a canonical form by only two
vertices, namely the lower left and the upper right vertex, we provide
functions for ``accessing'' the other vertices as well. The vertices
are returned in counterclockwise order.
<P>

Iso-oriented rectangles and bounding boxes are quite similar. The
difference however is that bounding boxes have always double coordinates, 
whereas the coordinate type of an iso-oriented rectangle is chosen by
the user.
<P>

<H3>Creation</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Iso_rectangle_2.html#Cross_link_anchor_48">Iso_rectangle_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; r (  <A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p,  <A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; q);
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    introduces an iso-oriented rectangle <I>r</I> with diagonal
             <A HREF="Function_opposite.html#Cross_link_anchor_243">opposite</A> vertices <MATH><I>p</I></MATH> and <MATH><I>q</I></MATH>. Note that the object is 
             brought in the canonical form.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    <A HREF="Class_Iso_rectangle_2.html#Cross_link_anchor_48">Iso_rectangle_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; r ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     <A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; left,<BR>

<A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; right,<BR>

<A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; bottom,<BR>

<A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; top);</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    introduces an iso-oriented rectangle <I>r</I> whose
             minimal <MATH><I>x</I></MATH> coordinate is the one of <I>left</I>, the
             maximal <MATH><I>x</I></MATH> coordinate is the one of <I>right</I>, the
             minimal <MATH><I>y</I></MATH> coordinate is the one of <I>bottom</I>, the
             maximal <MATH><I>y</I></MATH> coordinate is the one of <I>top</I>.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    <A HREF="Class_Iso_rectangle_2.html#Cross_link_anchor_48">Iso_rectangle_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; r ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     <A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT min_hx,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT min_hy,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT max_hx,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT max_hy,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT hw = RT(1));</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    introduces an iso-oriented rectangle <I>r</I> with diagonal
             <A HREF="Function_opposite.html#Cross_link_anchor_243">opposite</A> vertices (<I>min_hx/hw</I>, <I>min_hy/hw</I>) and 
             (<I>max_hx/hw</I>, <I>max_hy/hw</I>).<BR>

<EM>Precondition: </EM><I>hw</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=27 ALIGN=MIDDLE SRC="cc_neq.gif"> </I></MATH> 0.
<P>

</TD></TR>
        </TABLE>
<P>

<H3>Operations</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    bool<A NAME="Function_bool_operator==6const_Iso_rectangle_26Kernel9__r29_const;"></A>

        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    r.operator== (  r2)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    Test for equality: two iso-oriented rectangles are equal, iff their
        lower left and their upper right vertices are equal.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    bool<A NAME="Function_bool_operator!=6const_Iso_rectangle_26Kernel9__r29_const;"></A>

        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    r.operator!= (  r2)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    Test for inequality.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_26Kernel9_vertex6int_i9_const;"></A>
<A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    r.vertex ( int i)
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the i'th vertex modulo 4  of <I>r</I> in counterclockwise order, 
        starting with the lower left vertex.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;<A NAME="Function_Point_26Kernel9_operator696int_i9_const;"></A>

        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    r.operator[] ( int i)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns  <I>vertex(i)</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_26Kernel9_min69_const;"></A>
<A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    r.<A HREF="../NumberTypeSupport_ref/Function_min.html#Cross_link_anchor_1394">min</A> ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the lower left vertex of <I>r</I> (= <I>vertex(0)</I>).
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_26Kernel9_max69_const;"></A>
<A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    r.<A HREF="../NumberTypeSupport_ref/Function_max.html#Cross_link_anchor_1392">max</A> ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the upper right vertex of <I>r</I> (= <I>vertex(2)</I>).
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Kernel::FT_xmin69_const;"></A>
<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::FT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    r.xmin ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the <MATH><I>x</I></MATH> coordinate of lower left vertex of <I>r</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Kernel::FT_ymin69_const;"></A>
<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::FT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    r.ymin ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the <MATH><I>y</I></MATH> coordinate of lower left vertex of <I>r</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Kernel::FT_xmax69_const;"></A>
<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::FT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    r.xmax ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the <MATH><I>x</I></MATH> coordinate of upper right vertex of <I>r</I>.
        </TD></TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Kernel::FT_ymax69_const;"></A>
<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::FT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    r.ymax ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the <MATH><I>y</I></MATH> coordinate of upper right vertex of <I>r</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Kernel::FT_min_coord6int_i9_const;"></A>
<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::FT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    r.min_coord ( int i)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the <MATH><I>i</I></MATH>'th 
<!-- REMOVE_LINKS_BEGIN -->
Cartesian
<!-- REMOVE_LINKS_END -->
 coordinate of the
        lower left vertex of <I>r</I>.<BR>

<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> 1</I></MATH>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Kernel::FT_max_coord6int_i9_const;"></A>
<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::FT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    r.max_coord ( int i)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the <MATH><I>i</I></MATH>'th 
<!-- REMOVE_LINKS_BEGIN -->
Cartesian
<!-- REMOVE_LINKS_END -->
 coordinate of the
        upper right vertex of <I>r</I>.<BR>

<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC="cc_leq.gif"> 1</I></MATH>.
        </TD></TR>
        </TABLE>
<P>

<H3>Predicates</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_degenerate69_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    r.is_degenerate ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    <I>r</I> is degenerate, if all vertices
        are <A HREF="Function_collinear.html#Cross_link_anchor_167">collinear</A>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Bounded_side_bounded_side6const_Point_26Kernel9__p9_const;"></A>
<A HREF="Enum_Bounded_side.html#Cross_link_anchor_99">Bounded_side</A>
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    r.bounded_side (  <A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns either <I><A HREF="Enum_Bounded_side#Enum_Bounded_side">ON_UNBOUNDED_SIDE</A></I>,
        <I><A HREF="Enum_Bounded_side#Enum_Bounded_side">ON_BOUNDED_SIDE</A></I>, or the constant
        <I><A HREF="Enum_Bounded_side#Enum_Bounded_side">ON_BOUNDARY</A></I>, 
        depending on where point <MATH><I>p</I></MATH> is.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_has_on_boundary6const_Point_26Kernel9__p9_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    r.has_on_boundary (  <A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_has_on_bounded_side6const_Point_26Kernel9__p9_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    r.has_on_bounded_side (  <A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_has_on_unbounded_side6const_Point_26Kernel9__p9_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    r.has_on_unbounded_side (  <A HREF="Class_Point_2.html#Cross_link_anchor_52">Point_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        
    
        </TR>
        </TABLE>
<P>

<H3>Miscellaneous</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Kernel::FT_area69_const;"></A>
<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::FT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    r.<A HREF="Function_area.html#Cross_link_anchor_159">area</A> ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the <A HREF="Function_area.html#Cross_link_anchor_159">area</A> of <I>r</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Bbox_bbox69_const;"></A>
Bbox
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    r.bbox ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns a bounding box containing <I>r</I>.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_Iso_rectangle_26Kernel9_transform6const_Aff_transformation_26Kernel9__t9_const;"></A>
<A HREF="Class_Iso_rectangle_2.html#Cross_link_anchor_48">Iso_rectangle_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    r.transform (  <A HREF="Class_Aff_transformation_2.html#Cross_link_anchor_40">Aff_transformation_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; t)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns the iso-oriented rectangle obtained by applying <MATH><I>t</I></MATH> on 
        the lower left and the upper right corner of <I>r</I>.<BR>

<EM>Precondition: </EM>The <A HREF="Function_angle.html#Cross_link_anchor_153">angle</A> at a rotation must be a multiple of <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC="cc_pi.gif">/2</I></MATH>,
        otherwise the resulting rectangle does not have the same side length.
        Note that rotating about an arbitrary <A HREF="Function_angle.html#Cross_link_anchor_153">angle</A> can even result in
        a degenerate  iso-oriented rectangle.
        </TD></TR>
        </TABLE>
<P>

<H3>See Also</H3><I><A HREF="Concept_Kernel--IsoRectangle_2.html#Cross_link_anchor_433">Kernel::IsoRectangle_2</A></I>
<P>

<div class="NavNext"><hr> <b>Next:</b> <a href="Class_Line_2.html"><I>Line_2&lt;Kernel&gt;</I></a> 


    
<div class="NavBottom">
<hr><!-- Bottom Navigation --------------------------------------------- -->
  <strong>Navigation:</strong>
<!Up_chapter_link_7!>
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<!-- End of Bottom Navigation ------------------------------------------ -->


<hr><!-- --------------------------------------------------------------- -->
<div class="NavAddress">

The <A HREF=http://www.cgal.org>CGAL Project</A> .

Tue, December 21, 2004 .
<hr></div>
</body>  </html>  
