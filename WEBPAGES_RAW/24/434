<title>otJournal</title>
<body bgcolor=#ffffff>
<h2> Retargetable Pipeline Hazard Detection for Partially Bypassed
Processors 
</h2>
  
<a href="http://www.ics.uci.edu/~aviral/papers/OTJournal.pdf"><img
src="pdf.png" alt="pdf" width="34" height="34" border="0"></a>


<p><i>
<a href="http://www.ics.uci.edu/~aviral"> Aviral Shrivastava </a>,
<a href="http://www.ics.uci.edu/~dutt"> Nikil Dutt </a>,
<a href="http://www.ics.uci.edu/~nicolau"> Alex Nicolau </a>, and 
<a href="http://search2.intel.com/corporate/default.aspx?culture=en-US&q=Eugene+Earlie"> Eugene Earlie</a>,
</i>

<p><b>IEEE TVLSI:</b> <i>IEEE Transactions on Very Large Scale Integrated
circuits
</i>


<p><b>Abstract: </b>
Register bypassing is a widely used feature in modern processors to eliminate certain data hazards.
Although complete bypassing is ideal for performance, it has significant impact on the cycle time, area,
and power consumption of the processor. Owing to the strict design constraints on the performance, cost
and the power consumption of embedded processor systems, architects seek a compromise between the
design parameters by implementing partial bypassing in processors. However, partial bypassing in processors
presents challenges for compilation. Traditional data hazard detection and/or avoidance techniques used in
retargetable compilers that assume a constant value of operation latency, break down in the presence of
partial bypassing. In this article, we present the concept of Operation Tables that can be used to accurately
detect data hazards, even in the presence of incomplete bypassing. Operation Tables integrate the detection
of all kinds of pipeline hazards in a unified framework, and can therefore be easily deployed in a compiler
to generate better schedules. Our experimental results on the popular Intel XScale embedded processor
running embedded applications from the MiBench suite, demonstrate that accurate pipeline hazard detection
by Operation Tables can result in up to 20% performance improvement over the best performing GCC
generated code. Finally we demonstrate the usefulness of Operation Tables over various bypass configurations
of the Intel XScale.
<p>

<hr>

<table cellpadding="2" cellspacing="2" border="0" width="100%">
  <tbody>
    <tr>
      <td valign="left">
      Center For Embedded Computer Systems,<br> 
      Department of Information and Computer Science,<br>
      University of California, Irvine.
      </td>
    </tr>
  </tbody>
</table>
