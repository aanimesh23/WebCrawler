<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<title>Theory Seminar, November 7, 2013</title>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
</head>
<body>
<a href="/~theory/"><img src="http://www.ics.uci.edu/~theory/logo/CATOC2.jpg"></a>
<h2><a href="/~theory/269/">Fall 2014: Theory Seminar</a><br>
Donald Bren Hall, Room 1425, 1:00pm

<hr />
November 7, 2014:</h2>
<h1>
Multi-Pivot Quicksort: Theory and Experiments
</h1>
<h2>
Timothy Johnson
</h2>

<p>
The idea of multi-pivot quicksort has recently received the attention of
researchers after Vladimir Yaroslavskiy proposed a dual pivot quicksort
algorithm that, contrary to prior intuition, outperforms standard
quicksort by a significant margin under the Java JVM. More recently,
this algorithm has been analysed in terms of comparisons and swaps by
Wild and Nebel. Our contributions to the topic are as follows. First, we
perform the previous experiments using a native C implementation thus
removing potential extraneous effects of the JVM. Second, we provide
analyses on cache behavior of these algorithms. We then provide strong
evidence that cache behavior is causing most of the performance
differences in these algorithms. Additionally, we build upon prior work
in multi-pivot quicksort and propose a 3-pivot variant that performs
very well in theory and practice. We show that it makes fewer
comparisons and has better cache behavior than the dual pivot quicksort
in the expected case. We validate this with experimental results,
showing a 7&ndash;8% performance improvement in our tests.
</p>
<p>(Based
on <a href="http://epubs.siam.org/doi/pdf/10.1137/1.9781611973198.6">a
paper from ALENEX 2014</a>
by Shrinu Kushagra, Alejandro L&oacute;pez-Ortiz, J. Ian Munro, and
Aurick Qiao.)
</body>
</html>

