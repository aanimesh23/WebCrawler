<html>

<head>
<title>ICS 160E / EECS 114  - Programming Project 2</title>
</head>

<body bgcolor="#FFFFFF">

<center>

<h2>ICS 160E / EECS 114 - Programming Project 2, 50 Points
<br>
Due: Friday, May 6, 2005, at 11:59pm,
using the
<a href="http://checkmate.ics.uci.edu/index.jsp">
Checkmate Submission System</a>.
</h2>

</center>

<p>
Write a Java program that can play tic-tac-toe effectively.
To do this, you will need to create a 
<b>game tree</b> <i>T</i>, which is a tree where each node corresponds to
a <b>game configuration</b>, which in this case is a
representation of the tic-tac-toe board.
The root node corresponds to the initial configuration.
For each internal node <i>v</i> in <i>T</i>, the children of <i>v</i> correspond to
the game states we can reach from <i>v</i>'s game state in a single 
legal move for the appropriate player, <i>A</i> (the first player) or <i>B</i>
(the second player).
Nodes at even depths correspond to moves for <i>A</i> and nodes at 
odd depths correspond to moves for <i>B</i>.
External nodes are either final game states 
or are at a depth beyond which we don't wish to explore.
We score each external node with a value that indicates how
good this state is for player <i>A</i>.
In large games, like chess, we have to use a heuristic scoring function,
but for small games, like tic-tac-toe, we can construct
the entire game tree and score external nodes as +1, 0,
-1, indicating whether player <i>A</i> has a win, draw, or lose in that
configuration.
A good algorithm for choosing moves is \emph{minimax}.
In this algorithm, we assign a score to each internal node <i>v</i> in <i>T</i>, such
that if <i>v</i> represents <i>A</i>'s turn, we compute <i>v</i>'s score as the
maximum of the scores of <i>v</i>'s children (which corresponds to <i>A</i>'s
optimal play from <i>v</i>).
If an internal node <i>v</i> represents <i>B</i>'s turn, then we compute <i>v</i>'s
score as the minimum of the scores of <i>v</i>'s children (which
corresponds to <i>B</i>'s optimal play from <i>v</i>).

<p>
Note: you may use the following class in your program:
<ul>
<li> <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/Scanner.html">
java.util.Scanner</a>
</ul>
You may read expressions from System.in and output to System.out or
use a GUI.
</body>

</html>
