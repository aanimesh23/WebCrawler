# Lab 2, Program 5
#
# Given a DNA sequence, find out whether it contains the subsequence
# 'atg' (a start codon) somewhere within it.
#
# This program requires us to do something new.  In the previous programs,
# we looped through individual characters.  For this program, we need to
# look through "slices" of three characters at a time, rather than single
# characters.  Remember that you can get a slice of a string like this:
#
#    s[0:3]   (takes a slice of the first three characters - indexed 0, 1, 2 -
#              from the string s)
#
# All of our slices will be of the same length (3), so the number following
# the colon will always be three greater than the number before.  We want to
# progressively take each slice in turn, starting with the slice 0:3, then
# the slice 1:4, and so on.  We want to continue until we reach the last
# slice of the string.
#
# But how do we know what the last slice is?  Suppose the sequence consists
# of 20 characters (indexed from 0..19).  In this case, we could get the
# last slice by asking for 17:20.  In general, if the length of the sequence
# is L, we can get the last slice by asking for L-3 : L.
#
# So, how do we know how long the sequence is?  By asking Python to tell us!
# We'll use the "len" function we used in Program 4.
#
# All of that said, here's the solution to Program 5, which makes use of
# a combination of techniques we learned before and a couple of new ones
# that we've just learned here.


dnaSequence = "atcgatgagagctagcgata"

foundAtg = False

for i in range(0, len(dnaSequence) - 3):
    if (dnaSequence[i : i+3] == 'atg'):
        foundAtg = True
        break

if foundAtg:
    print "A start codon (ATG) appears in the DNA sequence."
else:
    print "A start codon (ATG) does not appear in the DNA sequence."

