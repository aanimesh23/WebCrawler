<html>
    <head>
      <title>
        Dr. Rina Dechter @ UCI
      </title>
      <LINK REL="Stylesheet" HREF="/~dechter/basic.css">		
    </HEAD>
  
  <BODY bgcolor="#ffffff" alink="00aaaa" link="008080" vlink="008080">
  
<!-- Begin Header -->

  <!--#include virtual="/~dechter/header.html" -->

  <!-- End Header -->
  
  <!-- Begin Body -->
  
  <!--#include file="pubs-nav.html"--> 

<center>
<table width="80%" cellspacing="0" cellpadding="0" border="0">
<tr valign=top>
<td><b>R24</td>
 | 
<br></td>
</tr>

<tr>
<td colspan=2><div class=title>On Improving Connectionist Energy Minimization</div>
<tt>
Gadi Pinkas &
Rina Dechter (<A href="mailto:dechter@ics.uci.edu">dechter@ics.uci.edu</A>)
</tt></td></tr>
</table>

<table width="80%" cellspacing="0" cellpadding="0" border="0">
<tr><td>
<br><div class=abstract>
<b>Abstract</b><BR>
Symmetric networks designed for energy minimization such as Boltzman 
machines and Hopfield nets are used frequently for optimization,
constraint satisfaction and approximation of NP-hard problems. Nevertheless, 
finding a global solution (i.e., a global minimum for the energy function) 
is not guaranteed and even a local solution may take an exponential number 
of steps. We propose an improvement to the standard 
local activation function used for such networks. The improved
algorithm guarantees that a global minimum is found in linear time
for tree-like subnetworks. The algorithm is uniform and does not assume 
that the network is tree-like. It can identify tree-like subnetworks
even in cyclic topologies (arbitrary networks) and avoid local minima
along these trees. For acyclic networks, the algorithm is guaranteed to
converge to a global minimum from any initial state of the system 
(selfstabilization) and remains correct under various types of schedulers.
For general (cyclic) topologies, we show how our tree-like algorithm can
be extended using the cycle-cutset idea. The general algorithm optimizes 
tree-like subnetworks and has some performance guarantees that
are related to the size of the network's cycle-cutset. In any case, the
algorithm performs no worse than the standard algorithms. On the negative 
side, we show that in the presence of cycles, no uniform algorithm
exists that guarantees optimality even under a sequential synchronous
scheduler. In addition, no uniform algorithm exists to optimize even
acyclic networks when the scheduler is asynchronous.
</div><br>

<A href="r24.ps">
<img align=left border="0" src="/~dechter/images/down.gif">&nbsp;&nbsp;<b>[ps] </b></a>
<A target=blank href="r24.pdf">
<b>[pdf]</b></a>
</td></tr></table></center><br>

<!-- End Body-->

<!--- Begin Footer -->
     <!--#include virtual="/~dechter/footer.html" -->
<!--- End Footer -->

</body>
<html>
