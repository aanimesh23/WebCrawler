//compile: g++ -o gg_wald gg_wald.cpp
//gg_wald cases.txt controls.txt pvalues.txt
//genotype coding: 0, 1, 2
//any value greater than 2, such as 3 or 9, is treated as missing

#include <iostream>
#include <stdlib.h>
#include <vector>
#include <string>
#include <fstream>
#include <sstream>
#include <math.h>
#include <algorithm>
#include "wald.h"
#include "pchisq.c"
#include "bitcount.h"

using namespace std;

int main(int argc, char *argv[]){
	if(argc<4){
		cout << "Usage: ggwald case_file control_file output_file" << endl;
		exit(0);}

	int nsnp, nsnp2, tmpInt, i, j, k, snp_i, snp_j, dimg, dimh, g, h;
	int nsub_case, nsub_control; 
	double n0[9], n1[9], chi[2], tmpDouble, a, b, c, d;

	uint64 mask1=0x0000000000000001;
	for (i = 0; i<65536; i++)	wordbits[i] = bitCount(i);

	string case_file, control_file, output_file; 
	ifstream fin_case, fin_control;
	ofstream ofile; 

	char line[10000], tmpChar;
	string tmpString;
	istringstream tmpStream;

	//check whether cases and controls have the same number of snps
	fin_case.open(argv[1]);
	if(!fin_case.is_open()) {cout << "file " << argv[1] << " doesn't exist\n"; exit(1);}
	fin_control.open(argv[2]);
	if(!fin_control.is_open()) {cout << "file " << argv[2] << " doesn't exist\n"; exit(1);}

	nsub_case=0;
	nsnp=1; 
	fin_case.getline(line, 10000);
	tmpStream.clear();
	tmpStream.str(line);
	while(tmpStream >> tmpInt)	nsub_case++;
	while(fin_case.getline(line, 10000)) nsnp++; 
	fin_case.close();


	nsub_control=0;
	nsnp2=1; 
	fin_control.getline(line, 10000);
	tmpStream.clear();
	tmpStream.str(line);
	while(tmpStream >> tmpInt)	nsub_control++;
	while(fin_control.getline(line, 10000)) nsnp2++; 
	fin_control.close();


	if(nsnp!=nsnp2) {
		cout << "The case file and the control file do not have the same number of SNPs\n"; 
		exit(1);}

	cout << "There are " << nsnp << " SNPs, " << nsub_case << " cases and "<<nsub_control << " controls\n";

	//read the case file
	fin_case.open(argv[1]);
	fin_control.open(argv[2]);

	int nblocks_case = (int)(ceil(1.0*nsub_case/64.0));
	int nblocks_control = (int)(ceil(1.0*nsub_control/64.0));
	vector<uint64> geno_case, geno_control;
	geno_case.assign(3*nsnp*nblocks_case, 0);
	geno_control.assign(3*nsnp*nblocks_control, 0);

	for(snp_i=0; snp_i<nsnp; snp_i++)
	{
		fin_case.getline(line,10000);
		tmpStream.clear();
		tmpStream.str(line);
		for(k=0; k<nsub_case; k++) {
			tmpStream >> tmpInt; 
			if(tmpInt<3) geno_case[(k/64)*3*nsnp+tmpInt*nsnp+snp_i]  |= (mask1 << (k%64));
		}
	}
	fin_case.close();

	cout << "finished reading cases\n";

	for(snp_i=0; snp_i<nsnp; snp_i++)
	{
		fin_control.getline(line,10000);
		tmpStream.clear();
		tmpStream.str(line);
		for(k=0; k<nsub_control; k++) {
			tmpStream >> tmpInt; 
			if(tmpInt<3) geno_control[(k/64)*3*nsnp+tmpInt*nsnp+snp_i]  |= (mask1 << (k%64));
		}
	}
	fin_control.close();

	cout << "finished reading controls\n";

	//test gene-gene interactions for all pairs
	ofile.open(argv[3]);
	ofile << "Wald4 " << "Wald1\n";

	for(snp_i=0; snp_i<(nsnp-1); snp_i++)
	{
		if(fmod(1.0*(snp_i+1), 100)==0.0) cout<< "snp " << (snp_i+1)<<endl;
		for(snp_j=(snp_i+1); snp_j<nsnp; snp_j++)
		{

			//get the 3-by-3 table for controls
			memset(n0, 0, 9*sizeof(double));
			for(g=0; g<3; g++)
				for(h=0; h<3; h++)
					for(k=0; k<nblocks_control; k++)
						n0[g*3+h] += popcount( geno_control[nsnp*k*3+g*nsnp+snp_i] & geno_control[nsnp*k*3+h*nsnp+snp_j]);

			//check LD between the two snps in controls. If r2>0.9, do not calculate p-values
			a=n0[0*3+0]; b=n0[0*3+1]+n0[0*3+2]; c=n0[1*3+0]+n0[2*3+0];
			d=n0[1*3+1]+n0[1*3+2]+n0[2*3+1]+n0[2*3+2];
			if((a*d-b*c)*(a*d-b*c)/((a+c)*(b+d)*(a+b)*(c+d)) > 0.9) {
				ofile<<"NaN"  << " NaN\n"; continue;}

			//get the 3-by-3 table for cases
			memset(n1, 0, 9*sizeof(double));
			for(g=0; g<3; g++)
				for(h=0; h<3; h++)
					for(k=0; k<nblocks_case; k++)
						n1[g*3+h] += popcount( geno_case[nsnp*k*3+g*nsnp+snp_i] & geno_case[nsnp*k*3+h*nsnp+snp_j]);

			//check whether labels need to be switched - the minor allele is the reference allele
			if( (n0[0*3+0]+n0[0*3+1]+n0[0*3+2]) < (n0[2*3+0]+n0[2*3+1]+n0[2*3+2]) ) 
				for(h=0; h<3; h++) {
					tmpDouble=n0[0*3+h]; n0[0*3+h]=n0[2*3+h]; n0[2*3+h]=tmpDouble;
					tmpDouble=n1[0*3+h]; n1[0*3+h]=n1[2*3+h]; n1[2*3+h]=tmpDouble;}	

			if( (n0[0*3+0]+n0[1*3+0]+n0[2*3+0]) < (n0[0*3+2]+n0[1*3+2]+n0[2*3+2]) ) 
				for(g=0; g<3; g++) {
					tmpDouble=n0[g*3+0]; n0[g*3+0]=n0[g*3+2]; n0[g*3+2]=tmpDouble;
					tmpDouble=n1[g*3+0]; n1[g*3+0]=n1[g*3+2]; n1[g*3+2]=tmpDouble;	}

			//If the rare homozygote is less than 10 counts in the control, ignore it
			dimg=3; dimh=3;
			if(n0[2*3+0]+n0[2*3+1]+n0[2*3+2]<10) {
				dimg=2; 
				n0[1*3+0] += n0[2*3+0]; n0[1*3+1] += n0[2*3+1]; n0[1*3+2] +=n0[2*3+2];
				n1[1*3+0] += n1[2*3+0]; n1[1*3+1] += n1[2*3+1]; n1[1*3+2] +=n1[2*3+2];}

			if(n0[0*3+2]+n0[1*3+2]+n0[2*3+2]<10) {
				dimh=2; 
				n0[0*3+1] += n0[0*3+2]; n0[1*3+1]+=n0[1*3+2]; n0[2*3+1] +=n0[2*3+2];
				n1[0*3+1] += n1[0*3+2]; n1[1*3+1]+=n1[1*3+2]; n1[2*3+1] +=n1[2*3+2];}

			if(*min_element(n0, n0 + 9)==0 || *min_element(n1, n1 + 9)==0)
				for(i=0; i<9; i++) {n0[i]=n0[i]+0.5; n1[i]=n1[i]+0.5;}

			//test gene-gene interactions
			if(dimg==2 && dimh==2) {
				wald22(n0, n1, chi);
				tmpDouble = pchisq(1.0/2, chi[0]/2);
				ofile << tmpDouble <<" " << tmpDouble << endl;
				continue;} 

			if(dimg==2 && dimh==3) {
				wald23(n0, n1, chi);
				ofile << pchisq(2.0/2, chi[0]/2)<< " " << pchisq(1.0/2, chi[1]/2) << endl;
				continue;} 

			if(dimg==3 && dimh==2) {
				wald32(n0, n1, chi);
				ofile << pchisq(2.0/2, chi[0]/2)<< " " << pchisq(1.0/2, chi[1]/2) << endl;
				continue;} 

			if(dimg==3 && dimh==3) { 
				wald33(n0, n1, chi);
				ofile << pchisq(4.0/2, chi[0]/2)<< " " << pchisq(1.0/2, chi[1]/2) << endl;
			}

			
		}//for(snp_j=(snp_i+1); snp_j<nsnp; snp_j++)
	}//for(snp_i=0; snp_i<(nsnp-1); snp_i++)

}

