<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Announcements</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Announcements</h1>
<p>
<h2>ICS-33: Intermediate Programming<br>
</h2><p>
</center>
<h3>In reverse-chronological order</h3>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #14: 2/12/17<br>
  Quiz #4 Graded
</b></td>
<td width ="80%">
I have run the automatic batch self-check tests for Quiz #4 and the grades are
  now recorded.
See the
   <a href="solutions/quiz4gradesstudents.zip">assignment grades</a> and
   <a href="ics33win17grades.zip">Grades(zipped .xlsm file)</a> files, whose
   details are discussed below, in Announcement #7.
The class average was about 84% and the median was 100%, meaning that most
  students correctly solved most problems, and well over half (62%) of the
  class correctly solved all the problems (or had minor deductions).
Overall there were 62% As, 14% Bs, 3% Cs, and 21% Ds and Fs.
About 21% of the students submitted early, and these early submitters scored
  much better (97% average) than students submitting on the due day (80%); I am
  assuming that some students ran out of time before they finished all the
  problems, and will plan to get started earlier on later quizzes.
<p>
In the assignment spreadsheet, Column A contains the Hashed IDs of all students
  (in sorted order) and Column B contains an X if we believe the student
  submitted work on time.
Row 1 for Columns C-I shows how many points the problems were worth.
Row 2 shows the number of tests performed for each problem.
Row 3 shows the part of the problems in more detail.
<p>
Rows 4 and beyond show the number of failed tests for each student (a blank
  indicates no failed tests: equivalent to 0 failed tests).
To compute the number of points for a problem/in a column, compute the
  percentage of successful tests and multiply it by the number of points the
  problem is worth.
So for example, if a student missed 5 of 20 tests on a 4 point problem, he/she
  would receive <b>15/20*4 = 3</b> points.
Columns J-K show the cumulative score for each Problem.
Columns L-N show each student's cumulative <b>Score</b>, the score
  <b>Rounded</b> to an integer (what integer is entered in the Grades
  spreadsheet) and <b>Percent</b>, based on the number of points the
  assginment is worth (here 25).
<p>
Students should talk to the TA for their Lab first, if they do not understand
  why they received the marks they did or dispute any of these marks.
The best time to talk with your TA about grades is during one of your Labs,
  when both student and TA are physically present to examine the submission and
  the grade, possibly running the solution on a computer they can share.
<p>
Students should examine their graded work immediately and get any regrade
  issues settled as soon as possible (within a week of when the grade is
  assigned).
<p>
<b>IMPORTANT</b> Information about Student Grades
<ul>
<li>
A few students submitted code that had syntax errors and therefore failed
  all tests: the TAs are authorized to allow you to fix a few simple syntax
  errors in the code you submitted and rerun/regrade the code (but, I will
  deduct some points for not submitting executable code).
Also see Announcement #5 below.
<p>
<li>
A few students submitted code that didn't finish executing in at least one of
  their functions and therefore failed all its tests: the TAs are
  authorized to allow you to replace any method body with <b>pass</b> and
  rerun/regrade the code (but, I will deduct some points for submitting 
  code with an infinite loop).
<p>
</ul>
This assignment was designed to provide you with a good grounding in the use of
  iterators and generators (which can be used to implement iterators), and how
  to write code that uses <b>iter</b> and <b>next</b> directly
  (using <b>while</b> loop instead of <b>for</b> loop).
All these topics will be tested again on the Midterm and In-Lab Exam #2.
As with all assignments, you should examine my solutions.
</td>
</tbody>
</table>

<hr align="left">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #13: 2/10/17<br>
  Program #2 Graded
</b></td>
<td width ="80%">
I have run the automatic batch self-check tests for Program #2 and the grades
  are now recorded.
See the
   <a href="solutions/program2gradesstudents.zip">assignment grades</a> and
   <a href="ics33win17grades.zip">Grades(zipped .xlsm file)</a> files, whose
   details are discussed below, in Announcement #7.
The class average was about 90% and the median was 100%, meaning that most
  students correctly solved most problems, and over half (76%) of the class
  correctly solved all the problems (or had minor deductions).
Overall there were 76% As, 7% Bs, 2% Cs, and 15% Ds and Fs.
About 38% of the students submitted early, and these early submitters scored
  much better (102% average) than students submitting on the due day (85%
  average); I am assuming that some students ran out of time before they
  finished all the problems, and will plan to get started earlier on later
  programs.
<p>
In the assignment spreadsheet, Column A contains the Hashed IDs of all students
  (in sorted order); Column B contains an X if we believe the student
  submitted work on time (for pairs, only the submitting student will show an
  X, not their partner); Column C shows the extra credit points for early
  submissions (students submitting a few minutes late show -2; students 
  submitting more than a few minutes late were not graded).
<p>
Row 2 for Columns D-AE shows how many points the problems were worth.
Row 3 shows the number of tests performed for each problem: all were batch-self
  check tests.
Row 4 shows further information about the tests performed in each column.
<p>
Rows 5 and beyond show the number of failed tests for each student (a blank
  indicates no failed tests: equivalent to 0 failed tests).
To compute the number of points for a problem/in a column, compute the
  percentage of successful tests and multiply it by the number of points the
  problem is worth.
So for example, if a student missed 1 of 4 tests on a 4 point problem, he/she
  would receive <b>3/4*4 = 3</b> points.
Columns AB-AC show each student's cumulative score, for all the tests in each of
  the two problems in this assignment.
Columns AD-AF show each student's cumulative <b>Score</b>, the score
  <b>Rounded</b> to an integer (what integer is entered in the Grades
  spreadsheet) and <b>Percent</b>, based on the number of points the
  assginment is worth (here 50).
Note that these columns are filled in both for submitters and their partners
  (these are the only columns filled in for partners): a partner should see
  his/her submitter's line for details.
<p>
Students should talk to the TA for their Lab first, if they do not understand
  why they received the marks they did or dispute any of these marks.
The best time to talk with your TA about grades is during one of your Labs,
  when both student and TA are physically present to examine the submission and
  the grade, possibly running the solution on a computer they can share.
<p>
Students should examine their graded work immediately and get any regrade
  issues settled as soon as possible (within a week of when the grade is
  assigned).
<p>
<b>IMPORTANT</b> Information about Student Grades
<ul>
<li>
A few students submitted code that had syntax errors and therefore failed
  all tests: the TAs are authorized to allow you to fix a few simple syntax
  errors in the code you submitted and rerun/regrade the code (but, I will
  deduct some points for not submitting executable code).
Also see Announcement #5 below.
<p>
<li>
A few students submitted code that didn't finish executing in some part and
  therefore failed all that part's tests: the TAs are authorized to allow you
  to replace any method body with <b>pass</b> and rerun/regrade the code (but,
  I will deduct some points for submitting code with an infinite loop).
<p>
<li>
A few students submitted code that (a) incorrectly named partners -wrong
  format or wrong UCInetID, or (b) had students listed a partners of 
  multiple submitters, or (c) had both students submitting and listed as
  partners of submitters.
The TAs are authorized to try to understand these problems and help me
  correct them  (but, I will deduct some points for dealing with these
  problems).
<p>
<!---
<li>
If your score is recorded as a <b>0</b> on the Grades spreadsheet, I probably
  do not have a signed Academic Integrity Contract from you.
Please come by during my office hours as soon as possible to fix this problem.
--->
</ul>
<p>
This assignment was designed to provide you with a good grounding in the use of
  the classes and practice in overloading operators.
Quiz #4 covers decorators for iterators using generators.
All these topics will be tested again on the Midterm and In-Lab Exam #2.
As with all assignments, you should examine my solutions.
</td>
</tbody>
</table>

<hr align="left">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #12: 1/5/17<br>
  Quiz #3 Graded
</b></td>
<td width ="80%">
I have run the automatic batch self-check tests for Quiz #3 and the grades are
  now recorded.
See the
   <a href="solutions/quiz3gradesstudents.zip">assignment grades</a> and
   <a href="ics33win17grades.zip">Grades(zipped .xlsm file)</a> files, whose
   details are discussed below, in Announcement #7.
The class average was about 92% and the median was 100%, meaning that most
  students correctly solved most problems, and over half (75%) of the class
  correctly solved all the problems (or had minor deductions).
Overall there were 75% As, 10% Bs, 5% Cs, and 10% Ds and Fs.
About 46% of the students submitted early, and these early submitters scored
  a much better (98% average) than students submitting on the due day (87%
  average); I am assuming that some
  students ran out of time before they finished all the problems, and will plan
  to get started earlier on later quizzes.
<p>
In the assignment spreadsheet, Column A contains the Hashed IDs of all students
  (in sorted order) and Column B contains an X if we believe the student
  submitted work on time.
Row 1 for Columns C-N shows how many points the problems were worth.
Row 2 shows the number of tests performed for each problem.
<p>
Rows 4 and beyond show the number of failed tests for each student (a blank
  indicates no failed tests: equivalent to 0 failed tests).
To compute the number of points for a problem/in a column, compute the
  percentage of successful tests and multiply it by the number of points the
  problem is worth.
So for example, if a student missed 5 of 20 tests on a 4 point problem, he/she
  would receive <b>15/20*4 = 3</b> points.
Columns O-P show the cumulative score for each Problem.
Columns Q-S show each student's cumulative <b>Score</b>, the score
  <b>Rounded</b> to an integer (what integer is entered in the Grades
  spreadsheet) and <b>Percent</b>, based on the number of points the
  assginment is worth (here 25).
<p>
Students should talk to the TA for their Lab first, if they do not understand
  why they received the marks they did or dispute any of these marks.
The best time to talk with your TA about grades is during one of your Labs,
  when both student and TA are physically present to examine the submission and
  the grade, possibly running the solution on a computer they can share.
<p>
Students should examine their graded work immediately and get any regrade
  issues settled as soon as possible (within a week of when the grade is
  assigned).
<p>
<b>IMPORTANT</b> Information about Student Grades
<ul>
<li>
A few students submitted code that had syntax errors and therefore failed
  all tests: the TAs are authorized to allow you to fix a few simple syntax
  errors in the code you submitted and rerun/regrade the code (but, I will
  deduct some points for not submitting executable code).
Also see Announcement #5 below.
<p>
<li>
A few students submitted code that didn't finish executing in at least one of
  their functions and therefore failed all its tests: the TAs are
  authorized to allow you to replace any method body with <b>pass</b> and
  rerun/regrade the code (but, I will deduct some points for submitting 
  code with an infinite loop or just code that took too long).
<p>
</ul>
This assignment was designed to provide you with a good grounding in the use of
  operator overloading in classes: this includes both standard arithmetic and
  relational operators, as well as other methods that Python writing calls
  automatically (e.g., __repr__, __str__, __getitem__, etc).
All these topics will be tested again on the Midterm and In-Lab Exam #2.
As with all assignments, you should examine my solutions.
<p>
I added a new bsc test for ==/!=, which some students failed.
<ul>
<li>c-->t3 = Time(0,0,0)
<li>e-->t1 == t3-->True
</ul>
If we do not write a <b>__eq__</b> method, Python substitutes the <b>is</b>
  operator for this comparison.
Here <b>t1</b> and <b>t3</b> refer to different objects (so <b>is</b> between
  them returns <b>False</b>), but those objects represent the same time, so
  <b>==</b> should return <b>True</b>.
</td>
</tbody>
</table>

<hr align="left">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #11: 2/2/17<br>
  In-Lab Programming Exam #1 Graded
</b></td>
<td width ="80%">
I have run the automatic batch self-check tests for In-Lab Exam #1 and the
  grades are now recorded.
See the
   <a href="solutions/ile1gradesstudents.zip">assignment grades</a> and
   <a href="ics33win17grades.zip">Grades(zipped .xlsm file)</a> files, whose
   details are discussed below, in Announcement #7.
<p>
You can find your solutions (by your Hashed ID), my solutions, and the actual
  <b>bsc.txt</b> files I used to compute grades for this assignment, in the EEE
  dropbox for this class (see the name <b>pattis_ile1studentsubmissions</b>);
  when you test your code with the <b>bsc.txt</b>, you will have to replace its
  script by importing <b>driver</b> and calling <b>driver.driver()</b>.
See the script in my solution for this code.
<p>
I believe the In-Lab Exams are the best indicator, of all testing instruments,
  of your ability to program: read specifications and transform them into
  working code (writing code and debugging what you wrote).
As I'll say in class, Tolstoy is often quoted (from Anna Karenina) as writing,
<blockquote>
"Happy families are all alike; every unhappy family is unhappy in its own way."
</blockquote>
My adaptation of this quote is
<blockquote>
"High-scoring students are all alike (knowing how to program well); every
  low-scoring student did poorly in his/her own way: e.g., lack of programming 
  or debugging ability, freezing on the exam, misreading or misunderstanding
  some problem statements, spending too much time debugging one problem, being
  ill when taking the exam, arriving late, etc."
</blockquote>
So, I understand that there are many possible reasons that students don't do
  well on In-Lab Exams.
<p>
<!---
The spreadsheet computes grades the standard way: the percentage of tests
  passed for each function multiplied by 20 (each problem was worth 20 points),
  with all the points added up.
I graded the submissions using different computations.
I used the higher of the two computed values as the student's official score.
<ul>
<li>Column J: I computed the percentage of tests passed for each function and
  multiplied it by 20 (adding up all these numbers).
This was the standard/advertised way that I said I would compute grades.
<p>
<li>Column O: As an alternative, I also computed a percentage out of 4 problems
      after dropping the lowest scoring problem.
</ul>
<p>
The actual grade was computed as the maximum of these two scores.
Because the average was below 75%, a student's effective score, when his/her
  overall average is computed, is effectively increased by 11 points.
<p>
--->
The result was the class average was about 82% and the median was about 101%.
The large skew between these statistics shows that although the majority of
  students passed (with As), there were many students who did very poorly,
  dragging down the average much more than the median.
At the extremes, 60% of the students submitted code in which all five functions
  passed all batch self-check tests; 18% scored below 50% (most functions
  failed most tests; in fact, 6% got no functions to work on any tests).
<p>
--->
The approximate distribution of grades on this In-Lab exam
<!--  (after normalization) -->
  is 68% As, 7% Bs, 3% Cs, 4% Ds, and 18% Fs.
This <b>U</b>-shaped distribution (mostly As and Fs) is common for In-Lab
  Programming Exams, where we are testing competency/mastery of programming
  concepts.
<!---
FYI, the averages and medians for the different times that the exam was given
  (early morning through late afternoon) were within 3% of each other; the
  grade distributions were also similar.
--->
<p>
Students should talk to the TA for their Lab first, if they do not understand
  why they received the marks they did or dispute any of these marks.
The best time to talk with your TA about grades is during one of your Labs,
  when both student and TA are physically present to examine the submission and
  the grade, possibly running the solution on a computer they can share.
<p>
Students should examine their graded work immediately and get any regrade
  issues settled as soon as possible (within a week of when the grade is
  assigned).
<p>
<b>IMPORTANT</b> Information about Student Grades
<ul>
<!---
<li>If there is a comment in column B (the one with the X) saying that you
  submitted an empty folder, contact me (Rich).
<p>
--->
<li>
If you submitted code that had syntax errors and therefore failed all tests:
  the TAs are authorized to allow you to fix a few simple syntax errors in the
  code you submitted and rerun/regrade the code (but, I will deduct some points
  for not submitting executable code).
Also see Announcement #5 below.
<p>
<li>
If you submitted code that didn't finish executing in at least one of their
  functions and therefore failed all its tests: the TAs are authorized to allow
  you to replace any method body with <b>pass</b> and rerun/regrade the code
  (but, I will deduct some points for submitting  code with an infinite loop).
</ul>
Finally, the batch self-check tests for grading were similar to the tests in
  the script of the exam; but, all produce differents results, so students
  could not "hard-code" any answers into their functions, hoping to get some
  correctness points.
Often I just changed the names a bit
  (e.g., <b>Bob</b> to <b>Bobby</b>) which leads
  to different output, but on an equivalent function argument.
<p>
Finally, if students score a higher percentage on their In-Lab Exam #2 (which
  involves material from the first, as well as Classes, Operator Overloading,
  and writing Iterators), I will score their In-Lab Exam #1 higher.
Therefore, even a terrible grade on this exam can have a minimal effect on your
  final grade.
</td>
</tbody>
</table>

<hr align="left">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #10: 1/28/17<br>
  Quiz #2 Graded
</b></td>
<td width ="80%">
I have run the automatic batch self-check tests for Quiz #2 and the grades are
  now recorded.
See the
   <a href="solutions/quiz2gradesstudents.zip">assignment grades</a> and
   <a href="ics33win17grades.zip">Grades(zipped .xlsm file)</a> files, whose
   details are discussed below, in Announcement #7.
The class average was about 80% and the median was 100%, meaning that most
  students correctly solved most problems; over half (58%) of the class
  correctly solved all the problems (or had minor deductions).
Overall there were 58% As, 8% Bs, 1% Cs, and 33% Ds and Fs.
FYI, last Winter quarter there were
  69% As, 8% Bs, 4% Cs, and 19% Ds and Fs.
About 18% of the students submitted early, and these early submitters scored
  much better (96% average) than students submitting on the due day (76%
  average);
I am assuming that some students ran out of time before they finished all the
  problems, and will plan to get started earlier on later quizzes.
<p>
In the assignment spreadsheet, Column A contains the Hashed IDs of all students
  (in sorted order) and Column B contains an X if we believe the student
  submitted work on time.
Row 1 for Columns C-J shows how many points the problems were worth.
Row 2 shows the number of tests performed for each problem.
<p>
Rows 4 and beyond show the number of failed tests for each student (a blank
  indicates no failed tests: equivalent to 0 failed tests).
To compute the number of points for a problem/in a column, compute the
  percentage of successful tests and multiply it by the number of points the
  problem is worth.
So for example, if a student missed 5 of 20 tests on a 4 point problem, he/she
  would receive <b>(20-5)/20*4 = 15/20*4 = 3</b> points.
Columns I-K show each student's cumulative <b>Score</b>, the score
  <b>Rounded</b> to an integer (what integer is entered in the Grades
  spreadsheet) and <b>Percent</b>, based on the number of points the
  assginment is worth (here 25).
<p>
Students should talk to the TA for their Lab first, if they do not understand
  why they received the marks they did or dispute any of these marks.
The best time to talk with your TA about grades is during one of your Labs,
  when both student and TA are physically present to examine the submission and
  the grade, possibly running the solution on a computer they can share.
<p>
Students should examine their graded work immediately and get any regrade
  issues settled as soon as possible (within a week of when the grade is
  assigned).
<p>
<b>IMPORTANT</b> Information about Student Grades
<ul>
<li>
A few students submitted code that had syntax errors and therefore failed
  all tests: the TAs are authorized to allow you to fix a few simple syntax
  errors in the code you submitted and rerun/regrade the code (but, I will
  deduct some points for not submitting executable code).
Also see Announcement #5 below.
<p>
<li>
A few students submitted code that didn't finish executing in at least one of
  their functions and therefore failed all its tests: the TAs are
  authorized to allow you to replace any method body with <b>pass</b> and
  rerun/regrade the code (but, I will deduct some points for submitting 
  code with an infinite loop).
<p>
</ul>
This assignment was designed to provide you with a good grounding in the use of
  writing regular expressions and using the <b>re</b> module to write code that
  processes text using regular expression.
All these topics will be tested again on the Midterm.
As with all assignments, you should examine my solutions.
</td>
</tbody>
</table>

<hr align="left">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #9: 1/28/17<br>
  Program #1 Graded
</b></td>
<td width ="80%">
I have run the automatic batch self-check tests for Program #1 and the grades
  are now recorded.
See the
   <a href="solutions/program1gradesstudents.zip">assignment grades</a> and
   <a href="ics33win17grades.zip">Grades(zipped .xlsm file)</a> files, whose
   details are discussed below, in Announcement #7.
The class average was about 85% and the median was 100%, meaning that most
  students correctly solved most problems, and over half (64%) of the class
  correctly solved all the problems (or had minor deductions).
Overall there were
  64% As, 8% Bs,  8% Cs, and 20% Ds and Fs.
FYI, last Winter quarter, there were
  58% As, 5% Bs,  8% Cs, and 29% Ds and Fs.
About 34% of the students submitted early, and these early submitters scored
  much better (99% average) than students submitting on the due day
  (77% average).
I am assuming that some students ran out of time before they finished all the
  problems, and will plan to get started earlier on later programs.
<p>
In the assignment spreadsheet, Column A contains the Hashed IDs of all students
  (in sorted order); Column B contains an X if we believe the student
  submitted work on time (for pairs, only the submitting student will show an
  X, not their partner); Column C shows the extra credit points for early
  submissions.
<!--- (students submitting a few minutes late show -2; students
  submitting more than a few minutes late were not graded).
--->
<p>
Row 2 for Columns D-X shows how many points the problems were worth.
Row 3 shows the number of tests performed for each problem: all were batch-self
  check tests.
Rows 4-5 show further information about the tests performed in each column.
<p>
Rows 6 and beyond show the number of failed tests for each submission (a blank
  indicates no failed tests: equivalent to 0 failed tests).
To compute the number of points for a problem/in a column, compute the
  percentage of successful tests and multiply it by the number of points the
  problem is worth.
So for example, if a student failed 1 of 4 tests on a 5 point problem, he/she
  would receive <b>(4-1)/4*5 = 3/4*5 = 3.75</b> points.
Columns Y-AC show each student's cumulative score, for all the tests in each of
  the 5 problems in this assignment.
Columns AD-AF show each student's cumulative <b>Score</b>, the score
  <b>Rounded</b> to an integer (what integer is entered in the Grades
  spreadsheet) and <b>Percent</b>, based on the number of points the
  assginment is worth (here 50).
Note that these columns are filled in both for <b>submitters</b> and their
  <b>partners</b> (these are the only columns filled in for partners): a
  partner should see his/her submitter's line for details.
<p>
Students should talk to the TA for their Lab first, if they do not understand
  why they received the marks they did or dispute any of these marks.
The best time to talk with your TA about grades is during one of your Labs,
  when both student and TA are physically present to examine the submission and
  the grade, possibly running the solution on a computer they can share.
<p>
Students should examine their graded work immediately and get any regrade
  issues settled as soon as possible (within a week of when the grade is
  assigned).
<p>
<b>IMPORTANT</b> Information about Student Grades
<ul>
<li>
A few students submitted code that had syntax errors and therefore failed
  all tests: the TAs are authorized to allow you to fix a few simple syntax
  errors in the code you submitted and rerun/regrade the code (but, I will
  deduct some points for not submitting executable code).
Also see Announcement #5 below.
<p>
<li>
A few students submitted code that didn't finish executing in their
  <b>reachable</b> solutions and therefore failed all its tests: the TAs are
  authorized to allow you to replace any method body with <b>pass</b> and
  rerun/regrade the code.
But, I will deduct some points for submitting code with an infinite loop: in
  the future, replace any method body with <b>pass</b> if it causes an infinite
  loop.
<p>
<li>
A few students submitted code that (a) incorrectly named partners -wrong
  format or wrong UCInetID, or (b) had students listed a partners of 
  multiple submitters, or (c) had both students submitting and listed as
  partners of submitters.
The TAs are authorized to try to understand these problems and help me
  correct them (but, I will deduct some points for having to deal with these
  problems).
<!---
<p>
<li>
If your score is recorded as a <b>0</b> on the Grades spreadsheet, I probably
  do not have a signed Academic Integrity Contract from you.
Please come by during my office hours as soon as possible to fix this problem.
--->
</ul>
<p>
This assignment was designed to provide you with a good grounding in the use of
  the standard data structures in Python: <b>list</b>, <b>tuple</b>, <b>set</b>,
  and <b>dict</b> (and the <b>defaultdict</b> variant).
It also included practice iterating overs such structures, writing
  comprehensions, use of the <b>sorted</b> function and <b>lambda</b>, and
  other useful/important Python functions.
Unlike Quiz #1, the problems were bigger, requiring more interesting algorithms
  to solve, but still all expressible with a small number of Python language
  features.
All these topics will be tested again on the Midterm and In-Lab Exam #1.
As with all assignments, you should examine my solutions.
</td>
</tbody>
</table>

<hr align="left">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #8: 1/22<br>
  Quiz #1 Graded
</b></td>
<td width ="80%">
I have run the automatic batch self-check tests for Quiz #1 (checking
  correctness) and the TAs have examined the code (checking requirements: e.g.,
  one statement solutions) and the grades are now recorded and posted.
See the
   <a href="solutions/quiz1gradesstudents.zip">assignment grades</a> and
   <a href="ics33win17grades.zip">Grades(zipped .xlsm file)</a> files, whose
   details are discussed below, in Announcement #7.
The class average was about 82% and the median was 92%, meaning that most
  students correctly solved most problems (47%), and 25% of the class correctly
  solved all the problems.
Overall there were 47% As, 19% Bs, 10% Cs, and 24% Ds and Fs for those students
  who submitted work; most of the students who scored a <b>0</b>submitted code
  that we could not run (see the paragraphs below for possible regrading by
  your TA).
FYI, the previous Fall quarter the grades were
  69% As, 4% Bs, 4% Cs, and 23% Ds and Fs for those students who submitted work.
This was the first quarter I required students to draw diagrams on Quiz #1: a
  problem for which most students had points deducted.
<p>
About 17% of the students submitted early (although there are no extra credit
  points on quizzes for doing so), and these early submitters scored much
  better than students submitting on the due day (93% compared to 81%):
  over one full grade difference.
I am assuming that some students ran out of time before they finished all the
  problems, and will plan to get started earlier on later quizzes.
<p>
In the assignment grades spreadsheet, Column A contains the Hashed IDs of all
  students (in sorted order) and Column B contains an X if we believe the
  student submitted work on time.
Column C shows deductions for ...
<ul>
  <li>written work submitted late (written work is due at the start of class)
  <li>not printing a copy of quiz page on which you wrote your answer
</ul>
Row 1 for Columns D-K shows how many points the problems were worth.
Some problems show points in two columns: e.g., Problem #3 has 2 point in
  Column F (produced correct answers according to the batch self-checks) and
  1 point in Column G (1 statement/line of code, according to the TAs).
Any <b>/C</b> column relates to correctness; any <b>/R</b> relates to
  requirements.
Row 2 shows the number of batch self-check tests performed for each problem
  (it is <b>1</b> for the <b>/R</b> problems).
<!--: C-F are batch-self
  check tests; H-I relate to TA-assessed information: a half point is deducted
  for each function that has no implementation or has an implementation that
  does not meet the requirements: e.g., one line of code  using <b>sorted</b>
  (problem 2) or one line of code using a <b>comprehension</b> (problem 3)
<p>
-->
<p>
Rows 4 and beyond show the number of failed tests for each student (a blank
  indicates no failed tests: equivalent to 0 failed tests).
To compute the number of points you scored for a problem/in a column, compute
  the percentage of successful tests and multiply it by the number of points the
  problem is worth.
So for example, if a student missed <b>2</b> of <b>6</b> tests on a <b>5</b>
  point problem, he/she would receive <b>(6-2)/6 * 5 = 3.3</b>
  (actually, 3.333...) points.
Columns L-N show each student's cumulative <b>Score</b>, the score
  <b>Rounded</b> to an integer (that integer is the score entered in the Grades
  spreadsheet) and <b>Percent</b>, based on the number of points the
  assginment is worth (here 25).
<p>
TAs graded the requirements for the following problems
<b><pre>
  Sameer Ghayyur : Question 3/R
  Hirak Kashyap  : Questions 1</pre></b>
<p>
A few comments about the grading of Question 1.
<ul>
<li>1 pt for all three boxes labelled <b>x</b>, <b>y</b>, and <b>z</b>,
    with the tails of their references <b>inside</b> the boxes.
<li>1 pt for all four ovals labelled by their types and containg their
    values.
<li>1 pt for all three references pointing to the correct objects.
<li>.5 pt each for crossing out the the two references that were changed.
</ul>
If you lost any points on this problem (most students did) I suggest that you
  compare your solution and mine.
<p>
<!---
Requirements points were deduction in
<ol>
<li>Question #1a if students did not write loops and if statements, or if they
    created extra data structures.
<li>Question #1b if students did not write one statement using a comprehension.
<li>Question #3a, 3b, 3c, 4a, 4b if students did not write one statement.
<li>Question #5b if students did not use a <b>defaultdict</b> created with an
      argument, and used it to simplify the code they wrote in Question #5a.
<li>In all questions, a <b>pass</b> body received no requirements points.
</ol>
<p>
-->
Students should talk to the TA for their Lab first, if they do not understand
  why they received the marks they did or dispute any of these marks.
Alternatively, they might talk to the TA who graded that problem.
The best time to talk with your TA about grades is during one of your Labs,
  when both student and TA are physically present to examine the submission and
  the grade, possibly running the solution on a computer they can share.
<p>
Students should examine their graded work immediately and get any regrade
  issues settled as soon as possible (within a week of when the grade is
  assigned).
<p>
<b>IMPORTANT</b> Information about Student Grades
<ul>
<li>
A few students submitted code that extraneous imports or had syntax errors and
  therefore failed all tests: the TAs are authorized to allow you to fix a few
  simple syntax errors in the code you submitted and rerun/regrade the code
  (but, I will deduct some points for not submitting executable code).
Also see Announcement #5 below.
<p>
<li>
If you submitted an assignment, but the <b>X</b> in column <b>B</b> has the
  comment <b>TIMEOUT</b> it means that one of your functions contained an
  infinite loop, and therefore failed all tests: the TAs are authorized to
  allow you to replace the body of any function by <b>pass</b> and
  rerun/regrade the code (but, I will deduct some points for not submitting
  gradable code).
Also see Announcement #5 below.
<!---
<li>
If your score is recorded as a <b>0</b> on the Grades spreadsheet, I probably
  do not have a signed Academic Integrity Contract from you.
Please come by during my office hours as soon as possible to fix this problem.
--->
</ul>
This assignment was designed to provide you with a good grounding in the use of
  the standard data structures in Python: <b>list</b>, <b>tuple</b>, <b>set</b>,
  and <b>dict</b> (and the <b>defaultdict</b> variant).
It also included practice iterating over such structures, writing
  comprehensions, and use of the <b>sorted</b> function and <b>lambda</b>s.
All these topics will be tested again on the Midterm and In-Lab Exam #1 (along
  with appearing in Programming Assignment #1 as well).
As with all assignments, you should examine my solutions.
</td>
</tbody>
</table>


<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #7: 1/17/17<br>
  Programming Assignment #0 Graded
</b></td>
<td width ="80%">
The TAs have graded (and I have recorded the grades for) Programming
  Assignment #0.
As with most assignments, there are two files that you should download, unzip,
  and examine to understand your performance on this assignment, and your
  cumulative performance in this class.
<p>
Both of these files are sorted by <b>Hashed ID</b>s (which are computed
  from the 8-digit <b>UCI ID</b>s of all the students in the class).
To determine your <b>Hashed ID</b>, see <b>Message #6</b> below.
<ul>
<li>The first file to examine stores the
   <a href="solutions/program0gradesstudents.zip">assignment grades</a>, a
   zipped Excel file that details how each student was graded on this
   instrument: what marks were given and why.
It is sorted by <b>Hashed ID</b>s (column A).
Column B contains an <b>X</b> if the student submitted work
  (later, if you work in pairs, the <b>X</b> will appear only on the Submitter's
  cell, not in the Partner's cell, although both will receive the same grade).
Column C (for Programming Assignments only) shows extra credit points for early
  submission: 1 point for submitting 24 hours early; 2 points for submitting
  48 hours (or more) early; a blank here means no extra credit/early submission
  points.
<p>
Columns D and beyond show marks for the various parts of the assignment.
The last three columns show your <b>Score</b>, the score <b>Rounded</b> to an
  integer (see the discussion below) and your <b>Percent</b>, based on the
  number of points the assginment is worth.
If a cell contains a comment (those cells with a red-triangle in their
  upper-right hand corner) you can hover over the cell and you will see the
  comment that explains why the marks were given: sometimes you must edit
  the comment and enlarge its bounding box to see the full comment.
<p>
<b>Students should talk to the TA who graded a question, if they do not
  understand why they received the marks they did or to dispute any of these
  marks.</b>
For Programming Assignment #0, the grading was as follows
<b><pre>
  Sameera Ghayyur : Parts A and B
  Hirak Kashyap   : Part C
  Sridevi Maharaj : Part D</pre></b>
<p>
The best time to talk with your TA about grades is during one of your Labs,
  when both student and TA are physically present to examine the submission and
  the grade, possibly running the solution on a computer they can share.
The same goes for talking to other TAs.
All TAs can download your work from Checkmate.
<p>
<li>The second file to examine stores the cumulative
   <a href="ics33win17grades.zip">Grades(zipped .xlsm file)</a> -also available
     as a link on course web- unzip it, and then click the tab labeled
     <b>Winter 2017</b>.
   This tab records all the grades for all the testing instruments that you
     submit during the quarter.
It is also sorted by <b>Hashed ID</b>s (column A).
You will notice that in this spreadsheet all recorded grades are rounded up to
  integers: so receiving a 27.5 on the first spreadsheet will translate into a
  28 recorded on the second one.
We will use this same "round-up" process for recording all grades during the
  quarter.
<p>
On this spreadsheet, columns B-T contain your scores: for the Quizzes (B-I),
  Programming Assignments (J-O), In-Lab Programming Exams (P-Q), and Written
   Exams (R and T: I'll discuss S after the Midterm).
Columns U-X contain the sums for all these testing instruments.
Column Y contains special extra credit points (for example, submitting the
  faculty/course evaluation at the end of the quarter; more on this then).
Column Z-AD contains your cumulative points (Z), your average (AA), your rank
  in class (AB: 1 means highest-scoring student), and your current grade (AC is
  the letter, AD is +/- if appropriate).
<p>  
You should check this spreadsheet after every assignment is graded to ensure
  that your score was recorded correctly.
Again, students should talk to the TA for their Lab first, if this spreadsheet
  contains any errors.
<p>
Finally, there were 6 students who submitted work, but who are unregistered for
  the course.
Therefore, they have no ID Hashed, so their scores appear at the bottom with
  <b>Unregistered</b> appearing in column A.
</ul>
<p>
<b>IMPORTANT</b>:
Scores wil revert to <b>0</b>, if I do not receive a signed Academic Integrity
  Contract from you.
Please come by during my office hours as soon as possible if you need to fix
  this problem.
<p>
This assignment was designed to test you on whether you have mastered the
   basics of using Python in Eclipse, the Eclipse Debugger perspective, and
   batch-self-check files in the <b>driver.py</b> module (in <b>courselib</b>).
 It was also designed to see if you could follow instructions and ask
    questions: more on that below.
<p>
The class average was 29 (or about 97%) and the median was 30 (or about 100%).
For those students submtting work, there were 89% As, 3% Bs, 1% Cs, and 7% Ds
  and Fs.
<p>
The assignment was not meant to be hard, but it was not trivial either, and
  there were many opportunities to lose points (and learn from your mistakes).
Your work in the Eclipse/Python Integrated Developement Environment (IDE)
  throughout the quarter will leverage off the understanding and skills that
  you acquired in this assignment.
<p>
Let me talk about what will probably be the most contentious single point of
  the 1,000 points that this course is worth (thus .1% of the grade): this point
  was lost by about 20% of the students submitting work.
I took off 1 point if you corrected the misspelling <b>Inteprxter</b> (and
  two points if you didn't have either spelling: in this second case you
  obvious failed to meet the specifications because you did not print what was
  required).
When some students hear about this point deduction, their heads explode and
  they cannot believe that I am taking off a point for correcting what you
  thought was my mistake.
But... I am trying to foster an atmosphere where nothing is taken for granted in
  the instructions that I give: if anything seems confusing or plain wrong, I
  should be questioned about it -preferably in public, on a MessageBoard forum-
  so others can learn if there really is a problem, and if so the correction.
<p>
<ul>
<li>
Some students did ask me outside of class if they should correct the
  misspelling, and I told them "no"; some students asked me by email if they
  should correct the misspelling, and I told them "no"; one student asked on
  a Forum whether they should have corrected the misspelling, and I posted a
  reply saying that they shouldn't, for all students in the class to see.
It is critical for programmers to be sure they know the specifications of the
  problem they are being asked to solve, otherwise they will solve, test, debug
  document, etc. the problem incorrectly, and another cycle of development will
  be needed to fix the misconceptions.
The overview lecture included a graph that showed that the later in development
  a problem is found, the harder/more expensive it is to fix.
So if we can find problems at  the time we are reading the specification of the
  problem to solve, that can save us a lot of work/money later.
<p>
<li>
The bottom line is that you are responsible for reading the instructions
  carefully and reporting any confusion so that I can clear it up (best reported
  on the MessageBoard Forum for Programming Assignments).
Of course, you can freely talk to anyone about the problem specifications, just
  not the code that you write for your solutions.
If you make any assumptions (like the node names in Programming Assignment #1
  always being one letter long -that is not part of the specification), they
  might come back later to haunt you (gradewise).
When working with a partner, you'll have two pairs of eyes reading the
   specifications.
I am willing to deduct this painful point at the start of the quarter, from many
  students, to get across this perspective, and save everyone grading grief
  during the quarter.
<p>
<li>
I will not intentionally do anything like this on subsequent assignments; but I
  can certainly be unclear about the specifications (which have lots of details)
  or even contradict myself from one spot to the next.
It it up to you to clear up the confusion, and best to do it on the
  MessageBoard forums, so I can clear up the problem once for all students.
</ul>
<p>
Also, some students did not carefully read the instructions in the Debugger
  Perspective document for the quiz part, which required them to change a line
  in the <b>craps</b> script before running it with the debugger to gather the
  required information.
With this change in your program, we can check your answers for correctness;
  without it, we cannot check you answers for correctness.
<p>
Finally, about 47% of the students submitted the program 2 or more days early;
  about 18 submitted the program 1 day early.
So, about 65% of the students submitted this assignment early. Keep up the good
  work: you can earn 12 extra points if you turn in every Programming
  Assignment 2 or more days early (upping your grade by 1.2%): for some
  students, this boost will be enough to raise their final grade.
Over the course of a two week assignment, it will be to everyone's benefit
  -students and staff alike- if students try to finish and submit early.
<p>
<b>IMPORTANT</b>
If you believe that we graded your work correct, please examine the files
  mentioned above first, then contact the TA for your lab, to discuss the
  issues with him/her.
Such a discussion can have only positive outcomes: either he/she will agree
  with you that you deserve more credit (and, we do want you to receive all the
  credit that you are due), or you will come to understand the question,
  program, or solution better and realize why you lost points.
This is certainly a win-win situation.
Please read my solution and the <b>assignment grades</b> spreadsheet carefully
  <b>before</b> contacting your TA; ensure that you understand what is the
  correct answer and what points were deducted from your assignment and why.
If there is a problem, your TA will email me a revised summary about your
  program, and cc a copy to you.
I will update the grades spreadsheet as appropriate (it might take a bit of
  time for all these events to cumulate in a changed grade) and email you.
<p>
If you feel there is still an unresolved problem after talking to your TA,
  please contact me (but always contact your TA first).
Also, because of the size of this class, if you have a grading issue, we will
  consider it only if you bring it to your
  <b>TAs attention within a week of when I return the materials</b>.
This policy is in place to avoid grade-grubbing late in the quarter.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #6: 1/9/17<br>
  Hashed ID
</b></td>
<td width ="80%">
  When we grade assignments, we often distribute/update various spreadsheets
    with the relevant grading information.
  These spreadsheets are indexed and sorted by each student's Hashed ID.
  The course web-page has a <b>Find ID Hashed (grade key)</b> link, right
    below the <b>Grades(zipped .xlsm file)</b> link, which you can use to
    retrieve your Hashed ID
    (or click
     <a href="https://support.ics.uci.edu/studentID/" target="main">
       Find ID Hashed</a>).
  Use the result it shows when examining any spreadsheets of grades;
    I suggest that you find this number once, and write it down for future
    reference.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #5: 1/9/17<br>
  <b>Important</b>:<br> Submitting Code<br>without Losing Points
</b></td>
<td width ="80%">
  ICS-33 uses software that automatically grades most quizzes and programming
    assignments; it uses (self-checking) testing cases that we supply with the
    testing instruments that we distribute.
  You will learn about these tools in Programming Assignment #0.
  Here are a few hints to ensure that you will understand the grading process
    better and minimize your point loss.
  <ol>
  <li>Ensure that you submit the code you wrote, not empty files, nor the
        original files that you downloaded.
      Be very careful and <b>double-check</b> what you submit to avoid this
        mistake.
  <p>
  <li>If you are submitting with a partner, ensure that the <b>Submitter</b>
        and <b>Partner</b> lines of the program are correctly specified.
      The names must appear in the exact format required, with no misspellings
        nor punctuation errors.
      The student listed as <b>Submitter</b> must be the one who submits.
      See the <a href="assignments.html">Programming Assignments</a> web page
        for the exact form required (and you must follow that exact form, with
        no misspelling nor punctuation errors).
  <p>
  <li>Ensure that you submit your code on time.
      We can, and mostly do, ignore any work submitted after the deadline
        (even by a few minutes).
      It is a fairness issue for other students who do submit on time.
      The best strategy is to finish the work and submit it well before the
         deadline (and get extra credit points).
      To ensure that we will grade something, submit partially complete code
         ahead of the deadline; then, if you miss the deadline, we will still
         grade the partially complete code.
      Be warned: Checkmate can get bogged down if many students all try to
        submit a few minutes before the due time.
  <p>
  <li>Ensure that you test your code using the self-checks that we provide
        and use for grading.
      By using these self-checks, you will know when your code contains
        errors that will result in point deductions when we grade it.
  <p>
  <li>Ensure that your files...
      <ol type="a">
          <li>...contain no syntax errors.
          <li>...contain only appropriate <b>import</b> statements:
                the ones provided
          <li>...contain only functions that execute quickly (typically under
                a few seconds)
      </ol>
      <p>
      Any syntax errors, inappropriate <b>import</b> statements, or excessive
         execution time may cause <b>all self-check tests to fail</b> during
         automatic grading.
      For functions that take excessive time, it is best to comment out their
        bodies, replacing their code with <b>pass</b>, resulting in the function
        immediately returning <b>None</b>: it will be counted wrong, but doing
         so will allow other functions to be run and graded for correctness.
  </ol>
<p>
After an assignment is graded automatically, the Announcement for it will
  contain a link to an Excel file that you can examine for detailed information
  about how your score was computed.
<p>
If this information does not match your expectations from running the
  assignment's self-checks while developing your code, contact your TA.
It is best to meet with your TA during lab hours: he/she can talk to you about
  your code and run it while you are present, to help resolve the difference.
But, if we have to modify your code to grade it properly (see the typical source
  of problems above), we will deduct points.
I hope that by students carefully writing/submitting their code, these
  grading anomalies and point deductions will be minimized during the quarter.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #4: 1/9/17<br>
  Communication
</b></td>
<td width ="80%">
  There are many ways to communicate with me (and other staff and students).
  Here is a quick overview.
  <ol>
  <li><b>Email</b>:
      If you send me email, please do it through your <b>UCI email address</b>.
      Include a well-thought <b>Subject</b> line.
      Also, please include your <b>full name</b> and the <b>course</b>
        (<b>ICS-33</b>).
      I teach many hundreds of students each quarter in multiple courses.
      Providing this information helps me quickly determine the context of your
        email, so I can better answer it.
      Finally, when I respond to your email, please
        <b>do not send a "Thank you"</b> acknowledgement.
      Such niceties are not necessary for work-related email.
      For me, it just increases the number of emails that I must read.
      <p>
  </ol>
  <p>
  Note that for questions that are not specific to you -questions that are
    relevant to the entire class- it is best to ask them on the appropriate
    Message Board Forum.
  <ol start="2">
  <li><b>Message Board Forum</b>:
      Post the the forum most closely relate to your question.
      Include a well-thought <b>Subject</b> line that clearly identifies the
        issue you are asking about; doing so helps me and other students who
        are deciding whether to read your message and the response(s).
      If you discover the solution to your own question, revisit the
        Forum and explain (without supplying code) any useful information that
        you learned that might help other students with the same problem.
      Avoid a post that says just, <b>"Never mind: I figured it out myself."</b>
  <p>
  <li><b>Course Email (ics33-W17@classes.uci.edu)</b>:
      Mostly this is for me to use to communicate with all the students in the
        class.
      But, there are instances (very rarely) for students to use it: the best
        example is that if <b>Checkmate</b> appears to be down.
      Sending a <b>Checkmate down</b> email to this address tells me that it is
         down, and tells all the other students that (a) it is down and
         (b) I have been informed it is down.
      FYI, we rehosted Checkmate on a new computer a few quarters ago, and
        it is now much more reliable and rarely down.
  </ol>

</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #3: 1/9/17<br>
  First Lab
</b></td>
<td width ="80%">
  You will need to use the lab computers to take two In-Lab Programming Exams.
  As part of your first day in lab, students should check that they can log on
    to the ICS lab computers: those students who took previous ICS courses
    (which should be most of you) should have these accounts already.
  If you can log into these accounts, you can use them.
  <p>
  If you cannot log into these accounts, you should visit ICS-364 with your
     student ID during the lab, to have them activate an account for you.
  Activation may take a few days.
  In the meantime, you can work on your own computer or log onto the lab
    computers with the ID <b>ics-temp</b> and the password <b>Anteat3r</b>
   (yes, a capital <b>A</b> and the number <b>3</b>).
  <!---
  When using Eclipse with this temporary account, you must create a workspace on
    your desktop, not the <b>H</b> drive (otherwise all temporary users would be
    sharing that workspace).
  --->
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #2: 1/9/17<br>
  Install Course Software
</b></td>
<td width ="80%">
  All students with computers should download and install the course Software:
    Java (to run Eclipse), Python, and Eclipse.
  All three products are available for free on the internet.
  Students can view instructions for downloading and installing this software
    by following the
    <a href="../common/online33.html" target="main">Course Software</a>
    link.
  If you are using a Mac there are special instructions for you
    (e.g., Java is already installed)
  <p>

  Although students can work on their programming assignments on the computers
    in the UCI labs, I expect students with computers to download and install
    this software by the end of the first week of the quarter.
  If you are having difficulty with this task, the TAs and Lab Tutors will help
    you during the first Lab meeting (or beyond, if necessary: bring your
    computer to the lab); if you have successfully downloaded and installed
    this software, please help other students do so too.
  Finally, you can also use the class MessageBoard Forums to ask questions about
    this software and help other students.

  <p>
  I strongly suggest that you <b>BACKUP YOUR WORK</b> daily: computers can
    malfunction, break, or be stolen.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #1: 1/9/17<br>
  First Message
</b></td>
<td width ="80%">
  Welcome to ICS-33.
  I am going to post and archive important messages about the class in this
    announcements web page: each entry will be numbered, dated, and labeled.
  The entries will appear in reverse chronological order.
  Whenever you follow the link to this page, scan its top for new announcements;
    scan downward for older announcements.
  This message will always appear at the bottom of this file. 
  I will never remove a message from this page
  <p>
  I have already posted some important messages before the start of the quarter.
  Expect a few new messages to be posted here each week, mostly regarding
    returned and graded work.
  <p>
  Check this Announcements page, along with your email and the MessageBoard
    Forums, daily.
</td>
</tbody>
</table>

<hr align="left">

</body>
</html>
