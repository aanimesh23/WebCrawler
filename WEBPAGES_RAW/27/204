<?xml version='1.1'?>
<!DOCTYPE html
     PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
     'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
<head>
  <title>Sets</title>
  <meta name='Author' content='Thomas A. Alspaugh'/>
  <meta name='Description' content="Sets"/>
  <meta http-equiv='content-type' content='text/html; charset=ISO-8859-1'/>
  <meta http-equiv='Content-Style-Type' content='text/css'/>
  <link href='../../alspaugh-uci.css' rel='stylesheet' type='text/css'/>
  <!-- <link href='../alspaugh-uci-cls.css' rel='stylesheet' type='text/css'/> -->
  <style type='text/css'>

    td.D   {  font-style: italic;  font-weight: bold;  background-color: silver;  }

    @media screen {
      body     {  background: url("img/bg-set.png") repeat-y;  }
      #TMain   {  margin-left: 10.00em;  }
    }
  </style>
</head>
<body>

<div id='TBg'>

<div id='THeader'>
Sets
</div>

<div id='TLinks1' class='Links'> <!-- - - - - - - - - - - - - - - - - - - - -->
<p>  <a class='sc' href='../../index.html'>Home</a>
</p>
<div class='hr'> </div>
<p>  <a href='index.html'>Foundations home</a>
</p>
<div class='hr'> </div>
<p>
<a href='set.html'>Sets</a><br/>
<a href='relation.html'>Relations</a><br/>
<a href='correspondence.html'>Correspondences</a><br/>
<a href='orderedSet.html'>Ordered Sets</a><br/>
<a href='lattice.html'>Lattices</a><br/>
<a href='graph.html'>Graphs</a><br/>
<a href='powerset.html'>Powersets</a><br/>
<a href='binaryString.html'>Binary Strings</a><br/>
<a href='logicConcepts.html'>Logic</a><br/>
<a href='allen.html'>AIA</a><br/><!-- -spell AIA -->
<a href='greek.html'>Greek</a><br/>
</p>
<div class='hr'> </div>
<p>
<a href='glossaryExternal.html'>Glossary</a><br/>
<a href='goodAbstract.html'>Abstracts</a><br/>
<a href='argument.html'>Argument</a><br/>
<a href='ontology.html'>Glossaries</a><br/>
<a href='inquiryCycle.html'>Inquiry Cycle</a><br/>
<a href='hohfeld.html'>Legal Relations</a><br/>
<a href='goodPresentation.html'>Presentations</a><br/>
</p>
<div class='hr'> </div>
<p>
<a href='quickStart.html'>Elicitation</a><br/>
<a href='ontology.html'>Glossaries</a><br/>
<a href='goal.html'>Goals</a><br/>
<a href='istar.html'>i*</a><br/>
<a href='SCR.html'>SCR</a><br/>
<a href='tracing.html'>Tracing</a><br/>
</p>
<div class='hr2'> </div>
<p>
<a href='alloy.html'>Alloy</a><br/>
<a href='msc.html'>MSCs</a><br/>
<a href='regularExpression.html'>Regular Exprs.</a><br/>
</p><!-- -spell MSCs Exprs -->
<div class='hr2'> </div>
<p>
<a href='java-designPattern.html'>Design Patterns</a><br/>
<a href='javadoc.html'>Javadoc</a><br/>
<a href='java-package.html'>Java Packages</a><br/>
<a href='java-type.html'>Java Types</a><br/>
</p>
<div class='hr2'> </div>
<p>
<a href='html.html'>(X)HTML</a><br/>
<a href='xmlSchema.html'>XML Schemas</a><br/>
<a href='xslt.html'>XSLT</a><br/>
</p><!-- -spell XSLT -->
</div>


<!-- No right column -->
<div id='TMain'><!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!--xhtml -y -->


<!--spell  Xn ary xn -->


<p id='set' title='set'>
Informally, a
<dfn>set</dfn> is a collection of
<dfn>elements</dfn>
(also called <dfn>members</dfn>).&nbsp;
</p>

<p id='element-of' title='element-of'> If <span class='m'>X</span> is a set and
<span class='m'>e</span> is an element of <span class='m'>X</span>,
then we write <span class='m'>e</span><span class='M'>&isin;</span><span
class='m'>X</span>.&nbsp;
If <span class='m'>e</span> is in not in <span class='m'>X</span>,
then we write <span class='m'>e</span>&notin;<span class='m'>X</span>.&nbsp;
</p>

<p> We have two ways of specifying the elements of a specific set.&nbsp;
</p>

<dl>
  <dt id='extension' title='extension'>extensionally</dt>
    <dd>We can list all the elements of the set, in curly braces,
      separated by commas.&nbsp;
      The list is termed the set's <dfn>extension</dfn>.&nbsp;
      For example, {1,2,3} is the set whose elements are 1, 2, and 3;
      the extension of "the positive integers no greater than 3" is
      {1,2,3}.&nbsp;
      Each element of the set is listed exactly once.&nbsp;
    </dd>
  <dt id='intension' title='intension'>intensionally</dt>
    <dd>Let <span class='m'>P</span>(<span class='m'>x</span>)
      be a predicate that is true or false for each possible x
      in some already-existing set <span class='m'>E</span>.&nbsp;
      Then we write the set <span class='m'>S</span> of elements
      <span class='m'>x</span> for which
      <span class='m'>P</span>(<span class='m'>x</span>) is true as
      <span class='m'>S</span>={<span class='m'>x</span><span
      class='M'>&isin;</span>E&nbsp;|&nbsp;P(<span
      class='m'>x</span>)}.&nbsp;
      Where it is clear from context what set <span class='m'>E</span> is intended,
      we simply write
      {<span class='m'>x</span>&nbsp;|&nbsp;P(<span class='m'>x</span>)}.&nbsp;
      It is clear that in all such cases S<span class='M'>&sube;</span>E.&nbsp;
    </dd>
</dl>

<p id='empty' title='empty'> The
<dfn>empty set</dfn> is the unique set that contains no elements.&nbsp;
We write the empty set as <span class='M'>&empty;</span>
or {}.&nbsp;
</p>

<p>
A  <dfn id='singleton-set' title='singleton-set'>singleton set</dfn>
is a set containing exactly one element.&nbsp;
For example,
{<span class='m'>a</span>},
{<span class='M'>&empty;</span>},
and { {<span class='m'>a</span>} } are all singleton sets
(the lone member of { {<span class='m'>a</span>} } is
{<span class='m'>a</span>}).&nbsp;
</p>

<p>
The <dfn>cardinality</dfn> or
<dfn id='cardinality' title='cardinality'>size</dfn> of a set
is the number of elements it contains.&nbsp;
We write the cardinality of set <span class='m'>S</span> as
|<span class='m'>S</span>|.&nbsp;
</p>

<p id='countable' title='countable'>
The cardinality of the integers is represented by <span class='M'>&omega;</span>;
many (but not all) infinite sets also have this cardinality
and are said to be <dfn>countably infinite</dfn>, <dfn>countable</dfn>,
or <dfn>enumerable</dfn>,
because their elements can be "counted" or
placed in correspondence with the integers.&nbsp;
Examples:&nbsp;
|<span class='M'>&empty;</span>| = 0,
|{a,b,c}| = 3,
|{all even numbers}| = <span class='M'>&omega;</span>.&nbsp;
</p>


<h1>Relations between sets</h1>

<p id='subset' title='subset'>
Set <span class='m'>X</span> is a
<dfn>subset</dfn> of set <span class='m'>Y</span> iff
<span class='m'>e</span><span class='M'>&isin;</span><span class='m'>X</span> implies
<span class='m'>e</span><span class='M'>&isin;</span><span class='m'>Y</span> for every
<span class='m'>e</span>.&nbsp;
We write this as <span class='m'>X</span><span class='M'>&sube;</span><span class='m'>Y</span>.&nbsp;
<span class='M'>&sube;</span> is an <a href='relation.html#order'>order relation</a>.&nbsp;
</p>

<p id='equal' title='equal'> Sets <span class='m'>X</span> and
<span class='m'>Y</span> are
<dfn>equal</dfn> iff
they have exactly the same elements.&nbsp;
Equivalently, <span class='m'>X</span> and <span class='m'>Y</span> are equal iff
<span class='m'>X</span><span class='M'>&sube;</span><span class='m'>Y</span> and
<span class='m'>Y</span><span class='M'>&sube;</span><span class='m'>X</span>.&nbsp;
</p>


<h1>Constructing a set from other sets</h1>

<p id='intersection' title='intersection'> The
<dfn>intersection</dfn> of sets <span class='m'>X</span> and
<span class='m'>Y</span>,
written <span class='m'>X</span><span class='M'>&cap;</span><span class='m'>Y</span>,
is the set
{<span class='m'>x</span>&nbsp;|&nbsp;<span class='m'>x</span><span class='M'>&isin;</span><span
class='m'>X</span>&nbsp;and&nbsp;<span class='m'>x</span><span class='M'>&isin;</span><span
class='m'>Y</span>}.&nbsp;
</p>

<p id='union' title='union'> The
<dfn>union</dfn> of sets <span class='m'>X</span> and <span class='m'>Y</span>,
written <span class='m'>X</span><span class='M'>&cup;</span><span class='m'>Y</span>,
is the set {<span class='m'>x</span>&nbsp;|&nbsp;<span
class='m'>x</span><span class='M'>&isin;</span><span class='m'>X</span>&nbsp;or&nbsp;<span
class='m'>x</span><span class='M'>&isin;</span><span class='m'>Y</span>}.&nbsp;
</p>

<p id='difference' title='difference'> The
<dfn>difference</dfn> of sets <span class='m'>X</span> and
<span class='m'>Y</span>,
written X-<span class='m'>Y</span> or X\Y,
is the set {<span class='m'>x</span>&nbsp;|&nbsp;<span
class='m'>x</span><span class='M'>&isin;</span><span class='m'>X</span>&nbsp;and&nbsp;<span
class='m'>x</span>&notin;<span class='m'>Y</span>}.&nbsp;
Where <span class='m'>X</span> can be assumed:&nbsp;
the <dfn>complement</dfn> of <span class='m'>Y</span> with respect to
<span class='m'>X</span>,
written <span class='ol'>Y</span>,
is the set X-<span class='m'>Y</span>.&nbsp;
</p>

<p id='powerset' title='powerset'> The
<dfn>powerset</dfn> of set <span class='m'>X</span>,
written <span class='M'>&weierp;</span><span class='m'>X</span>
or <b>P</b>&nbsp;<span class='m'>X</span>
or 2<sup><span class='m'>X</span></sup>,
is the set of all subsets of <span class='m'>X</span>.&nbsp;
(<a href='powerset.html'>Detailed discussion</a>)&nbsp;
A powerset is a <a href='orderedSet.html'>partially-ordered set</a>.&nbsp;
</p>

<p id='CartesianProduct' title='CartesianProduct'> The
<dfn>(Cartesian) product</dfn> of sets <span class='m'>X</span> and
<span class='m'>Y</span>,
written <span class='m'>X</span>&times;<span class='m'>Y</span>,
is the set of pairs
{(<span class='m'>x</span>,<span class='m'>y</span>)&nbsp;|&nbsp;<span
class='m'>x</span><span class='M'>&isin;</span><span
class='m'>X</span>&nbsp;and&nbsp;<span
class='m'>y</span><span class='M'>&isin;</span><span class='m'>Y</span>}.&nbsp;
(<a href='cartesianProduct.html'>Example</a>)&nbsp;
</p>

<p>
Products may be of any positive <dfn id='arity' title='arity'>arity</dfn>
(or order) <span class='m'>n</span>,
in which case the
<dfn id='n-ary-product' title='n-ary-product'><span class='m'>n</span>-ary
(Cartesian) product</dfn>
<span class='m'>X</span><sub>1</sub>&times;...&times;<span
class='m'>X</span><sub>n</sub>
is the set of <span class='m'>n</span>-tuples
{(<span class='m'>x</span><sub>1</sub>,...,<span class='m'>x</span><sub
class='m'>n</sub>)&nbsp;|&nbsp;<span class='m'>x</span><sub>1</sub><span
class='M'>&isin;</span><span
class='m'>X</span><sub>1</sub>&and;...&and;<span class='m'>x</span><sub
class='m'>n</sub><span class='M'>&isin;</span><span class='m'>X</span><sub
class='m'>n</sub>}.&nbsp;
The smallest arities have names:&nbsp;
</p>
<ul class='breakAfter'>
  <li> 1-ary:&nbsp; <dfn id='unary' title='unary'>unary</dfn>
  </li>
  <li> 2-ary:&nbsp; <dfn id='binary' title='binary'>binary</dfn>
  (by far the most common arity)
  </li>
  <li> 3-ary:&nbsp; <dfn id='ternary' title='ternary'>ternary</dfn>
  </li>
</ul>

<p>
The <dfn id='quotient'>quotient</dfn>
of set <span class='m'>X</span> by
<a href='relation.html#equivalence_relation'>equivalence relation</a>
<span class='m'>E</span>,
written <span class='m'>X</span>/<span class='m'>E</span>,
is the set of <a href='relation.html#equivalence_classes'>equivalence classes</a>
into which <span class='m'>E</span> partitions <span class='m'>X</span>.&nbsp;
</p>


<h1>Properties of set operations</h1>

<table frame='border' rules='all' id='properties' summary='properties of operations'>
<tbody>
  <tr>
      <th>Property</th>
      <th>Definition for <span class='M'>&cap;</span> and
      <span class='M'>&cup;</span></th>
      <th>Definition for <span class='M'>&cup;</span> and
      <span class='M'>&cap;</span></th>
  </tr>
  <tr>
      <td>idempotent</td>
      <td class='ce'><span class='m'>X</span><span class='M'>&cap;</span><span class='m'>X</span> = X</td>
      <td class='ce'><span class='m'>X</span><span class='M'>&cup;</span><span class='m'>X</span> = X</td>
  </tr>
  <tr>
      <td>commutative</td>
      <td class='ce'><span class='m'>X</span><span class='M'>&cap;</span><span class='m'>Y</span> =
        <span class='m'>Y</span><span class='M'>&cap;</span>X</td>
      <td class='ce'><span class='m'>X</span><span class='M'>&cup;</span><span class='m'>Y</span> =
        <span class='m'>Y</span><span class='M'>&cup;</span>X</td>
  </tr>
  <tr>
      <td>associative</td>
      <td class='ce'>(<span class='m'>X</span><span class='M'>&cap;</span><span
        class='m'>Y</span>)<span class='M'>&cap;</span><span class='m'>Z</span> =
        <span class='m'>X</span><span class='M'>&cap;</span>(<span class='m'>Y</span><span class='M'>&cap;</span><span
        class='m'>Z</span>)</td>
      <td class='ce'>(<span class='m'>X</span><span class='M'>&cup;</span><span
        class='m'>Y</span>)<span class='M'>&cup;</span><span class='m'>Z</span> =
        <span class='m'>X</span><span class='M'>&cup;</span>(<span class='m'>Y</span><span class='M'>&cup;</span><span
        class='m'>Z</span>)</td>
  </tr>
  <tr>
      <td>distributive</td>
      <td class='ce'><span class='m'>X</span><span class='M'>&cap;</span>(<span
        class='m'>Y</span><span class='M'>&cup;</span><span class='m'>Z</span>) =
        (<span class='m'>X</span><span class='M'>&cap;</span><span class='m'>Y</span>)<span class='M'>&cup;</span>(<span
        class='m'>X</span><span class='M'>&cap;</span><span class='m'>Z</span>)</td>
      <td class='ce'><span class='m'>X</span><span class='M'>&cup;</span>(<span
        class='m'>Y</span><span class='M'>&cap;</span><span class='m'>Z</span>) =
        (<span class='m'>X</span><span class='M'>&cup;</span><span class='m'>Y</span>)<span class='M'>&cap;</span>(<span
        class='m'>X</span><span class='M'>&cup;</span><span class='m'>Z</span>)</td>
  </tr>
  <tr>
      <td rowspan='2'>De Morgan's laws</td>
      <td class='ce'><span class='ol'><span class='m'>X</span><span class='M'>&cap;</span>Y</span> =
          <span class='ol'>X</span> <span class='M'>&cup;</span> <span class='ol'>Y</span></td>
      <td class='ce'><span class='ol'><span class='m'>X</span><span class='M'>&cup;</span>Y</span> =
          <span class='ol'>X</span> <span class='M'>&cap;</span> <span class='ol'>Y</span></td>
  </tr>
  <tr>
      <td class='ce'>
          <span class='m'>U</span>-(<span class='m'>X</span><span class='M'>&cap;</span><span
          class='m'>Y</span>)
          =
          (<span class='m'>U</span>-<span class='m'>X</span>)<span class='M'>&cup;</span>(<span
          class='m'>U</span>-<span class='m'>Y</span>)</td>
      <td class='ce'>
          <span class='m'>U</span>-(<span class='m'>X</span><span class='M'>&cup;</span><span
          class='m'>Y</span>)
          =
          (<span class='m'>U</span>-<span class='m'>X</span>)<span class='M'>&cap;</span>(<span
          class='m'>U</span>-<span class='m'>Y</span>)</td>
  </tr>
  <tr>
      <td>absorptive</td>
      <td class='ce' colspan='2'>
          <span class='m'>X</span><span class='M'>&cap;</span>(<span class='m'>X</span><span class='M'>&cup;</span><span
          class='m'>Y</span>) =
          <span class='m'>X</span> =
          <span class='m'>X</span><span class='M'>&cup;</span>(<span class='m'>X</span><span class='M'>&cap;</span><span
          class='m'>Y</span>)</td>
  </tr>
</tbody>
</table>

<p>
In the table above,
De Morgan's laws are given twice, equivalently:&nbsp;
once in terms of complement (with respect to an implicit universe),
and once in terms of subtraction
from a specified universe <span class='m'>U</span>.&nbsp;
</p>

<p>
I know no names for these useful equivalences involving set difference:&nbsp;
</p>

<table frame='border' rules='all' id='difference_equivalences'
summary='equivalences involving difference'>
<tbody>
  <tr>
      <th></th>
      <th>&minus; and <span class='M'>&cup;</span></th>
      <th>&minus; and <span class='M'>&cap;</span></th>
  </tr>
  <tr>
      <th>0.</th>
      <td class='ce' colspan='2'><span class='m'>X</span><span class='M'>&cup;</span><span
        class='m'>Y</span>&minus;((<span class='m'>X</span>&minus;<span
        class='m'>Y</span>)<span class='M'>&cup;</span>(<span class='m'>Y</span>&minus;<span class='m'>X</span>))
        = <span class='m'>X</span><span class='M'>&cap;</span>Y</td>
  </tr>
  <tr>
      <th>1.</th>
      <td class='ce'>(<span class='m'>X</span>&minus;<span
        class='m'>Z</span>)<span class='M'>&cup;</span>(<span class='m'>Y</span>&minus;<span
        class='m'>Z</span>)&nbsp;=&nbsp;(<span class='m'>X</span><span class='M'>&cup;</span><span
        class='m'>Y</span>)&minus;Z</td>
      <td class='ce'>(<span class='m'>X</span>&minus;<span
        class='m'>Z</span>)<span class='M'>&cap;</span>(<span class='m'>Y</span>&minus;<span
        class='m'>Z</span>)&nbsp;=&nbsp;(<span class='m'>X</span><span class='M'>&cap;</span><span
        class='m'>Y</span>)&minus;Z</td>
  </tr>
  <tr>
      <th>2.</th>
      <td class='ce'><span class='m'>X</span><span class='M'>&cup;</span>(<span
        class='m'>Y</span>&minus;<span class='m'>Z</span>)&nbsp;=&nbsp;(<span
        class='m'>X</span><span class='M'>&cup;</span><span class='m'>Y</span>)&minus;(<span
        class='m'>Z</span>&minus;<span class='m'>X</span>)</td>
      <td class='ce'><span class='m'>X</span><span class='M'>&cap;</span>(<span
        class='m'>Y</span>&minus;<span class='m'>Z</span>)&nbsp;=&nbsp;(<span
        class='m'>X</span><span class='M'>&cap;</span><span class='m'>Y</span>)&minus;(<span
        class='m'>Z</span>&minus;<span class='m'>X</span>)</td>
  </tr>
</tbody>
</table>

<p id='dual' title='dual'> You will notice that the properties of <span class='M'>&cup;</span> and <span class='M'>&cap;</span>
are interchangeable, in a sense.&nbsp;
Every property that is true for <span class='M'>&cup;</span> is also true for <span class='M'>&cap;</span>;
more generally,
if <span class='m'>P</span> is a property involving <span class='M'>&cup;</span> and <span class='M'>&cap;</span>,
then there is a property <span class='m'>P</span><sup><span class='M'>&part;</span></sup>
(pronounced "P dual")
that is <span class='m'>P</span> with every instance of <span class='M'>&cup;</span> replaced by <span class='M'>&cap;</span>,
and every instance of <span class='M'>&cap;</span> replaced by <span class='M'>&cup;</span>,
such that
<span class='m'>P</span>&equiv;<span class='m'>P</span><span
class='sp'>&part;</span>.&nbsp;
This relation between the two operators is termed <dfn>duality</dfn>
and is an instance of the
<a href='orderedSet.html#duality'>duality</a>
that holds in any ordered set.&nbsp;
</p>

<p>
It is worth noting that set difference (&minus;)
is neither commutative nor associative:
</p>

<table frame='border' rules='all' summary='properties of set difference'>
<tbody>
  <tr>
      <th>Property</th>
      <th>Explanation</th>
  </tr>
  <tr>
      <td>&minus; is <span class='bi'>not</span> commutative</td>
      <td class='ce'>X&minus;<span class='m'>Y</span>&nbsp;&ne;Y&minus;<span
        class='m'>X</span> for some <span class='m'>X</span> and Y</td>
  </tr>
  <tr>
      <td>&minus; is <span class='bi'>not</span> associative</td>
      <td class='ce'>(<span class='m'>X</span>&minus;<span
        class='m'>Y</span>)&minus;<span class='m'>Z</span>&nbsp;&ne;X&minus;(<span
        class='m'>Y</span>&minus;<span class='m'>Z</span>) for some
          <span class='m'>X</span>, <span class='m'>Y</span>, and Z</td>
  </tr>
</tbody>
</table>


<h1 id='Closure'>Closure</h1>

<p id='closed' title='closed'>Let <span class='m'>S</span> be a set, and
<span class='m'>O</span> an operation that takes
0 or more operands (x1,x2,...) from S
and returns a value.&nbsp;
S is <dfn>closed</dfn> under <span class='m'>O</span> iff
for all x1,x2,...<span class='M'>&isin;</span>S,
O(x1,x2,...)<span class='M'>&isin;</span>S.&nbsp;
</p>

<p> Examples:
</p>
<dl>
  <dt>The integers are closed under addition.&nbsp;</dt>
    <dd>The sum of any two integers is also an integer.&nbsp;
    </dd>
  <dt>The integers are not closed under division.&nbsp;</dt>
    <dd>Counterexample:  1 divided by 2 is not an integer.&nbsp;
    </dd>
  <dt>A powerset is closed under intersection.&nbsp;</dt>
    <dd>A powerset 2<sup>S</sup> contains all subsets of
      <span class='m'>S</span>.&nbsp;
      The intersection of two subsets of <span class='m'>S</span>
      contains no elements not in <span class='m'>S</span>,
      so the intersection is also a subset of <span class='m'>S</span> and thus
      an element of 2<sup>S</sup>.
    </dd>
</dl>

<p id='closure' title='closure'>
A new set can be created by closing an existing basis set under an operation;
the new set is called the <dfn>closure</dfn>
of the basis set under the operation.&nbsp;
</p>

<p>
Most commonly, when we say closure we mean
<dfn id='transitive-closure' title='transitive-closure'>transitive closure</dfn>,
the set resulting from
closing the closure of the ... of the closure of the basis set.&nbsp;
</p>

<dl>
  <dt>The closure of <span class='nit'>{1}</span> under <span class='nit'>+</span></dt>
    <dd>The closure consists of the result of applying + to
      every pair of elements in {1}:&nbsp;
      1+1=2.&nbsp;
      The closure is {1,2}.&nbsp;
    </dd>
  <dt>The transitive closure of <span class='nit'>{1}</span>
      under <span class='nit'>+</span></dt>
    <dd>The closure consists of the result of
      <ol class='x'>
        <li> 1.&nbsp; applying + to every pair of elements in {1}:&nbsp;
          1+1=2, resulting in {1,2};
        </li>
        <li> 2.&nbsp; then applying + to every pair of elements
          in that closure {1,2}:&nbsp;
          1+1=2, 1+2=3, 2+1=3, 2+4=4, resulting in {1,2,3,4};
        </li>
        <li> 3.&nbsp; then applying + to every pair of elements
          in that closure {1,2,3,4}:&nbsp;
          ...&nbsp;
        </li>
        <li> ...
        </li>
      </ol>
      <p>
      and so forth until the set is closed
      (after an infinite number of closures, in this case).&nbsp;<br/>
      The transitive closure of {1} under + is the set of positive integers.&nbsp;
      </p>
    </dd>
  <dt>The transitive closure of
      <span class='nit'>{ {<span class='m'>a</span>},{<span
      class='m'>b</span>},{<span class='m'>c</span>} }</span>
      under <span class='nit'><span class='M'>&cup;</span></span></dt>
    <dd>The closure consists of the result of
      <ol class='d'>
        <li> applying <span class='M'>&cup;</span>
          to every pair of elements in { {a},{b},{c} }:&nbsp;
          {a}<span class='M'>&cup;</span>{a{=}a},
          {a}<span class='M'>&cup;</span>{b{=}a,b},
          {a}<span class='M'>&cup;</span>{c{=}a,c},
          {b}<span class='M'>&cup;</span>{a{=}a,b},
          {b}<span class='M'>&cup;</span>{b{=}b},
          {b}<span class='M'>&cup;</span>{c{=}b,c},
          {c}<span class='M'>&cup;</span>{a{=}a,c},
          {c}<span class='M'>&cup;</span>{b{=}b,c},
          {c}<span class='M'>&cup;</span>{c{=}c},
          resulting in { {a},{b},{c},{a,b},{a,c},{b,c} };
        </li>
        <li> then applying <span class='M'>&cup;</span> to every pair of elements
          in that closure { {a},{b},{c},{a,b},{a,c},{b,c} },
          resulting in one new element {a,b,c};
        </li>
      </ol>
      <p>
      Further closure cycles add no new elements.&nbsp;
      In this case, closure was achieved after a finite number of cycles
      (two).&nbsp;
      The transitive closure of { {a},{b},{c} } under <span class='nit'><span class='M'>&cup;</span></span>
      is { {a},{b},{c},{a,b},{a,c},{b,c},{a,b,c} }
      (the <a href='#powerset'>powerset</a> of {a,b,c}, incidentally).&nbsp;
      </p>
    </dd>
</dl>


<h1 id='enumerating' title='enumerating'>Enumerating infinite sets</h1>

<p>
We enumerate (count) finite sets by
mapping a positive integer to each element,
starting with 1 and continuing in sequence.&nbsp;
For example,
we could count the vowels "a e i o u" thus:&nbsp;
</p>
<table>
<tbody>
  <tr>
    <th>Extension of the set</th>
    <td>a</td>
    <td>e</td>
    <td>i</td>
    <td>o</td>
    <td>u</td>
  </tr>
  <tr>
    <th>Enumerating it</th>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
  </tr>
</tbody>
</table>

<p>
The same approach is used to enumerate infinite sets,
except that just as we can't list
the <a href='#extension'>extension</a> of an infinite set
but have to define it <a href='#intension'>intensionally</a>
with a rule,
we can't count it either
but instead have to give a rule for how we would count it.&nbsp;
Here's one way to enumerate the integers (positive, negative, and zero).&nbsp;
We start at 0,
then alternate sides with 1, &minus;1, 2, &minus;2, 3, &minus;3, ....&nbsp;
</p>

<table class='ce'>
<tbody>
  <tr>
    <th>Extension of the set</th>
    <td>...</td>
    <td>&minus;j</td>
    <td>...</td>
    <td>&minus;2</td>
    <td>&minus;1</td>
    <td>0</td>
    <td>1</td>
    <td>2</td>
    <td>...</td>
    <td>j</td>
    <td>...</td>
  </tr>
  <tr>
    <th>Enumerating it</th>
    <td>...</td>
    <td>2j+1</td>
    <td>...</td>
    <td>5</td>
    <td>3</td>
    <td>1</td>
    <td>2</td>
    <td>4</td>
    <td>...</td>
    <td>2j</td>
    <td>...</td>
  </tr>
  <tr>
    <td></td>
    <td colspan='11' class='i'>(j is a positive integer, so &minus;j is negative)</td>
  </tr>
</tbody>
</table>

<p>
In our enumeration,
every integer gets a distinct positive integer:&nbsp;
0 gets 1,
positive integer j gets 2j,
and negative integer &minus;j gets 2j + 1.&nbsp;
Thus the integers are enumerable
(because we've given a rule that enumerates them).&nbsp;
</p>

<p>
You might think that the rationals (integer fractions) are not enumerable
(because there are so many of them).&nbsp;
However,
the following scheme shows the concept for enumerating the positive rationals.&nbsp;
</p>

<p>
The table on the left arranges the rationals
so that each rational appears at least once &mdash;
rational j/k appears in column j, row k (j, k &gt; 0).&nbsp;
(Actually, every number appears infinitely many times,
for example 1/2 appears equivalently as 1/2, 2/4, 3/6, ....)&nbsp;
</p>

<p>
The table on the right
enumerates the cells of the table on the left
by diagonals, Fibonacci-style.&nbsp;
</p>

<table class='ce FL'>
<caption>The positive rationals</caption>
<tbody>
  <tr>
    <th></th>
    <th>1</th>
    <th>2</th>
    <th>3</th>
    <th>4</th>
    <th>...</th>
  </tr>
  <tr>
    <th>1</th>
    <td>1/1</td>
    <td>2/1</td>
    <td>3/1</td>
    <td>4/1</td>
    <td>...</td>
  </tr>
  <tr>
    <th>2</th>
    <td>1/2</td>
    <td>2/2</td>
    <td>3/2</td>
    <td>4/2</td>
    <td>...</td>
  </tr>
  <tr>
    <th>3</th>
    <td>1/3</td>
    <td>2/3</td>
    <td>3/3</td>
    <td>4/3</td>
    <td>...</td>
  </tr>
  <tr>
    <th>4</th>
    <td>1/4</td>
    <td>2/4</td>
    <td>3/4</td>
    <td>4/4</td>
    <td>...</td>
  </tr>
  <tr>
    <th>...</th>
    <td>...</td>
    <td>...</td>
    <td>...</td>
    <td>...</td>
    <td>...</td>
  </tr>
</tbody>
</table>

<table class='ce FL'>
<caption>An enumeration</caption>
<tbody>
  <tr>
    <th></th>
    <th>1</th>
    <th>2</th>
    <th>3</th>
    <th>4</th>
    <th>...</th>
  </tr>
  <tr>
    <th>1</th>
    <td>1</td>
    <td>3</td>
    <td>6</td>
    <td>10</td>
    <td>...</td>
  </tr>
  <tr>
    <th>2</th>
    <td>2</td>
    <td>5</td>
    <td>9</td>
    <td colspan='2'>...</td>
  </tr>
  <tr>
    <th>3</th>
    <td>4</td>
    <td>8</td>
    <td colspan='3'>...</td>
  </tr>
  <tr>
    <th>4</th>
    <td>7</td>
    <td colspan='4'>...</td>
  </tr>
  <tr>
    <th>...</th>
    <td colspan='5'>...</td>
  </tr>
</tbody>
</table>

<img src='img/enumerateRationals.png' alt='zig-zags'
style='width:11ex; padding:4ex 0 0 2em;'/>

<p class='CB'>
All the (positive) rationals get counted at least once,
so they are enumerable.&nbsp;
The rule can easily be extended to cover zero and the negative rationals
using the approach that enumerated the integers.&nbsp;
</p>


<h1 id='diagonalization' title='diagonalization' class='breakBefore'>Diagonalization</h1>

<table class='borderTL FR'>
<tbody>
  <tr>
      <th></th>
      <th colspan='9' class='borderTL'>digit #</th>
  </tr>
  <tr>
      <th>list</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>...</th>
      <th><i>n</i></th>
  <td class='borderTBL'>...</td>
  </tr>
  <tr>
      <td>1.&nbsp; 0.</td>
      <td class='D'>7</td>
      <td>5</td>
      <td>2</td>
      <td>0</td>
      <td> ...</td>
      <td>4</td>
  <td class='borderTBL'>...</td>
  </tr>
  <tr>
      <td>2.&nbsp; 0.</td>
      <td>4</td>
      <td class='D'>3</td>
      <td>1</td>
      <td>5</td>
      <td> ... </td>
      <td>6</td>
  <td class='borderTBL'>...</td>
  </tr>
  <tr>
      <td>3.&nbsp; 0.</td>
      <td>8</td>
      <td>6</td>
      <td class='D'>6</td>
      <td>3</td>
      <td> ... </td>
      <td>6</td>
  <td class='borderTBL'>...</td>
  </tr>
  <tr>
      <td>4.&nbsp; 0.</td>
      <td>2</td>
      <td>9</td>
      <td>2</td>
      <td class='D'>5</td>
      <td> ... </td>
      <td>8</td>
  <td class='borderTBL'>...</td>
  </tr>
  <tr>
      <td>...</td>
      <td colspan='8' class='borderTBL'>...</td>
  </tr>
  <tr>
      <td><i>n</i>.&nbsp; 0.</td>
      <td>3</td>
      <td>2</td>
      <td>5</td>
      <td>6</td>
      <td> ... </td>
      <td class='D'>2</td>
  <td class='borderTBL'>...</td>
  </tr>
  <tr>
      <td class='borderTL'>...</td>
      <td colspan='8' class='borderTL'>...</td>
  </tr>
</tbody>
</table>

<p>
Diagonalization is a technique for showing that
the elements of a set are <i>not</i> countable.&nbsp;
We will illustrate it with the set of real numbers between 0 and 1.&nbsp;
</p>

<p>
The table shows a list of the real numbers between 0 and 1,
in some arbitrary order (it doesn't matter what order).&nbsp;
The first real number in this particular order
has a decimal representation begins with 0.75206...;
the second one begins with 0.43158...,
the third with 0.86630...,
and so on.&nbsp;
The (infinite) table lists the infinite number of digits of each of the numbers;
we show the 1st through 5th digits, and then also the <i>n</i>th digit.&nbsp;
It doesn't matter what <i>n</i> is
(except that in our example, it must be bigger than 5);
it's just some large positive integer.&nbsp;
We also show the <i>n</i>th number in the list,
which begins with 0.32568....&nbsp;
</p>

<p>
We can use diagonalization to show that there is
a real number that is not in the list, even though the list is
(countably) infinite.&nbsp;
We do this by conceptually stating a number,
digit by digit:&nbsp;
</p>

<div style='padding-left:1em;'>
<table class='noborder closespaced tp'>
<tbody>
  <tr>
    <td>&bull; Its</td>
    <td>1st</td>
      <td>digit is different from the</td>
    <td>1st</td>
      <td>digit of the</td>
    <td>1st</td>
      <td>number
        (say, 6 instead of 7)
        <br/><i>(although it doesn't matter which<br/>
        as long as it's different).</i>&nbsp;</td>
  </tr>
  <tr>
    <td>&bull; Its</td>
    <td>2nd</td>
      <td>digit is different from the</td>
    <td>2nd</td>
      <td>digit of the</td>
    <td>2nd</td>
      <td>number
        (say, 2 instead of 3).&nbsp;</td>
  </tr>
  <tr>
    <td>&bull; Its</td>
    <td>3rd</td>
      <td>digit is different from the</td>
    <td>3rd</td>
      <td>digit of the</td>
    <td>3rd</td>
      <td>number
    (say, 5 instead of 6).&nbsp;</td>
  </tr>
  <tr>
    <td>&bull; Its</td>
    <td>4th</td>
      <td>digit is different from the</td>
    <td>4th</td>
      <td>digit of the</td>
    <td>4th</td>
      <td>number
    (say, 4 instead of 5).&nbsp;</td>
  </tr>
  <tr>
    <td colspan='7'>&bull; ...</td>
  </tr>
  <tr>
    <td>&bull; Its</td>
    <td><i>n</i>th</td>
      <td>digit is different from the</td>
    <td><i>n</i>th</td>
      <td>digit of the</td>
    <td><i>n</i>th</td>
      <td>number
    (say, 1 instead of 2).&nbsp;</td>
  </tr>
  <tr>
    <td colspan='7'>&bull; And so on without end.</td>
  </tr>
</tbody>
</table>
</div>

<p>
This number with an infinite number of digits, 0.62546...,
is <em>not in the list</em>.&nbsp;
We know this, even though we don't know all the digits of the number,
because it is different from the <i>j</i>th number in the list,
for any <i>j</i>,
in its <i>j</i>th digit.&nbsp;
It doesn't matter in what order we list the numbers;
it is true in general.&nbsp;
We have just shown that the real numbers are not countable:&nbsp;
there are more real numbers than there are integers.&nbsp;
</p>

<p>
Interestingly, the rationals are countable,
so that in a very practical sense there are not more rationals than integers.&nbsp;
The rationals cannot be diagonalized
because in general an arbitrary decimal fraction
with an infinite number of digits
is not going to be a rational number (it will be real, but not rational),
so the counterexample that diagonalization produces
can't be guaranteed to be a rational number.&nbsp;
Similarly,
the integers can't be diagonalized
(such a table would be infinite to the left, not the right,
and show the digits of each integer in the list)
because the counterexample has an infinite number of digits
and no integer has an infinite number of digits.&nbsp;
</p>

<p>
We can also use diagonalization to show that
the <a href='#powerset'>powerset</a> of a countably infinite set
is not countable.&nbsp;
</p>

<p>
Diagonalization is due to Georg Cantor, circa 1880.&nbsp;
</p>


<h1 id='Russells-paradox' title='Russells-paradox'>Russell's paradox</h1>

<p> We must be just a bit careful
when allowing sets to be elements of other sets,
as this can lead to paradoxes.&nbsp;
The first such paradox was discovered by Bertrand Russell not long after
sets were first introduced (circa 1900).&nbsp;
Let <span class='m'>R</span> be the set containing all sets that
do not contain themselves.&nbsp;
Does <span class='m'>R</span> contain itself?&nbsp;
</p>

<ol>
  <li> Assume <span class='m'>R</span> contains itself.&nbsp;
    Then <span class='m'>R</span> cannot contain itself,
    as <span class='m'>R</span> only contains sets that
    do not contain themselves.&nbsp;
  </li>
  <li> Assume <span class='m'>R</span> does not contain itself.&nbsp;
    Then <span class='m'>R</span> must contain itself,
    as <span class='m'>R</span> contains all sets that
    do not contain themselves.&nbsp;
  </li>
</ol>

<p> Not a happy situation!
</p>

<p> There are a number of ways of avoiding Russell's Paradox
by carefully defining
sets and their operations.&nbsp;
We avoid Russell's Paradox by restricting sets to be constructed only
from sets that already exist
(specifically,
when naming a set by <a href='#intension'>intension</a>,
we require that its elements be drawn from
some other already-existing set <span class='m'>E</span>).&nbsp;
Thus we provide no way of constructing a set that contains
all sets that do not contain themselves;
there is only <span class='M'>&cap;</span>, <span class='M'>&cup;</span>, &minus;,
<span class='M'>&weierp;</span>, &times;,
and intensional definition of a subset of an already existing set,
and these aren't enough to construct <span class='m'>R</span>.&nbsp;
</p>


<!--xhtml -n -->
</div>

</div><!-- #TBg -->

<div id='TFooter'>
<div class='W3C'>
  <a href='http://validator.w3.org/check?uri=referer'><img class='W3C'
    src='../../img/valid-xhtml10-blue.png'
    alt='Valid XHTML 1.0 Strict'/></a>
  <br/>
  <a href='http://jigsaw.w3.org/css-validator/check/referer'><img class='W3C'
    src='../../img/vcss-blue.png'
    alt='Valid CSS!'/></a>
</div>
<div class='timestamp'>2009Sep23We10:12</div>
<div style='padding-top:1px;'>
<a class='plain' href='./index.html' style='font-variant:small-caps;'
>Thomas A. Alspaugh</a>
<span style='padding-left:1em;'><span class='email ss sm'>alspaugh&nbsp;
    <span class='ss sc sm'>at</span> &middot; ics &middot; uci &middot; edu</span>
    <!-- -spell alspaugh uci edu --> </span>
</div>
</div>

<!-- Google Analytics code -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol)
  ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost +
  "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-15281497-1");
pageTracker._trackPageview();
} catch(err) {}
</script>

</body>
</html>

