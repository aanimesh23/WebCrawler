<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Announcements</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Announcements</h1>
<p>
<h2>Introduction to Computer Science I<br>
ICS-21: Lecture A/Labs 1-3<br>
Spring 2012
</h2><p>
</center>

<hr align="left">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #24: 6/11/12<br>
  Program #6
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Program #6.
The class average was about 42 (or about 93%) and the the median was about
  44 (or about 98%).
The last time I taught this course the average was about 37 (or 83%) and the
  median was about 44 (or 98%).
The average over all programming assignments this quarter was 92%; the last
  time I taught this course it was 97%.
<p>
After I return your graded work in my special office hours on Monday, please
  download the <b>Grades(zipped .xls file)</b> from the course web and ensure
  that I have computed and entered your grade correctly (I'll be entering
  thousands of grades for students in my course this quarter, so even if I'm
  99% accurate, I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an programming score of 36.5 is recorded as 37).
<p>
Generally, very good work by most students.
Students who missed more than 3 methods tended to miss a lot more than 3.
There is still a lot of conufsion about when in loops to use <b>used</b> vs.
  <b>sequence.length</b>: you almost always want to use <b>used</b> so as to
  not process any <b>null</b> values at the end of the array.
<b>Please check my solution methods and learn something before the final
  exam.</b>
<p>
There were a few methods that seem to give many students trouble, often the
  advanced ones: <b>countTrue</b> and <b>filterTrue</b>.
Surprisingly, many students missed <b>insertAt</b> and <b>remove</b>.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #23: 6/9/12<br>
  In-Class Programming Exam #4
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) In-Class Programming Exam #4.
The class average was about 32(or about 64%) and the median was about 34
  (or about 68%).
The last time I taught this calsse the average was about 31 (or about 61%)
  and the median was about the same.
Again, because the average was below 75%, everyone has been automatically
  awarded about 6 extra points (whose result is reflected in the % and grade
  columns on the spreadsheet).
So, if your actual grade was 34 (68%), your normalized grade is about 40 (80%).
After normalization, about 50% of the students scored an A; another 11% scored
  a B (so almost 60% passed at the B or above level).
I have posted a download with everyone's submitted programs, so you can
  download your work and better interpret my gradesheets, which I will return
  during special office hours on Monday.
<p>
Note that as I promised, I have updated the grade files so that the column that
  adds up the Programming Exams (Sigma PE) uses the highest score from In-Class
  Programming Exam #3 and #4 for Exam #3.
<p>
There were many different mistakes made by students writing this class.
Here were some of the most common problems.
<ul>
  <li>In the declarations: not initializing <b>used</b> to 0 (or instead
        initializing it in the constructor).
  <li>In the constructor: not initalizing the <b>set</b> instannce variable by
        making it refer to a constructed object:
        <b>set = new Object[<i>parameter</i>];</b> Even
        worse, some students initialized <b>used</b> to the non-zero
        <b><i>parameter</i></b>; while still other students declared a local
        variable named <b>set</b> in the constructor and set it (not the
        instance variable) to the allocated array.
      Finally some student did not check/throw the exception (and some left
        the parameter's value out of the message).
  <li>In the <b>lookupIndex</b> method: using <b>set.length</b> as an upper
        loop bound (instead of <b>used</b>), comparing with <b>==</b> instead
        of <b>.equals</b>. A small (but to me surprisingly large) number of
        students did not show <b>int</b> as the return type of this method,
        and returned a reference to the object found.
      This method had uses in the <b>add</b> and <b>contains</b> method, both
        which try to see if a value is in the <b>SimpleSet</b>: this is the
        same as a result returned from <b>lookupIndex</b> that is not
        <b>-1</b>. Many students rewrote looping code in these two methods.
  <li>In the <b>add</b> method: not checking for a value in the
        <b>SimpleSet</b> BEFORE checking whether to <b>doubleLength</b>
        (some students NEVER checked whether the value was there; others
         ALWAY doubled the length or NEVER did), not storing the new value in
         the appropriate index (<b>used</b>) or not incrementing <b>used</b>
         after a new values was added.
      A suprisingly large number of students used an <b>if/else</b> to test
        whether a value was at some index in the array, and if not immediately
        added it: but the result was that it added the value if it wasn't
        stored in the first index.
  <li>In the <b>getSize</b> method: not returning <b>used</b> and instead
        couting non-<b>null</b> values in the array. Students who counted 
        sometimes had the wrong loop indexes or counted the wrong thing.
  <li>In the <b>makeEmpty</b> method: either not putting <b>null</b> in all
        the non-<b>null</b> array indexes (<b>0</b> to <b>used-1</b>) or not
        resetting <b>used</b> to be <b>0</b>.
      Note that allocating a new object array is legal, but requires much more
        work (although less code) than just storing null everywhere.
  <li>In the <b>contains</b> method: not using <b>lookupIndex</b> or not
        looping correctly to check: e.g., using <b>set.length</b> as the
        upper loop bound instead of <b>used</b>.
  <li>In the <b>removeRandom</b> method: not checking/throwing the exception,
        not returning a result from the array (some students returned an 
        index), not saving the the result to return before shifting the array,
        not shifting the array or not shifting it correctly (e.g., shifting
        lower to higher indexes, shifting a value beyond the array's upper
        bound), not decrementing <b>used</b> and/or not storing <b>null</b>
        where it belongs after shifting.
  <li>For simple solution: some students declared extra variables that were
        not needed (often in <b>lookupIndex</b>, see my solution) some students
        used an <b>if</b> in <b>contains</b> after calling <b>lookupIndex</b>
        when the <b>if</b> is not needed (see my solution).
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #22: 6/6/12<br>
  Quiz #9
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Quiz #9.
The class average was about 17 (or about 70%) and the median was about
  19 (or about 76%).
The last time I taught this class the average was about 18 (or about 70%) and
  the median was about 20 (or about 80%).
These were the 3rd highest scores for a quiz the quarter; most students
  seemed to demonstrate an understanding of the major concepts, which
  covered all sorts of material learned during the quarter.
Look at your returned work carefully; if your score was below 20
  you might want to review this quiz with me or a TA.
Material similar to this will be on the final written exam.
<p>
After I return your graded work in class on Wednesday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an exam score of 22.5 is recorded as 23).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student exams: it makes my office
  messier, and you don't get the benefit of the feedback I wrote on the quiz.
<p>
I would strongly recommend that you review the code in my solution to gain
  a better understanding of the programming involved.
<p>
For problem 1, the mistakes mostly related to the type of parameter for the
  constructor (and type of instance variable it was stored into).
<b>LengthLess</b> is too specific (and you cannot generalize the class for
  problem 2)and <b>Object</b> is too general (although you can use casting,
  but to <b>Decision</b> to include problem 2): <b>Decision</b> is just right.
It ensures at compile-time that the object passed to the constructor will have
  an <b>isOK</b> method and requires no casting.
<p>
For problem 2, students also did well.
The only reoccuring problem was calling <b>.toString</b> instead of casting
  the parameter to a <b>String</b>.
While calling <b>.toString</b> worked here, generally classes that implement
  <b>Decision</b> require casting, and it is a "more correct" (and faster)
  solution.
<p>
For problem 3, there was more variation. 
The whole point of this problem was to construct and use and object from the
  <b>Catenate</b> class (passing its constructor an object constructed from
  the <b>Prefix</b> class).
Working solutions that did not use <b>Catenate</b> were not awarded many
  points.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #21: 6/4/12<br>
  Upcoming Programming and Final Exams
</b></td>
<td width ="80%">
We will have our last (of four) <b>in-class programming exam</b> on Thursday,
  June 5, in <b>Lab</b>.
The program will require you to write a collection class that has about a half
  dozen methods that manipulate an array of <b>Object</b> in a manner similar
  to the <b>SimpleQueue</b>, <b>SimpleStack</b>, and
  <b>Sequence</b>.
Study these classes and general operations on searching/updating arrays.
It might be also useful to look at the <b>Portfolio</b> class, although that
  uses an array of <b>Stock</b>
<p>
We will also have a <b>final written exam</b> on Tuesday, June 12th, 
  1:30pm - 3:30pm in SSPA 1100 (our lecture classroom).
This exam will be comprehensive, but it will heavily focus on the material
  covered near or after the midterm exam; of course, when writing these
  advanced programming features you will also be making use of the simpler
  features covered early in the quarter.
It will cover the lectures up to and including interfaces, but nothing after,
  from Quiz #1 to Quiz #9; from Programming Assignment #1 to Programming
  Assignment #6.
For more information, click the following <a href="handouts/writtenexam2.html">
  Topics for Written Final Exam</a> link.
The best way to study for this exam is to review your quizzes (the most
  important, but we had only 3 the second half of the quarter), programming
  assignments, the in-class programming exams, and the daily problems from the
  readings.
Obviously we have covered a large amount of material in the quarter, and with
  with only a dozen or so questions on the exams, I'll have to be selective;
  but the coverage will be broad.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #20: 6/4/12<br>
  Quiz #8
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Quiz #8.
The class average was about 16 (or about 64%) and the median was about 16
  (or about 66%); the last time I taught this class the average was about 16
  (or about 65%) and the median was about 18 (or about 70%).
Look at your returned work carefully; if your score was below 20
  you might want to review this quiz with me or a TA.
Material similar to this will be on the final written exam.
<p>
After I return your graded work in class on Thursday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an exam score of 22.5 is recorded as 23).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student exams: it makes my office
  messier, and you don't get the benefit of the feedback I wrote on the quiz.
<p>
On the first page, students mostly either got a full credit or none.
On the second page the distribution was much wider.
Common general mistakes included
<ul>
  <li>Using <b>stocks.length</b> as the upper bound of an array instead of
       <b>used</b>.
  <li>Not calling <b>indexOfSymbol</b> when appropriate; and if calling it,
        not checking for <b>-1</b> as the returned value before using its
        value to access the <b>stocks</b> array.
      Often it was used more than once in a method, so its value should be
        saved.
</ul>
For specific methods
<ul>
  <li>In <b>sharesOwned</b>, not using the parameter's value, and instead
        returning the number of stocks or <b>0</b> (if the symbol wasn't in the
        array) or <b>1</b> (if the symbol was in the array).
  <li>In <b>worth</b>, calculating <b>.getPrice</b> times <b>.getShares</b> of
        a stock, instead  of calling its <b>.getWorth</b> method.
  <li>In <b>active</b>, not calling <b>.isActive</b> on a stock, or not
        catenating values (with spaces between).
  <li>In <b>withdraw</b>, not checking for a bad parameter or not reducing
        the <b>cash</b> instance variable.
  <li>In <b>sell</b>, there were many errors (few students received close to
        full credit for this part).
      See my solution and try to understand why each part was there.
  <li>In <b>updatePrice</b>, not calling the stock's <b>updateMethod</b>.
  </ul>
Again, see my code for what I consider a correct solution.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #19: 6/2/12<br>
  In-Lab Programming Exam #3
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) In-Lab Programming Exam #3.
The class average was about 37 (or about 73%); the median was higher, about 39
  (or about 78%); the last time I taught this class the class average was about
  36 (or about 72%) and the median was about 40 (or about 79%).
Because the average was below 75%, everyone has been automatically awarded
  about 1 extra point (whose result is reflected in the % and grade columns
  on the spreadsheet).
So, if your actual grade was 38 (76%), your normalized grade is about 39 (78%).
After normalization, about 34% of the students scored an A; another 20% scored
  a B (so 54% passed at the B or above level).
I have posted a download with everyone's submitted programs, so you can
  download your work and better interpret my gradesheets, which I will return
  in class on Monday.
<p>
Note that as I promised, I have updated the grade files so that the column that
  adds up the Programming Exams (Sigma PE) uses the highest score from In-Lab
  Programming Exam #2 and #3 for Exam #2.
<p>
There were many different mistakes made by students writing this class.
Here were some of the most common problems.
<ul>
  <li>In the declarations: not declaring all instance variables private; not
        initializing some instance variables in their declarations; not
        initializing the status of the lock to "locked" (<b>true</b>).
  <li>In the constructor: not copying parameters to instance variables;
        re-initializing instance variables that should be/were initialized in
        their declarations.
  <li>In the <b>lock</b> method: checking some condition (this method can
        always just change  the state to "locked"); some student wrote code
        that returned a value instead of being <b>void</b>.
  <li>In the <b>unlock</b> method: comparing the wrong variables. Calling
        <b>.equals</b> between a <b>ModularCounter</b> and something that
        is not from the <b>ModularCounter</b> class (which unfortunately
        is syntactically correct but alwasy false); some student wrote code
        that returned a value instead of being <b>void</b>.
  <li>In the <b>changeDial</b> method: not using the correct dial numbers;
        not comparing the <b>String</b> to <b>"Up"</b>/<b>"Down"</b> with
        the <b>.equals</b> method (students used many "close" variants that
        did not work); updating local state, not instance variables.
  <li>In the <b>getDialStatus</b> method: not returning a <b>String</b> with
        just a number 0-9: some students executed <b>.toString</b> on the
        <b>ModularCounter</b> which returned a longer <b>String</b> like
        <b>1 (mod 9)</b>.
  <li>In the <b>getLockStatus</b> method: not returning the exact <b>String</b>
        values required.
  <li>For using the <b>ModularCounter</b> using a modulus of <b>9</b> instead
        of <b>10</b>; many students used the <b>ModularCounter</b> class in
        their solution and most did so correctly.
  <li>For simple solution, not writing <b>if/else</b> in <b>getDialStatus</b>
        and <b>getLockStatus</b> (in fact, these methods are ideal places to
        use conditional expressions); testing the lock status in <b>unlock</b>;
        writing something like <b>locked == true</b> or <b>locked == false</b>
        instead of just <b>locked</b> or <b>!locked</b> (the instance variable
        should be something like <b>locked</b>, not <b>lockStatus</b> so
        <b>true</b> and <b>false</b> values are easier to understand).
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #18: 5/29/12<br>
  Program #5
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Program #5.
The class average was about 37 (or about 83%) and the the median was about
  39 (or about 84%).
The last time I taught this class the average was about 39 (or about 87%) and
  the median was about 42 (or about 93%).
<p>
After I return your graded work in class on Tuesday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an programming score of 36.5 is recorded as 37).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student programs: it makes my
  office messier, and you don't get the benefit of the feedback I wrote.
<p>
Generally, very good work by most students.
There were a few <b>static</b> methods that performed poorly on boundary
  cases (e.g., <b>constrain</b> when the value to constrain was equal to the
  minimum or maximum); a few <b>compareTo/equals</b> methods in
  <b>BigRational</b> that did not compute correct results (<b>compareTo</b>
  should return an <b>int</b> and neither should use <b>==</b>); a few
   <b>update</b> methods in <b>Ball</b> that did not perform the simulation
  correctly (mostly having to do with forgetting to multiply the average
  velocity by <b>dT</b>) or using <b>static</b> fields: they created jerky
  simulations, not at all like my executable.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #17: 5/23/11<br>
  Quiz #7
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Quiz #7.
The class average was about 16 (or about 64%) and the median was about 18 (or
  about 72%); the last time I taught this class the average was about 16 (or
  about 65%) and the median was about 19 (or about 76%).
Look at your returned work carefully; if your score was below 20
  you might want to review this quiz with me or a TA.
Material similar to this will be on the final written exam.
<p>
After I return your graded work in class on Wednesday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an exam score of 22.5 is recorded as 23).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student exams: it makes my office
  messier, and you don't get the benefit of the feedback I wrote on the quiz.
<p>
Generally students made lots of small mistakes that one makes when writing
  classes for the first time.
I hope between seeing my comments on your quizzes and reading my solutions
  that you get a solid understanding of all the parts of a simple class.
Here were some common mistakes for Question #1. Problems with Question #2 were
  similar.
In fact, there is a strong correlation between student scores on problems #1
  and #2
<ul>
  <li>Not writing the whole class, starting with <b>public class ...</b>
  <li>Using <b>static</b> fields and methods.
      Yes, you can get this to work in Eclipse if you always construct just
        one object; but if you construct more than one, then the different
        objects would not have their own state, and therefore not work
        correctly.
  <li>Not checking for illegal arguments/parameters in the constructor and
        throwing an exception (with some useful <b>String</b> that included
        the "bad" values).
  <li>Not copying the parameters to the instance variables in the constructor
        (once they are found to be OK).
      Some students are confused about using parameters and instance variables
        together in constructors.
  <li>Not writing the header or body correct for <b>getCatenation</b> and
        <b>getCount</b>; both are parameterless, returning a <b>String</b>
        and <b>int</b> instance variables respectively.
  <li>Not writing the header or body correct for <b>seeIt</b>: a <b>void</b>
        method that often (but not always) changes the state of some instance
        variables (some students didn't change the state correctly).
  <li>Not declaring instance variables.
  <li>Not declaring instance variables to be <b>private</b>.
  <li>Not specifying correct initializations for the instance variables.
      Those variables receiving values in the constructor should use
         default intialization;
      the other variables should be initialized explicitly.
  </ul>
Again, see my code for what I consider a correct solution.
<p>
For Question #3, most answers had something reasonably generic to say, but
  few expressed things as I wanted them.
This shows that students are either a bit confused about what is
  happening during object construction or just don't quite know how
  to use the technical terms necessary to describe this process (or both).
It isn't enough to say "The <b>new</b> operator constructs the object and
  the constructor finishes the construction."
While "correct", this answer doesn't explain in detail what happens during
  construction (instance variables are declared, initialized by <b>new</b>,
  and sometimes reinitialized from parameters storing values supplied by 
  arguments to the constructor, after the constructor checks their values for
  "reasonableness").
Again, see my complete answer.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #17: 5/21/12<br>
  Program #4
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Program #4.
The class average was about 36 (or about 75%) and median grade was about
  38 (or about 79%).
<p>
After I return your graded work in class on Monday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an programming score of 36.5 is recorded as 37).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student programs: it makes my
  office messier, and you don't get the benefit of the feedback I wrote.
<p>
<ul>
  <li><b>Collatz</b>: Almost everyone got the program working correctly.
      If there were problems, they mostly related to not using a correct
        constructor for <b>BigInteger</b>; a few students prompted only
        for an <b>int</b> not a <b>BigInteger</b> (there were a few
        different ways to do this correctly).
      FYI, there is a <b>static</b> method named <b>valueOf</b> that
        also constructs and returns a <b>BigInteger</b>.
      It takes a bit longer to run, but ensures no duplication of objects
        from this immutable class: so, <b>BigInteger.valueOf(3)</b> can be used
        in place of <b>new BigInteger("3")</b> and vice-versa.
      I would stil recommend using the contructor.
  <p>
  <li><b>DiceWar</b>: Most students got most parts correct, but there were
        very many small erors.
      Beside correctness issues, I did take a point off for each of the
        following:
        (a) not constructing a <b>DiceEnsemble</b> for each player,
        (b) not calling <b>getRollCount</b> to help compute some
              statistic (using an extra counter for that job), and
        (c) declaring no variables in local blocks inside the <b>main</b>
              method: you should work on declaring variables in the
              most restricted scope that you can..
  <p>
  <li><b>PhoneDatabase</b>: This program caused the most problems.
      Some students did not use case-insenstive comparisons: e.g., 
        <b>equalsIgnoreCase</b>.
      Many students did not call <b>nextToken</b> in pairs; the result
        was that if you looked up a "telephone" number, the program
        would print the name of the next person in the <b>String</b>
        (not the previous person, who actually had that phone number).
  <p>
  <li><b>ICD</b>: Many students didn't finish this code in  this long
        assignment: long in both in what you had to do and in how long you
        were given.
      Possibly I should have made the first two parts due in one week and
        the second two due the second week to keep students on schedule.
      Many students did not know how to terminate the program if a bad
        configuration file was encountered (a big <b>try/catch</b> around
        all the code, including a nested <b>try/catch</b> for reading the
        input file if the configuration succeeded).
      Some students hard-wired in various pieces of information instead
        of reading them from the configuration file.
      Finally, some students did not compute the zero-crossing count
        correctly: two ways to do this appeared in the simplification
        lecture.
</ul>
Please always run my executable and compare it to your program's
  behavior and output for various inputs.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #16: 5/21/12<br>
  In-Lab Programming Exam #2
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) In-Lab Programming Exam #2.
The class average was about 36 (or about 71%) and the median was higher, about
  38 (or about 76%); the last time I taught thisl class the average was about
  32 (or about 63%) and the median about 34 (or about 68%).
Because the average was below 75%, everyone has been automatically awarded
  about 2 extra points (whose result is reflected in the % and grade columns
  on the spreadsheet).
So, if your actual grade was 35 (70%), your normalized grade is about 41 (82%).
After normalization, about 35% of the students scored an A; another 15% scored
  a B (so 50% passed at the B or above level).
I have posted a download with everyone's submitted programs, so you can
  download your work and better interpret my gradesheets, which I will return
  in class on Monday.
<p>
A good metric for your midterm performance is the average of the midterm 
  written exam and your first two in-class programming exams (with
  normalization points added).
The average for all students in the class on these in-class testing instruments
  is about 76% and the median is about 79%.
If we switch to discussing midterm grades (including these instruments as well
  as quizzes and programming assignments), the average for all students in the
  class is 81% (and the median is 84%).
Your overall grade at this time is the best estimator of your final grade.
<p>
Finally, recall that I said that typically final grade distribution in this
  class is 25% As, 25% Bs, 25% Cs, and   25% Ds and Fs.
At present, students are doing a bit better than that, with 30% As, 24% Bs,
  26% Cs, and 20% Ds and Fs.
<p>
Note that as I promised, I have updated the grade files so that the column that
  adds up the Programming Exams (Sigma PE) uses the highest score from In-Lab
  Programming Exam #1 and #2 for Exam #1.
<p>
In the <b>DiceEnsemble</b> problem students needed to (a) check for and throw
  the exception with a good message, (b) declare/initialize some variables,
  including the dice ensembles and counters, (c) loop through the number
  of rolls indicated by <b>toRoll</b>, (c) change the state of the dice 
  variables by rolling them once in the loop and then, (d) check the pip 
  sums to decide which counter to increment (if any), and finally (e) return
  the win/lose ratio as a <b>double</b> via casting.
<p>
In the <b>StringTokenizer</b> problem students needed to (a) construct the
  string tokenizer from the <b>words</b> parameter, (b) include a special check
  for <b>no tokens</b>, (c) get and store the first token (if there were any)
  and initialize the answer string, (d) loop through all the other tokens by
  (e) storing each new token into a variable local to the loop, (f) checking
  how it compared with the first token,(g) catenating it to the answer if it
  was greater, (h) maintining correct spacing in the answer, and (i) returning
  the catenated answer.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #15: 5/16/12<br>
  Quiz #6
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Quiz #6.
The class average was about 16 (or about 63%); the median was about 17
  (or about 68%).
I'll remind everyone that because the average was below 75%, students will
  receive about 3 normalization points to bring the class average to 75%
  (these points are not given to students individually -your score is still
  your score- but are added to the totals of every student when computing their
  grade); it is effectively as if you scored about 4 more points on this quiz.
Look at your returned work carefully; if your score was below 20 (most were)
  you might want to review this quiz with me or a TA.
Material similar to this will be on the first written exam.
<p>
After I return your graded work in class on Wednesday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an exam score of 22.5 is recorded as 23).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student exams: it makes my office
  messier, and you don't get the benefit of the feedback I wrote on the quiz.
<p>
Here were some common mistakes:
<ul>
  <li>Problem 1: Most students got full or close to full credit here.
      I was looking for a correctly written header and body.
      Some students called <b>Math.min</b> others used multiple
        <b>if</b> statements.
      I took for for solutions that seemed overly complex (declaring
        extra/unneeded variables).

  <p>
  <li>Problem 2: Scores here were a bit more spread out.
      Students needed to write a loop that counted the primes,
        calling the <b>Utility.isPrime</b> method using the correct
        syntax; a suprising number of students omitted <b>Utility.</b>

  <p>
  <li>Problem 3: Most students had the right idea here, but there was some
        confusion on what were parameters and local variables.
      Also, some students didn't put the initial values for variables in
        boxes.
      Many students write a loop bounds check like <b>i<=5</b> but did
        not show <b>i</b> going to <b>6</b> to make this continuation test
        <b>false</b>.

  <p>
  <li>Problem 4: There was a big split among students on this problem: many
        received very many and others received very few points; there were not
        many students in the middle.
      Many students wrote code only, and didn't indicate parameter and local
        variables, or arguments.
      I did not grade the part about which variables could be declared
       <b>final</b>; in my solution all the parameters could be final
       (none was assigned a new value, although the <b>DiceEnsemble</b>
       parameters had the state of their objects changed) but none of the
       local variables could (since they were all incremented various times).
  
  <p>
  <li>Problem 5: A lot like Problem #4, with a big split among students.
      I graded this problem "lightly" relating to construction two
        <b>StringTokenizer</b>s, checking/throwing the exception correctly
        based on <b>.countTokens</b>, declaring a variable to contain the
        result, iterating though the <b>StringTokenizer</b>s, updating the
        variable (including spaced between tokens) and returning th result.
      I did not take off points for incorrect placement of spaces, but see
        my solution for one way to do this correctly; there are many others.  
   </ul>
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #14: 5/14/12<br>
  In-Lab Written Exam #1
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) In-Lab Written Exam #1.
The class average was about 65% (the median was 65%); the last time I taught
  this class the average was about 68% (the median was 69%).
Becuase the average was below 75%, everyone has been automatically awarded
  about 10 extra points (whose result is reflected in the % and grade columns
  on the spreadsheet).
So, if your actual grade was 75, your normalized grade is about 85.
Look at your returned work carefully; if your score was below 60 (after
  normalization, a C), you might want to review this exam with me or the TA.
<p>
Recall that the exam was 105 points out of 100, so you could have skipped
  any small question (or lost partial credit on any large one) and still
  scored 100% on the exam.
The highest score was in fact 100.
See the <b>Exams</b> tab in the spreadsheet for a histogram of the scores 
  (before normalization).
After normalization, about 26% of the students scored 90% or above; about
   41% score 80% or above.
Generally, students scored well on problems 1-6, but performance dropped
  off after that: the code synthesis problems were at the end of the exam.
<p>
Please look at this instrument's grade as part of the entire grade in the
  course; especially look at your percentage on the midterm exam and
  first two in-class programming exam (when we have the second).
<p>
After I return your graded work on Monday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering about 2,000
  grades for students in my course this semester, so even if I'm 99% accurate,
  I'll incorrectly compute/record 20 grades).
Note that all grades are recorded as integral values: I always round up
  (e.g., an exam score of 68.5 is recorded as 69).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student exams: it makes my office
  messier, and you don't get the benefit of the feedback I wrote on the exam.
<p>
Here were some common mistakes:
<ul>
  <li>Problem 1: Twelved students (11%) solved this problem perfectly; the
        average was 70%.
      The most common mistakes were:
      <b>int</b> as a literal instead of a keyword (it is just an identifier
         that is a keyword); not treating things like "Prompt.forInt"
         as identifiers and seperators; not recognizing comments correctly
         (the first comment stops at <b>*/</b>) or <b>String</b> literals as
         one token, not recognizing <b>-1</b> as an operator followed by a
         literal.

  <p>
  <li>Problem 2: No students solved this problem perfectly; the
        average was 60%.
      Most students made a small number of mistakes here:
        specifying a wrong return type (or no return type) or parameter type
        (or having the wrong number of types in the parentheses).
      A few students had no idea what I was asking for and tried writing code
        for these operations.

  <p>
  <li>Problem 3: Eighteen students (16%) solved this problem perfectly;
        the average was 66%.
      Most students still had a few mistakes here. Common ones
        include: writing <b>double</b> for methods (that occurs only in the
        prototype); redundant parentheses or omitted (necessary) parentheses
        (especial in the product for denominator); writing <b>2/5</b> (integer
        division truncates); forgetting <b>*</b> operators.
      A good number of students solved part <b>3</b> correctly.

  <p>
  <li>Problem 4: Forty-two students (37%) solved this problem perfectly; the
        average was 82%.
      <p>
      Most students scored highly on this problem.
      Too many students still did not indicate that all literals and variables
        are considered Java expressions.
      Some students did not show all subexpressions (especially the unary
        <b>-</b> operator) or the method calls.
      Some students evaluated the the <b>+</b> before the <b>*</b> (others
        put one oval around this subexpression which contains two operators. 
      Other students did not oval the first <b>&&</b> (and its operands),
        which becomes the left operand of the second <b>&&</b>.

  <p>
  <li>Problem 5: Forty-four students (39%) solved this problem perfectly;
        the average was 71%.
      A big improvment over the quizzes, but a few students still do not
        seem to understand the interaction between looping, the
        <b>try/catch</b> statement, and exceptions thrown by the file I/O
        class methods.

  <p>
  <li>Problem 6: Only two students (2%) solved this problem perfectly
        (Kevin Pham and Samantha Helstrom); the average was 70%.
      Problem 6a: Mediocre scores here.
      Most students are still having problems doing this correctly, especially
        regarding <b>if</b> statements.
      This task should be straightforward if you understand statements (and
        is analogous to oval diagrams for expressions, which students did much
        better on).
      <p>
      Problem 6b: Generally students did better on this part (and better
        than on the quiz), both in form and content.
      This problem with long, with lots of input, but most students
        seemed to make good progress even if they did not finish it correctly:
        some students terminate the loop too soon, but even more students
        did not terminate the loop at the right time, reading the data all the
        way until the sentinel.

  <p>
  <li>Problem 7: Only four students (4%) solved this problem perfectly
        (Andrew Angeles, Yun Chen, Gevorg Hovakimyan, and Eric Whitescarver);
        the average was 62%.
      Generally students still did poorly on this part (not much better
        than on the quiz).
      There are still too many students who don't know the material: they
        indicated constructors at the top (as in the quiz), but not in this
        form of the class.
      Here I wrote the fields first - another common way of writing classes.
      <p>
      Most students still did poorly on part b, although the problems were very
        similar to those on the quiz.
      Too many student did not correctly write all parts of the constructor,
        and in later parts they did not use this variable when referring to
        the constructed object.
      I was surprised that many students did not know how to declare and
        initialize this reference variable, which typically follow the form
        <b>class-name variable = new class-name(initializations)</b>; this
        confusion got wors in problems 9 and 10, which also required
        constructors.
      And, there is still lots of confusion about what to write, especially the
        use of variables refering to objects for non-<b>static</b> methods
        and the use of the class name in <b>static</b> methods.

  <p>
  <li>Problem 8: Seveenteen students (15%) solved this problem perfectly; the
        average was 68%.
      This problem used no classes.
      The first loop was optimally a <b>do</b> loop although many students
        are still using <b>for(;;)</b> loops and <b>if/break</b>: note that
        the variable used <b>after</b> the loop <b>CANNOT</b> be declared
        inside the loop.
      The biggest mistake in the second loop was not updating the state of
        the variable storing the number: the code needed to include something
        like <b>number = number/10;</b> or just <b>number /= 10;</b>;
        it also needed an counter variable that was incremented the correct
        number of times (some students incremented one too few or too many
        times.

  <p>
  <li>Problem 9: Six students (5%) solved this problem perfectly; the
        average was 47%.
      Many students got a close answer (missing a variety of small things),
        while other had major conceptual problems.
      To get full credit you needed to construct a <b>DiceEnsemble</b> (which
        very many students did not do), have a simple (counting) and correctly
        terminating loop -ensuring that you rolled the dice the correct number
        of times, correctly calling the <b>.roll</b> and <b>.getPipSum</b>
        methods (using the constructed object), and computed and printed the
        right value.

  <p>
  <li>Problem 10: Seven students (6%) solved this problem perfectly; the
        average was 45% (the lowest on the exam).
      Many students got a close answer (missing a variety of small things),
        while others had major conceptual problems.
      To get full credit you needed to construct a <b>StringTokenizer</b>,
        have a simple (<b>while (...hasMoreTokens())</b>) correctly terminating
        loop, get/store the next token and perform the right test on it
        (<b>.compareTo</b> with <b>maxSoFar</b>), and update <b>maxSoFar</b>
        when indicated with the stored token, and print it after the loop.

  <p>
  <li>Problem 11: Ten students (9%) solved this problem perfectly; the
        average was 46%.
      Of those students who answered the first part, most did not know what
        DeMorgan's law was (but I awarded 1 point for filling in the left-hand
        side of the table correctly according to what boolean expressions you 
        would write).
      There was some confusion about what I wanted on the second part,
        which involved writing a <b>for(;;)</b> loop with an <b>if/break</b>
        whose test was the negated version of the continuation test given
        in the loop.
  </ul>
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #13: 5/9/12<br>
  Quiz #5
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Quiz #5.
The class average was about 14 (or about 58%); the median was about 14
  (or about 56%); the last time I taught this class the average was about
  14 (or about 57%); the median was about 13 (or about 52%).
I'll remind everyone that because the average was below 75%, students will
  receive about 4 normalization points to bring the class average to 75%
  (these points are not given to students individually -your score is still
  your score- but are added to the totals of every student when computing their
  grade); it is effectively as if you scored about 4 more points on this quiz.
Look at your returned work carefully; if your score was below 20 (most were)
  you might want to review this quiz with me or a TA.
Material similar to this will be on the first written exam.
<p>
After I return your graded work in class on Wednesday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an exam score of 22.5 is recorded as 23).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student exams: it makes my office
  messier, and you don't get the benefit of the feedback I wrote on the quiz.
<p>
Here were some common mistakes:
<ul>
  <li>Problem 1: Most students got full or close to full credit here.
      Some pictures did not show correct references; others showed two
        declared variables with the same name; a few had arrows whose
        tails were not INSIDE the center of the box, or arrows that had
        no heads.
      Remember, arrows point at ovals, NOT at other variable boxes
        (e.g., what does <b>s2 = s1</b> do?).
      Note that the <b>compareTo</b> method returns an <b>int</b> not a 
        <b>boolean</b>: I wasn't looking for an exact number, but just
        and indication of whether the values was &lt;0, =0, or &gt;0.

  <p>
  <li>Problem 2: There were some totally correct or close to correct
        solutions, but the ones that were not were often very wrong.
      The semantics of the methods in the <b>StringTokenizer</b> class
        take some getting used to (which I hope you will, in this quiz
        and in Programming Assignment #4).
      Points were given for the construction a <b>StringTokenizer</b>,
        writing a loop, terminating the loop when there were no more tokens,
        getting a token and checking to see if it was <b>.equals(word)</b>,
        printing the previous value and <b>break</b>ing, and updating
        the <b>previous</b> value if the loop continues.

  <p>
  <li>Problem 3a: Very poor performance.
      There are simple rules that you can use to answer these questions,
        but most students seemed very confused and did not know which rules
        to apply.
      I discussed these in class. You can look at my solutions online.
      If you have questions, please ask them in class, or post information
        on the appropriate forum.

  <p>
  <li>Problem 3b: Much like 3a only worse.
      These questions were harder because they
        asked you to synthesize, not just analyze code (but really you were
        analyzing access modifiers).
      You need to understand the rules for understanding access modifiers
        to effective use classes that are in libraries (like mine and Java's).
      Again, I suggest that you look at my solutions online.
  </ul>
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #12: 5/7/12<br>
  Program #3
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Program #3.
The class average was about 40 (or about 89%) and median grade was about
  43 (or about 96%); the last time I taught this class the average was about
  40 (or about 90%) and median grade was about 42 (or about 93%).
<p>
After I return your graded work in class on Monday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an programming score of 36.5 is recorded as 37).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student programs: it makes my
  office messier, and you don't get the benefit of the feedback I wrote.
<p>
Besides a few students submitting programs that weren't immediately
  runnable (because the class name did not match the file name or because
  they put their code in a package, each a 1 point deduction), the typical
  mistakes were
<ul>
  <li>In Part 1, some students did not get the outer loop working
        correctly; some students forgot to reset <b>t</b>, <b>x</b>,
        and <b>y</b> back to 0 when retrying the next angle.
      It is important to be able to treat what used to be the entire
        program (computing the trajectory) as a part of a bigger program.
      We will learn another way to do this by writing methods soon.
  <p>
  <li>In Part 2, many students got everything completely correct.
      Some students had small differences in the answers, other
        students had larger differences (some just in the height).
      Some students had infinite loops.
  <p>
  <li>Part 3, caused more problem than the other parts.
      I got the impression some students didn't fully understand
        the form of the input files (nor run my executable on them).
      I used two other test files when grading.
      The first contained.
<pre><b>     1000 -100 250 500 1001 750 100 -1</b></pre>
      and the second
<pre><b>     100 90 -10 -10 -10 -10 90  -1</b></pre>
      Both follow the exact form of the other test files.
  <p>
  <li>In the style part, I took off 1 point for sometimes and 2 points
        for rarely.
  </ul>
Please always run my executable and compare it to your program's
  behavior and output for various inputs.
<p>
Finally, a few students forgot to use the form of <b>Prompt.forDouble</b>
  and <b>Prompt.forBoolean</b> that specified a default value.
Please check the Javadoc for this version is you did not use it correctly.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #11: 5/7/12<br>
  Programming Exam #1
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) In-Lab Programming Exam #1.
The class average was about 41 (or about 81%) and  the class median
  was about 46 (or about 92%).
The big difference in these numbers results from many students
  scoring high (half got 92% or above) and some students scoring
  very low (below 50%), dragging down the average but not the median.
The last time I taught this class the average was about 40 (or about 80%) and 
  the class median was about 45 (or about 90%).
<p>
After I return your graded work in class on Monday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an programming score of 36.5 is recorded as 37).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student programs: it makes my
  office messier, and you don't get the benefit of the feedback I wrote.
<p>
Generally, many students wrote correct programs (over half the class) but there
  wre lots deductions for Java use (again, at most 5 points/10% per student).
Common mistakes were not using the correct <b>Prompt</b> methods (or prompting
  inside the loop), not computing whether Player A won or not correctly with a
  random number, not always tracing points when appropriate, not using the
  "rules of tennis" criteria to correctly terminate loop/print winner:
  ignoring/misinterpretting the <b>must have 4 points</b> rule or the
  <b>must be at least two points more than your opponent</b> rule.
<p>
I took off up to 5 points at most for Java use.
There were about a dozen items in this category, typically 1-2 point per item.
The most frequent deductions were for ...
<ul>
  <li>...not declaring/initializing prompted-for variables in one statement
  <li>...not declaring/initializing variables in the loop, if they were used
           only in the loop
  <li>...declaring extra/duplicate/unneeded variables
  <li>...not using <b>if/else</b> when appropriate (often duplicating tests)
  <li>...using <b>else</b> after <b>if</b> with a <b>break</b> when true
  <li>...using nested <b>ifs</b> instead of the <b>&&</b> operator in one
           <b>if</b>
  <li>...using <b>== true</b> or <b>!= false</b>, etc.
  <li>...poor use of locality: few blank lines separating grouped code
</ul>
<b>Important</b>: I will mentioned in class, students who score better on the
  second In-Lab Exam will have that score count for both In-Lab #1 and #2.
So if you scored poorly because you didn't know what to expect, paniced, were
  sick, or for any other reason, you can wipe out that score by performing
  better on the next exam.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #10: 5/3/12<br>
  Quiz #4
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Quiz #4.
The class average was about 16 (or about 63%) and the median was about 16
  (or 64%); the last time I taught this class the average was about 16
  (or about 65%); the median was about 17 (or 68%).
Look at your returned work carefully; if your score was below 20 (most were)
  you might want to review this quiz with me or a TA.
Material similar to this will be on the first written exam.
<p>
After I return your graded work in class on Wednesday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an exam score of 22.5 is recorded as 23).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student exams: it makes my office
  messier, and you don't get the benefit of the feedback I wrote on the quiz.
<p>
Here were some common mistakes:
<ul>
  <li>Problem 1: Many students did much better on this problem than the
        equivalent one on the previoius quiz (although some did just as
        poorly and are still confused on exception handling, or just
        understanding Java code).
      Note that the value after one that raises the
        <b>NumberFormatException</b> is read and ignored.

  <p>
  <li>Problem 2: Student scores spanned a wide range.
      In part (a) I was looking for <b>do/while</b> loop (the body must be
        executed at least once) that negated the termination condition in its
        continuation condition.
      This was the most natural translation.
      Some students wrote loops that were not equivalent in execution
        to the loop shown, or were more complicated, not less complicated.
      For part (b) I wanted comments about the if/break being first in the
         loop, last in the loop, and in-between other statements in the loop.
  <p>
  <li>Problem 3: Many students received full credit on this.
      Remember, the online notes are easily searchable; some students
        just guessed at the second/third part of this question instead
        of searching the notes.
      I wouldn't expect you to remember these terms just from reading the
        notes, but if you didn't read the notes there are other things you
        missed.
      Oh, and if you are going to directly quote the notes, instead of reading
        them and putting things in your own words (which I would prefer), then
        put quotes around what you wrote and cite the source.
  <p>
  <li>Problem 4: Most students received 1.5-2 points.
      Some didn't know what I meant by <b>conditional expression</b> and
        rewrote <b>if</b> statements (or a <b>while</b> loop!).
      Many did not put <b>currentValue = </b> in front of the conditional
        expression (and instead put these tokens twice into the conditional
        expression, twice).
      If you didn't use the right test (some used <b>=</b> instead of
        <b>==</b>) I deducted points.

  <p>
  <li>Problem 5: Students did well on this open question, but few received
        full credit.
      I wanted some discussion of <b>observing variables</b> and <b>executing
        code</b> with the single statement stepper or conditional/unconditional
        breakpoints.
      I wanted all four of these terms mentioned for full credit.
         
  <p>
  <li>Problem 6: Most students had a good idea of what I wanted here.
      The first column represents the possible values for <b>traceInDetail</b>
        while the second and third column were the expressions to be proven
        identical (that confused some students, because the first and second
        columns were identical).
      Because these expressions are equivalent, the last two columns should
        list the same values.
      In the final part, I just wanted you to negate <b>traceInDetail</b>,
        not using the literals <b>true</b> or <b>false</b>
        
  <p>
  <li>Problem 7: Few student got this problem completely correct; I admit it is
         a strange problem.
      It is possible to use the initialization, testing, and increment part of
        the general <b>for</b> loop.
      Mainly I wanted a general <b>for</b> loop with an initialization, 
         test, and update; and I wanted a negated/simplified version of the
         test in the <b>if/break</b>.
      Note that we cannot declare <b>int c = 0</b> in the parentheses because
        then that variable can be used only in the loop body (see the next
        problem) and therefore not printed after the loop terminates.
      Also, the termination condition in the <b>if</b> needed to be negated to
        a continuation condition, and I wanted you to use DeMorgan's laws
        to change <b>||</b> to <b>&&</b> as well as correctly negate the
        relational operators: some students negated <b>x &gt; 0</b> to 
        <b>x &lt; 0</b> when it should have been negated to <b>x &lt;= 0</b>.

  <p>
  <li>Problem 8: This problem caused lots of grading issues because students
        seemed not to have a good idea of what I was looking for.
      In (a) I wanted you to talk about an empty expression statement and an
        infinite loop.
      In (b) I wanted you to talk about an empty expression statement and
        a variable (<b>i</b>) not existing (not declard) in the block
        following the <b>for</b> loop (the scope of the variable declaration
        was ended after the loop ended).
      In (c) I wanted you to talk about how using the "right" control structure
        (the <b>for</b> loop is the right one) might allow the Java compiler to
        help you debug strange problems by detecting and reporting a compiler
        error instead of a runtime error.
      You had to be very explicit in your answer to get over full credit.
      Many students lost 2 points here.
  </ul>
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #9: 4/30/12<br>
  Program #2
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Program #2.
The class average was about 40 (or about 90%) and the median was about 43 (or
   96%); the last time I taught this class the average was about 42 (or about
   93%); the median was about 43 (or 96%).
<p>
After I return your graded work in class on Monday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an programming score of 36.5 is recorded as 37).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student programs: it makes my
  office messier, and you don't get the benefit of the feedback I wrote.
<p>
Besides a few students submitting programs that weren't immediately
  runnable (because the class name did not match the file name or because
  they put their code in a package, or incorrectly commented-out some line,
  each a 1 point deduction), the common mistakes were
<ul>
  <li>In Part 1, some students generated random numbers in an incorrect
        range; others forgot to multiply the ratio by 4; some students did
        not cast the <b>int</b>s to <b>double</b>s or hand other calculation
        errors, others did not repreated prompt for a positive number; many
        students did not follow directions and left in statements that printed
        information.
  <p>
  <li>In Part 2, some students wrote code incorrectly for the case where
        the sentinel was the first value (or didn't comment-out the
        print statements, but instead removed them); many
        students did not follow directions and left in statements that printed.
      Some students computed statistics wrong or neglected to compute them.
  <p>
  <li>In Part 3, some students did not trace outputs in the form of
        my executable; while it is possible to compute the door to expose
        without using a loop with random numbers, I wanted you to get more
        experience writing loops. 
      Other students computed a 50%/50% win ratio, instead of the 66%/33%
        switch vs. stay ratio, so their logic was somehow wrong.
  </ul>
Please always run my executable and compare it to your program's
  behavior and output for various inputs.
<p>
Finally, some students declared "counter" variables to be <b>double</b>
  instead of <b>int</b> and some required two <b>Prompt.forInt</b> calls in
  their loops (for getting a positive value) when one sufficed with the "right"
  kind of loop.
<p>
Note the back page: we did not deduct points for style, but we indicated where
  you need help.
We will grade on style (deducting points) for Programming Assignment #3.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #8: 4/30/12<br>
  Upcoming Programming Exam
</b></td>
<td width ="80%">
We will have our first (of four) <b>in-class programming exam</b> on Thursday,
  May 3, in <b>Lab</b>.
You will be asked to login on and use one of the lab computers (not your own!),
  start Eclipse (setting up the <b>introlib.jar</b> file), and work on a
  project folder that you will download.
I will supply a written description of what your program should do, along
  with a few examples of input and output, and some iterative enhancements.
The program will involve declaration statements, expressions statements
  (including input and output), and <b>if</b> and looping statements (but
   not <b>try/catch</b> and not classes).
<p>
The program is worth 50 points and you will have approximately 90 minutes to
  work on it.
The program will require about a two dozen lines of code.
Some students will finish, some will not.
I will award partial credit for partially working programs.
This is a closed notes/book/internet exam; you will have access
  to Javadoc for the Introlib and Java classes.
</td>
</tbody>
</table>


<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #7: 4/25/12<br>
  Quiz #3
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Quiz #3.
The class average was about 18 (or about 70%); the median was about 18 (or
  about 72%); the last time I taught this class the class average was about 17
  (or about 68%); the median was about 19 (or about 72%).
Look at your returned work carefully; if your score was below 20 (most were)
  you might want to review this quiz with me or a TA.
Material similar to this will be on the first written exam.
<p>
After I return your graded work in class on Wednesday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an exam score of 22.5 is recorded as 23).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student exams: it makes my office
  messier, and you don't get the benefit of the feedback I wrote on the quiz.
<p>
Here were some common mistakes:
<ul>
  <li>Problem 1: Most students did well on this problem.
      The most "missed" statement was the declaration statement.
      Other students listed two or three different kinds of <b>if</b>
        statements separately (there is just one EBNF rule for ifs).
      Some students put * after every statement or after no statements;
        other students did not put a * after blocks (which are the
        simplest form of control structure) or breaks (which technically
        are a control structure -they affect what statement is executed
        next, but different than the other control structures because
        we don't see <b>statement</b> mentioned in their EBNF).

  <p>
  <li>Problem 2: Few students got full credit on this problem.
      Part 1 had no state-change operator evaluated last (or at all).
      Part 2 incremented <b>y</b> to 4, and then stored that value into
        <b>x</b> as well.
      Part 3 had an illegal operand for a state change operator.
      Part 4 incremented <b>x</b>, but then the <b>=</b> operator took
        <b>x</b>'s <b>old</b>value (it is a postfix <b>++</b>) and stored it
        back into <b>x</b>; so, the expression statement <b>x++;</b> or
        <b>++x;</b> increments <b>x</b>; for that matter even
        <b>x = ++x;</b> works (although it is overly complex), but NOT
        <b>x = x++;</b>.
      In Part 5, many students got full credit, although this expression
        statement is complicated, it is syntactically correct.

  <p>
  <li>Problem 3: Most students missed at least one part of this problem.
      Most got part (a) correct.
      Many got tricked by part (b): any method call is a legal expression
        statement, even if it returns a value that is not stored or printed
        somewhere (unlike operators, where the last operator must be a
        state-change operator).
      This is certainly strange, but this is what Java allows, and can be
        useful: by putting a
        <b>Prompt.forString("Press enter to continue");</b> statement in a
        program, Java executes it by displaying the message, waiting for
        the user to press <b>enter</b> and it discards whatever text the
        user entered before pressing <b>enter</b>: so its net effect is
        pausing the program until the user says "go ahead and execute the
        rest".
      Part (c) is the standard story about <b>void</b> methods; to get
        full credit on this part you should have used the word <b>void</b>.

  <p>
  <li>Problem 4: Many students got 4-5 points for writing this code.
      There were VERY VERY many different ways to write this code correctly.
      Common problems were failure to print the extreme values (1 and 100);
        failure to put spaces between values; failure to increment (in any
        form) the counting variable; failure to go to the next line after
        printing multiples of 10s (some students don't know the semantics of
        the <b>System.out.println</b> method); printing some values twice.

  <p>
  <li>Problem 5: Generally syntax errors are considered better to have,
        as the Java compiler points them out to us for fixing; for execution
        errors, we get no such help.
         
  <p>
  <li>Problem 6: On part a, very few students got full credit: there were lots
        of different errors so compare your solution to mine if you did not
        get this one perfect.
      On part b, more students got full credit, but still not a lot: some did 
        not write <b>compact</b> trace tables; others forgot to show the prompt
        or the input that followed it -in the <b>Console</b> column; others
        just performed the hand simulation incorrectly.
      The algorithm implemented called "Russian Peasants Multiplication":
        for any two values for <b>x</b> and <b>y</b>, the result is the
        product of these two numbers (using doubling, halving, and adding:
        you don't need to know any "multiplication tables").
  <p>
  <li>Problem 7: Mostly a disaster. Some students got it completely correct,
        but most had no idea what to do: a loop with a <b>try/catch</b> that
        printed lots of interesting things.
      If you didn't get this correct, figure out exactly why, to the point
        that you could solve other similar problems that might appear on
        later testing instruments (hint hint).
  </ul>
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #6: 4/23/12<br>
  Program #1
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Program #1.
The class average was about 43 (or about 96%) and the median was about 44 (or
  about 98%); the last time I taught this class the average and median were
  both about 44 (or about 98%).
<p>
After I return your graded work in class on Monday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an programming score of 36.5 is recorded as 37).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student programs: it makes my
  office messier, and you don't get the benefit of the feedback I wrote.
<p>
First, a few students submitted programs that weren't immediately runnable.
In a few cases, the class name did not match the file name; in others it looked
  like students changed something at the last minute (like a comment or brace)
 and didn't check that the program was still runable.
This was just a 1 point deduction this time, but it will increase in later
  programs.
<ul>
  <li>In <b>EscapeVelocity</b> a few students prompting for the mass and
        gravity in the wrong order (or prompted for the gravitational constant,
        which should be a variable that is intialized by that value without
        prompting the user: it is always the same); please make sure your
        program's behavior matches my executable.
  <p>
  <li>In <b>ExpressionTest</b>, while some students had incorrect expressions
        (each was a 1 point deduction), many students had expressions
        with redundant parentheses (each pair was a .5 deduction).
      A few students wrote .../2*a which is incorrect, but because the
        test had a = 1, students did not detected this as an error.
  <p>
  <li>In <b>ChangeMaker</b>, some programs computed wrong results: either the
        coins did not add up to the required amount, or the change was not the
        minimum amount of coins (e.g., returning 15 cents as 3 nickels instead
        of a dime and nickel). 
  <p>
  <li>In <b>PizzaPricer</b>
  <ol>
  <li>Some students did not declare the right <b>types</b> for the different
        variables (<b>int</b> vs. <b>double</b>), or did not prompt using
        the correct method (relying on Java to implicitly convert the value).
  <p>
  <li>A few students computed the cost/person incorrectly; some printed the
        the price as $ per sequare inch instead of cents per square inch.
  <p>
  <li>Many students declared the <b>diameter</b> as an <b>int</b>, as they 
        should have, but then wrote <b>diameter/2</b> which truncates the
        result for an odd size diameter.
      See the bottom of the required grade sheet for ways to have avoided
        this problem: my favorite is explicit casting.
  </ol>
  </ul>
<b>
Please remember to run my executable, on various inputs, and compare its
   results to your program's behavior and output.
Many students would have been alerted to errors in their programs by doing so,
  and most of the errors would have been fairly easy to fix, once they were
  identified as errors.
The input/output (prompting and printing) of the executable's behavior and your
  program's behavior should match.
</b>
</td>
</tbody>
</table>

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #5: 4/18/12<br>
  Quiz #2
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Quiz #2.
The class average was about 17 (or about 67%); the mean was also about
  17 (or about 68%); the last time I taught this class the average and
  mean were exactly the same.
Because the average was below 75%, students will receive about 2 normalization
  points to bring the class average to 75% (these points are not given to 
  students individually -your entered score is still what is on your returned
  quiz- but all the normalization points are added to the totals of every
  student when computing their grade); it is effectively as if you scored about
  2 more points on this quiz (about 8% points).
Look at your returned work carefully; if your score was below 20 (most were)
  you might want to review this quiz with me or a TA.
Material similar to this will be on the first written exam.
<p>
After I return your graded work in class on Wednesday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an exam score of 22.5 is recorded as 23).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student exams: it makes my office
  messier, and you don't get the benefit of the feedback I wrote on the quiz.
<p>
Here were some common mistakes:
<ul>
  <p>
  <li>Problem 1: Part 1's syntax was legal, but initializes only one variable;
        in real code, the other might be set later in an expression statement.
      Many students said it was illegal because it didn't initialize
        <b>x</b>; fewer showed <b>x</b> being initialzed by <b>3</b>.
      Both are wrong.
      Please note the correct terminology (which many students did not get
        correct): this declaration <b>declares</b> the variables <b>x</b> and
        <b>x</b> but <b>initializes</b> only <b>y</b>.
      Part 2 was illegal because it tried to use a <b>double</b> to initialize
        an <b>int</b> variable (there is no implicit conversion this way).
      Part 3, both declarations are legal; the second stored <b>3</b> into
        <b>y</b> (declared in first declaration) and then it was implicitly
        converted into <b>3.</b> and stored into the newly declared
        <b>double</b> variable <b>x</b>.
      The declarator for <b>x</b> included the expression <b>y=3</b>.

  <p>
  <li>Problem 2: Some students didn't know the form in which to write
        prototypes; some did not correctly determine the return type or the 
        type of (one or more of its) operands; many wrote too few operands;
        a few students tried writing code to perform the calculations, which is
        unnecessary in a prototype.
      Students generally did badly on this synthesis task: you need to be able
        to determine the prototype of a function from its description.

  <p>
  <li>Problem 3: 
        Part 1: Many student got this part completely correct: you needed to
          refer to the word prototype and actually write two operators, one
          overloaded and one not (some students just said something like
          "logical operators" but I wanted you to show the symbol for one).
        Part 2: I really wanted an answer that was general for all state-change
          operators (saying that some operand must be the name of a variable)
          but I gave full credit even if you just wrote about the <b>=</b>
          state change operator and referred to the "first operand": note that
          the <b>++</b> operator has just one operand.
        Part 3: Here too I wanted a general answer.
          But here, if you wrote about just the <b>=</b> operator (specifying
            how the state of the variable changed and what the result of the
            expression was) I deducted .5 points.
   
  <p>
  <li>Problem 4: Lots of small problems here (especially related to implicit
        conversion and casting, and writing values of the correct type).
      Probably the most missed parts were <b>e</b>, <b>g</b>, <b>i</b>,
         and <b>j</b> (including writing <b>611</b> vs. the right answer
         <b>"611"</b>.
      Ensure you know the difference between <b>e</b> and <b>f</b>.
      See my solutions; if you still don't understand them, see me.
         
  <p>
  <li>Problem 5: Many students didn't fully circle or label literals; some
        didn't fully circle or label variables.
      Many students didn't correctly circle the negate unary operator
        <b>and</b> its literal subexpression.
      Some students applied the <b>+</b> operator before the <b>*</b>
        operator (ignoring operator precedence).
      Some students didn't circle the <b>y - 2</b> expression or circled it
        but not its subexpressions: <b>y</b> and <b>2</b>.
      In a few cases, types/values were missing or mislabelled/miscalculated.
         
  <p>
  <li>Problem 6: A huge number of students wrote 5/9*... which results in
        0 (then converted to the double 0.; same for 3/2 in a later part:
        write it as 3./2. or more simply as just 1.5).
      Many students forget to parenthesize denominators that involved
        multiplication: .../(2*(A+B))
      Many students used redundant parentheses: when removed, the expression's
        operators were still evaluated in the same order.
      Many students either left part <b>e</b> blank or used <b>=</b> (instead
        of <b>==</b>) operators or wrote just <b>x+y+z==10</b>, not stating
        the condition for these values being in increasing order, or wrote it
        as <b>x < y < z</b> which uses incorrect Java syntax to express this
        condition (as we discssed in class).
  </ul>
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #4: 4/15/12<br>
  Program #0
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Program #0.
The class average was a bit below 21 (or about 103%); the median was about 21
  (or about 105%); the class average the last time I taught this class was a
  bit above 20 (or about 102%); the median was about 21 (or about 105%)
There were a few students who scored much lower because of forgetting to turn 
 in or completely fill out their questionnaire, or one of the programs; if you
  lost a large number of points you should contact me an explain what happened.
<p>
After I return your graded work in class on Monday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an programming score of 18.5 is recorded as 19).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student programs: it makes my
  office messier, and you don't get the benefit of the feedback I wrote.
<p>
The purpose of this assignment, besides the obvious -to get you acquainted
  with the tools we will use while programming in this course- is to also
  give you some opportunity to read and follow instructions (and ask questions
  if things seem confusing).
Here were some common mistakes (although I arranged the grading rubric so that
  most students could get close to 100%, especially if they turned in their
  work early):
<ul>
  <li>Some students did not fill in the second page of the questionnaire.
  <p>
  <li>Some students did not remove all the italicized comments from the
        questionnaire.
  <p>
  <li>Some students, in answer to the question "...how many scheduled office
        hours do I have each week" cut and paste my office hours, but did not
        supply the answer: 4.5 hours (or 3.5 if you discount the times I might
        not be there).
      Answer questions explicitly: if I asked a question about the history of
        the Suez Canal, supplying me a URL to Wikipedia doesn't really answer
        the question.
  <p>
  <li>Some students did not have a class name compatible with their file
        name, and so a project created from the file did not run immediately.
      Ensure any file name you submit, when put in a project file and loaded
        into Eclipse, compiles and runs.
  <p>
  <li>Some students corrected the spelling of "scceeded" to "succeeded".
      Please, if you think you see any mistakes in the assignment, ask me
        what to do.
      A few students did in this case, and I told them to keep the incorrect
        spelling.
      Programmers are often supplied what might appear to be weird
        specifications for the programs they are to write; it is up to them
        to understand these specifications, and question the specifier as to
        their intended and actual meanings.
      Please don't make assumptions about what you are suppose to do; this is
        a Mr. Lil moment.
      As a class member and part of the ICS-21 community, if you think you have
        spotted an error in an assignment, or something is just confusing,
        please contact me, perferably via the forum, so that I can correct or
        clarify the problem for everyone in the class.
  </ul>
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #3: 4/11/12<br>
  Quiz #1
</b></td>
<td width ="80%">
I have graded (and recorded the grades for) Quiz #1.
The class average was about 20 (or about 80%); the median was 21 (or about
  84%); the last time I taught this class the average was about 18 (or about
  74%); the median was 19 (or about 76%).
Look at your returned work carefully; if your score was below 20 (many were)
  you might want to review this quiz with me or the TA.
Material similar to this will be on the first written exam.
<p>
After I return your graded work in class on Wednesday, please download the 
  <b>Grades(zipped .xls file)</b> from the course web and ensure that I have
  computed and entered your grade correctly (I'll be entering thousands of
  grades for students in my course this quarter, so even if I'm 99% accurate,
  I'm likely to record some incorrect grades.
Note that all grades are recorded as integral values: I always round up
  (e.g., an exam score of 22.5 is recorded as 23).
<p>
If you do not pick up your returned work in class, you should pick it up during
  my office hours ASAP; I don't like keeping student exams: it makes my office
  messier, and you don't get the benefit of the feedback I wrote on the quiz.
<p>
Here were some common mistakes:
<ul>
  <li>Problem 1: Most students did will on this problem.
      Most students just copied this out of my notes, or paraphrased them:
          if you cut/pasted, you should have cited the notes.
      There will be few (if any) problems that allow this kind of "copying"
         later in the quarter.
      A few answer were a bit short, or addressed either computers or software
        but not both.
  <p> 
  <li>Problem 2: Again, most students did well.
      I think almost everyone got the percentages correct, but some
        students did not compute the coorect lifetime cost.
  <p>  
  <li>Problem 2: Again, most students did well.
      Some students didn't multiply 50 million by the right $/line of code from
        the table; others computed an incorrect answer from correct number.
      Note that the $21/line of code is what the build cost was.
  <p>
  <li>Problem 3: Many students either left out one or two lines needed in the
        syntax chart (some omitted it altogether) or incorrectly computed
        whether a few words were <b>Legal</b> or <b>Illegal</b> according the
        EBNF.
  <p>    
  <li>Problem 4: Some students got this completely correct while others had
        close sol;utions.
      Some had "useless rules" (e.g., comma <= ,) or minor or major bugs in
        their EBNF rules: <b>name-sequence <= name{, name} and name</b> was
        common, but that  doesn't allow just one <b>name</b>
      Some students wrote only the Right Hand Side of the rule, not the
        Left Hand Side nor "is defined as" arrow.
      There were a few students who specified a Right Hand Side without using
        <b>name</b>, some didn't include commas nor the word "and"; these
        students appear lost.
  <p>    
  <li>Problem 5: Some students did get this completely correct, while others
        had lots of small mistakes; most are covered in the "Common Errors"
        section in the Tokens lecture.
      Quite a few students specified <b>forInt</b> as two keywords or as
        a keyword followed by an identifier (it is one long identifier).
      A few others didn't tokenize <b>int</b>, <b>x</b>, or <b>=</b>
        (the first three tokens), tokenized <b>++</b> as two tokens (it is
        one big operator token), tokenized the white space appearing between
        tokens (white space isn't a token; it comes between tokens), tokenized
        <b>};</b> as one separator token (it is two), or finally, tokenized
        things "inside" comments (they are all part of one big comment token).
      Some students did not write the types of the literals.
  <p>
  <li>Problem 6: Few students got this completely correct.
        In part (a) some student didn't tokenize <b>"ans="</b> as one
          <b>String</b> literal, or didn't tokenize <b>+++</b> as the
          <b>++</b> token followed by the <b>+</b>token.
        In part (b) some student used their intuition (I think) instead of
          following the EBNF rules to determine their answer.
        In part (c) most students had the right idea about comments, but
          technicall they aren't "ignored" but are treated as white space. 
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #2: 4/2/12<br>
  Install Course Software
</b></td>
<td width ="80%">
  All students with computers should download and install Java (latest version
      is JDK 6 Update 31) and
    Eclipse (latest version is Eclipse 3.7.2 - named Indigo).
  Both these products are available for free.
  Students can download and install this software (and other useful material)
    from the web by exploring the
    <a href="../common/online.html" target="main">Online Resources</a>
    link (see <b>Course Software</b>, near the top of that page).
  <p>
  Specifically, read the handout on
    <a href="../common/handouts/javaeclipseinstallation.html">
    Java and Eclipse</a> (Download/Installation Instructions) for details.
  Please contact me if you are having trouble, as I will assume every has
    successfully downloaded and installed this software by the end of the
    first week of classes.
  If you have a portable machine, bring it to lab if you need help
    downloading or installing this software.
</td>
</tbody>
</table>

<hr align="left" width="33%">

<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>
  #1: 4/2/12<br>
  First Message
</b></td>
<td width ="80%">
  Welcome to ICS-21
  I am going to post and archive important messages about the class in this
    announcements web page: each entry will be numbered, dated, and labeled.
  The entries will appear in reverse chronological order.
  Whenever you follow the link to this page (and you should do so daily), scan
    its top for new announcements; scan downward for older announcements.
  This message will always appear at the bottom of this file. 
  <p>
  I will never remove a message from this page, although a subsequent message
    may "cancel" a previous one; in such a case, I'll refer to the number of a 
    canceled message in the message that cancels it.
  <p>
  Expect a few new messages to be posted here each week.
  <p>
  Check this page, along with the the course email discussions, daily.
</td>
</tbody>
</table>

<hr align="left">

</body>
</html>
