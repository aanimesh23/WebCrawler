<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay" />
<TITLE>ICS 31 Python Details</TITLE>
<META HTTP-EQUIV="COPYRIGHT" CONTENT="Copyright &#169; 2016 by David G. Kay.  All rights reserved." />
<link href="/~kay/courses/31/mainstyle.css" rel="stylesheet" type="text/css" />
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<P>
  ICS 31 • 
UC Irvine</P>
<P>
<FONT  SIZE=6><B>Python Details in ICS 31</B></FONT></P>
<P> This page lists the specific Python language features typically covered in ICS 31. These features might appear on the <a href="http://www.ics.uci.edu/~kay/courses/31/placement.html">ICS 31 Placement Exam</a>. The exam will emphasize concepts and how to apply them more than small syntactic details.</P>
<P><strong>Statements:</strong> assert, assignment</P>
<P><strong>Control structures:</strong> simple sequence, selection (if/elif/else), repetition (for, while; break, continue; n-and-a-half pattern with while loops), modularity (function definition, calling, return, parameter passing)</P>
<P><strong>Data types and structures:</strong> Single-valued (int, float, bool), multiple-valued (string, list, tuple, <a href="http://www.ics.uci.edu/~kay/courses/31/namedtuples.html">namedtuple</a>, file, dict, set). Combining data structures (2D tables [list of lists], lists containing namedtuples, namedtuples containing lists). <a href="http://www.ics.uci.edu/~kay/courses/31/PythonDataStructures.pdf">Summary table</a>.</P>
<P><strong>Operations, functions, and methods:</strong> Arithmetic (<code>+ – * / % //</code>), comparison (<code>&lt; &lt;= == &gt;= &gt; !=</code>), logical (<code>and or not</code>), sequences (<code>+ * in</code>, indexing with <code>[ ]</code>, slicing with <code>[a:b]</code>). Common functions and methods: len() input() print() range()  int() float() str() set() randrange(). Lists/sequences: list() append() extend() sort() sorted() count(). Namedtuples: namedtuple() _replace(). Strings: split() strip() upper() lower() format() maketrans() translate() replace(). Files: open() read() readline() readlines() write() close(). Sets: add().</P>
<P><strong>Algorithms:</strong> Traversing a list, changing each item (mapping); traversing a list, collecting selected items (filtering), traversing a list, accumulating a single value, e.g., counting or summing (reducing/folding). Finding the largest or smallest or average.</P>
</BODY>
</HTML>
