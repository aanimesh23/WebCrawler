<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>draft-ietf-webdav-v1-spec-01</TITLE>
<META NAME="Template" CONTENT="E:\Program Files\Microsoft Office\Office\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080">

<PRE>
WEBDAV Working Group                               Y. Goland, Microsoft
INTERNET-DRAFT                                     E. J. Whitehead, Jr.
                                                            U.C. Irvine

&lt;draft-ietf-webdav-v1-spec-00&gt;                         November 8, 1996

Expires April, 1997

Author's draft: v0.2</PRE>
<H1 ALIGN="CENTER">Extensions for Distributed Authoring and Versioning on the World Wide Web </H1>
<H2>Status of this Memo </H2>
<P>This document is an Internet-Draft. Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups. Note that other groups may also distribute working documents as Internet-Drafts. </P>
<P>Internet-Drafts are draft documents valid for a maximum of six months and may be updated, replaced, or made obsolete by other documents at any time. It is inappropriate to use Internet-Drafts as reference material or to cite them other than as "work in progress". </P>
<P>To learn the current status of any Internet-Draft, please check the "<I>1id-abstracts.txt</I>" listing contained in the Internet-Drafts Shadow Directories on <I>ftp.is.co.za</I> (Africa), <I>nic.nordu.net</I> (Europe), <I>munnari.oz.au</I> (Pacific Rim), <I>ds.internic.net</I> (US East Coast), or <I>ftp.isi.edu</I> (US West Coast). </P>
<P>Distribution of this document is unlimited. Please send comments to the WWW Distributed Authoring and Versioning (WEBDAV) working group at &lt;<I>w3c-dist-auth@w3.org&gt;</I>, which may be joined by sending a message with subject "subscribe" to <I>&lt;w3c-dist-auth-request@w3.org&gt;</I>. Discussions of the WEBDAV working group are archived at <I>&lt;URL:http://www.w3.org/pub/WWW/Archives/Public/w3c-dist-auth&gt;</I>. The HTTP working group at <I>&lt;http-wg@cuckoo.hpl.hp.com&gt;</I> also discusses the HTTP protocol. Discussions of the HTTP working group are archived at <I>&lt;URL:http://www.ics.uci.edu/pub/ietf/http/&gt;.</I> General discussions about HTTP and the applications which use HTTP should take place on the <I>&lt;www-talk@w3.org&gt;</I> mailing list. </P>
<H2>Abstract </H2>
<P>TBD </P>
<H2>Changes Since Author Draft V0.1 </H2>
<OL>

<LI>Added Undelete. </LI>
<LI>Changed Notification section. </LI>
<LI>Added versioning and access control sections. </LI>
<LI>Added annotation, attributeset, search, and modifiable attributes. I think attributeset is going to solve the problem with Larry. </LI>
<LI>Rewrote and rearranged the attribute section. </LI>
<LI>Changed the source attribute definition. </LI>
<LI>Added attribute header, shared mode and principal to the terminology section. </LI>
<LI>Moved the definitions of copy, move, and redirect to the terminology section. I also updated the terminology section to remove references to representation. </LI>
<LI>Added relationship to the terms section and wrote the relationship section. </LI>
<LI>Note that the Distributed Authoring commands assume that headers will be used for representation negotiation while the Versioning commands assume that only resources can be referred to and thus a particular representation must be addressable using only a URL. Also note that the versioning mime types contain both request and response formats and that response formats identify themselves. This is not strictly necessary with HTTP as one can tell if a message is a response from context. However for maximum flexibility the mime times provide an indication that it is a response so the mime times could be used with e-mail or other mime delivery systems. </LI>
<LI>Changed attribute URL syntax to allow attributes to have their own attributes.</LI></OL>

<H2>1. Introduction </H2>
<H3>1.1 Purpose </H3>
<P>This specification defines extensions to the HTTP/1.1 [HTTP11] protocol, the URL [URL] specification, and defines subtypes of the Application content type [RFC1521]. Together, these provide a means for augmenting existing facilities for remote authoring with abilities for locking, versioning, relationships, attributes, and listing and manipulation of the URL name space. Capabilities detailed in this specification meet the requirements for Distributed Authoring and Versioning, stated in [ref DA Reqt's][ref Vers. Reqt's]. </P>
<H3>1.2 Terminology </H3>
<P>Unless otherwise noted below, the use of terminology in this document is consistent with the definitions of terms given in [HTTP11]. </P>
<B><DL>
<DT>attribute header</B> </DT>
<DD>A header which returns information about the nature of a resource. </DD>
<B><DT>attribute set</B> </DT>
<DD>An attribute set is a defined set of attribute headers. An attribute set is used to indicate which attribute headers a resource provides support for. This does not mean that the resource expresses all of the headers in the set. Attribute sets MUST NOT be used as a substitute for unique naming of attribute headers. </DD>
<B><DT>check in</B> </DT>
<DD>A Check In is a declaration that the principal no longer intends to edit a resource(s). </DD>
<B><DT>check out</B> </DT>
<DD>A Check Out is a declaration by a principal that they intend to edit a resource(s). </DD>
<B><DT>command comments</B> </DT>
<DD>Command Comments associate either a string or a URI with an HTTP message. </DD>
<B><DT>copy</B> </DT>
<DD>A copy performs a byte-for-byte duplication of a resource, making it available at both the original and new location in the URI namespace. </DD>
<B><DT>destroy</B> </DT>
<DD>To destroy a resource is to request that the resource be permanently removed from storage. This differs from delete in that some versioning systems handle delete as a request to no longer make the specified resource editable. </DD>
<B><DT>diff</B> </DT>
<DD>A diff is a mechanism whereby two or more resources are compared and the differences enumerated. </DD>
<B><DT>history</B> </DT>
<DD>The history of a resource is a list of all the versions of the resource along with related information. </DD>
<B><DT>merge</B> </DT>
<DD>A merge is the process whereby information from multiple resources is folded into a single resource. Merges can occur at the client or the server. </DD>
<B><DT>move</B> </DT>
<DD>A move is logically a copy followed by a delete of the source resource. </DD>
<B><DT>no-modify lock</B> </DT>
<DD>A no-modify lock prevents a locked resource from being edited until all no-modify locks are released. </DD>
<B><DT>notify request</B> </DT>
<DD>A notify request instructs the recipient to send information regarding the progress of a request. </DD>
<B><DT>principal</B> </DT>
<DD>The source of a message; for example: persons, computers, and programs. </DD>
<B><DT>read lock</B> </DT>
<DD>A read lock prevents principals who do not posses a read lock on a resource from reading that resource. </DD>
<B><DT>redirect</B> </DT>
<DD>Redirect is used to instruct a server to return one of the 3xx series codes. </DD>
<B><DT>relationship</B> </DT>
<DD>A relationship, or link, is a typed bi-directional attribute header which provides a connection between two or more resources. </DD>
<B><DT>representation</B> </DT>
<DD>"An entity included with a response that is subject to content negotiation... There may exist multiple representations associated with a particular response status." - [HTTP11] Each of these representations is potentially subject to individual modification. </DD>
<B><DT>shared mode</B> </DT>
<DD>Shared mode modifies a lock request such that the lock may be shared between multiple requestors. </DD>
<B><DT>write lock</B> </DT>
<DD>A write lock prevents anyone who does not possess a write lock on a resource from editing that resource. </DD>
</DL>
<H3>1.3 Notational Conventions and Generic Grammar </H3>
<P>This specification uses the Augmented BNF and Basic Rules as defined in Section 2 of [HTTP11]. </P>
<H3>1.4 Mime Format </H3>
<P>[This section doesn't really belong in the introduction. &nbsp;Needs to be moved.] </P>
<P>Mime types sent with POSTs are used to transmit the commands specified in this document. The request-URI, unless specified otherwise, points to a resource that is capable of executing the request. </P>
<P>In addition all the Mime types start the BNF element <TT>MIMEVersion</TT> which is defined as: </P>
<CODE><P>MIMEVersion = 1#DIGIT "." 1#DIGIT</CODE> </P>
<P>The semantics of MIMEVersion is the same as for HTTP-Version defined in section 3.1 of [HTTP11]. </P>
<H2>2. Attributes </H2>
<P>During distributed authoring it is often necessary to record meta data about a resource, such as a resource's creator, the date of its completion, and the organization responsible for its maintenance. Once created, these attributes can be used to precisely search resources, and create a repository for organizational memory about the resource. Attributes provide meta data capability by allowing named data elements to be created, modified, read, and deleted on a resource. &nbsp;An attribute on a resource is a pair (name, value) consisting of the attribute's name and value. </P>
<P>The existing HTTP specification uses header fields to transmit meta data. &nbsp;This specification defines a new type of header field, known as <EM>attribute header</EM> fields, which provide information about a resource's nature, not its content or transmission state. &nbsp;Attribute header fields consist of a header name and an associated value, and are used to provide attributes on resources. </P>
<P>Rather then inventing a raft of new methods, the current methods will be bent to our purposes. Below, a convention for placing the name of an attribute within a URI is given. &nbsp;This convention allows existing HTTP methods to be invoked on attributes. So, for example, when a GET is performed on an attribute header URI, the value of the attribute header is returned in the entity-body. &nbsp;Similarly, a PUT may be used to set the value of an attribute on a resource. </P>
<H3>2.1 Attribute Header URIs </H3>
<P>A specification is provided below for describing an attribute header in the context of the URI of the header's associated resource. So, were an attribute header named "FileName" to exist and be associated with the resource <CODE>http://foo/bar</CODE>, it would be uniquely referred to as <CODE>http://foo/bar&lt;FileName&gt;.</CODE> Headers may also have a hierarchy so the URI <CODE>http://foo/bar&lt;Author.FirstAuthor&gt;</CODE> would refer to the header "FirstAuthor" which is a child of the header "Author." The "." is used to denote hierarchy because it is legal to use within a token. Note that the name space for headers is actually flat and the use of "." to denote hierarchy is optional. It is only meant to make it easier to group headers. The "&lt;...&gt;" enclosure was chosen because it will not cause a conflict with any currently existing URIs. </P>
<P>To support requests for attributes the definition of a URI must be altered as follows: </P>
<CODE><P>URI = ( absoluteURI | relativeURI ) *("&lt;" Attribute "&gt;") ["#" fragment]<BR>
Attribute = field-name ; See section 4.2 of [HTTP11]</CODE> </P>
<P>By convention an attribute request which ends in a "." and which does not resolve to a specific attribute name SHOULD be treated as a request for a list of all attributes in that hierarchy. </P>
<P>In order to prevent name space collisions both headers and header prefixes should be registered with a central authority. A header prefix is any legal token that may only be used when it is prefixed to another token. Prefixes should use the "." hierarchy format. Thus Netscape could register the prefix NS and thus be the only organization allowed to create headers which begin with "NS.". </P>
<H3>2.2 Interaction with Existing Methods and Proposed Functionality </H3>
<P>This section describes the precise semantics of existing HTTP methods when applied to an attribute header of a resource. </P>
<H4>2.2.1 GET </H4>
<P>A GET of an attribute resource MUST return the value of the attribute in the entity body of the response. Type of reponse - TBD </P>
<P>Since attribute headers may grow to very large sizes and may contain octet data, it is not feasible to include attribute headers in the response to a GET on a resource. Therefore attribute headers SHOULD not be transmitted as a response header. </P>
<H4>2.2.2 HEAD </H4>
<P>A HEAD method invocation on an attribute resource MUST behave as specified in Section 9.4 (HEAD) of [HTTP11]. &nbsp;Attribute headers SHOULD not be transmitted as a reponse header in the response to a HEAD request. </P>
<H4>2.2.3 POST </H4>
<P>A POST may not be performed on an attribute header resource. </P>
<H4>2.2.4 PUT </H4>
<P>A PUT on an attribute resource MUST set the value of the attribute to the contents of the entity body, following the semantics specified in Section 9.6 (PUT) of [HTTP11]. </P>
<H4>2.2.5 DELETE </H4>
<P>A DELETE causes the attribute resource to be made unavailable. </P>
<H4>2.2.6 OPTIONS and TRACE </H4>
<P>These methods are unmodified from HTTP/1.1. </P>
<H4>2.2.7 Copy and Move </H4>
<P>When a resource is copied, moved, or otherwise manipulated, its attributes are equally affected. However servers make the final determination regarding the state of any attribute header and may choose to not copy, move, etc. any subset of headers when it performs the requested action on a resource. </P>
<H3>2.3 Standard Attributes </H3>
<P>The following attributes have their name and semantics defined by this specification. </P>
<P>[TBD - Currently only brief descriptions are included. Once we have decided which ones should survive we will provide MIME types and other information.] </P>
<DL>
<DT>AttributeDirectory </DT>
<DD>The attribute AttributeDirectory returns a list of all attribute headers on a resource. To retrieve a list of attribute headers associated with the URL http://foo/bar one would send a GET request with a request-URI of /bar&lt;AttributeDirectory&gt;, where Host would equal foo. The same logic applies to PUT, which would be used to set an attribute's value. </DD>
<DT>AttributeSet </DT>
<DD>This attribute returns a list of the attribute sets currently being used to describe the resource. Support of an attribute set does not indicate that all of its attributes are being used. For a list of all attributes in use, the&nbsp;AttributeDirectory attribute should be retrieved. For example, if some attributes from the Dublin Core were being used to describe a resource, AttributeSet might contain the value "Dublin", or "DC". The tag used to denote attributes defined in this specification is "RFCxxxx". </DD>
<DT>CheckedOut </DT>
<DD>This attribute header returns a SiteMap containing a list of principals who have checked out the resource. </DD>
<DT>DirectoryName </DT>
<DD>This attribute returns a name suitable for presentation in a directory. The attribute embeds content headers to indicate language, character set, etc. </DD>
<DT>History </DT>
<DD>See History, section 9.2. </DD>
<DT>Link </DT>
<DD>Contains information about resources that are related to&nbsp;this resource. A SiteMap representation SHOULD be available.<BR>
[TBD: Review the SiteMap format and figure out tag formats to define source links.] </DD>
<DT>Link.Version </DT>
<DD>This attribSee Version, Section 9.3. </DD>
<DT>LockInformation </DT>
<DD>See Lock Discovery, Section 3.2. </DD>
<DT>Modifiable (this is a weak form of access control query) </DT>
<DD>Indicates if the principal can modify the resource. </DD>
<DT>NotifyRequest </DT>
<DD>See Notify Request, Section 6. </DD>
<DT>Relationships </DT>
<DD>See Relationships, Section 5. </DD>
<DT>Search </DT>
<DD>The search attribute returns a URI that points to a resource which can handle searching. It is currently expected that the URI returned will be a HTTP URL which points to a search page. </DD>
<DT>Source </DT>
<DD>The URI of the resource as stored, without any processing by the server (e.g. without processing of server-side includes). </DD>
<DT>Version </DT>
<DD>See Version, Section 9.3. </DD>
</DL>
<H2>3. Lock/Unlock </H2>
<P>Locks come in three types: write, read, and no-modify. Logically a write lock and a read lock can co-exist on a single resource. This means that one set of principals can edit the resource and another set of principals are the only ones allowed to read it. This may seem "silly" but is actually used in Orange book [ORANGE] compliant environments. A write lock and a no-modify lock can not be used together for obvious reasons. A read lock and a no-modify lock can be used together. </P>
<P>Locks are assigned to a subset of the representations available for a resource. If the lock only applies to a single representation then the lock may be further restricted to only a particular range of the representation. A content-range header is used for this purpose. The range may go off the "end" of the representation. Locks that exceed the end of a representation control the ability to append to the representation. </P>
<P>Locks may be taken out either in exclusive or shared mode. In shared mode anyone with proper access may take out a lock. In exclusive mode only the principal(s) who originally took out the lock may edit the lock. However a new principal can be added to an exclusive lock if the holder of the lock token performs the addition. </P>
<P>If an entire resource is write locked and a lock owner deletes the resource then the write lock remains. So long as the write lock remains the URI can not be edited. </P>
<P>In order to provide for maximum flexibility and ease of administration, lock tokens will be used to track locks. When a lock is taken out a lock token will be returned. A single lock token can represent any number of locks. In future lock requests the same token may have new locks added or old locks removed from it. Lock tokens are not required to be transferable between lock administration resources. </P>
<P>Locks also have time outs associated with them. If no time out value is associated with a lock then the lock will never time out. Otherwise the lock will expire if a number of seconds equal to the time out value passes without the resource being accessed by a lock owner. The time out value may be edited, without affecting the rest of the lock, by submitting a lock request with no Lock Entries. </P>
<P>Finally, locks may be taken out for multiple principals in a single request. The Lock_Owners field allows for tokens to be used to identify multiple principals who are considered owners of the lock. A server SHOULD only allow a lock token to be used in a request if the requestor is an owner of that lock token. </P>
<P>[TBD - We need an error message indicating that the server will not accept certain lock combinations or accept overlapping locks. We also need an error stating that an unlock couldn't be executed because it did not exactly match with a lock.] </P>
<P>Locks will be implemented using POST. The request-URI will be the lock administration resource. The entity-body will be of type application/lock. </P>
<H3>3.1 Definition of Content Type application/lock </H3>
<CODE><P>LOCK_BODY = Token_Status Time_Out Lock_Owners Lock_Entries<BR>
Token_Status = (Token_Field | "No Token")<BR>
Token_Field = "Lock Token" ":" LockToken<BR>
Time_Out = "Time Out" ":" (*DIGIT | "Never")<BR>
Lock_Entries = "Lock Entries" ":" *(Lock_URI LockType (("Exclusive" | "Shared") | "Unlock") Headers CRLF)<BR>
Lock_Owners = "Lock Owner" ":" #Lock_Owner<BR>
Lock_Owner = token; This is some identifier used to list who owns the lock.<BR>
Lock_URI = "URI" ":" URI<BR>
LockToken = Any OCTET but LWS<BR>
LockType = ("Write" | "Read" | "No-Modify")<BR>
Headers = #message-header ; As defined in 4.2 of [1] </P>
</CODE><P>Examples of type application/lock include: </P>
<SAMP><P>No Token<BR>
Time Out: Never<BR>
Lock Entries: URI http://www.microsoft.com/staff/yarong.html Write Exclusive<BR>
[Yaron Goland &lt;yarong@microsoft.com&gt;]</SAMP> </P>
<P>This specifies a request for an exclusive write lock on http://www.microsoft.com/staff/yarong.html, held by Yarong Goland. This lock will never automatically time out. </P>
<H3>3.2 Processing a Lock Request </H3>
<P>A lock request without a <KBD>LockToken</KBD><B> </B>is a new lock request. All the requests in a lock must be granted or a 503 Service Unavailable must be returned. If the lock is granted then the return body should be formated as: </P>
<CODE><P>RETURN_LOCK_BODY = LockToken</CODE> </P>
<P>A lock request with a <KBD>LockToken</KBD> is a request to extend the lock represented by the lock token. The same rules as specified in the previous paragraph apply. </P>
<P>A lock request with <KBD>Unlock</KBD> specified for <KBD>Lock_Request</KBD> means that all locks associated with this token should be removed. </P>
<P>A lock entries with <KBD>Unlock</KBD> specified means this particular lock should be removed from the token. </P>
<P>The BNF allows for Unlocks to be specified without specifying a lock token. This is not an error. This syntax allows authorized principals to override locks they do not have the token for. </P>
<P>Lock requests MUST be processed as an atomic action or the request must be refused. </P>
<P>When multiple resources are locked under a single token an operation will only be allowed on any of the resources if the remaining locks in the token can be guaranteed to exist for the life of the operation. </P>
<H3>3.3 Lock Discovery </H3>
<P>When a lock is taken out the system SHOULD record who owns the lock. Ownership information can be taken from the From header, from identification provided by authentication, or from the LockOwners field. </P>
<P>This information SHOULD be available through the attribute header "LockInformation" which has the mime type application/LockInformation. The format of the mime entity-body is: </P>
<CODE><P>LOCKINFORMATION = #(Token_Field Time_Out Lock_Owners Lock_Entries) [Contact_Field]<BR>
Contact_Field = "Contact" ":" token</CODE> </P>
<P>The <KBD>Contact_Field</KBD> is used to provide contact information in case there is a problem with a lock. </P>
<P>An example of a LockInformation attribute is: </P>
<KBD><P>LockInformation:<BR>
Token: a5dzq <BR>
Time Out: Never <BR>
[Yaron Goland &lt;yarong@microsoft.com]<BR>
Lock Entries: URI http://www.microsoft.com/staff/yarong.html Write Exclusive<BR>
Contact: Lock Administrator &lt;lockadmin@microsoft.com&gt;</KBD> </P>
<P>The exclusive write lock on http://www.microsoft.com/staff/yarong.html is held by Yaron Goland, has token value a5dqz, and will never time out. If there is a problem with a lock, the Lock Administrator should be contacted. </P>
<H2>4. Name Space Manipulation </H2>
<H3>4.1 Copy </H3>
<P>A copy performs a byte-for-byte duplication of a resource, making it available at both the original and new location in the URI namespace. &nbsp;There is no guarantee that the result of a GET on the URL of the resource copy will be identical to a GET on the original resource. For example, copying a script to a new location will often remove it from its intended environment, and cause it to either not work, or produce erroneous output. A copy MUST be atomic. </P>
<P>A copy is performed by sending a POST method to a resource which can perform the copy. The entity-body for the POST method is of content type application/copy, defined in Section 4.1.1. </P>
<P>Before any copied resources are made available through the destination URIs, all copied resources must either be available or return a 503 Service Unavailable response code when referenced. </P>
<P>If the No Overwrite value is specified then that entry in the copy should not occur if the destination URI already exists. If a resource is not copied because a "No Overwrite" flag was used and the resource exists then the request still succeeds. </P>
<H4>4.1.1 Definition of Content Type application/copy </H4>
<CODE><P>BODY = 1*(Source_URI Headers Destination_URI Headers Type)<BR>
Source_URI = URI<BR>
Destination_URI = URI<BR>
Type = "Overwrite" | "No Overwrite"<BR>
Headers = #message-header ; As defined in 4.2 of [HTTP11]</CODE> </P>
<P>Examples of content type application/copy include: </P>
<KBD><P>http://www.ics.uci.edu/~ejw/hidden/draft.html<BR>
Accept-Language: fr, en;q=0.7<BR>
http://www.ics.uci.edu/~ejw/final_report.html<BR>
Overwrite</KBD> </P>
<P>This example specifies a copy of the French language version of http://www.ics.uci.edu/~ejw/hidden/draft.html if available, otherwise any English version, into http://www.ics.uci.edu/~ejw/final_report.html, overwriting the contents of final_report.html if they exist. </P>
<KBD><P>http://www.ics.uci.edu/pub/ietf/http/index.html<BR>
Range: bytes=0-500<BR>
http://www.ics.uci.edu/~ejw/working.html<BR>
Range: bytes=0-500<BR>
Overwrite</KBD> </P>
<P>This example specifies a copy of the first 500 bytes of /pub/ietf/index.html into /~ejw/working.html, overwriting the first 500 bytes of working.html if they exist. </P>
<H3>4.2 Destroy, Delete, and Undelete </H3>
<P>To destroy a resource is to request that the resource and its attribute headers be permanently removed from storage. To delete a resource is to request that the resource no longer be made available for editing. Destory differs from delete in that a versioning system may allow a deleted resource to be visible, but not&nbsp;editable, while a destroy causes the resource, and all knowledge about the resource to be removed from the server. &nbsp;A destroy is performed by sending a POST message with an entity-body of type application/delete, defined in Section 4.2.1. </P>
<P>An undelete undoes the action of a delete, making a deleted resource available for editing. &nbsp;An undelete is performed by sending a POST message with &nbsp;entity-body of content type application/delete, with a listing of the resources to be undeleted. </P>
<H4>4.2.1 Definition of Content Type application/delete </H4>
<KBD><P>Application/Delete = Request | Response<BR>
Request = "Request" 1#(URI ("Delete" | "Destroy" | "Undelete"))<BR>
Response = "Response" 1#(URI ("Delete" | "Destroy" | "Undelete") ("Success" | "Failure") (comment | Status-Line)</KBD> </P>
<P>Note that this definition allows for the specification of a mix of delete and destroy operations. A "Delete" entry should be treated the same as if a Delete method were sent to the specified URI (as defined in Section 9.7 of [HTTP11]). </P>
<P>An example of content type application/delete is: </P>
<CODE><P>Request <BR>
http://www.ics.uci.edu/~ejw/hidden/draft.html Delete<BR>
http://www.ics.uci.edu/~ejw/hidden/draft.png Destroy</CODE> </P>
<P>This specifies a request to make the resource http://www.ics.uci.edu/~ejw/hidden/draft.html unavailable, but not necessarily deleted from the server, and to completely destroy resource http://www.ics.uci.edu/~ejw/hidden/draft.png, erasing it from the underlying storage mechanism. &nbsp;A possible reponse to this request would be the following reponse entity-body: </P>
<CODE><P>Response<BR>
http://www.ics.uci.edu/~ejw/hidden/draft.html Delete Success<BR>
http://www.ics.uci.edu/~ejw/hidden/draft.png Destroy Failure 403 Forbidden</CODE> </P>
<H3>4.3 Move </H3>
<P>A move is logically a copy followed by a delete of the source resource. &nbsp;A move MUST be atomic. A move is performed by sending a POST method to a resource which can perform the move. The entity-body of the POST method is of content type application/move, defined exactly the same as content type application/copy, (Section 4.1.1). </P>
<P>In this case atomicity requires that before the resources are made available at the new location they must no longer be available at the old location. The rest of the atomicity requirements are the same as for copy. </P>
<H3>4.4 Redirect </H3>
<P>Redirect is used to instruct a server to redirect all further requests on a resource, or set of resources. A redirection can be used to instruct the server to return one of the following response codes: 301 Moved Permanently, 302 Moved Temporarily, 303 See Other, or 305 Use Proxy. A Redirect request specifies both the reponse code and the URL to which it applies. </P>
<P>To perform a redirect a POST should be performed with the content-type equal to application/redirect, defined in section 4.4.1. </P>
<H4>4.4.1 Definition of Content Type application/redirect </H4>
<P>The body of the mime type is defined as TBD. [The mime type will contain the URL being redirected, the code to be used, and the semantics of the entity-body to be returned.] </P>
<H2>5. Relationships </H2>
<P>[NOTE: The authors are currently in the middle of a very long and detailed conversation about this section. This section reflects Jim's views on how relationships should be specified. My views are radically different. I want to see relationships specified as attributes in the attribute name space using the normal attribute control mechanisms. I believe documents will have many relationships and it will not be feasible to drag these around in the header. This was the same reasoning that lead to the creation of attributes and why I want relationships to be attributes.]</P>
<P>A relationship specifies how two or more resources are related. Examples of relationships include "author-of," "table of contents," and "specifies." A relationship can exist within a resource, and between &nbsp;mutliple resources. &nbsp;These resources may be of any media type, and a relationship can exist between resources of differing media type. When considering relationships which exist between resources, due to the distribution of resources across the Web, it is often the case that the relationship spans multiple servers. &nbsp;As a result, instead of being stored once, between resources, the endpoints of a relationship must be stored on individual resources. &nbsp;For the purposes of this specification, a relationship is defined to be a set of relationship endpoints. To create a multiway (or n-ary) relationship, a client must individually create each endpoint of the relationship, specifying at each endpoint which other relationship endpoints (usually on other resources) are part of the relationship. </P>
<P>A hypertext link is a relationship which a client has made available to the user interface so a user can jump to the other endpoints of the relationship using the hypertext point-click-and-traverse user interface style. &nbsp;A link is always a relationship, but a relationship is not always a hypertext link. </P>
<P>To request the creation of a relationship endpoint, a POST message with entity body of content-type application/relationship should be issued to the administration resource for relationships. </P>
<H3>5.1 Definition of Content Type application/relationship </H3>
<CODE><P>REL/BODY = Relationship-request | Relationship-response<BR>
Relationship-request = 1*( Rel-action Rel-token Rel-spec )<BR>
Relationship-response = 1*( Rel-action Rel-token Rel-spec Rel-response )</CODE> </P>
<CODE><P>Rel-spec = Rel-URI Link &nbsp;; Link is defined in Section 19.6.2.4 of [HTTP11]<BR>
Rel-URI = "URI" ":" URI<BR>
Rel-action = "Add" | "Remove" | "Modify"<BR>
Rel-token = *1("RToken" ":" rtoken) &nbsp;&nbsp;; Specifying token for an Add request is optional<BR>
Rel-status = Status-Code SP Reason-Phrase &nbsp; ; As defined in [HTTP11]<BR>
rtoken = token</CODE> </P>
<P>The ability to specify&nbsp;relationship endpoints on resources of any content type is mostly provided by the Link entity header field&nbsp;defined in 19.6.2.4 of [HTTP11]. The Link entity header field is used in this specification, with minor additions which add the ability to specify that another endpoint belongs to this relationship. &nbsp;This cabability is provided by an additional <KBD>link-param</KBD> field, called <KBD>peer</KBD>. The contents of a <KBD>peer</KBD> field are a sequence of (URI, relationship token) tuples, which list the opposite endpoints of the relationship. The relationship token MUST uniquely identify a relationship endpoint on a particular resource, but does not have to be globally unique across all resources. </P>
<TT><P>( "peer" "=" 1# "(" &lt;"&gt; URI &lt;"&gt; "," rtoken ")" )<BR>
</TT><BR>
An example of content type application/relationship is: </P>
<TT><P>Add<BR>
URI: http://www.ics.uci.edu/authoring/meeting/intro.html<BR>
RToken: 1<BR>
Link: &lt;http://www.ics.uci.edu/authoring/meeting/agenda.html&gt;; rel="Child"; peer=("http://www.ics.uci.edu/authoring/meeting/agenda.html, 2)</TT> </P>
<TT><P>Add <BR>
URI: http://www.ics.uci.edu/authoring/meeting/agenda.html<BR>
RToken: 2<BR>
Link: &lt;http://www.ics.uci.edu/authoring/meeting/intro.html&gt;; rel="Parent"; peer=("http://www.ics.uci.edu/authoring/meeting/intro.html", 1)</TT> </P>
<P>This defines a binary parent-child relationship between intro.html and agenda.html. From this example, it may seem that having the URI in the peer field is redundant. For binary relationships, this is indeed the case. However, the URI is required for multiway relationships, where more than one peer link needs to be specified in a peer parameter. </P>
<H2>6. Notification </H2>
<H3>6.1 Notify Request Header </H3>
<P>The Notify Request request-header is used to request that the server send a stream of "102 Process" messages containing updates of the request's status. </P>
<CODE><P>Notify_Request = "NotifyRequest" ":"</CODE> </P>
<H3>6.2 Resource Event Notification </H3>
<P>As features such as WebCheck and URLMinder demonstrate, there is a strong interest in receiving notification when a resource changes. What is lacking is a standard means to register interest in receiving notification regarding a resource. </P>
<H4>6.2.1 Definition of Content Type application/ResourceNotification </H4>
<P>The following specification proposes the mime type application/RequestNotification which is used to set the attribute RequestNotification. This solves the problem by providing a standardized method to register interest and to specify how one wishes to receive information. </P>
<CODE><P>Application/ResourceNotification = 1#(On_Resource Notification_Means On_Event)<BR>
On_Resource = URI<BR>
Notification_Means = URI<BR>
On_Event = #token</CODE> </P>
<CODE><P>On_Resource</CODE> specifies the resource for which notification is being requested. <TT>Notification_Means</TT> species a URI which will indicate how to notify the requester. <TT>On_Event</TT> specifies what event must occur in order for the notification to be sent. If no <TT>On_Event</TT> is specified then the server chooses when to notify the requester. </P>
<P>Possible On_Event values include "Deleted", "Accessed", "Faxed", "Printed", "Mailed", "AttributesModified", and "LockLost" ":" LockToken. </P>
<H4>6.2.2 Definition of Content Type application/NotificationData </H4>
<P>The actual notification is protocol dependent. However, the content type application/NotificationData is defined as follows: </P>
<CODE><P>Application/NotificationData = 1#(On_Resource On_Event)</CODE> </P>
<H2>7. URI Container </H2>
<P>Any resource which has a representation of content type application/container, is defined to be a URI container. Content type application/container will use the SiteMap format. </P>
<P>The advantage of SiteMaps in this context is that they are designed to point to other SiteMaps. In this way a hierarchy can be built and when an operation is performed it will act recursively down the tree. </P>
<P>[TBD - Do we really want to teach every DAV system to do HTML? Perhaps we want to introduce another access mechanism?] </P>
<H2>8. Versioning Mime Types </H2>
<H3>8.1 Check In/Out </H3>
<P>A Check In is a declaration that the principal no longer intends to edit a resource(s). &nbsp;A Check Out is a declaration by a principal that they intend to edit a resource(s). &nbsp;An RCS-style locking check out is performed by issuing a request for a write lock, immediately followed by a request which requests a check-out (as specified below). &nbsp;A CVS-style non-locking checkout is performed by only issuing a request for a check-out. </P>
<H4>8.1.1 Definition of Content Type application/checkinout </H4>
<CODE><P>Application/CheckInOut = CheckInOutRequest | CheckInOutResponse <BR>
CheckInOutRequest = ["Atomic"] "Request" 1#Requests <BR>
Requests = URI ("CheckIn" | "CheckOut" ("Exclusive" | "Shared")) <BR>
CheckInOutResponse = "Response" 1#Responses<BR>
Responses = URI ("CheckIn" | "CheckOut" ("Exclusive" | "Shared"))Status <BR>
Status = ("Success" | "Failure") comment</CODE> </P>
<P>If a request contains "Atomic" then all the elements in the request must be granted or rejected. </P>
<P>The "Exclusive" and "Shared" keywords indicate if a check out is exclusive or shared on the specified resource. </P>
<P>[TBD - We can always get rid of the versioning header by overloading Check In and making it a versioning PUT. Though we still need a "UnCheckOut" which is a CheckIn with no body.] </P>
<H3>8.2 Diff/Merge </H3>
<P>The purpose of the Diff or Merge is to take all the specified URIs and entities and return a single Diff or a single Merge of the results. Many servers will not be able to handle more than two resources and will return an error if more are specified. </P>
<H4>8.2.1 Definition of Content Type application/DiffMerge </H4>
<CODE><P>Application/Diff = Body<BR>
Application/Merge = Body<BR>
Body = 1#("URI" ":" URI | "Entity" ":" entity-body)</CODE> </P>
<H2>9. Versioning Headers </H2>
<H3>9.1 Command Comments </H3>
<P>Command comments are entity headers. </P>
<CODE><P>Command_Comment = "Comment" ":" CommentVal<BR>
CommentVal = URI | comment</CODE> </P>
<P>This is the standard comment facility used by versioning systems. Servers that do not understand the header or do not wish to make use of the information are free to ignore the information. No specification is made regarding how this information is to be retrieved. It is likely, however, that most systems will make the command comments available through their history attribute. </P>
<H3>9.2 History </H3>
<P>History is an attribute header that returns a SiteMap containing the history of the document. </P>
<H3>9.3 Version </H3>
<P>The version entity header is used with PUT to create a new version or to begin versioning an entity. </P>
<CODE><P>Version = "version" ":" token</CODE> </P>
<P>When included with a PUT on a new resource it indicates that the resource should be versioned and what version token should be used. The server is not required to accept the version token. The actual version token used along with the URI the resource will be accessible from must be returned in the response body. </P>
<P>When included with a PUT on the URI of a currently existing versioned resource the version entity header indicates that the entity is a new version of that resource. The server will indicate what the URI of the new version of the resource is along with its version token in the response. </P>
<P>If the version entity header is included with other methods then the header should be interpreted as a request for a particular version of the resource. However this interpretation is non-standard as one version is semantically different than another and the header thus may be dropped. </P>
<P>In addition to the version entity header there also exists a version link attribute header. TBD. </P>
<H2>Acknowledgements </H2>
<P>Roy Fielding, Richard Taylor, Larry Masinter, Henry Sanders, Judith Slein, Dan Connolly, David Durand, Henrik Nielsen. Others, TBD. </P>
<H2>References </H2>
<P>[HTTP11] R. T. Fielding, J. Gettys, J. C. Mogul, H. F. Nielsen, and T. Berners-Lee. "Hypertext Transfer Protocol -- HTTP/1.1" Internet-Draft draft-ietf-http-v11-spec-07.txt, expires February 12, 1997. </P>
<P>[ORANGE] DoD 5200.28-STD, "Department of Defense Trusted Computer System Evaluation Criteria", December, 1985. </P>
<P>[RFC1521] N. Borenstein, N. Freed. "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies." RFC 1521, Bellcore, Innsoft, September, 1993. </P>
<P>[URL] T. Berners-Lee, L. Masinter, M. McCahill. "Uniform Resource Locators (URL)." RFC 1738, CERN, Xerox PARC, University of Minnesota, December, 1994. </P></BODY>
</HTML>
