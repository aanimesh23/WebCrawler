<html><head><meta http-equiv="Content-Type"content="text/html; charset=iso-8859-1"><meta name="GENERATOR" content="Microsoft FrontPage 6.0"><title>Mechanism:</title></head><body bgcolor="#FFFFFF"><h2>Mechanism: Callback</h2><h3>Intent</h3><blockquote>    <p>The callback mechanism enables an application to invoke an    externally supplied function (sometime called a    &quot;handler&quot;) in </p>    <p><em>A short statement that answers the following    questions: What does the design pattern do? What is its    rationale and intent? What particular design issue or problem    does it address? </em></p></blockquote><h3>Also Known As</h3><blockquote>    <p>?</p></blockquote><h3>Motivation</h3><blockquote>    <p><em>A scenario that illustrates a design problem and how    the class and object structures in the pattern solve the    problem. The scenario will help you understand the more    abstract description of the pattern that follows. </em></p></blockquote><h3>Applicability</h3><blockquote>    <p><em>What are the situations in which the design pattern    can be applied? What are examples of poor designs that the    pattern can address? How can you recognize these situations? </em></p></blockquote><blockquote>    <ul>        <li><em>An applicable situation </em></li>    </ul></blockquote><h3>Collaborations</h3><blockquote>    <p>How the participants collaborate to carry out their    responsibilities. </p></blockquote><blockquote>    <ul>        <li>[Collaboration] </li>    </ul></blockquote><h3>Consequences</h3><blockquote>    <p>Callbacks have the following benefits:</p>    <ol>        <li><em>They support late binding</em>. Any user-defined            function that matches the function signature of the            callback can be bound to the invocation.</li>    </ol>    <p>Callbacks have the following limitations:</p></blockquote><blockquote>    <ol>        <li><em>They lack compositionality</em>. Only one callee            can be registered for a callback at any given point            in time. This prevents multiple, independent callees            from registering for the same callback. The lack of a            &quot;chaining&quot; mechanism (e.g., CLOS's            call-next-method) restricts the utility of the            mechanism.</li>        <li><em>They can disturb time sensitive processing</em>.            The caller does not know how long the callee will            execute before regaining the thread of control. For            example, a time consuming callback can starve GUI            event processing.</li>    </ol></blockquote><h3>Known Uses</h3><blockquote>    <p>Callbacks are commonly used in GUI toolkits as a way of    invoking application-specified code in response to a UI    event. For example, Microsoft's Win32 API associates each    window with an event handler responsible for responding to    the event.</p></blockquote><h3>Related Mechanisms</h3><blockquote>    <p>Object-oriented inheritance has become a more popular    mechanism for implementing callback-like behavior in OO    languages. Consider, for example, GUI frameworks such as    Microsoft's MFC, Sun's Java AWT, Apple's MacApp, and Unix's    InterViews.</p></blockquote><hr><p><a href="http://www.ics.uci.edu/~peymano/adaptation/"><em>Backto the Adaptation home page</em></a><em>. This page maintained byPeyman Oreizy </em>(<a href="mailto:peymano at ics.uci.edu">peymano at ics.uci.edu</a>).Last updated on <!--#flastmod virtual = "index.shtml" -->.</p></body></html>ï¿½