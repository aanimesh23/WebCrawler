<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="../../course.css" type="text/css" />

<title>CompSci 141 / CSE 141 / Informatics 101 Spring 2013, Project #4</title>
</head>
<body>

<div class="navbar">

<p>
CompSci 141 / CSE 141 / Informatics 101 Spring 2013 |
<a href="../../index.html">News</a> |
<a href="../../CourseReference.html">Course Reference</a> |
<a href="../../Schedule.html">Schedule</a> |
<a href="../../ProjectGuide">Project Guide</a> |
<a href="../../CodeExamples">Code Examples</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>CompSci 141 / CSE 141 / Informatics 101 Spring 2013<br />
   Project #4</p>

</div>

<div class="section">

<p class="center"><b>Due date and time:</b> <i>Friday, May 24, 11:59pm</i></p>

</div>

<div class="section">

<hr />

<p class="title">Introduction</p>

<p>This project will encourage you to develop your understanding of how the primary object-oriented features &mdash; classes, inheritance, and polymorphism &mdash; of languages like C++ and Java are implemented.  It will also provide you with some exposure to C++ (which I know will be new to many of you) at two levels of abstraction: the object-oriented level of classes and objects, and the lower-level abstractions of structures and function pointers.</p>

<p>You will be given a program written in an object-oriented style in C++, and will be asked to reimplement it, without design changes, using the lower-level abstractions.  The goal is not to write it to be simpler, clearer, or more efficient; the goal is to directly implement the provided object-oriented program in terms of underlying abstractions.</p>

</div>

<div class="section">

<hr />

<p class="title">Understanding the original example</p>

<p>You'll be writing code that emulates the object-oriented features (classes, inheritance, and polymorphism) that are normally provided automatically by C++.  Your program will be a re-implementation of an <a href="OOPorig.zip">original C++ example (OOPorig)</a> that's implemented using object-oriented features.  Before you can write your program, you should spend some time reading and understanding the example, since that's the code you'll be emulating.  I've heavily commented the code, since I'm well aware that many of you have little or no experience with C++.  With this and plenty of help along the way, you should be able to adapt quickly.  Naturally, I'll gladly answer further questions about it in person or via email, and we're also glad to help during discussion and lab.  To keep things relatively straightforward, I haven't used any C++ features that don't have an analogue in Java.</p>

<p>Because of the way I've written and commented the code, it's wise to read and understand it in the following order.  Comments in the later files in this list assume that you've read and understood the comments and code in the previous ones.</p>

<ol>
  <li>main.cpp</li>
  <li>Shape.h</li>
  <li>Shape.cpp</li>
  <li>Circle.h</li>
  <li>Circle.cpp</li>
  <li>Rectangle.h</li>
  <li>Rectangle.cpp</li>
  <li>Square.h</li>
  <li>Square.cpp</li>
  <li>RightTriangle.h</li>
  <li>RightTriangle.cpp</li>
</ol>

<p>I suggest adding some additional code to the main() function in this example, just to be sure that you understand how the provided example behaves.  This will also help you to ensure that you know how to create objects and use the object-oriented features of C++, which may well prove to be handy knowledge to have.</p>

<p>Even if you're not going to start writing your code right away, <b><i>take some time to read through this code and ask questions about it early</i></b>, so that you can get the help you need to understand it, while still leaving yourself enough time to write your program.</p>

</div>

<div class="section">

<hr />

<p class="title">Re-implementing the example without OOP features</p>

<p>Your main task for this assignment is to re-implement <a href="OOPorig.zip">the OOPorig example</a> in C++, without using classes, inheritance, or polymorphism.  Instead, you'll be implementing lower-level code that handles the various details we discussed in lecture, such as virtual method tables.  I've provided a <a href="OOPemu.zip">starting point called OOPemu</a> that you're required to use.  Given to you is part of the main() function, as well as an emulation of the Shape class (heavily commented) and part of an emulation of the Circle class.  Since the provided code for OOPemu is heavily commented, it should be clear what's been given and what you'll need to add.  You'll need to complete the Circle class, as well as implement the Rectangle, Square, and RightTriangle classes.  Additionally, you're required to add code to your main() function that creates various kinds of shapes and demonstrates that your emulation of inheritance and polymorphism are working correctly, at least by calling each method on each kind of object using dynamic binding (by looking up the method in the virtual method table).</p>

</div>

<div class="section">

<hr />

<p class="title">The logistics of using C++ for this assignment</p>

<p class="subtitle">Background information</p>

<p>One of the nice things about using Java in an educational context is that the "Write once, run everywhere" mantra is almost entirely true.  For the kind of work we do in most undergraduate courses, we rarely, if ever, expose any incompatibilities between virtual machines on different platforms.  That means that we can tell you "Write your code in Java," allow you to work on any platform and with any development tools you want, and have a reasonably good expectation that everything will turn out fine in the end.</p>

<p>When we use C++, however, this advantage disappears.  Since different implementations of C++ differ in some pretty fundamental ways &mdash; including what the width of an <b>int</b> variable is! &mdash; it's necessary for us to make an agreement up-front about what platform and what compiler we intend to use for the course.</p>

<p class="subtitle">Support for C++ in the ICS labs</p>

<p>The good news is that there's a very good (and reasonably standards-compliant) environment available for use &mdash; free! &mdash; in the ICS labs.  It's called Visual Studio 2012.  I don't expect most of you have used this tool before, so I've written a brief <a href="VisualStudioTutorial.html">tutorial</a> that explains how you can use it for the tasks that you'll need to do for this assignment.</p>

<p>Both chunks of provided code &mdash; <a href="OOPorig.zip">OOPorig</a> and <a href="OOPemu.zip">OOPemu</a> &mdash; are provided as Visual Studio 2012 solutions.  All of the code that I've written is standard C++, so it should work just as well on other platforms and using other (standards-compliant) compilers as it does with Visual Studio 2012.  Since Visual Studio 2012 is only available on Windows, you may prefer a different development environment; in general, that's fine.  Still, it's important to note that C++ implementations can vary in some pretty fundamental ways, so we'll require that your code compiles and executes correctly using Visual Studio 2012.  Even if you choose to use something else for your work, verify that your program works with Visual Studio 2012 before submitting it.</p>

</div>

<div class="section">

<hr />

<p class="title">Deliverables</p>

<p>You need to submit all of the source and header files, including those provided, that comprise OOPemu.  Please submit only your source code (.cpp and .h files) &mdash; do not submit compiled versions of your program, or other files generated by your development environment.  Also, <i>do not under any circumstances</i> submit the code from OOPorig; that's provided to you for reference, but will confuse us in the grading process.</p>

<p>Follow <a href="../SubmittingProjects.html">this link</a> for a discussion of how to submit your project.  Remember that we do not accept paper submissions of your projects, nor do we accept them via email <i>under any circumstances</i>.</p>

</div>

<div class="history">

<hr />

<ul class="nomarker">
  <li>Updated for Visual Studio 2012 by Alex Thornton, Spring 2013.</li>
  <li>Some minor tweaks by Alex Thornton, Summer 2009.</li>
  <li>A few minor adjustments by Alex Thornton, Fall 2005.</li>
  <li>Minor modifications and clarifications added by Alex Thornton, Fall 2004.</li>
  <li>Originally written by Alex Thornton, Fall 2003.</li>
</ul>

</div>

</body>
</html>
