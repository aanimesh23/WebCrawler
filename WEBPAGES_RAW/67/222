<!--NewPage-->
<html>
<head>
<!-- Generated by javadoc on Thu Jul 18 14:48:18 PDT 1996 -->
<a name="_top_"></a>
<title>
  Class c2.comp.StackPieArtist
</title>
</head>
<body>
<pre>
<a href="packages.html">All Packages</a>  <a href="tree.html">Class Hierarchy</a>  <a href="Package-c2.comp.html">This Package</a>  <a href="c2.comp.StackArtist.html#_top_">Previous</a>  <a href="Package-c2.comp.html">Next</a>  <a href="AllNames.html">Index</a></pre>
<hr>
<h1>
  Class c2.comp.StackPieArtist
</h1>
<pre>
<a href="java.lang.Object.html#_top_">java.lang.Object</a>
   |
   +----<a href="c2.framework.Brick.html#_top_">c2.framework.Brick</a>
           |
           +----<a href="c2.framework.Component.html#_top_">c2.framework.Component</a>
                   |
                   +----<a href="c2.framework.ComponentThread.html#_top_">c2.framework.ComponentThread</a>
                           |
                           +----c2.comp.StackPieArtist
</pre>
<hr>
<dl>
  <dt> public class <b>StackPieArtist</b>
  <dt> extends <a href="c2.framework.ComponentThread.html#_top_">ComponentThread</a>
</dl>
StackPieArtist class.<p>
Implements a graphical visualization of a stack.  Maintains an abstract
model of the top of the stack and an arc from zero to <i>stack_top
<b>mod</b> 360</i> degrees. Also maintains buttons to push
elements onto the stack, pop them off the stack, and access the top
element.  A text field allows a user to specify the value to be pushed,
and a quit button to exit the application to which the Artist belongs.<p>
The Artist issues stack manipulation requests to a stack ADT above it in
a C2 architecture and notifications to components (if any) below
it.  In turn, it receives notifications from the stack ADT and requests
from a graphics server and acts accordingly.<p>
<HR>
<h3>StackPieArtist's C2 Message Interface</h3>
StackPieArtist's methods should not be invoked directly in a C2
architecture.  Instead, the Artist's functionality is accessed via C2
messages (requests and notifications). In response to those messages,
the Artist emits requests to a stack ADT above it and sends notifications
of its internal state changes down.<p>
<pre>
   <b>Incoming Notifications</b>
       pushed                (Integer value);
       popped                (Integer value);
       top                   (Integer value);
       empty                 ();
   <b>Outgoing Requests</b>
       push                  (Integer value);
       pop                   ();
       top                   ();
   <b>Incoming Requests</b>
       AcceptEvent           (String button, String parent_id);
       AcceptEvent           (String text_field, String value,
                              String parent_id);
   <b>Outgoing Notifications</b>
       ViewportCreated       (Integer x, Integer y,
                              Integer width, Integer height,
                              String title, String id,
                              String foreground, String background);
       ApplicationTerminated ();
       PanelAdded            (Integer x, Integer y,
                              Integer width, Integer height,
                              String foreground, String background,
                              String id, String parent_id);
       PanelCleared          (String id);
       ButtonAdded           (Integer x, Integer y,
                              Integer width, Integer height,
                              String foreground, String background,
                              String label, String parent_id);
       TextFieldAdded        (Integer x, Integer y,
                              Integer width, Integer height,
                              String foreground, String background,
                              String label, String parent_id);
       TextFieldSet          (String label, String value,
                              String parent_id);
       TextFieldCleared      (String label, String parent_id);
       c2Gtext               (Integer x, Integer y,
                              String value, String font,
                              String color, String style,
                              Integer size, String parent_id);
       c2Garc                (Integer x, Integer y,
                              Integer width, Integer height,
                              Integer angle1, Integer angle2,
                              String fill, String border,
                              String parent_id);
</pre>
<hr>
<a name="index"></a>
<h2>
  <img src="images/variable-index.gif" width=207 height=38 alt="Variable Index">
</h2>
<dl>
  <dt> <img src="images/magenta-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#panel"><b>panel</b></a>
  <dd> Panel in which the contents of the stack are to be displayed.
  <dt> <img src="images/magenta-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#pop_button"><b>pop_button</b></a>
  <dd> Button for popping elements off the stack.
  <dt> <img src="images/magenta-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#push_button"><b>push_button</b></a>
  <dd> Button for pushing elements onto the stack.
  <dt> <img src="images/magenta-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#quit_button"><b>quit_button</b></a>
  <dd> Button for exiting the application.
  <dt> <img src="images/magenta-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#tf_value"><b>tf_value</b></a>
  <dd> Integer value of the text field.
  <dt> <img src="images/magenta-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#top_button"><b>top_button</b></a>
  <dd> Button for returning the top stack element.
  <dt> <img src="images/magenta-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#txt_field"><b>txt_field</b></a>
  <dd> Button for entering the value to be pushed onto the stack and viewing
the top stack element.
  <dt> <img src="images/magenta-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#vport"><b>vport</b></a>
  <dd> Viewport in which the contents of the stack and widgets for its
manipulation are to be displayed.
</dl>
<h2>
  <img src="images/constructor-index.gif" width=275 height=38 alt="Constructor Index">
</h2>
<dl>
  <dt> <img src="images/yellow-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#StackPieArtist()"><b>StackPieArtist</b></a>()
  <dd> 
  <dt> <img src="images/yellow-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#StackPieArtist(java.lang.String)"><b>StackPieArtist</b></a>(String)
  <dd> 
</dl>
<h2>
  <img src="images/method-index.gif" width=207 height=38 alt="Method Index">
</h2>
<dl>
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#create(java.lang.String)"><b>create</b></a>(String)
  <dd> Creates and initializes an instance of the StackPieArtist.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#handle(c2.framework.Notification)"><b>handle</b></a>(Notification)
  <dd> Handles notifications from the stack ADT.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#handle(c2.framework.Request)"><b>handle</b></a>(Request)
  <dd> Handles requests resulting from a user's manipulation of stack's
depiction.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#start()"><b>start</b></a>()
  <dd> At startup, creates an abstract viewport, panel, quit, push, pop,
and top buttons, and a text field, and emits notifications of these
changes to any listening components below.
</dl>
<a name="variables"></a>
<h2>
  <img src="images/variables.gif" width=153 height=38 alt="Variables">
</h2>
<a name="vport"><img src="images/magenta-ball.gif" width=12 height=12 alt=" o "></a>
<b>vport</b>
<pre>
  protected <a href="java.lang.String.html#_top_">String</a> vport
</pre>
<dl>
  <dd> Viewport in which the contents of the stack and widgets for its
manipulation are to be displayed.
</dl>
<a name="panel"><img src="images/magenta-ball.gif" width=12 height=12 alt=" o "></a>
<b>panel</b>
<pre>
  protected <a href="java.lang.String.html#_top_">String</a> panel
</pre>
<dl>
  <dd> Panel in which the contents of the stack are to be displayed.
</dl>
<a name="push_button"><img src="images/magenta-ball.gif" width=12 height=12 alt=" o "></a>
<b>push_button</b>
<pre>
  protected <a href="java.lang.String.html#_top_">String</a> push_button
</pre>
<dl>
  <dd> Button for pushing elements onto the stack.
</dl>
<a name="pop_button"><img src="images/magenta-ball.gif" width=12 height=12 alt=" o "></a>
<b>pop_button</b>
<pre>
  protected <a href="java.lang.String.html#_top_">String</a> pop_button
</pre>
<dl>
  <dd> Button for popping elements off the stack.
</dl>
<a name="top_button"><img src="images/magenta-ball.gif" width=12 height=12 alt=" o "></a>
<b>top_button</b>
<pre>
  protected <a href="java.lang.String.html#_top_">String</a> top_button
</pre>
<dl>
  <dd> Button for returning the top stack element.
</dl>
<a name="quit_button"><img src="images/magenta-ball.gif" width=12 height=12 alt=" o "></a>
<b>quit_button</b>
<pre>
  protected <a href="java.lang.String.html#_top_">String</a> quit_button
</pre>
<dl>
  <dd> Button for exiting the application.
</dl>
<a name="txt_field"><img src="images/magenta-ball.gif" width=12 height=12 alt=" o "></a>
<b>txt_field</b>
<pre>
  protected <a href="java.lang.String.html#_top_">String</a> txt_field
</pre>
<dl>
  <dd> Button for entering the value to be pushed onto the stack and viewing
the top stack element.
</dl>
<a name="tf_value"><img src="images/magenta-ball.gif" width=12 height=12 alt=" o "></a>
<b>tf_value</b>
<pre>
  protected <a href="java.lang.Integer.html#_top_">Integer</a> tf_value
</pre>
<dl>
  <dd> Integer value of the text field.
</dl>
<a name="constructors"></a>
<h2>
  <img src="images/constructors.gif" width=231 height=38 alt="Constructors">
</h2>
<a name="StackPieArtist"></a>
<a name="StackPieArtist()"><img src="images/yellow-ball.gif" width=12 height=12 alt=" o "></a>
<b>StackPieArtist</b>
<pre>
  public StackPieArtist()
</pre>
<a name="StackPieArtist(java.lang.String)"><img src="images/yellow-ball.gif" width=12 height=12 alt=" o "></a>
<b>StackPieArtist</b>
<pre>
  public StackPieArtist(<a href="java.lang.String.html#_top_">String</a> _name)
</pre>
<a name="methods"></a>
<h2>
  <img src="images/methods.gif" width=151 height=38 alt="Methods">
</h2>
<a name="create(java.lang.String)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="create"><b>create</b></a>
<pre>
  public void create(<a href="java.lang.String.html#_top_">String</a> _name)
</pre>
<dl>
  <dd> Creates and initializes an instance of the StackPieArtist.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> _name - Name of the class.
  </dl>
</dl>
<a name="start()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="start"><b>start</b></a>
<pre>
  public void start()
</pre>
<dl>
  <dd> At startup, creates an abstract viewport, panel, quit, push, pop,
and top buttons, and a text field, and emits notifications of these
changes to any listening components below.  It also requests the current
state of the stack, in the case that the component is added to an already
running architecture.
  <dl>
    <dt> <b>Overrides:</b>
    <dd> <a href="c2.framework.ComponentThread.html#start()">start</a> in class <a href="c2.framework.ComponentThread.html#_top_">ComponentThread</a>
  </dl>
</dl>
<a name="handle(c2.framework.Request)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="handle"><b>handle</b></a>
<pre>
  public synchronized void handle(<a href="c2.framework.Request.html#_top_">Request</a> r)
</pre>
<dl>
  <dd> Handles requests resulting from a user's manipulation of stack's
depiction.  Depending on the request, it either sends stack manipulation
requests to the ADT, records the value of the text field, or sends a
<i>ApplicationTerminated</i> notification to the graphics binding (when the
quit button is pressed).
  <dl>
    <dt> <b>Parameters:</b>
    <dd> r - Request to be handled.
    <dt> <b>Overrides:</b>
    <dd> <a href="c2.framework.Component.html#handle(c2.framework.Request)">handle</a> in class <a href="c2.framework.Component.html#_top_">Component</a>
  </dl>
</dl>
<a name="handle(c2.framework.Notification)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="handle"><b>handle</b></a>
<pre>
  public synchronized void handle(<a href="c2.framework.Notification.html#_top_">Notification</a> n)
</pre>
<dl>
  <dd> Handles notifications from the stack ADT.  If the ADT notifies that the
stack has been pushed or popped, the top of the stack is requested.
When the ADT sends a notification with the stack's top value, that value 
is recorded in the Artist's abstract text field and an abstract arc whose
size corresponds to the top value is created; the Artist sends a 
notification of this state change down.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> n - Notification to be handled.
    <dt> <b>Overrides:</b>
    <dd> <a href="c2.framework.Component.html#handle(c2.framework.Notification)">handle</a> in class <a href="c2.framework.Component.html#_top_">Component</a>
  </dl>
</dl>
<hr>
<pre>
<a href="packages.html">All Packages</a>  <a href="tree.html">Class Hierarchy</a>  <a href="Package-c2.comp.html">This Package</a>  <a href="c2.comp.StackArtist.html#_top_">Previous</a>  <a href="Package-c2.comp.html">Next</a>  <a href="AllNames.html">Index</a></pre>
</body>
</html>
