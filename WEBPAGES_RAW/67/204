<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Sample Programs</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Sample Programs</h1>
<p>
<h2>ICS-46: Data Structure Implementation and Analysis</h2><p>
</center>

<hr align="left" width="100%">
<p>
The following is a list of zipped CLion project files (more might be added
  during the quarter).
Please feel free to download, unzip, run, and study these programs (both their
  code and their run-time behavior).
Programmers gain tremendous insight into all facets of programming by studying
  the code of other programmers (especially those with more experience; and I
  am happy to improve my code based on your observations -nothing is perfect).
A good programmer typically makes elegant use of the required language
  features, resulting in smaller, more elegant code.
<p>
All downloadable projects are listed alphabetically; you can also search this
  page for keywords.
All are zip files, so unzip them first.
Most project files require the
  Download: <a href="../common/online46.html">standard course library</a>
  which contains a variety of useful functions and classes.
If you followed the CLion installation instructions, you should have already
  created the <b>courselib</b> folder in your workspace and populated it with
  these modules.
<p>

<hr align="left" width="33%">
<p>


Download: <a href="programs/backtrack.zip">Backtracking Problem Solving</a><br>
These programs use generalized (recursive) backtracking to search an implicit
  solution tree.
See the <b>backtrack_exceptions</b> and <b>solver</b> files, which contain
  the tools to solve any problem; use the <b>problem_template</b> file to
  build any new application (and see how it compares with the examples below).
The <b>n_queens</b> files contain code to determine how to place N queens on
  a chessboard so that none can attack another).
The <b>satifiy</b> files contains code to determine how to assign <b>true</b>
  and <b>false</b> values to variables in a formula to satisfy it -make it
  evaluated to true.
The <b>sudoku</b> files contain code that reads a Sudoku puzzle from a file
 and determines how to assign 1-9 values to the empty cells in a Sudoku puzzle
 to satisfy its constraints.
<p>

Download: <a href="programs/test_all_data_types.zip">
  Testing all <b>Data Types</b></a><br>
This project folder contains drivers and GoogleTests for all five standard
  data types: Stack, Queue, PriorityQueue, Set, and Map.
The code tests the array implementations of these data types supplied in the
  <b>courselib</b>, but it can be easily changed to test any other
  implementations.
Recall that a runnable program can have only one <b>main</b> function: so, only
  one <b>.cpp</b> file can be uncommented (the code in all the others must be
  commented-out).
<p>

Download: <a href="programs/bstempirical.zip">
  Testing <b>Binary Search Trees Empirically</b> on Integers</a><br>
This programs builds any number of binary search trees (of any size) from a
  random permutation of integers.
It computes and displays a histogram of the number of tree of each height and
  the average number of probest to access all values.
<p>

Download: <a href="programs/hashempirical.zip">
  Testing <b>Hashing Empirically</b> on Strings</a><br>
These programs test a hashing function (on <b>std::string</b>):
  the first uses <b>chaining</b>, computing a histogram of the number of values
    stored in each bin size and the average number of probes to access all
   values;
  the second uses <b>open hashing</b> (with either <b>linear</b> or
    <b>quadratic</b> probing), computing a histogram of the number of values
    requiring N probes the average number of probes to access all values
   (for a variety of increasingt <b>load factors</b>).
Use the supplied hash function or your ownn, testing its ability to distribute
  the values among the bins for random strings.
<p>

Download: <a href="programs/sortingdemo.zip">
  Testing <b>Sorting Empirically</b></a><br>
You must have Java installed to run this program.
Run this Java program on a PC by double-clicking the <b>double click me.bat</b>
  file (see its contents and mimic their use on other operating systems).
You can choose (rechoose) an array size, decide how to populate it with values,
  and run various O(N^2) and O(N Log N) sorting functions (specifying how many
  times to repeat the process): we can also run a radix sort.
It will print the timings for the chosen sorting algorithm, and the average.
Note that the clock is accurate to about 1 millisecond: antthing taking less
  time registers as <b>0.0</b> seconds.
<p>

Download: <a href="programs/statespace.zip">State Space Search</a><br>
These programs (just one now) use a generalized state-space searching to solve
  various problems involving applying operators.
See the <b>solver</b> file, which contains the tools to solve any problem (both
  using <b>breadth-first</b> and <b>best-first</b> searching); use
  the <b>problem_template</b> file to build any new application (and see how it
  compares with the examples below).
The <b>water_jugs</b> files contain code to determine how to achieve one
  distribution of water in jugs, given a starting distribution.
Examine the <b>State::how_close</b> function for a pure <b>best_first</b>
  solution and an <b>A*</b> solution: it typically examines some number of
  states between pure <b>best-first</b> and <b>breadth-first</b>) but
  guarantees an optimal solution.
<p>

Download: <a href="programs/cross_reference.zip">X (cross) Reference</a><br>
This program produces a cross-reference list of all the words (separated by
  spaces) in a text file.
It uses the map, priority queue, and stack classes from the ITC.
The download includes a small data file on which to test the program.
<!---
The download includes a complete copy of Mark Twain's "Tom Sawyer"
  and the correct output for this input.
--->
<p>

<hr align="left" width="100%">
</body>
</html>
