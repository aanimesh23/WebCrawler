
<!--  Presentation generated by Internet Assistant for Microsoft PowerPoint 97 -->

<HTML>
<HEAD>

<meta name="GENERATOR" content="Microsoft Internet Assistant for Microsoft PowerPoint 97">
 <TITLE>Semantics Retention - Effect</TITLE> 
</HEAD>

<BODY     >

<CENTER>
<TABLE WIDTH=100%> 
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <IMG SRC="img010.gif" usemap="#Objmap" WIDTH=640 HEIGHT=480 BORDER=0>
     </TD> </TR>
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <A HREF="sld001.htm"><IMG SRC="first.gif" BORDER=0 ALT="First"></A>
         <A HREF="sld009.htm"><IMG SRC="prev.gif" BORDER=0 ALT="Previous"></A>
         <A HREF="sld011.htm"><IMG SRC="next.gif" BORDER=0 ALT="Next"></A>
         <A HREF="sld024.htm"><IMG SRC="last.gif" BORDER=0 ALT="Last"></A>
         <IMG SRC="space.gif" BORDER=0>
         <A HREF="index.htm"><IMG SRC="info.gif" BORDER=0 ALT="Index"></A>
         <A HREF="http://www.ics.uci.edu/~nicolau"><IMG SRC="home.gif" BORDER=0 ALT="Home"></A>
         <A HREF="tsld010.htm"><IMG SRC="text.gif" BORDER=0 ALT="Text"></A>
     </TD> </TR>
</TABLE>
<P>Slide 10 of 24</P>
</CENTER>
<!-- <UL>
Source level semantics
</UL><UL>
eliminate red dependencies;
</UL><UL>
algorithm-level semantics
</UL><UL>
eliminate blue dependencies</UL></P>
<P><UL>
<H2>Semantics Retention - Effect</H2>
</UL></P>
<P><UL>
Best Schedules</UL></P>
<P><UL>
Neglecting semantics</UL></P>
<P><UL>
Retaining source-level
</UL><UL>
semantics alone</UL></P>
<P><UL>
Retaining source and algorithm level semantics</UL></P>
<P><UL>
iter(i)</UL></P>
<P><UL>
iter(i+1)</UL></P>
<P><UL>
iter(i+2)</UL></P>
<P><UL>
Semantics Hierarchy
</UL><UL>
		ROOT
</UL><UL>

</UL><UL>
	STACK		HEAP
</UL><UL>

</UL><UL>

</UL><UL>
struct_type1*  struct_type2*   int   struct_type1   struct_type2
</UL><UL>

</UL><UL>

</UL><UL>

</UL><UL>
    ctrl 	        node	      i    j 	*ctrl 	 *node
</UL><UL>
					
</UL><UL>
 			  vec       cnt     data   next			    		
</UL><UL>
		   	{5, 7}    {1,3}   {4}    {8}</UL></P>
<P><UL>
C source
</UL><UL>
list *node;
</UL><UL>
control *ctrl;
</UL><UL>
while (ï¿½){
</UL><UL>
 node-&#062cnt++;
</UL><UL>
 ctrl-&#062vec[i] += node-&#062data[j];
</UL><UL>
 node = node-&#062next;}</UL></P>
<P><UL>
N-addr code
</UL><UL>
1: cnt = M[node + cntoffset]
</UL><UL>
2: cnt = cnt + 1
</UL><UL>
3: M[node + cntoffset] = cnt
</UL><UL>
4: d = M[node + dataoffset]
</UL><UL>
5: c = M[ctrl + vecioffset]
</UL><UL>
6: d = d + c
</UL><UL>
7: M[ctrl + vecioffset] = d
</UL><UL>
8: node = M[node + nextoffset]</UL></P>
<P><UL>
GCC generates N-addr
</UL><UL>
code and Semantics
</UL><UL>
Hierarchy</UL></P>
<P>  -->
</Body>
</HTML>
