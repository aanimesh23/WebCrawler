<HTML>
<!-- $Id: endeavors_abstract.html,v 1.1 1996/08/03 00:01:00 kari Exp $ -->
<HEAD>
<TITLE>Arcadia Collected Papers: ABSTRACT</TITLE>
<META http-equiv="Owner" content="Arcadia">
<META http-equiv="Reply-To" content="arcadia-www@ics.uci.edu">
<LINK rev="made" href="mailto:arcadia-www@ics.uci.edu">
</HEAD><BODY>
<H1><img align=middle src="http://www.ics.uci.edu/~arcadia/Icons/arcadia-logo.gif">
Arcadia Papers: ABSTRACT</H1>
<HR>

<A HREF="http://www.ics.uci.edu/Arcadia/Endeavors/docs/EndeavorsPaper.ps.Z">
"<b>Endeavors: A Process System Integration Infrastructure</b>"</A>,
by Gregory Alan Bolcer and Richard N. Taylor <i>to appear</i> in
<i> Proceedings of the Fourth International Confernce on the Software
Process,</i> Brighton, England, December 1996.

<H2> Abstract </H2>

Abstract -- As software projects evolve, possibly differing in size, 
complexity, scope, and purpose, the development processes that support 
the project must evolve to reflect these changes. For a distributed 
project, maintaining proper communications, coordinating 
between project stakeholders, and maintaining managerial control 
become increasingly important and, unfortunately, increasingly difficult. 
The Endeavors system is an open, distributed process modeling and 
execution infrastructure that addresses communication, coordination, 
and control issues. Complex processes may require (a) distribution of 
people and processes, (b) event-based and intermediate-format integration 
of external tools, (c) a low entry barrier through ease-of-use and 
incremental adoption, (d) ability to customize and reuse objects, tools, 
and policies, and (e) dynamic change of runtime processes, objects, and 
behaviors. Endeavors' solution architecture achieves these goals through 
application of five key design strategies: (1) maintaining multiple 
object model layers, (2) implementing the architecture as a set of 
highly componentized, lightweight, transportable, concurrent elements, 
(3) providing customization capabilities for each layer of the object model, 
(4) using a reflexive object model to support dynamic change, and (5) allowing 
dynamic loading and changing of objects including loading of executable 
handlers, new object types, and extensions. We discuss these goals and 
design strategies, describe the architecture, and describe the current 
status of the project and its relevance to its own development.

<P>

<HR>
<ADDRESS>
<A HREF="http://www.ics.uci.edu/Arcadia/">The Arcadia Project
&lt;arcadia-www@ics.uci.edu&gt;</A><BR>
Last modified: Mon Feb 27 11:35:22 1995
</ADDRESS>
</BODY></HTML>
