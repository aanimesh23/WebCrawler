<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- Page automatically generated from latex_to_html converter. -->
<!-- by cc_extract_html, $Revision: 3.19 $ -->
<!-- LaTeX source file: './Kernel_23_ref/Aff_transformation_3.tex' -->
<html> <head>  
<title>Aff_transformation_3&lt;Kernel&gt;</title>
</head>  
<link href="../latex_to_html.css" rel="STYLESHEET">
<body bgcolor="white">
<!-- ------------------------------------------------------------------- -->


<!-- Top Navigation ---------------------------------------------------- -->
<div class="NavTop">
<hr>
  <strong>Navigation:</strong>
<a href="Chapter_main.html">Up</a>, 
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<hr><!-- End of Top Navigation ----------------------------------------- -->
</div>


<A NAME="Cross_link_anchor_63"></A>

<A NAME="Cross_link_anchor_64"></A>

      
     
     
     
<A NAME="Index_anchor_53"></A> 

   
<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC="cc_Class.gif"></TD></TR></TABLE>


    <A NAME="ccRef_CGAL::Aff_transformation_3<Kernel>"></A>
<h2><I>CGAL::Aff_transformation_3&lt;Kernel&gt;</I></h2>
<P>

<H3>Definition</H3>The class <I><A HREF="Class_Aff_transformation_3.html#Cross_link_anchor_64">Aff_transformation_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;</I> represents three-dimensioanl affine transformations. 
The general form of an affine transformation is based on a homogeneous
representation of points. Thereby all transformations can be realized by
matrix multiplication.
<P>

Multiplying the transformation matrix by a scalar does not change the
represented transformation. Therefore, any transformation represented
by a matrix with rational entries can be represented by a
transformation matrix with integer entries as well. (Multiply the
matrix with the common denominator of the rational entries.) Hence, it
is sufficient to use the number type <I><A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT</I> to represent
the entries of the transformation matrix.
<P>

C<SMALL>GAL</SMALL> offers several specialized affine transformations. Different
constructors are provided to create them. They are parameterized with
a symbolic name to denote the transformation type, followed by
additional parameters. The symbolic name tags solve ambiguities in the
function overloading and they make the code more readable, i.e., what
type of transformation is created.
<P>

In three-dimensional space we have a <MATH><I>4 &times; 4</I></MATH> matrix
<MATH><I>(m<SUB>ij</SUB>)<SUB>i,j=0...3</SUB></I></MATH>.  Entries <MATH><I>m<SUB>30</SUB></I></MATH>, <MATH><I>m<SUB>31</SUB></I></MATH>, and
<MATH><I>m<SUB>32</SUB></I></MATH> are always zero and therefore do not appear in the
constructors.
<P>

<H3>Creation</H3>
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Aff_transformation_3.html#Cross_link_anchor_64">Aff_transformation_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; t (  <A HREF="Class_Identity_transformation.html#Cross_link_anchor_143">Identity_transformation</A>);
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    introduces an identity transformation.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <A HREF="Class_Aff_transformation_3.html#Cross_link_anchor_64">Aff_transformation_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; t ( const <A HREF="Class_Translation.html#Cross_link_anchor_151">Translation</A>,  <A HREF="Class_Vector_3.html#Cross_link_anchor_86">Vector_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; v);
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    introduces a translation by a vector <MATH><I>v</I></MATH>.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    <A HREF="Class_Aff_transformation_3.html#Cross_link_anchor_64">Aff_transformation_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; t ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    const <A HREF="Class_Scaling.html#Cross_link_anchor_149">Scaling</A>,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT s,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT hw = RT(1));</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    introduces a scaling by a scale factor <MATH><I>s/hw</I></MATH>.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    <A HREF="Class_Aff_transformation_3.html#Cross_link_anchor_64">Aff_transformation_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; t ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     <A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m00,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m01,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m02,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m03,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m10,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m11,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m12,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m13,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m20,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m21,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m22,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m23,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT hw = RT(1));</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    introduces a general affine transformation of the matrix
             form <IMG ALIGN=CENTER 
             SRC="fig/arrthree.gif"> . The part <MATH><i>hw</i><SUP>-1</SUP></MATH> 
             <IMG ALIGN=CENTER SRC="fig/arrlinthree.gif">
             defines the scaling and rotational part of the transformation, 
             while the vector <MATH><i>hw</i><SUP>-1</SUP></MATH> <IMG ALIGN=CENTER 
             SRC="fig/transvecthree.gif"> contains the translational part.
<P>

</TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>
        <I><NOBR>
    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
    <A HREF="Class_Aff_transformation_3.html#Cross_link_anchor_64">Aff_transformation_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; t ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>
     <A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m00,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m01,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m02,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m10,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m11,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m12,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m20,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m21,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT m22,<BR>

<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT hw = RT(1));</I></TD></TR></TABLE>
    
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>
    introduces a general linear transformation of the 
             matrix form <IMG ALIGN=CENTER 
             SRC="fig/arrthree2.gif"> , i.e. an affine
             transformation without translational part.
<P>

</TD></TR>
        </TABLE>
<P>

<H3>Operations</H3>
<P>

Each class <I>Class_3&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;</I> representing
a geometric object in 3D has a member function:
<P>

<I>Class_3&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;  transform(<A HREF="Class_Aff_transformation_3.html#Cross_link_anchor_64">Aff_transformation_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; t)</I>.
<P>

The transformation classes provide a member function <I>transform()</I>
for points, vectors, directions, and planes:
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Point_36Kernel9_transform6const_Point_36Kernel9__p9_const;"></A>
<A HREF="Class_Point_3.html#Cross_link_anchor_74">Point_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    t.transform (  <A HREF="Class_Point_3.html#Cross_link_anchor_74">Point_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Vector_36Kernel9_transform6const_Vector_36Kernel9__p9_const;"></A>
<A HREF="Class_Vector_3.html#Cross_link_anchor_86">Vector_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    t.transform (  <A HREF="Class_Vector_3.html#Cross_link_anchor_86">Vector_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_Direction_36Kernel9_transform6const_Direction_36Kernel9__p9_const;"></A>
<A HREF="Class_Direction_3.html#Cross_link_anchor_66">Direction_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    t.transform (  <A HREF="Class_Direction_3.html#Cross_link_anchor_66">Direction_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Plane_36Kernel9_transform6const_Plane_36Kernel9__p9_const;"></A>
<A HREF="Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    t.transform (  <A HREF="Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        
    
        </TR>
        </TABLE>
<P>

C<SMALL>GAL</SMALL> provides four function operators for these member functions:
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A HREF="Class_Point_3.html#Cross_link_anchor_74">Point_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;<A NAME="Function_Point_36Kernel9_operator696const_Point_36Kernel9__p9_const;"></A>

        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    t.operator() (  <A HREF="Class_Point_3.html#Cross_link_anchor_74">Point_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A HREF="Class_Vector_3.html#Cross_link_anchor_86">Vector_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;<A NAME="Function_Vector_36Kernel9_operator696const_Vector_36Kernel9__p9_const;"></A>

        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    t.operator() (  <A HREF="Class_Vector_3.html#Cross_link_anchor_86">Vector_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A HREF="Class_Direction_3.html#Cross_link_anchor_66">Direction_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;<A NAME="Function_Direction_36Kernel9_operator696const_Direction_36Kernel9__p9_const;"></A>

        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    t.operator() (  <A HREF="Class_Direction_3.html#Cross_link_anchor_66">Direction_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A HREF="Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;<A NAME="Function_Plane_36Kernel9_operator696const_Plane_36Kernel9__p9_const;"></A>

        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    t.operator() (  <A HREF="Class_Plane_3.html#Cross_link_anchor_72">Plane_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt; p)
        </I></NOBR>
        
    
        </TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A HREF="Class_Aff_transformation_3.html#Cross_link_anchor_64">Aff_transformation_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;<A NAME="Function_Aff_transformation_36Kernel9_operator*6const_Aff_transformation_36Kernel9__s9_const;"></A>

        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    t.operator* (  s)
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    composes two affine transformations.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>
        <I><NOBR>
    <A NAME="Function_Aff_transformation_36Kernel9_inverse69_const;"></A>
<A HREF="Class_Aff_transformation_3.html#Cross_link_anchor_64">Aff_transformation_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;
        </I></NOBR>
        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    t.inverse ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    gives the inverse transformation.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_even69_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    t.is_even ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>true</I>, if the transformation is not reflecting,
        i.e. the determinant of the involved linear transformation is
        non-negative.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_bool_is_odd69_const;"></A>
bool
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    t.is_odd ()
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns <I>true</I>, if the transformation is reflecting.
        </TD></TR>
        </TABLE>
<P>

The matrix entries of a matrix representation of a <I><A HREF="Class_Aff_transformation_3.html#Cross_link_anchor_64">Aff_transformation_3</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;</I>
can be accessed trough the following member functions:
<P>

<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Kernel::FT_cartesian6int_i+_int_j9_const;"></A>
<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::FT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    t.cartesian ( int i,  int j)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Kernel::FT_m6int_i+_int_j9_const;"></A>
<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::FT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    t.m ( int i,  int j)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns entry <MATH><I>m<SUB>ij</SUB></I></MATH> in a matrix representation in which <MATH><I>m<SUB>33</SUB></I></MATH> is 1.
        </TD></TR>
        <TR><TD><BR></TD></TR>
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Kernel::RT_homogeneous6int_i+_int_j9_const;"></A>
<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    t.homogeneous ( int i,  int j)
        </I></NOBR>
        
    
        </TR>
        
        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>
        <I><NOBR>
    <A NAME="Function_Kernel::RT_hm6int_i+_int_j9_const;"></A>
<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>::RT
        </I></NOBR>
        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>
        <I><NOBR>
    t.hm ( int i,  int j)
        </I></NOBR>
        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>
    returns entry <MATH><I>m<SUB>ij</SUB></I></MATH> in some fixed matrix representation.
        </TD></TR>
        </TABLE>
<P>

For affine transformations  no I/O operators are defined.
<P>

<H3>See Also</H3><I><A HREF="Class_Aff_transformation_2.html#Cross_link_anchor_39">CGAL::Aff_transformation_2</A>&lt;<A HREF="Concept_Kernel.html#Cross_link_anchor_0">Kernel</A>&gt;</I><BR>

<I><A HREF="Class_Identity_transformation.html#Cross_link_anchor_142">CGAL::Identity_transformation</A></I><BR>

<I><A HREF="Class_Reflection.html#Cross_link_anchor_144">CGAL::Reflection</A></I><BR>

<I><A HREF="Class_Rotation.html#Cross_link_anchor_146">CGAL::Rotation</A></I><BR>

<I><A HREF="Class_Scaling.html#Cross_link_anchor_148">CGAL::Scaling</A></I><BR>

<I><A HREF="Class_Translation.html#Cross_link_anchor_150">CGAL::Translation</A></I><BR>


<P>

<div class="NavNext"><hr> <b>Next:</b> <a href="Class_Direction_3.html"><I>Direction_3&lt;Kernel&gt;</I></a> 


    
<div class="NavBottom">
<hr><!-- Bottom Navigation --------------------------------------------- -->
  <strong>Navigation:</strong>
<!Up_chapter_link_7!>
  <a href="../contents.html">Table of Contents</A>,
  <a href="../biblio.html">Bibliography</a>,
  <a href="../manual_index.html">Index</a>,
  <a href="../title.html">Title Page</a>
<!-- End of Bottom Navigation ------------------------------------------ -->


<hr><!-- --------------------------------------------------------------- -->
<div class="NavAddress">

The <A HREF=http://www.cgal.org>CGAL Project</A> .

Tue, December 21, 2004 .
<hr></div>
</body>  </html>  
