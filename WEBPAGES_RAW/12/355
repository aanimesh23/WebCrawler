<HTML xmlns:o xmlns:st1>
	<HEAD>
		<TITLE>ICS 180: Schedule and Handouts</TITLE><LINK rev="Made" href="mailto:stasio@ics.uci.edu"></HEAD>
	<BODY>
		<H2 align="left"><FONT size="4">ICS 268, Fall'04</FONT></H2>
		<H2 align="left">Lecture Summaries, Homeworks, Solutions, Handouts
		</H2>
		<P align="left">[+ a tentative schedule for what's to come]</P>
		<P><A href="http://www.ics.uci.edu/~stasio/fall04/ics268.html">[back to course main 
				page]</A>
			<HR>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in"><B style="mso-bidi-font-weight: normal">Lectures 
				1-2&nbsp;</B><B style="mso-bidi-font-weight: normal"> <A href="http://www.ics.uci.edu/~stasio/fall04/lect1.pdf">
					<EM>(lect1.pdf)</EM></A></B></P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in"><B style="mso-bidi-font-weight: normal">Lectures&nbsp;3-4&nbsp;
				<A href="http://www.ics.uci.edu/~stasio/spring04/h1-primes.pdf"><EM>(h1-primes.pdf)</EM></A>&nbsp; 
				,&nbsp; <A href="http://www.ics.uci.edu/~stasio/spring04/h2-composites.pdf"><EM>(h2-composites.pdf)</EM></A>&nbsp; 
				,&nbsp; <A href="http://www1.cs.columbia.edu/%7Etal/4995/angluin-yale-tr243.pdf"><EM><FONT color="purple">
							(Dana Angluin's notes on computation and number theory.pdf</FONT></EM></A><EM><FONT color="purple">)</FONT></EM>.
			</B>
		</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">We 
			covered some basic modular arithmetic in the "primes" handout, and the extended 
			Euclidean algorithm for computing gcd and modular inverses from chapter 4 of 
			Dana's notes.</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in"></B><B style="mso-bidi-font-weight: normal">Lecture&nbsp;5&nbsp;</B></P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">We 
			showed that modular exponentation can be done efficiently (polynomial time), 
			but we posed the inverse of the exponentiation, namely the discrete logarithm 
			problem, as a problem for which no known efficient&nbsp;algorithm is 
			known.&nbsp; We looked at&nbsp;two trivial attacks against discrete 
			logarithm:&nbsp;exhaustive search and guessing, and concluded that the first 
			runs in exponential time while the second one has a negligible probability of 
			success.&nbsp; We saw Shank's discrete logarithm running in time O(\sqrt(q)) 
			and the index calculus methods which run in time about O(2^{|p|^{1/3}), and we 
			translated these two algorithms into bounds on the size of p and q needed to 
			achieve security for the discrete logarithm in practice.&nbsp; Finally, we 
			stated the discrete logarihtm assumption.</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">Reading:&nbsp; 
			Most of&nbsp;this material is in Stinson,&nbsp;chapter 6, sections 6.1, 6.2 
			(esp 6.2.1, the other attacks are an optional reading), and 6.6.</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">In 
			the next lecture we'll abstract the assumption that discrete logarithm is hard 
			into an assumption that "exponentiation is a one-way function".&nbsp; The best 
			lecture notes which introduce one-way functions is <A href="http:yevlect2.pdf"><STRONG>Yevgeni 
					Dodis's lecture notes #2.pdf</STRONG></A>.&nbsp; For now read up 
			sections 1-7.</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">[If 
			you are curious why&nbsp;we are skipping Stinson 6.3-5, here is a quick 
			overview of that material:&nbsp;Chapter 6.3 gives another type of evidence that 
			the discrete logarithm is hard.&nbsp; Namely, it shows 
			that&nbsp;any&nbsp;attack logarithm which is "generic", must run in time at 
			least \Omega(\sqrt(q)).&nbsp; This shows that a type of a DL 
			computing&nbsp;algorithm like the Shank's&nbsp;algorithm&nbsp;in 
			fact&nbsp;cannot be improved.&nbsp; This is an optional but very recommended 
			reading.&nbsp; Sections 6.4 and 6.5 show that the discrete logarithm problem 
			can be posed in other groups than the Z_p^*.&nbsp; Section 6.4 describes the DL 
			problem in the extension field of Z_p, and section 6.5 descibes the DL problem 
			over elliptic curves.&nbsp; Both are important, but not essential to the 
			progress of ideas in this class, so they&nbsp;can be left as an optional 
			reading.]</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in"><B style="mso-bidi-font-weight: normal">Lecture&nbsp;6</B></P>
		<P></P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">We 
			have&nbsp;defined a (weak) secure authentication and shown&nbsp;how to use 
			one-way permutation (for example based on modular exponentiation) to build an 
			authentication protocol that satisfies this security property.&nbsp; One of the 
			weaknesses of this authentication scheme considered in the previous lecture is 
			that it is stateful and that every verifier which might want to authenticate 
			the client needs a separate verification key.</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">This 
			material is in section 11 of the above lecture notes.</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in"><B style="mso-bidi-font-weight: normal">Lectures&nbsp;7-8&nbsp;</B></P>
		<P></P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">We 
			define the strong notion of security for the authentication scheme (a.k.a. 
			"identification scheme").&nbsp; We show a public-key (and stateless) 
			authentication scheme&nbsp;which is based on&nbsp;modular exponentiation.&nbsp; 
			We introduce the concept of zero-knowledge proof and of the simulation proof 
			technique, and we show that this identification scheme is based on a 
			zero-knowledge proof of knowledge of discrete logarithm.&nbsp; This scheme is 
			similar to the Fiat-Shamir identification scheme, and it forms a basis of the 
			Schnorr Signature scheme [Schnorr, Crypto'89].&nbsp;&nbsp;We show that this 
			scheme is secure&nbsp;under the discrete logarithm assumption, i.e. the 
			assumption that&nbsp;modular exponentiation&nbsp;is a one-way function.&nbsp; 
			In its general form, this scheme&nbsp;actually&nbsp;works using any one-way 
			function with&nbsp;certain "homomorphic" properties.&nbsp;</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in"><B style="mso-bidi-font-weight: normal">Lectures&nbsp;9-10</B></P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">We 
			introduce preimage resistant, second-preimage resistant, and collision 
			resistant hash functions.&nbsp; We introduce the random oracle model for hash 
			functions, which implies all these properites.&nbsp; We show Merkle tree and 
			Merkle-Damgard construction of hash function on infinite domain from a hash 
			function that takes element from a small domain (such hash functions are called 
			"compression functions"), and we argue that both constructions preserve all the 
			needed properties of the hash function.&nbsp; We define message authentication 
			schemes (MACs), and we define a strong notion of security for MACs as 
			resistance against chosen message attack (CMA).&nbsp; We show a secure MAC 
			scheme based on a hash function, and argue that this scheme is CMA-secure as 
			long as the hash function can be modeled as a random oracle.&nbsp; We show also 
			a number-theoretical hash scheme, by Pedersen [Crypto'91], which is collision 
			resistant under the discrete logarithm assumption.</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">The 
			material for these lectures is Stinson's chapter 4, sections 4.1 to 4.4, with 
			section 4.5 as a recommended optional reading.&nbsp; For a different 
			take,&nbsp;see <A href="http:malkin22.pdf"><STRONG>Tal Malkin's lecture&nbsp;22.pdf</STRONG></A>
			&nbsp;and&nbsp;<A href="http:dodis11.pdf"><STRONG>Yevgeni Dodis's lecture&nbsp;11.pdf</STRONG></A>.</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in"><B style="mso-bidi-font-weight: normal">Lecture&nbsp;11</B></P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">We 
			define&nbsp;signature schemes and various notions of their security.&nbsp; We 
			show the Schnorr Signature scheme based on the authentiaction protocol from 
			lectures 7-8 above.&nbsp; We argue that it is existentially unforgeable under 
			the CMA attack under the discrete logarithm assumption and assuming the random 
			oracle model for a hash function used in this scheme.&nbsp; We show the 
			standard Digital Signature Standard (DSS) signature, which can be looked at as 
			a variant of the Schnorr signature scheme (historically DSS was first, but 
			Schnorr signature has better understood security).</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">
			See Stinson's 7.1, 7.2, 7.4.1, 7.4.2.&nbsp; For the background reading 
			with&nbsp;optional&nbsp;subjects&nbsp;like one-time signatues (which are also 
			covered in Stinson's chapter 7.5.1), see&nbsp;<A href="http:dodis12.pdf"><STRONG>Yevgeni 
					Dodis's lecture&nbsp;12.pdf</STRONG></A>&nbsp;or <A href="http:malkin18.pdf">
				<STRONG>Tal Malkin's lecture&nbsp;18.pdf</STRONG></A>,&nbsp;&nbsp; <A href="http:malkin19.pdf">
				<STRONG>lecture&nbsp;19.pdf</STRONG></A>, and <A href="http:malkin21.pdf"><STRONG>lecture&nbsp;21.pdf</STRONG></A>,</P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in"><B style="mso-bidi-font-weight: normal">Lectures&nbsp;12-13</B></P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">
		We introduce the RSA permutation, examine its relation to factoring, and argue 
		why it is assumed&nbsp;to be a&nbsp;trapdoor permuation.&nbsp; We show Rabin's 
		permutation and argue that Rabin is a Trapdoor permutation if and only if 
		factoring RSA moduli is hard.&nbsp; We show several signature schemes based on 
		RSA permutation, with varying degrees of security: plain RSA, padded RSA, and 
		full-domain hash RSA signature.&nbsp; Only the last scheme is known to be 
		existentially unforgeable under the CMA attack assuming RSA is a trapdoor 
		permutation and assuming the random oracle model for the hash function.
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo1; tab-stops: list .5in">
			Stinson covers the RSA cryptosystem in chapter 5.&nbsp; So far we covered 
			material in Sections 5.1-5.3 and 5.7-5.8.&nbsp; Sections 5.4-5.6 are optional 
			reading.&nbsp; We will come back Section 5.9 when discussing RSA encryption.
			<HR>
		<P></P>
		<P></P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l4 level1 lfo2; tab-stops: list .5in"><STRONG>Homework 
				1&nbsp;(due Tuesday, 10/5) </STRONG><A href="http://www.ics.uci.edu/~stasio/fall04/hmw1.pdf">
				<EM><STRONG>(hmw1.pdf)</STRONG></EM></A>,&nbsp;<A href="http://www.ics.uci.edu/~stasio/fall04/sol1.pdf"><EM><STRONG>(sol1.pdf)</STRONG></EM></A></P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l4 level1 lfo2; tab-stops: list .5in"><STRONG>Homework&nbsp;2&nbsp;(due 
				Thursday, 10/14) </STRONG><A href="http://www.ics.uci.edu/~stasio/fall04/hmw2.pdf">
				<EM><STRONG>(hmw2.pdf)</STRONG></EM></A>,&nbsp;<A href="http://www.ics.uci.edu/~stasio/fall04/sol2.pdf"><EM><STRONG>(sol2.pdf)</STRONG></EM></A></P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l4 level1 lfo2; tab-stops: list .5in"><STRONG>Homework&nbsp;3&nbsp;(due 
				Thursday, 10/21) </STRONG><A href="http://www.ics.uci.edu/~stasio/fall04/hmw3.pdf">
				<EM><STRONG>(hmw3.pdf)</STRONG></EM></A>,&nbsp;<A href="http://www.ics.uci.edu/~stasio/fall04/sol3.pdf"><EM><STRONG>(sol3.pdf)</STRONG></EM></A></P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l4 level1 lfo2; tab-stops: list .5in"><STRONG>Homework&nbsp;4&nbsp;(due 
				Thursday, 11/04) </STRONG><A href="http://www.ics.uci.edu/~stasio/fall04/hmw4.pdf">
				<EM><STRONG>(hmw4.pdf)</STRONG></EM></A>,&nbsp;<A href="http://www.ics.uci.edu/~stasio/fall04/sol4.pdf"><EM><STRONG>(sol4.pdf)</STRONG></EM></A></P>
		<P></P>
		<P class="MsoNormal" style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l4 level1 lfo2; tab-stops: list .5in"><STRONG>Homework&nbsp;5&nbsp;(due 
				after the final week) </STRONG><A href="http://www.ics.uci.edu/~stasio/fall04/hmw5.pdf">
				<EM><STRONG>(hmw5.pdf)</STRONG></EM></A></P>
	</BODY>
</HTML>
