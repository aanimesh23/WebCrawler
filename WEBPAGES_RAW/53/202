<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><title>Python: module graph</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head><body bgcolor="#f0f0f8">

<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="#7799ee">
<td valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong>graph</strong></big></big></font></td
><td align=right valign=bottom
><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:///C:/users/pattis/workspace/courselib/graph.py">c:\users\pattis\workspace\courselib\graph.py</a></font></td></tr></table>
    <p><tt>#strict&nbsp;on&nbsp;__init__&nbsp;must&nbsp;have/not&nbsp;have&nbsp;node/edge&nbsp;else&nbsp;exception</tt></p>
<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ee77aa">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>
    
<tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl>
<dt><font face="helvetica, arial"><a href="builtins.html#object">builtins.object</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="graph.html#Graph">Graph</a>
</font></dt></dl>
</dd>
</dl>
 <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Graph">class <strong>Graph</strong></a>(<a href="builtins.html#object">builtins.object</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Implements&nbsp;a&nbsp;<a href="#Graph">Graph</a>&nbsp;data&nbsp;type:&nbsp;it&nbsp;can&nbsp;manipulate&nbsp;nodes&nbsp;and<br>
&nbsp;&nbsp;edges&nbsp;and&nbsp;provides&nbsp;many&nbsp;iterators<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="Graph-__bool__"><strong>__bool__</strong></a>(self)</dt><dd><tt>Determine&nbsp;the&nbsp;truth&nbsp;of&nbsp;a&nbsp;graph:&nbsp;non-empty&nbsp;graphs&nbsp;are&nbsp;True</tt></dd></dl>

<dl><dt><a name="Graph-__init__"><strong>__init__</strong></a>(self, strict<font color="#909090">=False</font>, initial_graph<font color="#909090">=None</font>)</dt><dd><tt><a href="#Graph">Graph</a>&nbsp;is&nbsp;constructed&nbsp;to&nbsp;store&nbsp;all&nbsp;the&nbsp;nodes&nbsp;and&nbsp;values&nbsp;in&nbsp;initial_graph<br>
&nbsp;&nbsp;(if&nbsp;it&nbsp;is&nbsp;present)&nbsp;otherwise&nbsp;no&nbsp;nodes&nbsp;and&nbsp;edges;&nbsp;a&nbsp;strict&nbsp;graph&nbsp;does&nbsp;not<br>
&nbsp;&nbsp;allow&nbsp;re-adding&nbsp;edges&nbsp;or&nbsp;values&nbsp;(they&nbsp;must&nbsp;be&nbsp;removed&nbsp;before&nbsp;re-adding);<br>
&nbsp;&nbsp;it&nbsp;will&nbsp;raise&nbsp;more&nbsp;exceptions</tt></dd></dl>

<dl><dt><a name="Graph-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<dl><dt><a name="Graph-add_edge"><strong>add_edge</strong></a>(self, e, value)</dt><dd><tt>Add&nbsp;an&nbsp;edge&nbsp;to&nbsp;the&nbsp;graph<br>
In&nbsp;a&nbsp;strict&nbsp;graph,&nbsp;the&nbsp;node&nbsp;must&nbsp;be&nbsp;in&nbsp;the&nbsp;graph&nbsp;and&nbsp;edge&nbsp;must&nbsp;not&nbsp;be&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-add_node"><strong>add_node</strong></a>(self, n)</dt><dd><tt>Add&nbsp;a&nbsp;node&nbsp;to&nbsp;the&nbsp;graph<br>
In&nbsp;a&nbsp;strict&nbsp;graph,&nbsp;it&nbsp;must&nbsp;not&nbsp;already&nbsp;be&nbsp;present</tt></dd></dl>

<dl><dt><a name="Graph-clear"><strong>clear</strong></a>(self)</dt><dd><tt>Clear&nbsp;the&nbsp;graph&nbsp;of&nbsp;any&nbsp;nodes&nbsp;and&nbsp;values</tt></dd></dl>

<dl><dt><a name="Graph-degree"><strong>degree</strong></a>(self, n)</dt><dd><tt>Return&nbsp;the&nbsp;degree&nbsp;(number&nbsp;of&nbsp;edges&nbsp;with&nbsp;this&nbsp;node&nbsp;as&nbsp;their&nbsp;origin&nbsp;or&nbsp;destination)&nbsp;of&nbsp;a&nbsp;node<br>
In&nbsp;a&nbsp;strict&nbsp;graph,&nbsp;the&nbsp;node&nbsp;must&nbsp;be&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-edge_count"><strong>edge_count</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;number&nbsp;of&nbsp;edges&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-edge_value"><strong>edge_value</strong></a>(self, e)</dt><dd><tt>Return&nbsp;the&nbsp;value&nbsp;of&nbsp;an&nbsp;edge&nbsp;in&nbsp;the&nbsp;graph<br>
In&nbsp;a&nbsp;strict&nbsp;graph,&nbsp;&nbsp;both&nbsp;nodes&nbsp;and&nbsp;the&nbsp;edge&nbsp;must&nbsp;be&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-edges"><strong>edges</strong></a>(self)</dt><dd><tt>Return&nbsp;an&nbsp;iterator&nbsp;for&nbsp;a&nbsp;copy&nbsp;of&nbsp;all&nbsp;edges&nbsp;in&nbsp;the&nbsp;graph&nbsp;(in&nbsp;no&nbsp;special&nbsp;order)</tt></dd></dl>

<dl><dt><a name="Graph-has_edge"><strong>has_edge</strong></a>(self, e)</dt><dd><tt>Return&nbsp;whether&nbsp;the&nbsp;graph&nbsp;stores&nbsp;an&nbsp;edge</tt></dd></dl>

<dl><dt><a name="Graph-has_node"><strong>has_node</strong></a>(self, n)</dt><dd><tt>Return&nbsp;whether&nbsp;the&nbsp;graph&nbsp;stores&nbsp;a&nbsp;node</tt></dd></dl>

<dl><dt><a name="Graph-in_degree"><strong>in_degree</strong></a>(self, n)</dt><dd><tt>Return&nbsp;the&nbsp;in-degree&nbsp;(number&nbsp;of&nbsp;edges&nbsp;with&nbsp;this&nbsp;node&nbsp;as&nbsp;their&nbsp;destination)&nbsp;of&nbsp;a&nbsp;node<br>
In&nbsp;a&nbsp;strict&nbsp;graph,&nbsp;the&nbsp;node&nbsp;must&nbsp;be&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-in_edges"><strong>in_edges</strong></a>(self, n)</dt><dd><tt>Return&nbsp;an&nbsp;iterator&nbsp;for&nbsp;a&nbsp;copy&nbsp;of&nbsp;all&nbsp;in&nbsp;edges&nbsp;with&nbsp;this&nbsp;node&nbsp;as&nbsp;its&nbsp;destination<br>
In&nbsp;a&nbsp;strict&nbsp;graph,&nbsp;the&nbsp;node&nbsp;must&nbsp;be&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-in_nodes"><strong>in_nodes</strong></a>(self, n)</dt><dd><tt>Return&nbsp;an&nbsp;iterator&nbsp;for&nbsp;a&nbsp;copy&nbsp;of&nbsp;all&nbsp;in&nbsp;nodes&nbsp;that&nbsp;have&nbsp;an&nbsp;edge&nbsp;with&nbsp;this&nbsp;node&nbsp;as&nbsp;its&nbsp;destination<br>
In&nbsp;a&nbsp;strict&nbsp;graph,&nbsp;the&nbsp;node&nbsp;must&nbsp;be&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-is_empty"><strong>is_empty</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;the&nbsp;graph&nbsp;is&nbsp;empty&nbsp;(of&nbsp;nodes)</tt></dd></dl>

<dl><dt><a name="Graph-node_count"><strong>node_count</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;number&nbsp;of&nbsp;nodes&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-nodes"><strong>nodes</strong></a>(self)</dt><dd><tt>Return&nbsp;an&nbsp;iterator&nbsp;for&nbsp;a&nbsp;copy&nbsp;of&nbsp;all&nbsp;nodes&nbsp;in&nbsp;the&nbsp;graph&nbsp;(in&nbsp;no&nbsp;special&nbsp;order)</tt></dd></dl>

<dl><dt><a name="Graph-out_degree"><strong>out_degree</strong></a>(self, n)</dt><dd><tt>Return&nbsp;the&nbsp;out-degree&nbsp;(number&nbsp;of&nbsp;edges&nbsp;with&nbsp;this&nbsp;node&nbsp;as&nbsp;their&nbsp;origin)&nbsp;of&nbsp;a&nbsp;node<br>
In&nbsp;a&nbsp;strict&nbsp;graph,&nbsp;the&nbsp;node&nbsp;must&nbsp;be&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-out_edges"><strong>out_edges</strong></a>(self, n)</dt><dd><tt>Return&nbsp;an&nbsp;iterator&nbsp;for&nbsp;a&nbsp;copy&nbsp;of&nbsp;all&nbsp;in&nbsp;edges&nbsp;with&nbsp;this&nbsp;node&nbsp;as&nbsp;its&nbsp;origin<br>
In&nbsp;a&nbsp;strict&nbsp;graph,&nbsp;the&nbsp;node&nbsp;must&nbsp;be&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-out_nodes"><strong>out_nodes</strong></a>(self, n)</dt><dd><tt>Return&nbsp;an&nbsp;iterator&nbsp;for&nbsp;a&nbsp;copy&nbsp;of&nbsp;all&nbsp;in&nbsp;nodes&nbsp;that&nbsp;have&nbsp;an&nbsp;edge&nbsp;with&nbsp;this&nbsp;node&nbsp;as&nbsp;its&nbsp;origin<br>
In&nbsp;a&nbsp;strict&nbsp;graph,&nbsp;the&nbsp;node&nbsp;must&nbsp;be&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-read"><strong>read</strong></a>(self, file, conv<font color="#909090">=&lt;function &lt;lambda&gt;&gt;</font>, sep<font color="#909090">=' '</font>)</dt><dd><tt>Read&nbsp;a&nbsp;graph&nbsp;from&nbsp;a&nbsp;text&nbsp;file;&nbsp;assume&nbsp;sep&nbsp;is&nbsp;separating&nbsp;the&nbsp;nodes&nbsp;and&nbsp;edge&nbsp;values<br>
conv&nbsp;converts&nbsp;the&nbsp;string&nbsp;value&nbsp;of&nbsp;an&nbsp;edge&nbsp;into&nbsp;the&nbsp;appropriate&nbsp;type&nbsp;of&nbsp;value<br>
Graphs&nbsp;written&nbsp;by&nbsp;write&nbsp;should&nbsp;be&nbsp;readable&nbsp;by&nbsp;read</tt></dd></dl>

<dl><dt><a name="Graph-remove_edge"><strong>remove_edge</strong></a>(self, e)</dt><dd><tt>Remove&nbsp;an&nbsp;edge&nbsp;from&nbsp;the&nbsp;graph<br>
In&nbsp;a&nbsp;strict&nbsp;graph,&nbsp;both&nbsp;nodes&nbsp;and&nbsp;the&nbsp;edge&nbsp;must&nbsp;be&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-remove_node"><strong>remove_node</strong></a>(self, n)</dt><dd><tt>Remove&nbsp;a&nbsp;node&nbsp;from&nbsp;the&nbsp;graph<br>
In&nbsp;a&nbsp;strict&nbsp;graph,&nbsp;the&nbsp;node&nbsp;must&nbsp;be&nbsp;in&nbsp;the&nbsp;graph</tt></dd></dl>

<dl><dt><a name="Graph-write"><strong>write</strong></a>(self, file, conv<font color="#909090">=&lt;class 'str'&gt;</font>, sep<font color="#909090">=' '</font>)</dt><dd><tt>Write&nbsp;a&nbsp;graph&nbsp;into&nbsp;a&nbsp;text&nbsp;file;&nbsp;use&nbsp;sep&nbsp;to&nbsp;separate&nbsp;the&nbsp;nodes&nbsp;and&nbsp;edge&nbsp;values<br>
conv&nbsp;converts&nbsp;the&nbsp;value&nbsp;of&nbsp;an&nbsp;edge&nbsp;into&nbsp;the&nbsp;appropriate&nbsp;string&nbsp;(with&nbsp;str&nbsp;the&nbsp;default)<br>
Graphs&nbsp;written&nbsp;by&nbsp;write&nbsp;should&nbsp;be&nbsp;readable&nbsp;by&nbsp;read</tt></dd></dl>

<hr>
Data descriptors defined here:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>NodeInfo</strong> = &lt;class 'graph.NodeInfo'&gt;<dd><tt>NodeInfo&nbsp;stores&nbsp;the&nbsp;set&nbsp;of&nbsp;incoming&nbsp;and&nbsp;outgoing&nbsp;edges&nbsp;for&nbsp;every&nbsp;node</tt></dl>

</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#eeaa77">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Functions</strong></big></font></td></tr>
    
<tr><td bgcolor="#eeaa77"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt><a name="-connected_components"><strong>connected_components</strong></a>(g)</dt></dl>
 <dl><dt><a name="-make_symmetric"><strong>make_symmetric</strong></a>(g)</dt></dl>
 <dl><dt><a name="-minimum_spanning_tree"><strong>minimum_spanning_tree</strong></a>(g)</dt></dl>
 <dl><dt><a name="-random_graph"><strong>random_graph</strong></a>(nodes, percent)</dt></dl>
</td></tr></table>
</body></html>