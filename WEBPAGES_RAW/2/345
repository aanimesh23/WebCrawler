<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Pregelix</title>
<meta property="og:image" content="images/pregelix.png"/>
<link rel="stylesheet" href="css/styles.css" type="text/css" />
<script src="js/jquery.min.js"></script>
<script>
$(document).ready(function(){
    $("#index").addClass("selected");
});
</script>

</head>

<body>
<div id="container">
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-50915345-1', 'uci.edu');
  ga('send', 'pageview');

</script>

<!-- Facebook Like button script -->
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div id="header">
    <table>
        <tr>
            <td align="left">
                <a href=""><img src="logo.svg" width="300"></img></a>
            </td>
	    <td align="left">
                <a href=""><img src="images/lead.png" width="300"></img></a>
            </td>
            <td align="right" valign="bottom">
				<table style="text-align:right;">
				<tr>
					<td style="padding-bottom:5px;">
						<div style="float: right">
							<g:plusone size="medium" align="right" href="http://pregelix.ics.uci.edu/"></g:plusone>
						</div>
					</td>
				</tr>
				<!--<tr>
					<td>
						<div class="fb-like" data-href="http://pregelix.ics.uci.edu" data-send="false" data-layout="button_count" data-width="450" data-show-faces="false" data-font="arial"></div>
					</td>
				</tr>
				<tr style="float:right;">
					<td>
						<a target="_blank" href="https://twitter.com/ASTERIXUCI"><img src="images/twitter.png" title="AsterixDB Twitter"></img></a>
					</td>
					<td>
						<a target="_blank" href="https://www.facebook.com/AsterixDB"><img src="images/facebook.png" title="AsterixDB Facebook"></img></a>
					</td>
				</tr>
				-->
				</table>
            </td>
	<td>
	</td>
        </tr>   
    </table>
</div>  

<!-- Google+ +1 button script -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>

<div id="navigation">
    <ul>
        <li id="index"><a href="index.html">Overview</a></li>
        <!--<li id="ecosystem"><a href="ecosystem.html">Ecosystem</a></li> -->
        <li id="download"><a href="download.html">Download</a></li>
	<li id="pubs"><a href="performance.html">Performance</a></li>
        <!--<li><a href="./documentation/index.html" target="_blank">Documentation</a></li>-->
        <li id="news"><a href="news.html">News</a></li>
        <li id="pubs"><a href="publications.html">Publications</a></li>
	<li id="talks"><a href="talks.html">Talks</a></li>     
        <li id="team"><a href="team.html">Team</a></li>
        <li id="sponsors"><a href="sponsors.html">Sponsors</a></li>
        <li id="contact"><a href="contact.html">Contact</a></li>
    </ul>
</div>
 
    <div id="body">
    	
        
        <div id="content"> 

<p>
 <h1>Performance</h1>
 </br>
 <a href="#setup"><h4>Benchmark Setup</h4></a>
 <a href="#time"><h4>Execution Time</h4></a>
 <a href="#scalability"><h4>Scalability</h4></a>
 <a href="#throughput"><h4>Throughput</h4></a>
 <a href="#flexibility"><h4>Physical Flexibility</h4></a>
 <a href="#singlemachineperformance"><h4>Single Machine Performance</h4></a>
</p>

<h3><a name="setup">Benchmark Setup</a></h3>
<p>
We ran the benchmark on a 32-node Linux IBM x3650 cluster with one
additional master machine of the same configuration. Nodes are connected with
a Gigabit Ethernet switch.  Each node has one Intel Xeon processor E5520
2.26GHz with four cores, 8GB of RAM, and two 1TB, 7.2K RPM hard disks.  
</p>

<p>
In our benchmark, we leverage two real-world graph-based datasets.  The
first is the Webmap dataset taken from a crawl of the web in the
year 2002.  The second is the BTC
dataset, which is a
undirected semantic graph converted from the original Billion Triple Challenge 2009 RDF
dataset.  
We run PageRank using the Webmap datasets and run SSSP (single source shortest paths) and CC (connected components) using the BTC datasets.
The following tables show statistics for these graph datasets, including the full dataset as well as several down-samples and scale-ups.
</p>



<table style="display:inline" border="0" cellspacing="0" cellpadding="0">
<tr>
  <td><FONT SIZE=2>Name</FONT></td>
  <td><FONT SIZE=2>Size</FONT></td>		
  <td><FONT SIZE=2>#Vertice</FONT></td>
  <td><FONT SIZE=2>#Edge</FONT></td>
  <td><FONT SIZE=2>Avg. Degree</FONT></td>
</tr>
<tr>
   <td><FONT SIZE=2>Large</FONT></td>
   <td><FONT SIZE=2>71.82GB</FONT></td>		
   <td><FONT SIZE=2>1,413,511,390</FONT></td>
   <td><FONT SIZE=2>8,050,112,169</FONT></td>
   <td><FONT SIZE=2>5.69</FONT></td>
</tr>
<tr>
   <td><FONT SIZE=2>Medium</FONT></td>
   <td><FONT SIZE=2>31.78GB</FONT></td>
   <td><FONT SIZE=2>709,673,622</FONT></td>
   <td><FONT SIZE=2>2,947,603,924</FONT></td>
   <td><FONT SIZE=2>4.15</FONT></td>
</tr>
<tr>
   <td><FONT SIZE=2>Small</FONT></td>
   <td><FONT SIZE=2>14.05GB</FONT></td>
   <td><FONT SIZE=2>143,060,913</FONT></td>
   <td><FONT SIZE=2>1,470,129,872</FONT></td>
   <td><FONT SIZE=2>10.27</FONT></td>
</tr>
<tr>
   <td>X-Small</td>
   <td>9.99GB</td>
   <td>75,605,388</td>
   <td>1,082,093,483</td>
   <td>14.31</td>
</tr>
<tr>
   <td>Tiny</td>
   <td>2.93GB</td>
   <td>25,370,077</td>
   <td>318,823,779</td>
   <td>12.02</td>
</tr>
</table>
<strong>Statistics of the Webmap datasets</strong>
<p/>

<table style="display:inline"  border="0" cellspacing="0" cellpadding="0">
<tr>
  <td>Name</td>
  <td>Size</td>         
  <td>#Vertice</td>
  <td>#Edge</td>
  <td>Avg. Degree</td>
</tr>
<tr>
  <td>Large</td>
  <td>66.48GB</td>             
  <td>690,621,916</td>
  <td>6,177,086,016</td>
  <td>8.94</td>
</tr>
<tr>
  <td>Medium</td>
  <td>49.86GB</td>
  <td>517,966,437</td>
  <td>4,632,814,512</td>
  <td>8.94</td>
</tr>
<tr>
  <td>Small</td>
  <td>33.24GB</td>
  <td>345,310,958</td>
  <td>3,088,543,008</td>
  <td>8.94</td>
</tr>
<tr>
  <td>X-Small</td>
  <td>16.62GB</td>
  <td>172,655,479</td>
  <td>1,544,271,504</td>
  <td>8.94</td>
</tr>
<tr>
  <td>Tiny</td>
  <td>7.04GB</td>
  <td>107,706,280</td>
  <td>607,509,766</td>
  <td>5.64</td>
</tr>
</table>
<strong>Statistics of the BTC datasets</strong> 
<p/>

<p>
Below  are the steps we used to run:
</br>
<a href="graphlab.html">GraphLab</a> (confirmed by <a href="http://www.cs.berkeley.edu/~jegonzal/">Dr. Joseph Gonzalez</a>)</br>
<a href="graphx.html">GraphX</a>
</p>

<h3><a name="time">Execution Time</a></h3>
<center>
<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1831148727&zx=svsn7oxf06k7"><img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1831148727&zx=svsn7oxf06k7" width="45%"/></a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1670600966&zx=5c59dfwe72s5">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1670600966&zx=5c59dfwe72s5" width="45%"/>
</a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1438500213&zx=rc8c6yun9ul">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1438500213&zx=rc8c6yun9ul" width="45%"/>
</a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=174953487&zx=b4c1ksf26stg">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=174953487&zx=b4c1ksf26stg" width="45%"/>
</a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=248295890&zx=5nayj55g6321">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=248295890&zx=5nayj55g6321" width="45%"/>
</a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=585341924&zx=yfa0fci4otse">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=585341924&zx=yfa0fci4otse" width="45%"/>
</a>
</center>
<p>
The above figures show that while Pregelix scales to out-of-core workloads, Giraph fails to run
the three algorithms once the relative dataset size exceeds 0.15, even with its out-of-core
setting enabled.

When the computation has sufficient memory, Pregelix offers comparable
execution time to Giraph for message-intensive workloads like PageRank (up to 2x slower on small datasets but up to 2x faster on large datasets) and CC (similarly fast for all cases). Pregelix default plan offers
3.5x overall speedup and 7x per-iteration speedup over Giraph for
message-sparse workloads like SSSP.  All figures show that for in-memory workloads (when the relative dataset size is less than 0.15), Giraph has steeper (worse) scaling curves than Pregelix. 
GraphLab, GraphX, and Hama even fail earlier than Giraph, with even steeper scaling curves. GraphLab has the best average-iteration time on small datasets (e.g., 0.85--5x faster than Pregelix, 0.76--12x faster than Giraph, on Webmap-Tiny and BTC-Tiny), but performs worse than Giraph and Pregelix on larger datasets. GraphX fails to load BTC-Tiny, therefore its results for SSSP and CC are missing.
</p>
</br>

<h3><a name="scalability">Scalability</a></h3>
<center>
<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=979327222&zx=ev1oz3yjw5sc">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=979327222&zx=ev1oz3yjw5sc" width="45%"/></a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1846744135&zx=e6cc29imklc6">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1846744135&zx=e6cc29imklc6" width="45%"/></a>
</a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1850958687&zx=noygiwgorbzr">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1850958687&zx=noygiwgorbzr" width="45%"/></a>
</a>
</center>
<p>
The parallel speedup is done on the dataset Webmap-X-Small.
The parallel speedup of Pregelix is very close to the ideal line where there is no network communication, while Giraph, GraphLab, GraphX all exhibit
even better speedup than the ideal line. The apparent super-liner parallel speedup of Giraph, GraphLab, and GraphX
is consistent with the fact that they perform super-linearly worse 
when the data volume assigned to each slave machine increases.
Hama can only run the smallest dataset on the largest cluster, so we cannot measure its parallel speedup.
</p>

<h3><a name="throughput">Throughput</a></h3>  
<center>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=678366277&zx=t0qwgpl8vjos">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=678366277&zx=t0qwgpl8vjos" width="45%"/>
</a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1344537051&zx=2anj17bkdh3y">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1344537051&zx=2anj17bkdh3y" width="45%"/>
</a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1491366125&zx=ali2lxbdt2ci">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1491366125&zx=ali2lxbdt2ci" width="45%"/>
</a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=454668287&zx=aazeytzc5aiy">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=454668287&zx=aazeytzc5aiy" width="45%"/>
</a>
</center>

<p>
we compare the job throughput of Hama, GraphLab, GraphX, Giraph, and Pregelix in a concurrent usage setting.
We ran PageRank jobs on the 32-machine cluster using four different samples of the Webmap dataset (X-Small, Small, Medium, and Large)
with various levels of job concurrency.  The above figures report
how the number of completed jobs per hour (<strong>jph</strong>) changes with the number of concurrent jobs.
</p>


<h3><a name="flexibility">Physical Flexibility</a></h3>
<p>
We ran the two join plans  for the three Pregel graph algorithms. 
As one can see in the following figures,  for message-sparse algorithms like SSSP, the left outer join Pregelix plan is much faster than the full outer join
plan. However, for message-intensive algorithms like PageRank, the full outer join plan is the winner. 
The CC algorithm's execution starts with intensive messages but the volume of messages decreases significantly in the last few of supersteps, and hence the two join plans
result in similar performance.
The fourth figure compares GraphLab, GraphX, Giraph, Hama, and Pregelix's left outer join plan, as shown in the figure, SSSP on Pregelix can be up to <strong>15x</strong> faster than on Giraph for the 
average per-iteration execution time, and even faster than other systems. 
</p>

<center>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1707778719&zx=h90f5mj5rm6y">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1707778719&zx=h90f5mj5rm6y" width="45%"/>
</a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1745079086&zx=vjdq6so5szt">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1745079086&zx=vjdq6so5szt" width="45%"/>
</a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=286876413&zx=v079d12rkyuu"/>
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=286876413&zx=v079d12rkyuu" width="45%"/>
</a>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=160630574&zx=q4prpb2d4lej">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=160630574&zx=q4prpb2d4lej" width="45%"/>
</a>
</center>

</p>

<h3><a name="singlemachineperformance">Single Machine Performance</a></h3>
<p>
For the PageRank algorithm, when the input dataset size relative to the machine's RAM size is less than 2.5, Pregelix offers better performance; otherwise, GraphChi is more efficient when both systems are limited to one machine. This is to be expected given that GraphChi focuses on fast (single machine) secondary storage access methods and does not have the overhead introduced by the network stack.For the PageRank algorithm, when the input dataset size relative to the machine's RAM size is less than 2.5, Pregelix offers better performance; otherwise, GraphChi is more efficient when both systems are limited to one machine. This is to be expected given that GraphChi focuses on fast (single machine) secondary storage access methods and does not have the overhead introduced by the network stack.
</p>

<center>

<a href="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1869443242&zx=580yhqd6vvba">
<img src="https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1869443242&zx=580yhqd6vvba" width="50%"/>
</a>

</center>

     </div>
    
        <div class="clear"></div> </div> <div id="footer">
    <table>
    <tr>
    <td align="left" width="220">
        <a href="http://www.isg.ics.uci.edu" target="_blank"><img src="images/isg.png" height="75" width="75" align="left" style="background-color : #fff;"></img></a>
    </td>
    <td align="center">
        <p>&copy; pregelix.ics.uci.edu 2014.</br><font style="font-size:xx-small;">Design by <a href="http://www.spyka.net">Free CSS Templates</a></font></p>
    </td>
    <td align="right" width="220">
        <a href="http://www.uci.edu" target="_blank"><img src="images/uci_white.png" height="75" width="75"></img></a>
        <a href="http://www.ucla.edu" target="_blank"><img src="images/ucla_black.gif" height="75" width="75"></img></a>
    </td>
    </tr>
    </table>
</div>


</div>
</body>
</html>
