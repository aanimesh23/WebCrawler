<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<title>Workshop on Cloud Security, February 18, 2015</title>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
</head>
<body>
<a href="/~theory/"><img src="http://www.ics.uci.edu/~theory/logo/CATOC2.jpg"></a>
<h2><a href="/~theory/workshop/">Workshop on Cloud Security</a><br>
Donald Bren Hall, Room 4011

<hr />
3:30-4:15pm:</h2>
<h1>
Zig-zag Sort: A Simple Deterministic Data-Oblivious Sorting Algorithm Running in O(n log n)
Time
</h1>
<h2>
Michael Goodrich, University of California, Irvine
</h2>

<p>
We describe and analyze Zig-zag Sort--a deterministic data-oblivious sorting algorithm
running in O(n log n) time that is arguably simpler than previously known algorithms with
similar properties, which are based on the AKS sorting network. Because it is
data-oblivious and deterministic, Zig-zag Sort can be implemented as a simple O(n log
n)-size sorting network, thereby providing a solution to an open problem posed by Incerpi
and Sedgewick in 1985. In addition, Zig-zag Sort is a variant of Shellsort, and is, in
fact, the first deterministic Shellsort variant running in O(n log n) time. The existence
of such an algorithm was posed as an open problem by Plaxton et al. in 1992 and also by
Sedgewick in 1996. More relevant for today, however, is the fact that the existence of a
simple data-oblivious deterministic sorting algorithm running in O(n log n) time
simplifies the inner-loop computation in several proposed oblivious-RAM simulation methods
(which utilize AKS sorting networks), and this, in turn, implies simplified mechanisms for
privacy-preserving data outsourcing in several cloud computing applications. We provide
both constructive and non-constructive implementations of Zig-zag Sort, based on the
existence of a circuit known as an epsilon-halver, such that the constant factors in our
constructive implementations are orders of magnitude smaller than those for constructive
variants of the AKS sorting network, which are also based on the use of epsilon-halvers.
</body>
</html>

