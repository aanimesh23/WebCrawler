<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--NewPage-->
<html>
<head>
<!-- Generated by javadoc on Thu Aug 31 15:31:12 PDT 2000 -->
<title>
  Class Network
</title>
</head>
<body>
<a name="_top_"></a>
<h1>
  Class Network
</h1>
<pre>
java.lang.Object
   |
   +----Network
</pre>
<hr>
<dl>
  <dt> public class <b>Network</b>
  <dt> extends Object
  <dt> implements EventDestination
</dl>
This class represents a generic multiprocessor network
<p>
<hr>
<a name="index"></a>
<h2>
  <img src="images/variable-index.gif" width=207 height=38 alt="Variable Index">
</h2>
<dl>
  <dt> <img src="images/blue-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#ASYNCHRONOUS"><b>ASYNCHRONOUS</b></a>
  <dd> If the network is ASYNCHRONOUS
  <dt> <img src="images/blue-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#SYNCHRONOUS"><b>SYNCHRONOUS</b></a>
  <dd> If the network is SYNCHRONOUS
</dl>
<h2>
  <img src="images/constructor-index.gif" width=275 height=38 alt="Constructor Index">
</h2>
<dl>
  <dt> <img src="images/yellow-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#Network()"><b>Network</b></a>()
  <dd> Creates a new network, does not create any processors or connections, use other method for this

  <dt> <img src="images/yellow-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#Network(TheSimulator, java.io.FileInputStream)"><b>Network</b></a>(TheSimulator, FileInputStream)
  <dd> Creates a new network with the specified characteristics
  
</dl>
<h2>
  <img src="images/method-index.gif" width=207 height=38 alt="Method Index">
</h2>
<dl>
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#addLink(int, int, int)"><b>addLink</b></a>(int, int, int)
  <dd> Add a link between two processors usinf processor id's
  
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#addLink(java.lang.String, java.lang.String, int)"><b>addLink</b></a>(String, String, int)
  <dd> Add a link between two processors using processor names
  
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#addProcessor(int, int, int)"><b>addProcessor</b></a>(int, int, int)
  <dd> Add a processor to the network
 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#addProcessor(int, int, int, float, float, float)"><b>addProcessor</b></a>(int, int, int, float, float, float)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#addProcessor(Processor, Processor[])"><b>addProcessor</b></a>(Processor, Processor[])
  <dd> Add a processor to the network
  
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#addProcessor(java.lang.String, int, int)"><b>addProcessor</b></a>(String, int, int)
  <dd> Add a processor to the network, timeslicelength default to 10
 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#addProcessor(java.lang.String, int, int, int)"><b>addProcessor</b></a>(String, int, int, int)
  <dd> Add a processor to the network
 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#allIdleProcessors()"><b>allIdleProcessors</b></a>()
  <dd>   
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#allProcessors()"><b>allProcessors</b></a>()
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#dispatchEvent(SimEvent)"><b>dispatchEvent</b></a>(SimEvent)
  <dd> <P>If this network is ASYNCHRONOUS this method simply passes the event on to the simulator
  if the network is SYNCHRONOUS it makes sure all the events arrive to the simulator at the same time
  
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getAverageTimeslice()"><b>getAverageTimeslice</b></a>()
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getNeighbours(int)"><b>getNeighbours</b></a>(int)
  <dd> return the neighbours of the processor
  
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getProcessor(int)"><b>getProcessor</b></a>(int)
  <dd> get the processor with the corresponding ID
 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getRandomProcessor()"><b>getRandomProcessor</b></a>()
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getType()"><b>getType</b></a>()
  <dd> Get the network type
  
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#handleEvent(SimEvent)"><b>handleEvent</b></a>(SimEvent)
  <dd> <P>Receives events from the simulator, implements the interface EventDestination
  
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#nrProcessors()"><b>nrProcessors</b></a>()
  <dd> return the number of processors in this network
  
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#readConfigStream(java.io.FileInputStream)"><b>readConfigStream</b></a>(FileInputStream)
  <dd> Creates a network according to the supplied instream
 for a specification of the file format see configfile.spec

  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#removeEvent(SimEvent)"><b>removeEvent</b></a>(SimEvent)
  <dd> Removes an already existing event from the global simulation queue
  
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#setType(int)"><b>setType</b></a>(int)
  <dd> Set the network type
  
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#setType(int, int)"><b>setType</b></a>(int, int)
  <dd> Set the network type
  
</dl>
<a name="variables"></a>
<h2>
  <img src="images/variables.gif" width=153 height=38 alt="Variables">
</h2>
<a name="SYNCHRONOUS"><img src="images/blue-ball.gif" width=12 height=12 alt=" o "></a>
<b>SYNCHRONOUS</b>
<pre>
 public static final int SYNCHRONOUS
</pre>
<dl>
  <dd> If the network is SYNCHRONOUS<p>
</dl>
<a name="ASYNCHRONOUS"><img src="images/blue-ball.gif" width=12 height=12 alt=" o "></a>
<b>ASYNCHRONOUS</b>
<pre>
 public static final int ASYNCHRONOUS
</pre>
<dl>
  <dd> If the network is ASYNCHRONOUS<p>
</dl>
<a name="constructors"></a>
<h2>
  <img src="images/constructors.gif" width=231 height=38 alt="Constructors">
</h2>
<a name="Network"></a>
<a name="Network()"><img src="images/yellow-ball.gif" width=12 height=12 alt=" o "></a>
<b>Network</b>
<pre>
 public Network()
</pre>
<dl>
  <dd> Creates a new network, does not create any processors or connections, use other method for this
<p>
</dl>
<a name="Network(TheSimulator, java.io.FileInputStream)"><img src="images/yellow-ball.gif" width=12 height=12 alt=" o "></a>
<b>Network</b>
<pre>
 public Network(<a href="TheSimulator.html#_top_">TheSimulator</a> sim,
                FileInputStream is)
</pre>
<dl>
  <dd> Creates a new network with the specified characteristics
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> sim - An instance of TheSimulator
    <dd> is - An input stream specifying how the networks topology looks
            (see detailed description in <A HREF="album.html">here</A>)
  </dl></dd>
</dl>
<a name="methods"></a>
<h2>
  <img src="images/methods.gif" width=151 height=38 alt="Methods">
</h2>
<a name="dispatchEvent(SimEvent)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="dispatchEvent"><b>dispatchEvent</b></a>
<pre>
 public void dispatchEvent(<a href="SimEvent.html#_top_">SimEvent</a> se)
</pre>
<dl>
  <dd> <P>If this network is ASYNCHRONOUS this method simply passes the event on to the simulator
  if the network is SYNCHRONOUS it makes sure all the events arrive to the simulator at the same time
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> se - the event to be dispatched
  </dl></dd>
</dl>
<a name="addProcessor(java.lang.String, int, int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="addProcessor"><b>addProcessor</b></a>
<pre>
 public int addProcessor(String name,
                         int speed,
                         int bufferSize,
                         int tslc)
</pre>
<dl>
  <dd> Add a processor to the network
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> name - The name used for this processor when using the addLink method
    <dd> speed - The processor speed
    <dd> bufferSize - The size of the processors communications buffer
    <dd> tslc - the length of this processors timeslice
    <dt> <b>Returns:</b>
    <dd> the id of the new processor
  </dl></dd>
</dl>
<a name="addProcessor(int, int, int, float, float, float)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="addProcessor"><b>addProcessor</b></a>
<pre>
 public int addProcessor(int speed,
                         int bufferSize,
                         int tslc,
                         float L,
                         float o,
                         float g)
</pre>
<a name="addProcessor(int, int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="addProcessor"><b>addProcessor</b></a>
<pre>
 public int addProcessor(int speed,
                         int bufferSize,
                         int tslc)
</pre>
<dl>
  <dd> Add a processor to the network
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> speed - The processor speed
    <dd> bufferSize - The size of the processors communications buffer
    <dd> tslc - the length of this processors timeslice
    <dt> <b>Returns:</b>
    <dd> the id of the new processor
  </dl></dd>
</dl>
<a name="getProcessor(int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getProcessor"><b>getProcessor</b></a>
<pre>
 public <a href="Processor.html#_top_">Processor</a> getProcessor(int peId)
</pre>
<dl>
  <dd> get the processor with the corresponding ID
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> peId - the processor ID
  </dl></dd>
</dl>
<a name="addProcessor(java.lang.String, int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="addProcessor"><b>addProcessor</b></a>
<pre>
 public int addProcessor(String name,
                         int speed,
                         int bufferSize)
</pre>
<dl>
  <dd> Add a processor to the network, timeslicelength default to 10
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> name - The name used for this processor when using the addLink method
    <dd> speed - The processor speed
    <dd> bufferSize - The size of the processors communications buffer
    <dt> <b>Returns:</b>
    <dd> the id of the new processor
  </dl></dd>
</dl>
<a name="addLink(java.lang.String, java.lang.String, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="addLink"><b>addLink</b></a>
<pre>
 public void addLink(String proc1,
                     String proc2,
                     int speed)
</pre>
<dl>
  <dd> Add a link between two processors using processor names
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> proc1 - The first processor
    <dd> proc2 - The second processor
    <dt> <b>See Also:</b>
    <dd> <a href="#addProcessor">addProcessor</a>
  </dl></dd>
</dl>
<a name="addLink(int, int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="addLink"><b>addLink</b></a>
<pre>
 public void addLink(int proc1,
                     int proc2,
                     int speed)
</pre>
<dl>
  <dd> Add a link between two processors usinf processor id's
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> proc1 - The first processors id
    <dd> proc2 - The second processorid id
    <dt> <b>See Also:</b>
    <dd> <a href="#addProcessor">addProcessor</a>
  </dl></dd>
</dl>
<a name="addProcessor(Processor, Processor[])"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="addProcessor"><b>addProcessor</b></a>
<pre>
 public void addProcessor(<a href="Processor.html#_top_">Processor</a> p,
                          <a href="Processor.html#_top_">Processor</a> ns[])
</pre>
<dl>
  <dd> Add a processor to the network
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> p - the processor to add
    <dd> ns, - p:s neighbours
  </dl></dd>
</dl>
<a name="readConfigStream(java.io.FileInputStream)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="readConfigStream"><b>readConfigStream</b></a>
<pre>
 public void readConfigStream(FileInputStream fs)
</pre>
<dl>
  <dd> Creates a network according to the supplied instream
 for a specification of the file format see configfile.spec
<p>
</dl>
<a name="getType()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getType"><b>getType</b></a>
<pre>
 public int getType()
</pre>
<dl>
  <dd> Get the network type
<p>
  <dd><dl>
    <dt> <b>Returns:</b>
    <dd> the network type
    <dt> <b>See Also:</b>
    <dd> <a href="#_top_">Network</a>
  </dl></dd>
</dl>
<a name="setType(int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="setType"><b>setType</b></a>
<pre>
 public void setType(int s)
</pre>
<dl>
  <dd> Set the network type
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> s - The type of the Network
  </dl></dd>
</dl>
<a name="setType(int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="setType"><b>setType</b></a>
<pre>
 public void setType(int s,
                     int timeSliceLength)
</pre>
<dl>
  <dd> Set the network type
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> s - The type of the Network
    <dd> timeSliceLength - the length of the time slice. This set a global timeslice for all processors
  </dl></dd>
</dl>
<a name="removeEvent(SimEvent)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="removeEvent"><b>removeEvent</b></a>
<pre>
 public void removeEvent(<a href="SimEvent.html#_top_">SimEvent</a> e)
</pre>
<dl>
  <dd> Removes an already existing event from the global simulation queue
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> e - The event to remove from the simulators queue
  </dl></dd>
</dl>
<a name="handleEvent(SimEvent)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="handleEvent"><b>handleEvent</b></a>
<pre>
 public void handleEvent(<a href="SimEvent.html#_top_">SimEvent</a> e)
</pre>
<dl>
  <dd> <P>Receives events from the simulator, implements the interface EventDestination
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> e - the event
  </dl></dd>
</dl>
<a name="getAverageTimeslice()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getAverageTimeslice"><b>getAverageTimeslice</b></a>
<pre>
 public int getAverageTimeslice()
</pre>
<dl>
  <dd><dl>
    <dt> <b>Returns:</b>
    <dd> the average timeslice for all this networks processors
  </dl></dd>
</dl>
<a name="getRandomProcessor()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getRandomProcessor"><b>getRandomProcessor</b></a>
<pre>
 public int getRandomProcessor()
</pre>
<dl>
  <dd><dl>
    <dt> <b>Returns:</b>
    <dd> a processorID selected at uniform random from this netwoek
  </dl></dd>
</dl>
<a name="nrProcessors()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="nrProcessors"><b>nrProcessors</b></a>
<pre>
 public int nrProcessors()
</pre>
<dl>
  <dd> return the number of processors in this network
<p>
  <dd><dl>
    <dt> <b>Returns:</b>
    <dd> the number of processors
  </dl></dd>
</dl>
<a name="getNeighbours(int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getNeighbours"><b>getNeighbours</b></a>
<pre>
 public int[] getNeighbours(int PeId)
</pre>
<dl>
  <dd> return the neighbours of the processor
<p>
  <dd><dl>
    <dt> <b>Returns:</b>
    <dd> An array with the id of the neighbours
  </dl></dd>
</dl>
<a name="allIdleProcessors()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="allIdleProcessors"><b>allIdleProcessors</b></a>
<pre>
 public int[] allIdleProcessors()
</pre>
<dl>
  <dd><dl>
    <dt> <b>Returns:</b>
    <dd> An array with id:s for the processors that are currently idle
  </dl></dd>
</dl>
<a name="allProcessors()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="allProcessors"><b>allProcessors</b></a>
<pre>
 public int[] allProcessors()
</pre>
<dl>
  <dd><dl>
    <dt> <b>Returns:</b>
    <dd> An array with all processor id's
  This method relies on this class representation of processors.
  </dl></dd>
</dl>
</body>
</html>
