<?xml version='1.1'?>
<!DOCTYPE html
     PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
     'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
<head>
  <title>Alloy</title>
  <meta name='Author' content='Thomas A. Alspaugh'/>
  <meta name='Description' content="Alloy"/>
  <meta http-equiv='content-type' content='text/html; charset=ISO-8859-1'/>
  <meta http-equiv='Content-Style-Type' content='text/css'/>
  <link href='../../alspaugh-uci.css' rel='stylesheet' type='text/css'/>
  <!-- <link href='../alspaugh-uci-cls.css' rel='stylesheet' type='text/css'/> -->
  <style type='text/css'>
    .egList      {  list-style-type: lower-alpha;  }
    dl           {  padding-left: 1.0em;  }
    dt           {  margin-top: .6em;  margin-bottom: .05em;  }
    dd           {  margin-top: 0;     margin-bottom: .6em;  }
    dt           {  font-style: italic;  font-weight: bold;  }
    dl.code      {  padding-left: 0.75em;  }
    dl.code>dt   {  font-family: monospace;  font-style: normal;  }
    dl.code>dd   {  margin-left: 1.5em;  }
    code dfn     {  font-style: normal;  }
    span.comment {  color: olive;  }
    dl.code>dt   {  font-family: monospace;  }
    .black       {  color: black;  }
    .alloy {
      font-family: monospace;
      font-weight: bold;
      text-align: center;
      color: black;
      font-size: 120%;
    }
    span.m  {  font-style: normal;  font-size: 95%;  font-family: sans-serif;  }

    @media screen {
      body     {  background: url("img/bg-alloy.png") repeat-y;  }
      #TMain   {  margin-left: 10.00em;  }
    }
  </style>
</head>
<body>

<div id='TBg'>

<div id='THeader'>
Alloy
</div>

<div id='TLinks1' class='Links'> <!-- - - - - - - - - - - - - - - - - - - - -->
<p>  <a class='sc' href='../../index.html'>Home</a>
</p>
<div class='hr'> </div>
<p>  <a href='index.html'>Foundations home</a>
</p>
<div class='hr'> </div>
<p>
<a href='set.html'>Sets</a><br/>
<a href='relation.html'>Relations</a><br/>
<a href='correspondence.html'>Correspondences</a><br/>
<a href='orderedSet.html'>Ordered Sets</a><br/>
<a href='lattice.html'>Lattices</a><br/>
<a href='graph.html'>Graphs</a><br/>
<a href='powerset.html'>Powersets</a><br/>
<a href='binaryString.html'>Binary Strings</a><br/>
<a href='logicConcepts.html'>Logic</a><br/>
<a href='allen.html'>AIA</a><br/><!-- -spell AIA -->
<a href='greek.html'>Greek</a><br/>
</p>
<div class='hr'> </div>
<p>
<a href='glossaryExternal.html'>Glossary</a><br/>
<a href='goodAbstract.html'>Abstracts</a><br/>
<a href='argument.html'>Argument</a><br/>
<a href='ontology.html'>Glossaries</a><br/>
<a href='inquiryCycle.html'>Inquiry Cycle</a><br/>
<a href='hohfeld.html'>Legal Relations</a><br/>
<a href='goodPresentation.html'>Presentations</a><br/>
</p>
<div class='hr'> </div>
<p>
<a href='quickStart.html'>Elicitation</a><br/>
<a href='ontology.html'>Glossaries</a><br/>
<a href='goal.html'>Goals</a><br/>
<a href='istar.html'>i*</a><br/>
<a href='SCR.html'>SCR</a><br/>
<a href='tracing.html'>Tracing</a><br/>
</p>
<div class='hr2'> </div>
<p>
<a href='alloy.html'>Alloy</a><br/>
<a href='msc.html'>MSCs</a><br/>
<a href='regularExpression.html'>Regular Exprs.</a><br/>
</p><!-- -spell MSCs Exprs -->
<div class='hr2'> </div>
<p>
<a href='java-designPattern.html'>Design Patterns</a><br/>
<a href='javadoc.html'>Javadoc</a><br/>
<a href='java-package.html'>Java Packages</a><br/>
<a href='java-type.html'>Java Types</a><br/>
</p>
<div class='hr2'> </div>
<p>
<a href='html.html'>(X)HTML</a><br/>
<a href='xmlSchema.html'>XML Schemas</a><br/>
<a href='xslt.html'>XSLT</a><br/>
</p><!-- -spell XSLT -->
</div>


<!-- No right column -->
<div id='TMain'><!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!--xhtml -y -->


<!--spell  -->


<h1>Table of contents</h1>

<div id='ToC'>
  <h1 title='logic'><a href='#logic'>The Alloy logic</a></h1>
  <h1 title='quick'><a href='#quick'>Quick reference</a></h1>
  <h2><a href='#signature0'>Signatures and relations</a></h2>
  <h3><a href='#mulitplicity-constraint'>Multiplicity constraints in declarations</a></h3>
  <h2><a href='#disjointness'>Disjointness </a></h2>
  <h2><a href='#cardinality'>Cardinality constraints </a></h2>
  <h1 title='language'><a href='#language'>The Alloy language</a></h1>
  <h2 title='language-constructs'><a href='#language-constructs'>Language constructs</a></h2>
  <h2 title='which-where'><a href='#which-where'>Which construct to use where?</a></h2>
  <h1 title='function'><a href='#function'>Functions</a></h1>
  <h1 title='predicate'><a href='#predicate'>Predicates</a></h1>
  <h1 title='facts'><a href='#facts'>Facts</a></h1>
  <h1 title='assertion'><a href='#assertion'>Assertions</a></h1>
  <h1><a href='#tips'> Learnt by experience </a></h1>
  <h2><a href='#at'> When to use <code>@</code> </a></h2>
</div>


<h1 id='logic' title='logic'>The Alloy logic</h1>

<p>
The Alloy logic is a first-order logic
in which the domain is the set of all relations,
and terms include relational expressions
such as joins.&nbsp;
</p>

<p>
Everything in Alloy is a relation!&nbsp;
</p>

<ul>
  <li> A relation is a set of tuples of the same (positive) arity.&nbsp;
    Each tuple lists entities that are related to each other.&nbsp;
    The size of the relation
    is the number of tuples;
    the arity of the relation
    is the arity of the tuples.&nbsp;
  </li>
  <li> Sets are represented by unary relations.&nbsp;
    Each 1-tuple in the unary relation
    contains an element of the set.&nbsp;
  </li>
  <li> Scalars are represented by
    <a href='set.html#singleton-set'>singleton sets</a>.&nbsp;
    Since a set is a unary relation,
    an scalar is thus represented as a singleton (size 1) unary relation.&nbsp;
  </li>
</ul>

<p>
As a result,
the operators apply to relations, sets, and scalars,
and there are very few cases that produce no result.&nbsp;
</p>

<p>
Page numbers refer to
Daniel Jackson,
<i>Software Abstractions</i>,
MIT Press 2006.&nbsp;
</p>

<p>
<a href='http://alloy.mit.edu/alloy4/book.html'>How to update the book
for Alloy 4</a>
</p>


<h1 id='quick' title='quick'>Quick reference</h1>

<table>
<tbody>
  <tr><th colspan='2'>Set constants <span class='pg'>50</span></th></tr>
  <tr><td class='alloy' id='univ' title='univ'>univ
      </td>
      <td> The universal set
      </td>
  </tr>
  <tr><td class='alloy' id='none' title='none'>none
      </td>
      <td> The <a href='set.html#empty'>empty set</a>
      </td>
  </tr>
</tbody>
</table>

<table>
<tbody>
  <tr><th colspan='2'>Relation constants <span class='pg'>50</span></th></tr>
  <tr>
      <td class='alloy' id='iden' title='iden'>iden
      </td><!--spell iden -->
      <td>The <a href='relation.html#identity'>identity relation</a>
      </td>
  </tr>
</tbody>
</table>

<table>
<tbody>
  <tr><th colspan='3'>Set operators <span class='pg'>52</span></th></tr>
  <tr><th>Symbol</th><th>Name</th><th>Result</th>
  </tr>
  <tr><td class='alloy'>+
      </td>
      <td><a href='set.html#union'>Union</a>
      </td>
      <td rowspan='3'>A set
      </td>
  </tr>
  <tr><td class='alloy'>&amp;
      </td>
      <td><a href='set.html#intersection'>Intersection</a>
      </td>
  </tr>
  <tr><td class='alloy'>-
      </td>
      <td><a href='set.html#difference'>Difference</a>
      </td>
  </tr>
  <tr><td class='alloy' id='in' title='in'>in
      </td>
      <td> <a href='set.html#subset'>Subset</a>
      </td>
      <td rowspan='2'>T or F
      </td>
  </tr>
  <tr><td class='alloy'>=
      </td>
      <td><a href='set.html#equal'>Equality</a>
      </td>
  </tr>
</tbody>
</table>

<p>
<a href='als/set.als' id='set-examples'>Set examples</a>
</p>

<table>
<tbody>
  <tr><th colspan='3'>Relation operators <span class='pg'>55</span></th></tr>
  <tr><th>Symbol</th> <th>Name</th> <th>Syntax</th>
  </tr>
  <tr>
    <td class='alloy' id='arrow-product' title='arrow-product'>-&gt;
      </td>
    <td>(Arrow) <a href='relation.html#product'>product</a>
      </td>
    <td class='ce'><span class='m'>R1</span> <span class='alloy'>-&gt;</span>
      <span class='m'>R2</span>
      </td>
  </tr>
  <tr>
    <td class='alloy' id='dot-join' title='dot-join'>.
      </td>
    <td><a href='relation.html#join'>Join</a>
      </td>
    <td class='ce'><span class='m'>R1</span> <span class='alloy'>.</span>
      <span class='m'>R2</span>
      </td>
  </tr>
  <tr>
    <td class='alloy' id='box-join' title='box-join'>[]
      </td>
    <td>Join (a second notation for it)
      </td>
    <td class='ce'><span class='m'>R2</span>
      <span class='alloy'>[</span><span class='m'>R1</span><span class='alloy'>]</span>
      </td>
  </tr>
  <tr>
    <td class='alloy' id='transpose' title='transpose'>~
      </td>
    <td><a href='relation.html#transpose'>Transpose</a>
      </td>
    <td class='ce'><span class='alloy'>~</span> <span class='m'>R</span>
      </td>
  </tr>
  <tr>
    <td class='alloy' id='transitive-closure' title='transitive-closure'>^
      </td>
    <td><a href='relation.html#transitive-closure'>Transitive
      closure</a>
      </td>
    <td class='ce'><span class='alloy'>^</span> <span class='m'>R</span>
      </td>
  </tr>
  <tr>
    <td class='alloy'
       id='reflexive-transitive-closure'
    title='reflexive-transitive-closure'>*
      </td>
    <td>Reflexive transitive closure
      </td>
    <td class='ce'><span class='alloy'>*</span> <span class='m'>R</span>
      </td>
  </tr>
  <tr>
    <td class='alloy' id='domain-restriction' title='domain-restriction'>&lt;:
      </td>
    <td>Domain restriction
      </td>
    <td class='ce'><span class='m'>Set</span> <span class='alloy'>&lt;:</span>
      <span class='m'>R</span>
      </td>
  </tr>
  <tr>
    <td class='alloy' id='range-restriction' title='range-restriction'>:&gt;
      </td>
    <td>Range restriction
      </td>
    <td class='ce'><span class='m'>R</span> <span class='alloy'>:&gt;</span>
      <span class='m'>Set</span>
      </td>
  </tr>
  <tr>
    <td class='alloy' id='override' title='override'>++
      </td>
    <td>Override
      </td>
    <td class='ce'><span class='m'>R1</span> <span class='alloy'>++</span>
      <span class='m'>R2</span>
      </td>
  </tr>
</tbody>
</table>

<table>
<tbody>
  <tr><th colspan='3'>Logical operators <span class='pg'>69</span></th></tr>
  <tr><th>Symbol</th><th>Keyword</th><th>Name or result</th>
  </tr>
  <tr>
    <td class='alloy'>!
    </td>
    <td class='alloy' id='not' title='not'>not
    </td>
    <td><a href='logicConcepts.html#negation'>negation</a>
    </td>
  </tr>
  <tr>
    <td class='alloy'>&amp;&amp;
    </td>
    <td class='alloy' id='and' title='and'>and
    </td>
    <td><a href='logicConcepts.html#conjunction'>conjunction</a>
    </td>
  </tr>
  <tr>
    <td class='alloy'>||
    </td>
    <td class='alloy' id='or' title='or'>or
    </td>
    <td><a href='logicConcepts.html#disjunction'>disjunction</a>
    </td>
  </tr>
  <tr>
    <td class='alloy'>=&gt;
    </td>
    <td class='alloy' id='implies' title='implies'>implies
    </td>
    <td><a href='logicConcepts.html#implication'>implication</a>
    </td>
  </tr>
  <tr>
    <td class='alloy'>&lt;=&gt;
    </td>
    <td class='alloy' id='iff' title='iff'>iff
    </td>
    <td><a href='logicConcepts.html#logical-equivalence'>logical
      equivalence</a>
    </td>
  </tr>
  <tr>
    <td class='a bgsv'>
    </td>
    <td class='alloy' id='else' title='else'>else
    </td>
    <td><span class='m'>A</span><span class='alloy'>=&gt;</span><span
        class='m'>B</span> <span class='alloy'>else</span> <span class='m'>C</span>
        &equiv;
        <span class='alloy'>(</span><span class='m'>A</span><span
        class='alloy'>&amp;&amp;</span><span class='m'>B</span><span
        class='alloy'>)||(!</span><span class='m'>A</span><span
        class='alloy'>&amp;&amp;</span><span class='m'>C</span><span class='alloy'>)</span>
    </td>
  </tr>
</tbody>
</table>

<p>
<a href='als/else.als'><span class='alloy'>else</span> example</a>
</p>

<table>
<tbody>
  <tr><th colspan='3'>Quantifiers/predicates <span class='pg'>70</span></th></tr>
  <tr><td>
      </td>
      <th>Quantification<br/>
          <span class='alloy'>Q var:set | formula</span></th>
      <th>Predicate on relations<br/>
          <span class='alloy'>Q e</span></th>
  </tr>
  <tr><td class='alloy' id='all' title='all'>all
      </td>
      <td><a href='logicConcepts.html#universal-quantification'
        >universal</a>
      </td>
      <td class='ce'>&mdash;
      </td>
  </tr>
  <tr><td class='alloy' id='some' title='some'>some
      </td>
      <td><a href='logicConcepts.html#existential-quantification'
        >existential</a>
      </td>
      <td>size is 1 or greater
      </td>
  </tr>
  <tr><td class='alloy' id='no' title='no'>no
      </td>
      <td>&not;&exist;
      </td>
      <td>size is 0
      </td>
  </tr>
  <tr><td class='alloy' id='lone' title='lone'>lone
      </td>
      <td>zero or one exists
      </td>
      <td>size is 0 or 1
      </td>
  </tr>
  <tr><td class='alloy' id='one' title='one'>one
      </td>
      <td>exactly one exists
      </td>
      <td>singleton
      </td>
  </tr>
</tbody>
</table>

<p>
<a href='als/relation.als' id='relation-examples'>Relation and logic examples</a>
</p>

<table>
<tbody>
  <tr><th colspan='2'><span class='alloy'>let</span> <span class='pg'>73</span></th></tr>
  <tr><td><span class='alloy'>let</span> <span class='m'>x</span> =
        <span class='m'>e</span> | <span class='m'>A</span>
      </td>
      <td><span class='m'>A</span> with every occurrence of
        <span class='m'>x</span> replaced by expression <span class='m'>e</span>
      </td>
  </tr>
</tbody>
</table>

<!-- Comprehensions p74 -->


<h2 id='signature0'>Signatures and relations</h2>

<p>
(Parts of this subsection describe the
<a href='#language'>Alloy language</a>.)
</p>

<p>
Each set of atoms is defined by a
<dfn>signature</dfn>,
with keyword <span class='alloy'>sig</span>.&nbsp;
</p><!--spell sig -->

<p>
A signature can contain
zero or more relation <dfn>declarations</dfn>, separated by commas.
Each declaration names a (binary) relation
between the set defined by the signature
and a set or relation.
</p>

<pre id='example-1' title='example-1'>
  //  Simple example
  abstract sig Person {     // Signature
    father: lone Man,       //   A declaration
    mother: lone Woman      //   Another declaration
  }
  sig Man extends Person {
    wife: lone Woman
  }
  sig Woman extends Person {
    husband: lone Man
  }
</pre>

<table>
<tbody>
  <tr><th colspan='4'>Relationships among signatures</th></tr>
  <tr><td><span class='m'>S</span> <span class='alloy'>in</span>
          <span class='m'>T</span>
      <br/><span class='m'>U</span> <span class='alloy'>in</span>
          <span class='m'>T</span>
      </td>
      <td>subset
      </td>
      <td rowspan='2'>Every
          <span class='m'>S</span>
          is a
          <span class='m'>T</span>,
      <br/>and
      <br/>every
          <span class='m'>U</span>
          is a
          <span class='m'>T</span>
      </td>
      <td>An
          <span class='m'>S</span>
          can also be a
          <span class='m'>U</span>
      </td>
  </tr>
  <tr><td><span class='m'>S</span> <span class='alloy'>extends</span>
          <span class='m'>T</span>
      <br/><span class='m'>U</span> <span class='alloy'>extends</span>
          <span class='m'>T</span>
      </td>
      <td>extension
      </td>
      <td>An
          <span class='m'>S</span>
          cannot also be a
          <span class='m'>U</span>
      </td>
  </tr>
</tbody>
</table>

<p>
The extended signature must be either
a top-level signature
or a subsignature.&nbsp;
</p>


<h2 id='declaration-constraint' title='declaration-constraint'
>Constraining a declaration</h2>

<p>
There are two ways:&nbsp;
</p>

<ol>
  <li> with <a href='#set-multiplicity'>set</a> or
    <a href='#relation-multiplicity'>relation</a>
    multiplicity constraints in the signature.&nbsp;
    These are a quick shorthand.&nbsp;
    The <a href='#example-1'>example above</a>
    has several of these (all are <span class='alloy'>lone</span>).
  </li>
  <li> with a <span class='alloy'>fact</span> <span class='pg'>117</span>
    that states a constraint on the set or relation.&nbsp;
    The constraint is expressed in the Alloy logic.&nbsp;
    <p>
    (The <span class='alloy'>fact</span> keyword may be omitted
    if the fact is only about the relations of a single signature,
    and it immediately follows that signature &mdash;
    then it is a
    <dfn id='signature-fact' title='signature-fact'>signature fact</dfn>,
    and is implicitly universally quantified over the signature's set,
    and may use <dfn id='this' title='this'>this</dfn>
    as if it were the variable of this implied quantification.)&nbsp;
    </p>
  </li>
</ol>

<p>
<a href='als/declarationConstraint.als'>A
more extensive example of signatures, declarations, and constraints</a>
</p>


<h3 id='mulitplicity-constraint'>Multiplicity constraints in declarations</h3>

<table id='set-multiplicity' title='multiplicity'>
<tbody>
  <tr><th colspan='2'>Set declarations with multiplicities <span class='pg'>76</span></th></tr>
  <tr>
    <th colspan='2'><span class='m'>e</span> is a expression producing a set
      (arity 1)</th>
  </tr>
  <tr>
    <td><span class='m'>x</span>: <span class='alloy'>set</span> <span class='m'>e</span>
    </td>
    <td><span class='m'>x</span> a subset of <span class='m'>e</span>
    </td>
  </tr>
  <tr>
    <td><span class='m'>x</span>: <span class='alloy'>lone</span>
    <span class='m'>e</span>
    </td>
    <td><span class='m'>x</span> empty or a singleton subset of
    <span class='m'>e</span>
    </td>
  </tr>
  <tr>
    <td><span class='m'>x</span>: <span class='alloy'>some</span> <span class='m'>e</span>
    </td>
    <td><span class='m'>x</span> a nonempty subset of <span class='m'>e</span>
    </td>
  </tr>
  <tr>
    <td><span class='m'>x</span>: <span class='alloy'>one</span> <span class='m'>e</span>
    </td>
    <td><span class='m'>x</span> a singleton subset of <span class='m'>e</span><br/>
        (i.e. a scalar)
    </td>
  </tr>
  <tr>
    <td><span class='m'>x</span>: <span class='m'>e</span>
    </td>
    <td><span class='m'>x</span> a singleton subset of <span class='m'>e</span><br/>
        (equivalent to <span class='alloy'>one</span>)
    </td>
  </tr>
</tbody>
</table>

<table id='relation-multiplicity' title='relation-multiplicity'>
<tbody>
  <tr><th colspan='2'>Relation declarations with
    <span class='alloy'>-&gt;</span> multiplicities <span class='pg'>77</span></th></tr>
  <tr>
    <th colspan='2'>
      <span class='m'>A</span> and <span class='m'>B</span>
      are expressions producing a relation
      <br/>
      <i>m</i> and <i>n</i> are
      <span class='alloy'>some</span>,
      <span class='alloy'>lone</span>,
      <span class='alloy'>one</span>,
      or
      not present (which is equivalent to <span class='alloy'>set</span>)
    </th>
  </tr>
  <tr>
    <td rowspan='2'><span class='m'>r</span>: <span class='m'>A</span> <i>m</i>
      <span class='alloy'>-&gt;</span> <i>n</i> <span class='m'>B</span>
    </td>
    <td><i>m</i> elements of
      <span class='m'>A</span>
      map to each element of
      <span class='m'>B</span>
    </td>
  </tr>
  <tr>
    <td>each element of
      <span class='m'>A</span>
      maps to <i>n</i> elements of
      <span class='m'>B</span>
    </td>
  </tr>
</tbody>
</table>


<h3>Facts </h3>

<p>
<span class='pg'>117</span>
A <a href='#fact'>fact</a> contains a formula in the Alloy logic
that is assumed to always be true.
See the <a href='#language'>Alloy language</a> for more details.&nbsp;
</p>



<h2 id='disjointness'>Disjointness </h2>

<p>
<span class='pg'>71</span>
<span class='alloy'>disj</span><!--spell disj -->
before a list of variables
restricts their bindings to be disjoint.&nbsp;
</p>

<p>
<a href='als/disj.als' id='disj-examples'>Disjointness example</a>
</p>


<h2 id='cardinality'>Cardinality constraints </h2>

<p>
<span class='pg'>80</span>
The prefix operator <span class='alloy'>#</span> (cardinality)
on a relation
produces the relation's size.&nbsp;
The result can be operated on with
<span class='alloy'>+ - = &lt; &gt; =&lt; &gt;=</span>.&nbsp;
Positive integer literals can appear in cardinality expressions.&nbsp;
</p>

<p>
<span class='alloy'>sum</span> <span class='m'>x</span>:
<span class='m'>e</span> | <span class='m'>ie</span><!--spell ie -->
sums the value of <span class='m'>ie</span>
for each <span class='m'>x</span> in set <span class='m'>e</span>.&nbsp;
</p>


<h1 id='language' title='language'>The Alloy language</h1>

<p>
The Alloy language uses the Alloy logic
plus some other constructs
to make <dfn id='models' title='models'>models</dfn>.&nbsp;
In Alloy,
a model is
"a description of a software abstraction" <span class='pg'>4</span>.&nbsp;
</p>

<p>
(Recall that in FOL
a model means
<a href='logicConcepts.html#model'>something different</a>.)&nbsp;
</p>


<h2 id='language-constructs' title='language-constructs'>Language constructs</h2>

<p>
The Alloy language adds these constructs to the
<a href='#logic'>Alloy logic</a>:&nbsp;
</p>

<ol>

  <li id='module' title='module'>
    A <dfn>module</dfn> line
    gives the relative pathname
    of the model's file (minus the ".als" suffix).&nbsp;
    The pathname is relative to the directory
    that imported module pathnames are going to be relative to.&nbsp;
    (Obviously,
    the <span class='alloy'>module</span> line is mostly redundant
    with the file's full pathname.)&nbsp;
  </li>

  <li id='sig' title='sig'>
    A <dfn>sig</dfn> (<a href='#signature'>signature</a>)
    declares one or more sets of atoms,
    and their relations to other sets.&nbsp;
  </li>

  <li id='fun' title='fun'>
    A <dfn>fun</dfn> (<a href='#function'>function</a>)
    defines a way of getting a relation (or set, or atom).&nbsp;
    It can take parameters
    that are used in getting its result.&nbsp;
    It can define a relation (usually using <span class='alloy'>-&gt;</span>)
    and make use of it to produce its result.&nbsp;
    It is a <a href='logicConcepts.html#function'>FOL function</a>
    for the Alloy logic,
    in which expressions are relations.&nbsp;
  </li>

  <li id='pred' title='pred'><!--spell pred -->
    A <dfn>pred</dfn> (<a href='#predicate'>predicate</a>)
    defines a formula (true or false).&nbsp;
    It can take parameters
    that are used in getting its result.&nbsp;
    It is a <a href='logicConcepts.html#predicate'>FOL predicate</a>
    for the Alloy logic.&nbsp;
  </li>

  <li id='fact' title='fact'>
    A <dfn><a href='#facts'>fact</a></dfn>
    defines a formula
    that you assume is valid (always true, for any world).&nbsp;
    The Alloy analyzer uses <span class='alloy'>fact</span>s as axioms
    in constructing its examples and counterexamples.&nbsp;
  </li>

  <li id='run' title='run'>
    You <dfn>run</dfn>
    a <span class='alloy'>pred</span>icate
    in order to see the examples (if any) the Alloy analyzer finds
    for which the predicate is true.&nbsp;
    <p>
    You define the <dfn id='scope' title='scope'>scope</dfn>
    that the analyzer checks
    by saying things like "<code>run for 3</code>" or
    "<code>run for 3 but 4 Dog</code>".&nbsp;
    The analyzer will then check only possible examples
    that contain no more than that many
    of atoms from each set.&nbsp;
    </p>
    <p>
    <b>If it finds an example</b>,
    then the predicate is
    <a href='logicConcepts.html#satisfiable'>satisfiable</a>.&nbsp;
    </p>
    <p>
    <b>If it finds no examples</b>,
    the predicate may be either
    <a href='logicConcepts.html#invalid'>invalid</a>
    (false for all possible examples);
    or it may be
    <a href='logicConcepts.html#satisfiable'>satisfiable</a>
    but not within the scope you used.&nbsp;
    </p>
  </li>

  <li id='assert' title='assert'>
    An <dfn>assert</dfn> (assertion)
    defines a formula that you claim
    will always be true.&nbsp;
    An <span class='alloy'>assert</span>ion differs from
    a <span class='alloy'>fact</span>
    in that the Alloy analyzer will check
    an <span class='alloy'>assert</span>ion to see if it is true
    for all the examples in a scope,
    whereas the analyzer assumes each <span class='alloy'>fact</span> is true
    and uses them to constrain which examples it looks at.&nbsp;
  </li>

  <li id='check' title='check'>
    You <dfn>check</dfn>
    an <span class='alloy'>assert</span>ion
    in order to see whether the Alloy analyzer finds any counterexamples.&nbsp;
    <p>
    You define the scope
    as for a <a class='alloy' href='#run'>run</a> command.&nbsp;
    </p>
    <p>
    <b>If it finds a counterexample</b>,
    then the predicate is
    <a href='logicConcepts.html#unsatisfiable'>unsatisfiable</a>.&nbsp;
    </p>
    <p>
    <b>If it finds no counterexamples</b>,
    the predicate may be either
    <a href='logicConcepts.html#valid'>valid</a>
    (true for all possible examples);
    or it may be
    <a href='logicConcepts.html#unsatisfiable'>unsatisfiable</a>
    but not within the scope you used.&nbsp;
    </p>
  </li>

</ol>

<h2 id='which-where' title='which-where'>Which construct to use where?</h2>

<ol>
  <li> Writing a model (Alloy file) that might need to import
    other models?&nbsp;
    Use <a class='alloy' href='#module'>module</a>.&nbsp;
  </li>
  <li> Need a set of atoms?&nbsp; Use a <a class='alloy' href='#sig'>sig</a>.&nbsp;
  </li>
  <li> Need an expression, whose value is a function (or set, or scalar)?&nbsp;
    Use a <a class='alloy' href='#fun'>fun</a> (function).&nbsp;
  </li>
  <li> Need a formula, whose value is true or false?&nbsp;
    Use a <a class='alloy' href='#pred'>pred</a> (predicate).&nbsp;
  </li>
  <li> Need to state an axiom that you want to be true always?&nbsp;
    Use a <a class='alloy' href='#fact'>fact</a> (function).&nbsp;
  </li>
  <li> Need an example for which a <span class='alloy'>pred</span> is true?&nbsp;
    <a class='alloy' href='#run'>run</a> the predicate to see if one exists.&nbsp;
    It's like using an existential quantifier over
    all the predicate's parameters.&nbsp;
  </li>
  <li> Want to claim something is always true?&nbsp;
    Use an <a class='alloy' href='#assert'>assert</a> (assertion).&nbsp;
  </li>
  <li> Want to see if an <span class='alloy'>assert</span> is unsatisfiable?&nbsp;
    <a class='alloy' href='#check'>check</a> the assertion
    to see if any counterexample can be found.&nbsp;
  </li>
</ol>


<h1>Signatures</h1>

<table id='signature' title='signature'>
<tbody>
  <tr><th colspan='2'>Signatures <span class='pg'>91</span></th></tr>
  <tr>
    <td><span class='alloy'>sig</span> <span class='m'>A</span>
        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>
    </td>
    <td>Declares a set <span class='m'>A</span> of atoms
    </td>
  </tr>
  <tr>
    <td><span class='alloy'>sig</span> <span class='m'>A</span>
        <span class='alloy'>extends</span> <span class='m'>B</span>
        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>
    </td>
    <td>Declares a subset <span class='m'>A</span> of set <span class='m'>B</span>,
        disjoint from <br/>
        all other <span class='alloy'>extends</span> subsets of
        <span class='m'>B</span>
    </td>
  </tr>
  <tr>
    <td><span class='alloy'>sig</span> <span class='m'>A</span>
        <span class='alloy'>in</span> <span class='m'>B</span>
        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>
    </td>
    <td>Declares a subset <span class='m'>A</span> of
        <span class='m'>B</span>
    </td>
  </tr>
  <tr>
    <td><span class='alloy'>sig</span> <span class='m'>A</span>
        <span class='alloy'>in</span> <span class='m'>B</span>
        <span class='alloy'>+</span> <span class='m'>C</span>
        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>
    </td>
    <td>Declares a subset <span class='m'>A</span> of the
        union (<span class='alloy'>+</span>) of sets
        <span class='m'>B</span> and <span class='m'>C</span>
    </td>
  </tr>
  <tr>
    <td><span class='alloy'>abstract sig</span> <span class='m'>A</span>
        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>
    </td>
    <td>Declares a set <span class='m'>A</span> that contains no atoms<br/>
        other than the ones in its subsets (if any)
    </td>
  </tr>
  <tr>
    <td><span class='alloy'>one&nbsp; sig</span> <span class='m'>A</span>
        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>
    </td>
    <td>Declares a singleton set <span class='m'>A</span>
    </td>
  </tr>
  <tr>
    <td><span class='alloy'>lone sig</span> <span class='m'>A</span>
        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>
    </td>
    <td>Declares a set <span class='m'>A</span> of 0 or 1 atom
    </td>
  </tr>
  <tr>
    <td><span class='alloy'>some sig</span> <span class='m'>A</span>
        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>
    </td>
    <td>Declares a nonempty set <span class='m'>A</span>
    </td>
  </tr>
  <tr>
    <td><span class='alloy'>sig</span> <span class='m'>A</span>,
        <span class='m'>B</span>
        <span class='alloy'>{</span><i>fields</i><span class='alloy'>}</span>
    </td>
    <td>Declares two sets <span class='m'>A</span> and
        <span class='m'>B</span> of atoms<br/>
        Wherever <span class='m'>A</span> appeared above, a list of names can appear
    </td>
  </tr>
</tbody>
</table>


<table id='field' title='field'>
<tbody>
  <tr><th colspan='2'>Fields (in a signature for set <span class='m'>A</span>)
    <span class='pg'>95</span></th></tr>
  <tr>
    <td> <span class='m'>f</span><span class='alloy'>: </span>e
    </td>
    <td>Declares a relation <span class='m'><span class='m'>f</span></span>
        that's a subset of
        <span class='m'>A</span><span class='alloy'>-&gt;</span>e.&nbsp;<br/>
        <span class='m'>e</span> can be
        any expression that produces a set &mdash;<br/>
        union, intersection, ... , any combination.
    </td>
  </tr>
  <tr>
    <td><span class='m'>f</span><span class='alloy'>: lone</span>
        <span class='m'>e</span>
    </td>
    <td>Each <span class='m'>A</span> is related to
        no <span class='m'>e</span> or one <span class='m'>e</span>.
    </td>
  </tr>
  <tr>
    <td><span class='m'>f</span><span class='alloy'>: one</span>
        <span class='m'>e</span>
    </td>
    <td>Each <span class='m'>A</span> is related to exactly one
        <span class='m'>e</span>.
    </td>
  </tr>
  <tr>
    <td><span class='m'>f</span><span class='alloy'>: some</span>
        <span class='m'>e</span>
    </td>
    <td>Each <span class='m'>A</span> is related to at least one
        <span class='m'>e</span>.
    </td>
  </tr>
  <tr>
    <td><span class='m'>f</span><span class='alloy'>: </span>
        <span class='m'>g</span><span class='alloy'>-&gt;</span><span class='m'>h</span>
    </td>
    <td>Each <span class='m'>A</span> is related to a relation from
        <span class='m'>g</span> to <span class='m'>h</span>.
    </td>
  </tr>
  <tr>
    <td> <span class='m'>f</span><span class='alloy'>: one</span>
        <span class='m'>g</span> <span class='alloy'>lone -&gt; some</span>
        <span class='m'>h</span>
    </td>
    <td>The multiplicities have their
        <a href='#relation-multiplicity'>usual meanings</a>.<br/>
        Here, each <span class='m'>A</span> is related to exactly one relation<br/>
        relating each <span class='m'>g</span> to 1 or more
        <span class='m'>h</span>'s, and<br/>
        each <span class='m'>h</span> is related to 0 or 1
        <span class='m'>g</span>.
    </td>
  </tr>
</tbody>
</table>


<h1 id='function' title='function'>Functions</h1>

<table>
<tbody>
  <tr><th colspan='2'>Function <span class='pg'>121</span>s</th></tr>
  <tr>
    <td><span class='alloy'>fun</span> <span class='m'>Name</span>
        <span class='alloy'>[</span><span class='m'>parameters</span><span
        class='alloy'>]</span>
        <span class='alloy'>:</span> <span class='m'>type</span>
        <span class='alloy'>{</span><span class='m'>e</span><span class='alloy'>}</span>
    </td>
    <td>Defines a function, with the given <span class='m'>name</span>
        and (possibly empty) <span class='m'>parameters</span>,<br/>
        and producing a relation (or set, or scalar) of the given
        <span class='m'>type</span>.&nbsp;<br/>
        The result is defined by the expression <span class='m'>e</span>,
        which may reference the <span class='m'>parameters</span>.&nbsp;
    </td>
  </tr>
</tbody>
</table>


<h1 id='predicate' title='predicate'>Predicates</h1>

<table>
<tbody>
  <tr><th colspan='2'>Predicates <span class='pg'> 121</span></th></tr>
  <tr>
    <td><span class='alloy'>pred</span> <span class='m'>Name</span>
        <span class='alloy'>[</span><span class='m'>parameters</span><span
        class='alloy'>]</span>
        <span class='alloy'>{</span><span class='m'>f</span><span class='alloy'>}</span>
    </td>
    <td>Defines a predicate, with the given <span class='m'>name</span>
        and (possibly empty) <span class='m'>parameters</span>.&nbsp;<br/>
        A predicate always produces true or false,
        so no type is needed.&nbsp;<br/>
        The result is defined by the formula <span class='m'>f</span>,
        which may reference the <span class='m'>parameters</span>.&nbsp;
    </td>
  </tr>
</tbody>
</table>


<h1 id='facts' title='facts'>Facts</h1>

<table>
<tbody>
  <tr><th colspan='2'>Facts <span class='pg'>117</span></th></tr>
  <tr>
    <td><span class='alloy'>fact
      {</span><span class='m'>e</span><span class='alloy'>}</span>
    </td>
    <td>The expression <span class='m'>e</span>
        is a constraint that <br/>
        the analyzer will assume is always true.&nbsp;
    </td>
  </tr>
  <tr>
    <td><span class='alloy'>fact</span> <span class='m'>Name</span>
        <span class='alloy'>{</span><span class='m'>e</span><span class='alloy'>}</span>
    </td>
    <td>You can name a <span class='alloy'>fact</span> if you wish;<br/>
        the analyzer will ignore the name.
    </td>
  </tr>
</tbody>
</table>


<h1 id='assertion' title='assertion'>Assertions</h1>

<table>
<tbody>
  <tr><th colspan='2'>Assertions <span class='pg'>124</span></th></tr>
  <tr>
    <td><span class='alloy'>assert</span> <span class='m'>Name</span>
        <span class='alloy'>{</span><span class='m'>f</span><span class='alloy'>}</span>
    </td>
    <td>Defines a assertion, with the given <span class='m'>name</span>.&nbsp;
        Assertions take no parameters.&nbsp;<br/>
        An assertion always produces true or false,
        so no type is needed.&nbsp;<br/>
        The result is defined by the formula <span class='m'>f</span>.&nbsp;
    </td>
  </tr>
</tbody>
</table>


<h2 id='modules-and-polymorphism' title='modules-and-polymorphism'
>Modules and polymorphism <span class='pg'>130</span>
<span class='FW'>&mdash; section under construction</span></h2>


<h1 id='tips'> Learnt by experience </h1>

<h2 id='at'> When to use <code>@</code> </h2>

<p>
The cryptic message
</p>

<pre>
A type error has occurred:
This cannot be a legal relational join where
left hand side is ...
right hand side is ...
</pre>

<p>
if for a join in a signature fact,
can mean that
the last relation before the offending '.'
has the same name
as a relation in the signature;&nbsp;
in this case, the Alloy Analyzer
will grab the name as belonging to <code>this</code>
rather than the result of the preceding join.&nbsp;
The solution is to put a <code>@</code> after the dot;
the <code>@</code> disables the grab for <code>this</code>.&nbsp;
</p>

<p>
I found out about this from an Alloy
<a href='http://alloy.mit.edu/community/node/700'>community post</a>.&nbsp;
</p>


<!--xhtml -n -->
</div>

</div><!-- #TBg -->

<div id='TFooter'>
<div class='W3C'>
  <a href='http://validator.w3.org/check?uri=referer'><img class='W3C'
    src='../../img/valid-xhtml10-blue.png'
    alt='Valid XHTML 1.0 Strict'/></a>
  <br/>
  <a href='http://jigsaw.w3.org/css-validator/check/referer'><img class='W3C'
    src='../../img/vcss-blue.png'
    alt='Valid CSS!'/></a>
</div>
<div class='timestamp'>2010Mar16Tu10:56</div>
<div style='padding-top:1px;'>
<a class='plain' href='./index.html' style='font-variant:small-caps;'
>Thomas A. Alspaugh</a>
<span style='padding-left:1em;'><span class='email ss sm'>alspaugh&nbsp;
    <span class='ss sc sm'>at</span> &middot; ics &middot; uci &middot; edu</span>
    <!-- -spell alspaugh uci edu --> </span>
</div>
</div>

<!-- Google Analytics code -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol)
  ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost +
  "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-15281497-1");
pageTracker._trackPageview();
} catch(err) {}
</script>

</body>
</html>

