<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Simplification</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Simplification</h1>
<p>
<h2>Introduction to Computer Science I-III<br>
ICS-21/-22/-23<br>
</h2>
<p>
</center>


<!-- Introduction -->

<a name="Introduction"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Introduction</b></td>
<td width ="80%">
  In this lecture, we will discuss a variety of general issues in program simplification.
  It introduces no new Java programming features, but instead steps back to provide a perspective
    on one very important programming skill that all competent programmers must acquire.
  Sometimes simplifying a program is the only way to comprehend it, and hence debug it.
  Finally, this lecture shows that programs themselves can be studied and manipulated in a
    formal way (just as expressions are manipulated in algebra).
</td>
</tbody>
</table>


<!-- Simplification -->

<a name="Simplification"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Simplification</b></td>
<td width ="80%">
  We can use the laws of algebra to tell whether two forms are equivalent: using either
    one produces the same result.
  Thus, equivalence is a mathematical topic.
  But as programmers, we must judge which form (the simpler one) to use in our programs.
  <p>
  The simplest program is the one that is easiest to read, debug, and maintain.
  Thus, simplicity is a psychological topic.
  As a rule of thumb, smaller forms are often easier to understand (although sometimes a bit of
    redundancy makes forms easier to understand: smtms lss s nt mr).
  <p>
  In this section we will examine three kinds of algebras for proving equivalences
  <ul>
    <li>Boolean Algebra
    <li>Relational Algebra
    <li>Control Structure Algebra
  </ul>
  We will learn how to prove equivalences in each algebra and discuss how to gauge simplicity, as
    well as show lots of examples of simplifictions.
</td>
</tbody>
</table>


<!-- Boolean Algebra -->

<a name="BooleanAlgebra"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Boolean Algebra</b></td>
<td width ="80%">
  Boolean Algebra concerns equivalences involving the <b>boolean</b> type and the logical operators.
  The following is a list of useful laws (theorems, if you will) of Boolean Algebra.
  The most practical law is DeMorgan's law: one form explains how to simplify the negation of
    a conjunction (<b>&&</b>) and the other form explains how to simplify the negaion of a
    disjunction (<b>||</b>).
</td>
</tbody>
</table>
<img src="images/boolean.gif"></mage>
<p>
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%">&nbsp</td>
<td width ="80%">
  We can easily prove laws in Boolean Algebra by trying every combination of
    the <b>true</b> and <b>false</b> values for each of the variables.
  For example, to prove the conjunctive version of DeMorgan's law, we can start with the
    following table of values, called a <i>truth table</i>.
  Here we list all the variables in the leftmost columns, and the two
    expressions -which we hope to prove equivalent- in the rightmost columns.
  <p>
  <table cellspacing="0" cellpadding="5" border="1" rules="all">
  <thead><tr><th align="left">A</th><th>B</th><th>!(A&&B)</th><th>!A||!B</th>
  </thead>
  <tbody>
  <tr valign="top"><td>true</td><td>true</td><td>&nbsp</td><td>&nbsp</td>
  <tr valign="top"><td>true</td><td>false</td><td>&nbsp</td><td>&nbsp</td>
  <tr valign="top"><td>false</td><td>true</td><td>&nbsp</td><td>&nbsp</td>
  <tr valign="top"><td>false</td><td>false</td><td>&nbsp</td><td>&nbsp</td>
  </td>
  </tbody>
  </table>
  <p>
  We then fill in each column by just computing the values of the expressions
    (using the semantics of the operators and our knowledge of evaluating
     expressions: e.g., operator precedence and associativity).
  <p>
  <table cellspacing="0" cellpadding="5" border="1" rules="all">
  <thead><tr><th align="left">A</th><th>B</th><th>!(A&&B)</th><th>!A||!B</th>
  </thead>
  <tbody>
  <tr valign="top"><td>true</td><td>true</td><td>false</td><td>false</td>
  <tr valign="top"><td>true</td><td>false</td><td>true</td><td>true</td>
  <tr valign="top"><td>false</td><td>true</td><td>true</td><td>true</td>
  <tr valign="top"><td>false</td><td>false</td><td>true</td><td>true</td>
  </td>
  </tbody>
  </table>
  <p>
  The law is proved if the columns under the two expressions always contain the same pair of
    values on each line.
  This means that for every pair of values, the expressions compute the same result, so the
    expression are equivalent and thus interchangable in our code.
  <p>
  This approach also illustrates a divide and conquer strategy to proofs: we divide the complicated 
    proof into four different parts (each a line in the truth table); each line is easy to verify by
    pure calculation; once we verify all of the lines, we have verified the entire proof.
</td>
</tbody>
</table>


<!-- Relational Algebra -->

<a name="RelationalAlgebra"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Relational Algebra</b></td>
<td width ="80%">
  Relational Algebra concerns equivalances mostly involving the <b>int</b> and <b>double</b> types
    and the numeric and relational operators.
  It is based on the law of trichotomy. 
    <ul>
      <li><b>The law of trichotomy</b>: Given two values, the first is either less than, equal to,
            or greater than the second.
          One (and exactly one) of these relationships must always hold.
    </ul>
  We can use the law of trichotomy as a divide and conquer method to break one
    hard proof into many simpler ones.
  Unlike using boolean values, there are billions of different <b>int</b>
   values (and an infinite number of integer value -in the mathematics sense).
  <p>
  As a first example, we will prove that <b>Math.max(x,y)+1</b> is equivalent to <b>Math.max(x+1,y+1)</b>.
  So, we can factor additive constants out of calls to <b>Math.max</b>.
  <p>
  <table cellspacing="0" cellpadding="5" border="1" rules="all">
  <thead><tr><th align="left">x?y</th><th>Math.max(x,y)+1</th><th>Math.max(x+1,y+1)</th>
  </thead>
  <tbody>
  <tr valign="top"><td>x < y</td><td>y+1</td><td>y+1</td>
  <tr valign="top"><td>x = y</td><td>x+1 or y+1</td><td>x+1 or y+1</td>
  <tr valign="top"><td>x > y</td><td>x+1</td><td>x+1</td>
  </td>
  </tbody>
  </table>
  <p>
  Here, knowing the relationship between <b>x</b> and <b>y</b> allows us to compute the answer
    for each expression.
  For example, if we know that <b>x&lty</b>, we know <b>Math.max(x,y)</b> evaluates to <b>y</b>,
    so <b>Math.max(x,y)+1</b> evaluates to <b>y+1</b>; likewise, if we know that <b>x&lty</b>, we
    know that <b>x+1&lty+1</b>, so <b>Math.max(x+1,y+1)</b> evaluates to <b>y+1</b>.
  The other two cases can be simplified similarly. 
  <p>
  Again, the law is proved if the columns under the two expressions always have
    the same pair of values on each line.
  This means that for every pair of values, the expressions compute the same
    result, so the expressions are interchangable.
  <p>
  As another example, we can prove that the expression <b>x<0 == y<0</b> is
    equivalent to  <b>(x<0 && y<0) || (x>=0 && y>=0)</b>, which is true when
    <b>x</b> and <b>y</b> have the same sign (assuming the sign of 0 is
    considered positive).
  Here we need to list all possibilities of how <b>x</b> and <b>y</b>
    compare to <b>0</b>.
  <p>
  <table cellspacing="0" cellpadding="5" border="1" rules="all">
  <thead><tr><th align="left">x?0</th><th>y?0</th><th>x<0 == y<0</th><th>(x<0 && y<0) ||
    (x>=0 && y>=0)</th>
  </thead>
  <tbody>
  <tr valign="top"><td>x<0</td><td>y<0</td><td>true</td><td>true</td>
  <tr valign="top"><td>x<0</td><td>y=0</td><td>false</td><td>false</td>
  <tr valign="top"><td>x<0</td><td>y>0</td><td>false</td><td>false</td>
  <tr valign="top"><td>x=0</td><td>y<0</td><td>false</td><td>false</td>
  <tr valign="top"><td>x=0</td><td>y=0</td><td>true</td><td>true</td>
  <tr valign="top"><td>x=0</td><td>y>0</td><td>true</td><td>true</td>
  <tr valign="top"><td>x>0</td><td>y<0</td><td>false</td><td>false</td>
  <tr valign="top"><td>x>0</td><td>y=0</td><td>true</td><td>true</td>
  <tr valign="top"><td>x>0</td><td>y>0</td><td>true</td><td>true</td>
  </td>
  </tbody>
  </table>
  <p>
  So again, the equivalence it proven.
  Here is an interesting case where the smaller/simpler/more efficient code is
    not necessarily easier to understand.
  Most students believe the larger expression is easier to understand, until
    they intensely study the meaning of <b>==</b> when applied to
    <b>boolean</b> values generated by relational  operators.
  <p>
  In actual code, I would suggest using the simpler form, and then include
    the larger -easier to understand- form in a comment; we could even include
    the above proof as part of the comment.
  <p>
  Finally we can use the law of trichotomy to prove that we simplify the 
    negation of relational operators.
  Be careful when you do so, and recall the law of trichotomy.
  If it is not true that x is less than y, then there are two possiblities
    left: x is equal to y or x is greater than y.
  Beginning programmers make the mistake of negating <b>x&lt;y</b> as
    <b>x&gt;y</b>, but the correct equivalent expression is <b>x&gt;=y</b>
  <p>
  <table cellspacing="0" cellpadding="5" border="1" rules="all">
  <thead><tr><th align="left">x?y</th><th>!(x < y)</th><th>x >= y</th>
  </thead>
  <tbody>
  <tr valign="top"><td>x < y</td><td>false</td><td>false</td>
  <tr valign="top"><td>x = y</td><td>true</td><td>true</td>
  <tr valign="top"><td>x > y</td><td>true</td><td>true</td>
  </td>
  </tbody>
  </table>
  <p>
  In fact, we can use the same kinds of proofs to show how to simplify the
    negation of every relational operator.
  <p>
  <table cellspacing="0" cellpadding="5" border="1" rules="all">
  <thead><tr><th align="left">Negated Form</th><th>Simplified Form</th><th> < only Form</th>
  </thead>
  <tbody>
  <tr valign="top"><td>!(x < y)</td><td>x >= y</td><td>!(x < y)</td>
  <tr valign="top"><td>!(x <= y)</td><td>x > y</td><td>y < x</td>
  <tr valign="top"><td>!(x == y)</td><td>x != y</td><td>x < y || y < x</td>
  <tr valign="top"><td>!(x != y)</td><td>x == y</td><td>!(x < y || y < x)</td>
  <tr valign="top"><td>!(x >= y)</td><td>x < y</td><td>x < y</td>
  <tr valign="top"><td>!(x > y)</td><td>x <= y</td><td>!(y < x)</td>
  </td>
  </tbody>
  </table>
  <p>
  Also notice that each of the relational operators is equivalent to an
    expression that includes only the <b>&lt</b> relational operator (along
    with sone logical operators).
  Although we don't need the five other relational operators to write Java
     programs (in a mathematical sense), they are provided because most
     programmers are aware of them and can use them to write simpler programs
     (in a psychological sense).
  Thus the Java language is made larger (more operators) to make it easier for
    human minds to use.
  Such value judgements (which is better, a smaller language or a language
    easier for humans to use) are required by programming language designers.
  <p>
  Finally, we can often simplify negatate relational operators in DeMorgan's Laws simplifications.
  For example, we can "simplify" <b>!(x < 0 || x > 10)</b> to
     <b>!(x < 0) && !(x > 10)</b> which is actually a bit larger, but can be further simplified to
     <b>x >= 0 && x <= 10</b> which is truly simpler.  
</td>
</tbody>
</table>


<!-- Control Structure Algebra -->

<a name="ControlStructureAlgebra"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Control Structure Algebra</b></td>
<td width ="80%">
  Now we will explore the richest algebra: the algebra of control structures.
  First we will examine when changing the order in a sequence of statements
    doesn't change the results of executing the sequence.
  Second we will discuss transformations to <b>if</b> statements.
  Finally, we will discuss transformations to <b>for</b> loops containing <b>break</b>
    statements.

  <a name="sequence">
  <h3>Sequence equivalences</h3>
  We start by examining the orderings of statements and defining two important terms.
  <ul>
    <li>A statement <i>stores into</i> a variable if the state of the variable can be changed
          by executing the statement.
        So, <b>x = y;</b> stores into <b>x</b> (but not <b>y</b>).
    <li>A statement <i>examines</i> a variable if the statements needs to retrieve the value
          stored in that variable.
        So, <b>x = y;</b> examines <b>y</b> (but not <b>x</b>).
  </ul>
  Interestingly enough, the expression statement <b>x++;</b> both stores into and examines <b>x</b>:
    it first examines the value stored in <b>x</b>, then computes a value one higher, then stores
    that value back into <b>x</b> (the equivalent expression statement <b>x = x+1;</b> illustrates
    this assertion more clearly).
  In the entire <b>if</b> statement <b><pre>
  if (x > y)            //Examines x and y
    z = x;              //Stores into z; examines x
  else
    y++;                //Stores into and examines y</pre></b>
  we say that it stores into <b>z</b> and <b>y</b>; it examines <b>x</b> and <b>y</b>.
  Note that we will also say <b>System.out.println("...");</b> stores into the console because this
    method causes new information to appear inside the console window (changing its state).
  <p>
  Armed with this terminology, we can define <i>indepdendent</i> statements in a sequence.
  Two statements are independent if we can exchange their order and they still always compute 
    equivalent results.
  Two statements <b>S<sub>1</sub></b> and <b>S<sub>2</sub></b> are independent if
    <b>S<sub>1</sub></b> stores into and examines no variables that <b>S<sub>2</sub></b> stores into, and
    <b>S<sub>2</sub></b> stores into and examines no variables that <b>S<sub>1</sub></b> stores into.
  <p>
  For example, we can exchange the order of <b> x = 1; System.out.println(y);</b> because they
    satisfy the property above (also, just think about whether either statement affects the other:
    they don't).
  We cannot exchange the order of <b> x = 1; System.out.println(x);</b> because the second statement examines
    <b>x</b>, which the first statement stores into (the value printed depends on whether <b>x</b> is
    assigned the value 1 before or after the print statement).
  Likewise, we can exchange the order of <b> x = 1; y = 0;</b> because they satisfy the
    property above.
  We cannot exchange the order of <b> x = 1; x++;</b> because the second statement stores into
    <b>x</b>, which the first statement also stores into.
  <p>
  Obviously, changing the order of two statements doesn't simplify anything; but we will learn that
    such exchanges can sometimes enable further "real" simplifications.
  <p>


  <a name="if">
  <h3>if equivalences</h3>
  Now, onto <b>if</b> statements.
  We can use a modified truth table to prove the equivalence of two <b>if</b> statements.
  For the <b>if</b> statement below
  <b><pre>  if (test)
    statement<sub>1</sub>
  else
    statement<sub>2</sub>  </pre></b>
  we have the following modified truth table. 
  Note that although <b>test</b> can be an arbitrarily complicated expression, ultimately its
    value is either <b>true</b> or <b>false</b>.
  <p>
  <table cellspacing="0" cellpadding="5" border="1" rules="all">
  <thead><tr><th align="left">test</th><th>Code Executed</th>
  </thead>
  <tbody>
  <tr valign="top"><td>true</td><td>statement<sub>1</sub></td>
  <tr valign="top"><td>false</td><td>statement<sub>2</sub></td>
  </td>
  </tbody>
  </table>
  <p>
  <b>Boolean Assignment</b>:
  Let's examine various pairs of statements that we can prove equivalent by using these
    modified truth tables.
  The first involves storing a value into a <b>boolean</b> variable.
  Assume that we have declared <b>boolean b;</b>
  For the two statements <b><pre>  if (test)                  b = test;
    b = true;
  else
    b = false;</pre></b>
  we have the following modified truth table. 
  <p>
  <table cellspacing="0" cellpadding="5" border="1" rules="all">
  <thead><tr><th align="left">test</th><th>Left Code Executed</th><th>Right Code Executed</th>
  </thead>
  <tbody>
  <tr valign="top"><td>true</td><td>b = true;</td><td>b = true; (becaue <b>test</b> is <b>true</b>)</td>
  <tr valign="top"><td>false</td><td>b = false;</td><td>b = false; (becaue <b>test</b> is <b>false</b>)</td>
  </td>
  </tbody>
  </table>
  <p>
  Again, because both columns show the same statements executed, regardless of
    the value of <b>test</b>, the <b>if/else</b> statement on the left and
    expression statement on the right are equivalent.
  <p>
  <b>Test Reversal</b>:
  This equivalence shows that we can reverse the <b>test</b> AND the order of the two
    statements inside the <b>if/else</b> and the resulting <b>if</b> statement is equivalent to the first.
  <b><pre>  if (test)          if (!test)
    statement<sub>1</sub>         statement<sub>2</sub>
  else               else
    statement<sub>2</sub>         statement<sub>1</sub></pre></b>
  we have the following modified truth table. 
  <p>
  <table cellspacing="0" cellpadding="5" border="1" rules="all">
  <thead><tr><th align="left">test</th><th>Left Code Executed</th><th>Right Code Executed</th>
  </thead>
  <tbody>
  <tr valign="top"><td>true</td><td>statement<sub>1</sub></td><td>statement<sub>1</sub> </td>
  <tr valign="top"><td>false</td><td>statement<sub>2</sub> </td><td>statement<sub>2</sub> </td>
  </td>
  </tbody>
  </table>
  <p>
  Which means that the following two <b>if/else</b> statements are equivalent.
  I'd argue that the one on the right is simpler and easier to understand,
    because it is easier to see that it is an <b>if/else</b> statement: our
    eyes can see that loking just at the top three lines.
  In the version on the left, the small <b>else</b> clause is almost hidden
    at the bottom.
  <b><pre>
  if (test) {          if (!test)
    statement<sub>T1</sub>          statement<sub>F</sub>
    statement<sub>T2</sub>        else {
    ...<sub>&nbsp</sub>                 statement<sub>T1</sub>
    statement<sub>Tn</sub>          statement<sub>T2</sub>
  } else                 ...
    statement<sub>F</sub>           statement<sub>Tn</sub>
                       }</pre></b>
  Of course, we might be able to use DeMorgan's law to further simplify <b>!test</b> too.
  <p>
  <b>Bottom Factoring</b>:
  This equivalence shows that we can <i>always</i> remove (factor) a common statement out from the bottom 
    of an <b>if/else</b> statement.
  It is similar to algebraically factoring <b>AX+BX</b> into <b>(A+B)X</b>.
  <b><pre>
  if (test) {          if (test)
    statement<sub>1</sub>          statement<sub>1</sub>
    statement<sub>c</sub>        else
  }else{                statement<sub>2</sub>
    statement<sub>2</sub>        statement<sub>c</sub>
    statement<sub>c</sub>
  }</pre></b>
  To prove this equivalence we use the following modified truth table. 
  <p>
  <table cellspacing="0" cellpadding="5" border="1" rules="all">
  <thead><tr><th align="left">test</th><th>Left Code Executed</th><th>Right Code Executed</th>
  </thead>
  <tbody>
  <tr valign="top"><td>true</td><td>statement<sub>1</sub>; statement<sub>c</sub>
                   </td><td>statement<sub>1</sub>; statement<sub>c</sub></td>
  <tr valign="top"><td>false</td><td>statement<sub>2</sub>; statement<sub>c</sub>
                   </td><td>statement<sub>2</sub>; statement<sub>c</sub></td>
  </td>
  </tbody>
  </table>
  <p>
  For example, the code on the top is equivalent to the code on the bottom.
  <b><pre>  if (zcc == 0) {
    System.out.println("zcc = 0");
    zcc = 1;
  }else{
    System.out.println("zcc != 0");
    zcc = 1;
  }

  if (zcc == 0)
    System.out.println("zcc = 0");
  else
    System.out.println("zcc != 0");
  zcc = 1;</pre></b>
  Note that there is one extra constraint on this simplification: the
    statement factored out of a block cannot use any variables declared in 
    that block, because those variables are not in the new scope of the
    statement, which has been moved outside of either block.
  This constraint is typically not a problem, because few local variables are
    declared in blocks following <b>if</b> and <b>else</b>.
  <p>

  <b>Top Factoring</b>:
  This equivalence is shows that we can <i>often</i> remove a common statement 
    out from the front of an <b>if/else</b> statement.
  It is similar to algebraically factoring <b>XA+XB</b> into <b>X(A+B)</b>.
  <b><pre>
  if (test) {          statement<sub>c</sub>
    statement<sub>c</sub>         if (test)
    statement<sub>1</sub>           statement<sub>1</sub>
  }else{               else
    statement<sub>c</sub>          statement<sub>2</sub>
    statement<sub>2</sub>
  }</pre></b>
  To prove this equivalence we use the following modified truth table. 
   <p>
 <table cellspacing="0" cellpadding="5" border="1" rules="all">
  <thead><tr><th align="left">test</th><th>Left Code Executed</th><th>Right Code Executed</th>
  </thead>
  <tbody>
  <tr valign="top"><td>true</td><td>statement<sub>c</sub>; statement<sub>1</sub>
                   </td><td>statement<sub>c</sub>; statement<sub>1</sub></td>
  <tr valign="top"><td>false</td><td>statement<sub>c</sub>; statement<sub>2</sub>
                   </td><td>statement<sub>c</sub>; statement<sub>2</sub></td>
  </td>
  </tbody>
  </table>
  <p>
  But there is one more detail to take care of.
  Now we are executing <b>statement<sub>c</sub></b> before the <b>if/else</b>, which means
    it is executed before the <b>test</b> expression is evaluated. 
  This is guaranteed to work only if the statement and test are independent (as defined early).
  In the example below, the code on the top is NOT equivalent to the code on the bottom.
  <b><pre>  if (zcc == 0) {
    zcc = 1;
    System.out.println("zcc = 0");
  }else{
    zcc = 1;
    System.out.println("zcc != 0");
  }


  zcc = 1;
  if (zcc == 0)
    System.out.println("zcc = 0");
  else
    System.out.println("zcc != 0");</pre></b>
  because the code on the bottom can never have the test <b>zcc == 0</b> succeed.
  This is because the <b>test</b> (<b>zcc == 0</b>) is not independent of the statements
     <b>zcc = 1;</b>: it examines (accesses) a variable stored into by this statement.
  <p>
  On the other hand, sometimes even if the expression and statement are not independent, we can 
    modify the test to account for the statement always executing before the <b>if/else</b> statement.
  The code on the top here is equivalent to the code on the bottom (we can prove it using the
    law of trichotomy: <b>zcc ? 0</b>).
  <b><pre>  if (zcc == 0) {
    zcc++;
    System.out.println("zcc was == 0");
  }else{
    zcc++;
    System.out.println("zcc was not == 0");
  }


  zcc++;
  if (zcc == 1)
    System.out.println("zcc was == 0");
  else
    System.out.println("zcc was not == 0");</pre></b>
  In fact, another way to simplify this code is to exchange the two statements in each
    block (they are independent) and then just bottom-factor <b>zcc++</b>,
    yielding
  <b><pre>  if (zcc == 0)
    System.out.println("zcc was == 0");
  else
    System.out.println("zcc was not == 0");
  zcc++;</pre></b>

  <p>
  As with bottom factoring, the statement factored out of a block cannot contain any variables 
    declared in that block (if such is the case, often the declaration can be top factored out
    of the block too).
  
 

  <a name="for">
  <h3>for equivalences</h3>
  Finally, let's look at three <b>for</b> loop equivalences.
  <p>
  <b>else Removal</b>:
  This equivalence involves the removal of an unnecessary <b>else</b> in an
    <b>if</b> controlling a <b>break</b>.
  <b><pre>  for (;;) {              for (;;) {
    statements<sub>1</sub>             statements<sub>1</sub>
    if (test)               if (test)
      break;                   break;
    else {                  statements<sub>2</sub>
      statements<sub>2</sub>          }
    }
  }</pre></b>
  In both loops, if <b>test</b> is <b>true</b> Java executes the <b>break</b>;
  if <b>test</b> is <b>false</b> each loop executes <b>statements<sub>2</sub></b> next and
    then re-executes the loop:
    on the left because <b>statements<sub>2</sub></b> is in the <b>else</b>, and on the right 
    because the <b>if</b> finishes and Java executes the next statement in the loop's body.
  After executing <b>statements<sub>2</sub></b>, the bodies of both loops are finished executing,
    so the <b>for</b> loop causes Java to execute them again.
  <p>
  Typically code is simpler if it isn't nested deeply.
  <p>
  <b>Loop Factoring</b>:
  The second loop equivalence again involves factoring statements.
  <b><pre>
  for (;;) {              for (;;) {
    statements<sub>1</sub>             statements<sub>1</sub>
    if (test) {             if (test)
      statements<sub>a</sub>              break;
      break;                statements<sub>2</sub>
    }                     }
    statements<sub>2</sub>           statements<sub>a</sub>
  }</pre></b>
  In both loops, if <b>test</b> is <b>false</b> each executes <b>statements<sub>2</sub></b>,
    and the bodies of both loops are executed again.
  In the left loop, if <b>test</b> is <b>true</b> it executes <b>statements<sub>a</sub></b>
     and then terminates the loop; on the right it terminates the loop and afterward executes
     <b>statements<sub>a</sub></b>.
  The order of these operations makes no difference, except that any variables declared inside
    the block that is the block that is the body of the <b>for</b> statement cannot be stored
    in or examined outside of that block (after the loop terminates).
  <p>
  Typically, loop statements are the most complex to understand, in terms of
    what they do; so by removing <b>statements<sub>a</sub></b> from the body
    of the loop, we simplify it.
  <p>
  <b>Loop Rerolling</b>:  <sub></sub>
  The third loop equivalence involves moving statements repeated before and at the bottom of
    a loop completely inside the loop.
  <b><pre>
  statements<sub>1</sub>             for (;;) {
  for (;;) {                statements<sub>1</sub>
    if (test)               if (test)
      break;                  break;
    statements<sub>2</sub>             statements<sub>2</sub>
    statements<sub>1</sub>           }
  }</pre></b>
  Each code fragment first executes <b>statements<sub>1</sub></b> (on the left before the loop; on
    the right as the first statement in the loop's body).
  Then, each tests for termination; if the <b>test</b> is not true, each executes
   <b>statements<sub>2</sub></b>, followed by <b>statements<sub>1</sub></b> (on the left at the
   bottom of the loop; on the right at the top of th loop), followed by testing for termination again.
  <p>
  Typically, we want to avoid duplicating statements inside and outside of
    loops.
  By using <b>for</b>/<b>if</b>/<b>break</b>, which allows a termination test
    in the middle of a loop, we can remove this redundancy.
  <p>
</td>
</tbody>
</table>


<!-- Pragmatics -->

<a name="Pragmatics"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Pragmatics</b></td>
<td width ="80%">
  The formal techniques presented and illustrated above allow us to prove that two programming
    forms are equivalent.
  It is then up to us to determine which form is simpler, and use it in our programs.
  As a rule of thumb, the smaller the code the simpler it is.
  Also, code with fewer nested statements is generally simpler.
  <p>
  More generally, we should try to distribute complexity.
  So, when decidiing between two equivalences, choose the one whose most
    complicated statement is simplest.
  <p>
  If you ever find yourself duplicating code, there is an excellent chance that
    some simplification will remove this redundancy.
  Beginners are especially prone to duplicating large chunks of code, missing the
    important simplification.
  <p>
  We should aggressively simplify our code while we are programming.
  We will be amply rewarded, because it is easier to add more code (completing
    the phases of the enhancements) to an already simplified program.
  If we wait until the program is finished before simplifying...well, we many
    never finish the program because it has become too complex; if we do
    finish, the  context in which to perform each simplification will be much
    bigger and more complex, making it harder to simplify.
  Excessive complexity is one of the biggest problems that a software engineer
    faces.
  <p>
  Generally, I try not to get distracted when I am writing code; but one of 
    the few times that I will stop writing code is when I see a simplification.
  I know that in the long run, taking time to do a simplification immediately
    will likely allow me to finish the  program faster.
</td>
</tbody>
</table>



<!-- Problem Set -->

<a name="ProblemSet"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Problem Set</b></td>
<td width ="80%">
  To ensure that you understand all the material in this lecture, please solve
    the the announced problems after you read the lecture.
  <p>
  If you get stumped on any problem, go back and read the relevant part of the
     lecture.
  If you still have questions, please get help from the Instructor, a CA, or any other student.

  <ol> 
     <li>Prove that the expressions <b>x < 10</b> and <b>(x < 10) == true</b> are equivalent.
         Prove that the expressions <b>x < 10</b> and <b>(x >= 10) == false</b> are equivalent.
         In each case, which would you judge the simpler expression?
     <p>
     

     <li>Use the law of trichotomy to prove that <b>(x+y-Math.abs(x-y))/2.</b> and
           <b>Math.min(x,y)</b> compute the same value.
     <p>
     
     <li>In the following statements, identify which variabes are stored into and which variables
           are examined.
         <ul>
           <li><b>x += y;</b>
           <li><b>x = x + 1;</b>
           <li><b>System.out.println(x);</b>
           <li><b>if (x > 0) x = 0;</b>
           <li><b>if (x == 0) break</b>
           <li><b>x += y += z;</b>
         </ul>
     <p>

  <li>Prove that the following two statements are equivalent. Assume that we declared <b>boolean b;</b>
      <b><pre>  if (test)          b = !test;
    b = false;
  else
    b = true;</pre></b>
  <p>

  <li>The code on the left is not equivalent to the code on the right (which has been top factored).
      They are not equivalent because the <b>if</b>'s test and the statements <b>x++</b> are not
        independent.
      Rewrite the <b>if</b>'s test in the code on the right so that left and right are equivalent.
     <b><pre>  if (x < 10) {               x++;
    x++;                      if (x < 10)
    System.out.println(x);      System.out.println(x);
  }else{                      else
    x++;                        y = x;
    y = x;
  }</pre></b>

  <p>
  <li>Suppose we are comparing aspirin A1, A2, A3, and A4 for efficacy.
      Suppose that the company making A1 goes on TV with the advertisement:
      �No aspirin is better than A1�.
      Could the other companies also run ads saying the exact same thing about their products?
      <p>
      How does this question relate to the material in this lecture?
      How does it relate to mathematical vs. perceptual/psychological truths in advertising?
      As a programmer whose code is read by other people (as well as the Java compiler), what
        implications does this have for the audience for which we are writing code?
</ol>
</td>
</tbody>
</table>


</body>
</html>
