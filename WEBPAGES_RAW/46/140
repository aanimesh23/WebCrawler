# Program2-1.py
#
# This is version 1 of a program to find candidate genes on the given
# and reverse strands of DNA sequences.  This version takes its input
# from the user, who types the sequences in, one at a time.
#
# This program is based heavily on Program1-1.py, with one new function
# that finds the reverse complement of a DNA sequence, and a couple of
# other minor changes to "plug" the function into the program.



# The findReverseComplement function takes a DNA sequence as a parameter
# and returns its reverse complement.  This function is based heavily on
# the program that we wrote in a previous lab assignment to solve this
# problem; by wrapping it in a function, we can reuse it in this program
# (and others later, as well).

def findReverseComplement(dnaSequence):
    basePairTranslator = {}
    basePairTranslator['A'] = 'T'
    basePairTranslator['C'] = 'G'
    basePairTranslator['G'] = 'C'
    basePairTranslator['T'] = 'A'

    reverseStrand = ""

    for i in range(len(dnaSequence)-1, -1, -1):
        c = dnaSequence[i]
        reverseC = basePairTranslator[c]
        reverseStrand = reverseStrand + reverseC

    return reverseStrand



# The printCandidateGenes function takes a DNA sequence as a parameter
# (i.e., as its input), finds any candidate genes using the rules we've
# used previously, then prints information about it.  For each, it prints
# the start position of the candidate gene, as well as its length (measured
# in codons.  Additionally, it takes a parameter specifying whether it's
# looking in the given or reverse strand.

def printCandidateGenes(dnaSequence, isGivenStrand):
    for i in range(0, len(dnaSequence)-2):
        if dnaSequence[i : i+3] == 'ATG':
            for j in range(i+3, len(dnaSequence)-2, 3):
                if dnaSequence[j : j+3] == 'TAA' or dnaSequence[j : j+3] == 'TAG' or dnaSequence[j : j+3] == 'TGA':
                    if j+3-i >= 60:
                        print "-----"

                        if isGivenStrand:
                            print "Candidate gene found on given strand"
                        else:
                            print "Candidate gene found on reverse strand"

                        print "     Start position    :", (i+1)
                        print "     Length (in codons):", (j+3-i)/3
                    break



# The program, at this point, is essentially the same, except that it
# prints the candidate genes from both the given and reverse strands.

userHasQuit = False

while not userHasQuit:
    dnaSequence = raw_input("Enter a DNA sequence, or press Enter to quit: ")

    if dnaSequence == "":
        userHasQuit = True
    else:
        printCandidateGenes(dnaSequence, True)
        printCandidateGenes(findReverseComplement(dnaSequence), False)


