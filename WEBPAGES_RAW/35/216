<HTML><HEAD>
<TITLE>alpha-beta</TITLE>
</HEAD><BODY>
<H2>alpha-beta</H2>

<I>Backtrack programming</I> consists of searching a vector
space of possibilities in a systematic fashion.
For example, if actions <I>a, b, c</I> are to occur
in that order and each action has two possibilities
(say, {<I>a1, a2</I>}, {<I>b1, b2</I>}, {<I>c1, c2</I>})
then we might first consider performing the first of
all possibilities, resulting in considering the sequence
<I>a1-b1-c1</I>.
We now iterate changing the last of the actions to some other
possibility that has not yet been considered.
This results in next considering <I>a1-b1-c2</I>.
When we run out of possibilities of changing the last action,
we change the last of the actions that has other possibilities.
In this manner, we consider the sequences in the order:
<I>a1-b1-c1</I>, <I>a1-b1-c2</I>, <I>a1-b2-c1</I>, <I>a1-b2-c2</I>,
<I>a2-b1-c1</I>, <I>a2-b1-c2</I>, <I>a2-b2-c1</I>, <I>a2-b2-c2</I>.
The set of sequences can be thought of as being the leaves
of the tree of possibilities, where a tree <I>node</I>
corresponds to a partial sequence, and the degree of a node
is the number of possibilities of the next action.
<P>
<I>Branch-and-bound</I> is an embellishment of backtrack programming.
Performing a sequence of actions results in reaching
a leaf of the tree with which we can associate a <I>value</I>.
Our desire is to determine whether there exists a sequence of actions
which will lead to a leaf having at least (or at most) a specified value,
<I>goal</I>, or to determine the maximum (or minimum) achievable value.
During the process of the search, we may be able to assign
upper and lower value <I>bounds</I> to intermediate
nodes of the tree
(such as after performing the partial sequence <I>a1-b2</I>)
in such a manner that logically and mathematically
it will always be the case that the value, <I>v</I>, of any
leaf obtained by completing the partial sequence will
have value between the upper and lower bounds.
If the upper bound is less than <I>goal</I>
or, for maximization problems,
less than the highest value achieved thus far
(or if the lower bound is more than <I>goal</I>
or, for minimization problems,
more than the lowest value achieved thus far)
then we can avoid searching the collection of
sequences that complete the partial sequence, thus <I>pruning</I>
the search (and saving time).
<P>
<I>Alpha-beta</I> search is similar to branch-and-bound
for a game between two opposing players or teams, in which
one side has a goal of achieving or maximizing a value while the other
side has a goal of preventing achievement or minimizing value.
<P>
There are a number of strategies that may improve the efficiency of
alpha-beta search.
Some of these
<a href="http://www.ics.uci.edu/~dan/bridge/amenities.html">
amenities</a> are effective for the bridge hand evaluation problem.
<P>
<HR>
<ADDRESS>
Dan Hirschberg<BR>
Computer Science Department<BR>
University of California, Irvine, CA 92697-3425<BR>
</ADDRESS>
<tt>dan at ics.uci.edu</tt><br>
Last modified: July 1, 1996
</BODY></HTML>
