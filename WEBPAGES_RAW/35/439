<HTML><HEAD>
<TITLE> Handling Interrupts
</TITLE>
</HEAD><BODY>

<H2> Handling interrupts in C </H2>

Programs should be able to recover gracefully when run-time errors
occur, such as illegal arithmetic, I/O problems, etc.&nbsp;
In some of these cases, a system library procedure you use
will return a value to the caller (your procedure) indicating
whether or not it was successful.&nbsp;
You are responsible for checking these return values and deciding
what to do if an error is detected.&nbsp;
You will need to check the manual entries
of any procedures you use to determine what returns to look for.
<P>
In other cases, an error is detected by the hardware or operating system
rather than a library routine you called.&nbsp;
A "signal" is sent to the process (your program) in these cases.&nbsp;
Every process has a list of actions to be taken upon receipt
of various signals.&nbsp;
For most signals, the action is to print an error message to
the standard error stream, dump core, and abort the process.&nbsp;
You will, almost certainly, be plagued by this behavior before
this class is through.
<P>
You may, in your program, redefine the actions which are to be taken
upon receipt of these signals.&nbsp;
You are expected to use this facility to have
your program recover gracefully from illegal arithmetic errors
(such as overflow).&nbsp;
To do this, first include the file <tt><signal.h></tt>
and write a procedure of the form:
<pre>
	floatexception( sig, code )
	int sig, code;
	{
		/* your code for exception handling */
	}
</pre>
<P>
Then the command:&nbsp; <tt>signal( SIGFPE, floatexception );</tt>
will tell the system to execute the procedure <I>floatexception</I>
whenever the signal SIGFPE (Floating Point Exception) is received.&nbsp;
After completion of the <I>floatexception</I> procedure
(if it completes at all;&nbsp; more on this later),
the code that caused the signal is continued
as if nothing happened.&nbsp;
The two parameters passed to <I>floatexception</I> by the system
tell it what signal caused it to be executed (in case you
have more than one signal set to call it) and a further integer code
giving more details in some cases.&nbsp;
See the manual page on <I>signal</I> for more details.
<P>
Note that, since your procedures are supposed to be self-contained,
before your procedure quits it must reset any signals back to whatever
they were before your procedure changed them.&nbsp;
The <I>signal</I> function returns a
pointer to whatever function was the old action to be taken.&nbsp;
You must remember this pointer, and use it to reset the signal
before quitting.&nbsp;
In the case of a recursive procedure, you
should probably use a separate top-level "bootstrap"
procedure that the user will
call, which just sets up the signals, allocates whatever memory will be
needed, then calls the recursive procedure.&nbsp;
This top-level procedure will then return memory
and reset signals before returning control to its caller.&nbsp;
A simplified outline of such a top-level procedure follows:
<pre>
	/* define possible returns of the procedure */
	typedef enum { FAILSIG, FAILMEM, FAILFLOAT, FAILRESETIG, SUCCEED };

	void (*old_sigfpe)(); /* to remember the old action associated with SIGFPE */

	if ( -1 == (int) ( old_sigfpe = signal( SIGFPE, floatexception ) ) );
		/* something wrong with the signal system: bail out */
		return( FAILSIG );
	.
	.	/* allocate memory, call recursive procedure, free memory */
	.
	if ( -1 == (int) signal( SIGFPE, old_sigfpe ) )
		/* signal reset failed, but we have otherwise succeeded */
		return( FAILRESETSIG );
	return( SUCCEED );
</pre>
<P>
The typedef should probably be in an include file, so that your calling
program (the tester) can decipher the return status of your procedure.
<P>
The other main problem with interrupt handling is how to abort a
procedure when it may be several levels deep in recursion.&nbsp;
One technique is to set up a global flag which the procedure checks
periodically and exits if the flag is changed.&nbsp;
In this case, <I>floatexception</I> would be the one
to change the flag.&nbsp;
This is not great, since the procedure must
waste time checking the flag.
<P>
A better solution is provided by the C library functions
<I>setjump</I> and <I>longjmp</I>.&nbsp;
To use them, include the file
<tt><setjmp.h></tt> and define a variable,
we will call it <tt>env</tt>, of type <tt>jmp_buf</tt>.&nbsp;
A call to <I>setjmp</I> will save a copy of the execution stack
in <tt>env</tt> and return 0.&nbsp;
A call to <I>longjmp</I> will restore the
execution stack to whatever is stored in <tt>env</tt>,
and will cause <I>setjmp</I>
(which will then be executing again) to return whatever integer is given
to <I>longjmp</I>.&nbsp;
Thus, when you call <I>setjmp</I>, your code must check the
return to see if it is actually the first call, or whether you got there
as a result of an error.&nbsp;
At some point in a top-level procedure (like the
"bootstrap" mentioned above) you should have some code looking something
like:
<pre>
	if ( x == setjmp( env ) ) {
		/* code to deal with error x: (probably just clean up and */
		/* return an error status to caller) */
	} else {
		/* code to continue with the task at hand */
	}
</pre>
<P>
In this case, the code in <I>floatexception</I> should just be:
<pre>
	longjmp( env, /* some non-zero integer of your choosing */ );
</pre>
<P>

<HR>
<ADDRESS>
<A HREF="http://www.ics.uci.edu/~dan">
Dan Hirschberg </A> <BR>
Computer Science Department<BR>
University of California, Irvine, CA 92697-3435<BR>
</ADDRESS>
<tt>dan (at) ics.uci.edu</tt><br>
Last modified: Mar 20, 1999
</BODY></HTML>
