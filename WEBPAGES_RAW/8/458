<title>AutoOT</title>
<body bgcolor=#ffffff>
<h2>Automatic Generation of Operation Tables for Fast
Exploration of Bypasses in Embedded Processors</h2>
  
<a href="http://www.ics.uci.edu/~aviral/papers/autoOT.pdf"><img
src="pdf.png" alt="pdf" width="34" height="34" border="0"></a>

<a href="http://www.ics.uci.edu/~aviral/papers/autoOT.ppt"><img src="ppt.png" alt="ppt" width="34" height="34" border="0"></a>

<p><i>
<a href="http://www.ics.uci.edu/~aviral"> Aviral Shrivastava </a>,
<a href="http://compiler.snu.ac.kr/shparkid/"> Sanghyun Park </a>,
<a href="http://www.ics.uci.edu/~dutt"> Nikil Dutt </a>,
<a href="http://www.ics.uci.edu/~nicolau"> Alex Nicolau </a>,
<a href="http://search2.intel.com/corporate/default.aspx?culture=en-US&q=Eugene+Earlie"> 
Eugene Earlie </a>, and
<a href="http://compiler.snu.ac.kr/ypaek/"> Yunheung Paek </a>
</i>

<p><b>DATE 2006: </b><i>Proceedings of the International 
Conference on Design Automation and Test in Europe.</i>


<p><b>Abstract: </b>
Customizing the bypasses in an embedded processor uncovers
valuable trade-offs between the power, performance and
the cost of the processor. Meaningful exploration of bypasses
requires bypass-sensitive compiler. Operation Tables (OTs)
have been proposed to perform bypass-sensitive compilation.
However, due to lack of automated methods to generate OTs,
OTs are currently manually specified by the designer. Manual
specification of OTs is not only an extremely time consuming
task, but is also highly error-prone. In this paper,
we present AutoOT, an algorithm to automatically generate
OTs from a high-level processor description. Our experiments
on the Intel XScale processor model running MiBench
benchmarks demonstrate that AutoOT greatly reduces the
time and effort of specification. Automatic generation of
OTs makes it feasible to perform full bypass exploration on
the Intel XScale and thus discover interesting alternate bypass
configurations in a reasonable time. To further reduce
the compile-time overhead of OT generation, we propose another
novel algorithm, AutoOTDB. AutoOTDB is able to
cut the compile-time overhead of OT generation by half.

<hr>

<table cellpadding="2" cellspacing="2" border="0" width="100%">
  <tbody>
    <tr>
      <td>
      Center For Embedded Computer Systems,<br> 
      Department of Information and Computer Science,<br>
      University of California, Irvine.
      </td>
      <td>
      SOAR Group,<br>
      School of Electrical Engineering,<br>
      Seoul National University, Seoul, Korea.
      </td>
      <td>
      Strategic CAD Labs,<br>
      Intel Corporation, <br>
      Hudson, Massachussets.
      </td>
    </tr>
 </tbody>
</table>
