<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="GENERATOR" CONTENT="Globetrotter 1.1.1">
<META HTTP-EQUIV="AUTHOR" CONTENT="David G. Kay">
<META HTTP-EQUIV="UPDATED" CONTENT="Monday, February 23, 1998 3:40 PM">
<TITLE>Computer Scientists Can Teach Writing</TITLE>
<META HTTP-EQUIV="X-GLOBETROTTERDATA" CONTENT="6E71595E">
<META HTTP-EQUIV=KEYWORDS CONTENT="communications skills, writing, advanced courses, technical writing">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="A course in communications skills for computer science majors, offered in the Department of Information and Computer Science at the University of California, Irvine.  This is an instance of writing across the curriculum.">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<A NAME="_top"></A>
<P>
<IMG SRC="ud_writing_gt_files/computer_scientists_can_t.gif" WIDTH=503 HEIGHT=145 HSPACE=6 VSPACE=6 ALT="Computer Scientists Can Teach Writing:">
</P>
<BR><BR><BR>
<P>
<FONT FACE="Helvetica" SIZE=2><B>Key Words:</B></FONT><FONT FACE="Times" SIZE=2>
communications skills, writing, advanced courses, technical writing</FONT></P>
<BR>
<P>
<FONT FACE="Helvetica" SIZE=2><B>Abstract</B></FONT></P>
<P>
<FONT FACE="Times" SIZE=2>The author&#39;s institution requires all students
to take one course that concentrates on writing at the upper division (junior
or senior) level. The computer science department offers one such course,
taught by computer scientists. It concentrates on communications issues
relevant to computer scientists and computer professionals, going beyond
traditional &quot;technical writing&quot; to give students experience in
oral presentation, document design, and writing in forms appropriate for
various audiences. This course takes advantage of analogies between writing
and software development and motivates computer science students to pay
more careful attention to their writing.</FONT></P>
<BR>
<P>
<FONT FACE="Helvetica" SIZE=2><B>Background</B></FONT></P>
<P>
<FONT FACE="Times" SIZE=2>Faculty often lament that their students lack
good writing skills. Traditionally, computer science students take courses
in composition offered by the English department during their first year
and have few later opportunities to write extensively, particularly on topics
in computing. In recent years the community of rhetoric and composition
educators has addressed poor student writing by enhancing and expanding
on traditional &quot;freshman composition&quot; in various ways, which computer
science faculty wishing to improve students&#39; writing might profitably
explore. </FONT><A HREF="ud_writing_gt_files/endnotes.html#_77">Endnotes</A><A HREF="ud_writing_gt_files/endnotes.html#_78">Endnotes</A></P>
<P>
<FONT FACE="Times" SIZE=2>One common practice, known as &quot;writing across
the curriculum,&quot; encourages instructors in all disciplines to include
writing assignments in their courses. Specialized composition courses alone,
while necessary and valuable, leave the impression with many students that
clear, careful writing is something only English teachers care about. Computer
science departments have adopted this practice. </FONT><A HREF="ud_writing_gt_files/endnotes.html#_79">Endnotes</A></P>
<P>
<FONT FACE="Times" SIZE=2>At the author&#39;s institution, a long-standing
campuswide requirement complements and extends &quot;writing across the
curriculum&quot;, mandating that every student take one upper-division course
that both requires a significant amount of writing and addresses writing-related
issues as part of the course. Across campus, these courses share the philosophy
that at the upper-division level, students benefit from hearing faculty
in their own discipline describe the variety and quality of writing expected
of practitioners in that discipline, and from actually doing that kind of
writing. To satisfy the campuswide requirement, a course must be offered
at the upper division (junior or senior) level. It must require that students
submit at least 4000 words of revised prose--that is, prose that has been
evaluated and returned to the students for revision and resubmission. The
campus encourages departments to maintain a student-faculty ratio of no
more than 20:1 in these courses, and to staff them with full-time faculty.
Courses that satisfy this requirement may cover writing as an adjunct to
other subject matter or may focus primarily on communications skills relevant
to their discipline.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>The author&#39;s department (of computer science)
offers such a course. Beyond traditional &quot;technical writing,&quot;
this course covers a broad range of communications issues relevant to computer
scientists, including oral work, writing for electronic media, and presentation
graphics.</FONT></P>
<BR>
<P>
<FONT FACE="Helvetica" SIZE=2><B>Course Goals and Structure</B></FONT></P>
<P>
<FONT FACE="Times" SIZE=2>The course has four main goals:</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* Provide a forum where writing is the main focus,
rather than the usual afterthought of throwing together a project&#39;s
documentation in the last half hour before it&#39;s due.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* Concentrate on the appropriate tone and level
for a document&#39;s specific audience (e.g., management, novice users,
technical staff)</FONT></P>
<BR><BR>
<P>
<FONT FACE="Times" SIZE=2>* Explore writing documents of different sizes
(analogous to &quot;programming in the large&quot; vs. &quot;programming
in the small&quot;): Infinitesimal, such as Email subject lines; small,
such as Email, memos, or brochures; and medium, such as proposals, papers,
or technical reports.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* Practice writing in a variety of forms common
to computer professionals, such as the following (not all of which would
be required in a single offering of the course): Proposals or recommendations,
technical arguments or policy statements, research papers, grant proposals,
oral presentations, use of presentation software, effective graphics and
document design, and writing for electronic media such as the Web.</FONT></P>
<BR>
<P>
<FONT FACE="Helvetica" SIZE=2><B>Common Objections</B></FONT></P>
<P>
<FONT FACE="Times" SIZE=2>Faculty in the sciences commonly raise these objections
to teaching courses that focus on writing:</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>&quot;Leave the English teaching to the experts.&quot;
Indeed, when the author was first asked to teach this course, his reaction
was to recall his own dissatisfaction with attempts by non-computer scientists
to teach programming. But a computer scientist can reach advanced computer
science students--by taking advantage of their common knowledge and experience
and by making assignments that require technical expertise and are characteristic
of the discipline--much more effectively than the typical composition expert
who lacks a computing background. Successful academic computer scientists
should all possess the requisite writing ability to teach this kind of course--the
ability to recognize clarity, cogency, and good organization. Detailed grasp
of grammatical terms and rules is much less important in a course such as
this one.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>&quot;I don&#39;t want to correct thousands of
mechanical errors.&quot; You shouldn&#39;t and you needn&#39;t. A course
at this level should focus on organization, content, and appropriateness
for the intended audience; the instructor must exercise some forbearance
(to avoid becoming obsessed with syntax) and some redirection (of students
with significant special needs to other, more appropriate resources on campus)
to avoid being drawn down into a black hole of red pencil. In a later section
we address some approaches to handling students&#39; mechanical mistakes.
Instructors should bear in mind that students at this level have passed
lower division writing--they have had experience writing at the college
level. Upper-division instructors should hold them to that standard; it
may be lower than our ideal, but it is typically higher than the level of
writing students think they can get away with when they&#39;re not being
graded on their writing. When instructors make clear that written work will
not be accepted unless students take the time to meet minimum standards
of correctness and polish, the quality of the work does improve markedly.
(Computer science instructors unfamiliar with the standards of their institution&#39;s
composition program might consider meeting with those who run it. They can
provide samples of passing work and possibly style sheets or other guidelines
that they expect their students to follow.)</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>&quot;I have too many non-native speakers.&quot;
In the author&#39;s personal experience, some of the top grades in each
offering of the course go to non-native speakers of English. Native language
is largely independent of the primary focus of this course on cogent organization,
which can shine through most minor syntactic flaws that are due to native
language differences (as opposed to mere carelessness). Below we address
English as a Second Language (ESL) issues further.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>&quot;It takes years of schooling and practice
to develop good writing skills; how can one course make my students good
writers?&quot; It can&#39;t, but it can make them <I>better</I> writers,
it can motivate them to pay closer attention and devote more time to their
writing, it can show them models of writing in their own area, and it can
dispel myths like these: &quot;Writing isn&#39;t important for computer
science,&quot; &quot;I can use a grammar/spell checker,&quot; &quot;I&#39;m
not a born writer, so I&#39;ll never be a good writer&quot; &quot;I&#39;m
not a native speaker, so I&#39;ll never be a good writer.&quot; Writing
is a skill, and skills require practice to master. Any student will show
improvement if he or she spends on this course half as much time as would
be required for any programming project course at the same level.</FONT></P>
<BR>
<P>
<FONT FACE="Helvetica" SIZE=2><B>Teaching Strategies</B></FONT></P>
<P>
<FONT FACE="Times" SIZE=2>The following strategies make teaching a course
like this one feasible, effective, and even surprisingly pleasant for a
computer scientist:</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* Require revisions. Writing is an iterative process
of enhancement, revision, and polish. Students should no more expect to
whip off perfect prose in one pass than they would perfect code. (After
all, natural languages such as English are much <I>more</I> complex and
less completely defined than formal languages such as C++ or Scheme.) Each
student should submit a draft (not a rough drafts, but a serious attempt
at quality work), the instructor (or in some cases other students, as described
below) should read the draft, make comments, and return it to the author
for use in preparing the final version.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* Use peer editing, in which students read each
other&#39;s drafts, identifying confusing passages and making suggestions
for revision. Students become inured to critical comments by faculty; their
peers&#39; confusion is harder to disregard.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* In students&#39; writing, distinguish syntax
and mechanical errors from flaws in the content or organization. Give separate
grades for each, and keep the comments in each category separate (e.g.,
in different colors or in the left vs. the right margin).</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* Don&#39;t be a human English compiler, red-penciling
every syntax or mechanical mistake and refusing to proceed with evaluation
at a deeper level. Mark mechanical errors on the first page, or the first
paragraph, or the first ten problems, and then stop. If you can read the
rest of the paper for its content and organization despite the remaining
errors, do so; if not, require the student to polish the writing and resubmit
it. As mentioned earlier, upper-division students should have mastered the
mechanics, and that level of mastery should be expected and enforced. Indeed,
we do students a disservice when we don&#39;t base a small part of every
assignment grade in every class on the quality of the writing, because it
gives the impression that we don&#39;t think that quality matters. Most
institutions have learning skills centers or other resources to which you
can refer students who need in-depth or remedial work on the mechanics.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* Try to recognize errors that are due to a student&#39;s
native language not being English. Research indicates that second-language
learning follows an ordered progression over many years, which cannot be
greatly compressed, because some language features take longer than others
to assimilate. You still must point out the errors and grade accordingly,
but it should be understood that they stem from a long-term process rather
than carelessness or weakness on the student&#39;s part. This requires that
the instructor learn to recognize errors typical to native speakers of various
languages; ESL instructors may be able to provide this information.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* As a long-term strategy for improving students&#39;
writing, encourage them to read broadly and frequently: the newspaper instead
of the television news, a recreational novel rather than a movie or entertainment
on television.</FONT></P>
<BR>
<P>
<FONT FACE="Helvetica" SIZE=2><B>Representative Assignments</B></FONT></P>
<P>
<FONT FACE="Times" SIZE=2>The following assignments comprise a typical offering
of this course (in a ten-week quarter):</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* &quot;<A HREF="http://www.ics.uci.edu/~kay/courses/139w/editing.html">Warm-up</A>&quot;--Edit
a few short passages for clarity, with a focus on the most common pitfalls
and solecisms.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* &quot;<A HREF="http://www.ics.uci.edu/~kay/courses/139w/trimming.html">Trimming the Fat</A>&quot;--Choose
a five-page (1500-word) passage and rewrite it in three pages (900 words),
maintaining the content.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* &quot;<A HREF="http://www.ics.uci.edu/~kay/courses/139w/instructions.html">Writing Instructions</A>&quot;--Build
some object using Tinkertoys, Lego, or some other system with more than
one type of component that can be combined in more than one way. Write a
manual that explains how to build this object. Bring your draft manual and
the disassembled pieces to class on a specified date, when you will give
both to a classmate who will try to build your object following your manual,
without any in-person assistance from you.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>This assignment follows most closely the technical
writing tradition. Having other students try to follow the manual demonstrates
the importance of clear, unambiguous writing in a tangible way.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* &quot;<A HREF="http://www.ics.uci.edu/~kay/courses/139w/influencing.html">Influencing Policy</A>&quot;--Write
a letter to a policy maker (either a government official or a newspaper)
taking a position on a technical issue and backing it up with the best reasoning
you can.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>We encourage students to start by listing their
position and the points that support it in the form of a syllogism.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* &quot;<A HREF="http://www.ics.uci.edu/~kay/courses/139w/graphicsactivity.html">Graphics Activity</A>&quot;--Take
a small supplied set of data and, using presentation graphics software,
produce a variety of charts that support different perspectives or points
of view.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* &quot;<A HREF="http://www.ics.uci.edu/~kay/courses/139w/changingsys.html">Changing the System</A>&quot;--Choose
a software system you&#39;re familiar with and examine it from multiple
perspectives: introducing new users to the system, proposing changes to
the system, and promoting the changed system to its users. This assignment
has four separate parts:</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>1. An <A HREF="http://www.ics.uci.edu/~kay/courses/139w/presentationreview.html">oral synopsis</A>
of the system and the changes you intend to propose (audience: our class,
who may know something about the software and who may have suggestions about
the proposed changes)</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>2. An <A HREF="http://www.ics.uci.edu/~kay/courses/139w/changingsys-editintro.html">introduction</A>,
both written and oral, to the current system (intended audience: novices,
unfamiliar with the software, who need to learn its purpose and basic functionality)</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>3. A formal <A HREF="http://www.ics.uci.edu/~kay/courses/139w/changingsys-editprop.html">proposal</A>,
written and oral, describing and justifying the changes you propose (audience:
the &quot;higher-ups&quot; who decide what changes should be supported;
they know about the software but must be convinced of the need to change
and the feasibility of the changes you propose)</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>4. A <A HREF="http://www.ics.uci.edu/~kay/courses/139w/changingsys-editpromo.html">brochure, flyer, or web page</A>
and a short oral presentation describing and promoting your changes (audience:
the system&#39;s current users, who know what it does now but need to know
what the changes mean)</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>This assignment spans most of the term, with class
days devoted to the oral components and drafts required for the written
parts. Each of the four parts addresses a different aspect of the same subject
matter, allowing students to concentrate on the differences in audience
and presentation level.</FONT></P>
<BR>
<P>
<FONT FACE="Helvetica" SIZE=2><B>Conclusions</B></FONT></P>
<P>
<FONT FACE="Times" SIZE=2>Writing is very much like software development,
and the similarities help computer science students appreciate what they
must do as writers.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* Both involve a logical, carefully organized
exposition of complex ideas. Students understand top-down design and stepwise
refinement of software; approaching prose the same way should come easily.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* Practitioners of both must follow a set of language
rules (somewhat richer, more powerful, and less completely defined for English
than for formal languages).</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* Both are iterative processes, subject to successive
refinements. Advanced computer science students would ridicule the idea
of writing code by starting at the top of a blank screen and proceeding
linearly until finished, with a completed, correct program as the result,
yet often they expect to write prose in exactly that one-pass fashion.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>* Writing, like computing, is based on a hierarchy
of abstraction levels from the lowest, typography and document design, through
spelling, punctuation, syntax, usage, style and tone, organization, content
and facts, all the way up to the document&#39;s ultimate effectiveness (which
depends, as does software&#39;s ease of use, not only on the author but
on the audience).</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>This course has been successful and the students,
while reluctant at the outset, appreciate the variety of experiences the
course provides and are grateful to have them first in school rather than
on the job. Students also appreciate that their instructor is primarily
a computer scientist. After many years in school, they become desensitized
to English teachers&#39; criticism of their writing and they develop various
defense mechanisms (&quot;Yes, but <I>I</I> can write network management
code in C++&quot;); when someone they respect technically tells them that
writing is important, it captures their attention.</FONT></P>
<P>
<FONT FACE="Times" SIZE=2>The course described here should add to the menu
of writing experiences available to (and perhaps required of) our students.
This course is not intended to supplant or replace any other program designed
to improve students&#39; writing, such as pervasive &quot;writing across
the curriculum,&quot; capstone projects, senior theses, or specific courses
in technical writing, documentation, or oral presentations. </FONT><A HREF="ud_writing_gt_files/endnotes.html#_76">Endnotes</A><FONT FACE="Times" SIZE=2>
The greater the quantity and variety of writing experiences students have,
the more their writing will improve.</FONT></P>
<BR>
<P>
<FONT FACE="Helvetica" SIZE=2><B><A HREF="http://www.ics.uci.edu/~kay/pubs/ud_writing_gt_files/endnotes.html">References</A></B></FONT></P>
<BR CLEAR=ALL>
</BODY>
</HTML>
