<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="author" content="Vijay Krishna Palepu" />
  <link rel="shortcut icon" href="http://www.ics.uci.edu/~vpalepu/images/favicon.gif" />
  <title>Lambda Calculus Interpreter in Scheme</title>
  
  <!-- <link rel="stylesheet" href="http://www.ics.uci.edu/~vpalepu/css/bootstrap.min.css" type="text/css" /> -->
  <!-- <link rel="stylesheet" href="http://www.ics.uci.edu/~vpalepu/css/bootstrap-theme.min.css" type="text/css" /> -->
  <link rel="stylesheet" href="http://www.ics.uci.edu/~vpalepu/css/screen.css" type="text/css" />
  <!-- syntax highlighting CSS -->
  <link rel="stylesheet" href="http://www.ics.uci.edu/~vpalepu/css/syntax.css" type="text/css" />
  <link href='http://fonts.googleapis.com/css?family=Andada' rel='stylesheet' type='text/css'>
  <!-- <link rel="stylesheet" href="http://www.ics.uci.edu/~vpalepu/css/pygments.css" type="text/css" > -->
</head>
<body >   
  <!-- <img id="hover1" class="pos" src="http://www.ics.uci.edu/~vpalepu/images/brain.png"> -->
  <div class="container">

    <div class="plain stretch">
      
      <span class="regular">
        
          <a href="http://www.ics.uci.edu/~vpalepu/research.html" style="margin:20px;margin-left:0">Research</a>
        

        
          <a href="http://www.ics.uci.edu/~vpalepu/projects.html" style="margin:20px">Projects</a>
        
        
        
          <a href="http://www.ics.uci.edu/~vpalepu/news.html" style="margin:20px">News</a>
        

        
          <a href="http://www.ics.uci.edu/~vpalepu/blog.html" style="margin:20px">Notes</a>
        

        
          <a href="http://www.ics.uci.edu/~vpalepu/cv.html" style="margin:20px">CV</a>
        
      </span>
      <!-- <hr class="thinblue" /> -->
      <br>
    </div>

    <div class="plain stretch" style="padding-bottom:5px">  
      
        <span class="huge">
          <a href="http://www.ics.uci.edu/~vpalepu/index.html" class="icon-home"></a> /
          
            <a href="http://www.ics.uci.edu/~vpalepu/projects.html">Projects</a> / Lambda Calculus Interpreter in Scheme
          
        </span>
                 

    </div>

<!--     <div class="plain stretch" >
      <span class="huge"> 
      
        Vijay Krishna <a href="http://www.ics.uci.edu/~vpalepu/index.html"><b>Palepu</b></a>
      
        
      </span>
      <small>
        vpalepu [at] uci [dot] edu &bull;
        5243 Bren Hall,
        <a href="http://www.spideruci.org" target="_blank">Spider Lab</a>,
        <a href="http://www.uci.edu/" target="_blank">University of California, Irvine</a>, CA 92697-3440

      </small>      

      



    

    
      
        <hr class="thinblue" />

        
          <a href="http://www.ics.uci.edu/~vpalepu/research.html" style="margin:20px;margin-left:0">Research</a>
        

        
          <a href="http://www.ics.uci.edu/~vpalepu/projects.html" style="margin:20px">Projects</a>
        
        
        
          <a href="http://www.ics.uci.edu/~vpalepu/news.html" style="margin:20px">News</a>
        

        
          <a href="http://www.ics.uci.edu/~vpalepu/blog.html" style="margin:20px">Notes</a>
        

        <a href="http://www.ics.uci.edu/~vpalepu/cv.html" style="margin:20px">CV</a>
            
    

    </div> -->
    
    <title>Lambda Calculus Interpreter in Scheme</title>
<div class="plain stretch">
<!-- <p>
  <a href="http://www.ics.uci.edu/~vpalepu/index.html" class="icon-home" ></a> /
	<a href="http://www.ics.uci.edu/~vpalepu/projects.html">Projects</a> /
  Lambda Calculus Interpreter in Scheme
</p> -->

<div id="post">
  <span class="tags">
    April 2012 to April 2012
  </span>
  
  
<p>So this was a cool class project that I worked on where we were to implement a lambda calculus interpreter in any language of our choice. It just seemed too natural to do this in <a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</a>. :)</p>

<p>It attempts to implement both alpha and beta reductions.</p>

<p>The following code for the interpreter is also available as a gist, with test cases: <a href="https://gist.github.com/VijayKrishna/5180292.js">https://gist.github.com/VijayKrishna/5180292.js</a></p>

<div class="highlight"><pre><code class="language-scheme" data-lang="scheme"><span class="c1">;;UCI Class Project - INF212 Analysis of Programming Languages</span>
<span class="c1">;;Nicholas DiGiuseppe and Vijay Krishna Palepu</span>
<span class="c1">;;1.interpreter is not case sensitive.</span>
<span class="c1">;;2.interpreter lives in the world of symbols and lists.</span>
<span class="c1">;;3.interpreter requires proper parenthesis.</span>
<span class="c1">;;4.does not work with numbers such as 1 2 3...</span>
<span class="c1">;;reference: http://matt.might.net/articles/implementing-a-programming-language/</span>

<span class="c1">;;original 7 lines</span>
<span class="c1">; eval takes an expression and an environment to a value</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nb">eval </span><span class="nv">e</span> <span class="nv">env</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">display </span><span class="s">&quot;evaluating &quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="nv">e</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="s">&quot; with &quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="nv">env</span><span class="p">)</span> <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">cond</span>
    <span class="p">((</span><span class="nb">symbol? </span><span class="nv">e</span><span class="p">)</span>       
     <span class="p">(</span><span class="k">begin </span>
       <span class="p">(</span><span class="nb">display </span><span class="s">&quot;option 1 &quot;</span><span class="p">)</span> 
       <span class="p">(</span><span class="nb">display </span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">boolean? </span><span class="p">(</span><span class="nb">assq </span><span class="nv">e</span> <span class="nv">env</span><span class="p">))</span> <span class="nv">e</span> <span class="p">(</span><span class="nb">cadr </span><span class="p">(</span><span class="nb">assq </span><span class="nv">e</span> <span class="nv">env</span><span class="p">))))</span> 
       <span class="p">(</span><span class="nf">newline</span><span class="p">)</span> 
       <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">boolean? </span><span class="p">(</span><span class="nb">assq </span><span class="nv">e</span> <span class="nv">env</span><span class="p">))</span> <span class="nv">e</span> <span class="p">(</span><span class="nb">cadr </span><span class="p">(</span><span class="nb">assq </span><span class="nv">e</span> <span class="nv">env</span><span class="p">)))</span>
       <span class="p">)</span>
     <span class="p">)</span>
    <span class="p">((</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nb">length </span><span class="nv">e</span><span class="p">))</span>
     <span class="p">(</span><span class="nf">begin</span>
       <span class="p">(</span><span class="nb">display </span><span class="s">&quot;option 2 &quot;</span><span class="p">)</span> 
       <span class="p">(</span><span class="nb">display </span><span class="p">(</span><span class="nb">cons </span><span class="nv">e</span> <span class="nv">env</span><span class="p">))</span> 
       <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">eval </span><span class="p">(</span><span class="nb">car </span><span class="nv">e</span><span class="p">)</span> <span class="nv">env</span><span class="p">)</span>
       <span class="p">)</span>
     <span class="p">)</span>
    <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">e</span><span class="p">)</span> <span class="o">&#39;</span><span class="err">Î»</span><span class="p">)</span>  
     <span class="p">(</span><span class="k">begin </span>
       <span class="p">(</span><span class="nb">display </span><span class="s">&quot;option 3 &quot;</span><span class="p">)</span> 
       <span class="p">(</span><span class="nb">display </span><span class="p">(</span><span class="nb">cons </span><span class="nv">e</span> <span class="nv">env</span><span class="p">))</span> 
       <span class="p">(</span><span class="nf">newline</span><span class="p">)</span> 
       <span class="p">(</span><span class="nb">cons </span><span class="nv">e</span> <span class="nv">env</span><span class="p">)</span>
       <span class="p">)</span>
     <span class="p">)</span>
    <span class="p">(</span><span class="k">else </span>
     <span class="p">(</span><span class="k">begin </span>
       <span class="p">(</span><span class="nb">display </span><span class="s">&quot;option 4 &quot;</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">display </span><span class="nv">e</span><span class="p">)</span>
       <span class="p">(</span><span class="nf">newline</span><span class="p">)</span> 
       <span class="c1">;(iterApply e env)</span>
       <span class="p">(</span><span class="nb">apply </span><span class="p">(</span><span class="nb">eval </span><span class="p">(</span><span class="nb">car </span><span class="nv">e</span><span class="p">)</span> <span class="nv">env</span><span class="p">)</span> <span class="p">(</span><span class="nb">eval </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">e</span><span class="p">)</span> <span class="nv">env</span><span class="p">))</span>
       <span class="p">)</span>
     <span class="p">)</span>
    <span class="p">)</span>
  <span class="p">)</span>

<span class="c1">; apply takes a function and an argument to a value</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nb">apply </span><span class="nv">f</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">display </span><span class="s">&quot;applying &quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="s">&quot; to &quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="nv">f</span><span class="p">)</span> <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">symbol? </span><span class="nv">f</span><span class="p">)</span> <span class="c1">;if it is not pair</span>
      <span class="p">(</span><span class="k">begin </span><span class="p">(</span><span class="nb">list </span><span class="nv">f</span> <span class="nv">x</span><span class="p">))</span>
      <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">chek</span> <span class="p">(</span><span class="nf">lambdaCheck</span> <span class="nv">f</span> <span class="mi">0</span><span class="p">)))</span>
        <span class="p">(</span><span class="nf">cond</span>
          <span class="p">((</span><span class="nb">= </span><span class="mi">0</span> <span class="nv">chek</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">list </span><span class="nv">f</span> <span class="nv">x</span><span class="p">)))</span>
          <span class="p">((</span><span class="nb">&lt; </span><span class="mi">0</span> <span class="nv">chek</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">car </span><span class="nv">f</span><span class="p">)</span> <span class="nv">x</span><span class="p">)))</span>
          <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nb">eval </span><span class="p">(</span><span class="nb">cddr </span><span class="p">(</span><span class="nb">car </span><span class="nv">f</span><span class="p">))</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cadr </span><span class="p">(</span><span class="nb">car </span><span class="nv">f</span><span class="p">))</span> <span class="p">(</span><span class="nf">find</span> <span class="nv">f</span> <span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">f</span><span class="p">))))</span>
          <span class="p">)</span>
        <span class="p">)</span>
      <span class="p">)</span>
  <span class="p">)</span>

<span class="c1">;;additions</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">interpret</span> <span class="nv">e</span> <span class="nv">env</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">display </span><span class="s">&quot; e(interpret): &quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="nv">e</span><span class="p">)</span> <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">e</span><span class="p">)</span>
      <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">e</span> <span class="p">(</span><span class="nb">eval </span><span class="nv">e</span> <span class="nv">env</span><span class="p">)))</span>
        <span class="p">(</span><span class="nf">cond</span>
          <span class="p">((</span><span class="nb">symbol? </span><span class="nv">e</span><span class="p">)</span> <span class="nv">e</span><span class="p">)</span> <span class="c1">;consider doing a (not (pair? e)) instead of (symbol? e)</span>
          <span class="p">((</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nb">length </span><span class="nv">e</span><span class="p">))</span> <span class="p">(</span><span class="nb">car </span><span class="nv">e</span><span class="p">))</span>
          <span class="p">((</span><span class="k">and </span><span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">length </span><span class="nv">e</span><span class="p">))</span> <span class="p">(</span><span class="nb">symbol? </span><span class="p">(</span><span class="nb">car </span><span class="nv">e</span><span class="p">)))</span> <span class="nv">e</span><span class="p">)</span>
          <span class="p">((</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">length </span><span class="nv">e</span><span class="p">))</span>
           <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">env</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">e</span><span class="p">)))</span> <span class="p">(</span><span class="nf">e</span> <span class="p">(</span><span class="nb">car </span><span class="nv">e</span><span class="p">)))</span>
             <span class="p">(</span><span class="nf">itrate</span> <span class="nv">e</span> <span class="o">&#39;</span><span class="p">()</span> <span class="nv">env</span><span class="p">)</span>
             <span class="p">)</span>
           <span class="p">)</span>
          <span class="p">((</span><span class="nb">&lt; </span><span class="mi">2</span> <span class="p">(</span><span class="nb">length </span><span class="nv">e</span><span class="p">))</span>
           <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">env</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">e</span><span class="p">))</span> <span class="p">(</span><span class="nf">e</span> <span class="p">(</span><span class="nb">car </span><span class="nv">e</span><span class="p">)))</span>
             <span class="p">(</span><span class="nf">itrate</span> <span class="nv">e</span> <span class="o">&#39;</span><span class="p">()</span> <span class="nv">env</span><span class="p">)</span>
             <span class="p">))</span>
          <span class="p">)</span>
        <span class="p">)</span>
      <span class="nv">e</span>
      <span class="p">)</span>
  <span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">itrate</span> <span class="nv">l</span> <span class="nv">nl</span> <span class="nv">env</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span>
      <span class="nv">nl</span>
      <span class="p">(</span><span class="k">begin </span>
        <span class="p">(</span><span class="nf">itrate</span> 
         <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)</span> 
         <span class="p">(</span><span class="nb">append </span>
          <span class="nv">nl</span> 
          <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">interpret</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="nv">env</span><span class="p">))</span>
          <span class="p">)</span>
         <span class="nv">env</span>
         <span class="p">)</span>
        <span class="p">)</span>
      <span class="p">)</span>
  <span class="p">)</span>

<span class="c1">;begin alpha reduction</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">flatten</span> <span class="nv">l</span> <span class="nv">nl</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span>
      <span class="nv">nl</span>
      <span class="p">(</span><span class="nf">begin</span>
        <span class="p">(</span><span class="nf">cond</span>
          <span class="p">((</span><span class="nb">symbol? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nf">flatten</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)</span> <span class="p">(</span><span class="nb">append </span><span class="nv">nl</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)))))</span>
          <span class="p">((</span><span class="nb">pair? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nf">flatten</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)</span> <span class="p">(</span><span class="nb">append </span><span class="nv">nl</span> <span class="p">(</span><span class="nf">flatten</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))))</span>
          <span class="p">)</span>
        <span class="p">)</span>
      <span class="p">)</span>
  <span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">find</span> <span class="nv">l</span> <span class="nv">al</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">nl</span> <span class="p">(</span><span class="nf">flatten</span> <span class="nv">l</span> <span class="o">&#39;</span><span class="p">())))</span>
    <span class="p">(</span><span class="nf">cond</span>
      <span class="p">((</span><span class="nb">null? </span><span class="nv">nl</span><span class="p">)</span> <span class="nv">al</span><span class="p">)</span>
      <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">nl</span><span class="p">)</span> <span class="o">&#39;</span><span class="err">Î»</span><span class="p">)</span>
       <span class="p">(</span><span class="k">begin </span>
         <span class="p">(</span><span class="nf">find</span> <span class="p">(</span><span class="nb">cddr </span><span class="nv">nl</span><span class="p">)</span> <span class="p">(</span><span class="nf">replace</span> <span class="nv">al</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">nl</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))</span>
         <span class="p">)</span>
       <span class="p">)</span>
      <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">find</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">nl</span><span class="p">)</span> <span class="nv">al</span><span class="p">))</span>   
      <span class="p">)</span>
    <span class="p">)</span>
  <span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">replace</span> <span class="nv">l</span> <span class="nv">var</span> <span class="nv">nl</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span>
      <span class="nv">nl</span>
      <span class="p">(</span><span class="nf">begin</span>
        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">symbol? </span><span class="nv">l</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">cond</span>
              <span class="p">((</span><span class="nb">eq? </span><span class="nv">l</span> <span class="nv">var</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-&gt;symbol </span><span class="p">(</span><span class="nb">string-append </span><span class="p">(</span><span class="nb">symbol-&gt;string </span><span class="nv">var</span><span class="p">)</span> <span class="s">&quot;1&quot;</span><span class="p">)))</span>
              <span class="p">((</span><span class="nb">not </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">l</span> <span class="nv">var</span><span class="p">))</span> <span class="nv">l</span><span class="p">)</span>
              <span class="p">)</span>
            
            <span class="p">(</span><span class="nf">replace</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)</span> <span class="nv">var</span> 
                     <span class="p">(</span><span class="nb">append </span><span class="nv">nl</span>
                             <span class="p">(</span><span class="k">cond </span>
                               <span class="p">((</span><span class="k">and </span><span class="p">(</span><span class="nb">symbol? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="nv">var</span><span class="p">))</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">string-&gt;symbol </span><span class="p">(</span><span class="nb">string-append </span><span class="p">(</span><span class="nb">symbol-&gt;string </span><span class="nv">var</span><span class="p">)</span> <span class="s">&quot;1&quot;</span><span class="p">))))</span>
                               <span class="p">((</span><span class="k">and </span><span class="p">(</span><span class="nb">symbol? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="nv">var</span><span class="p">)))</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)))</span>
                               <span class="p">((</span><span class="nb">pair? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">replace</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="nv">var</span> <span class="o">&#39;</span><span class="p">())))</span>
                               <span class="p">)</span>
                             <span class="p">)</span>
                     <span class="p">)</span>
            <span class="p">)</span>
        <span class="p">)</span>
      <span class="p">)</span>
  <span class="p">)</span>
<span class="c1">;end alpha reduction</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">lambdaCheck</span> <span class="nv">l</span> <span class="nv">count</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">cond</span>
    <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="nv">count</span><span class="p">)</span>
    <span class="p">((</span><span class="k">and </span><span class="p">(</span><span class="nb">symbol? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">count</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="o">&#39;</span><span class="err">Î»</span><span class="p">))</span> <span class="mi">-1</span><span class="p">))</span>
    <span class="p">((</span><span class="k">and </span><span class="p">(</span><span class="nb">symbol? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="o">&#39;</span><span class="err">Î»</span><span class="p">)))</span> <span class="nv">count</span><span class="p">)</span>
    <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">lambdaCheck</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">count</span><span class="p">)))</span>
    <span class="p">)</span>
  <span class="p">)</span></code></pre></div>

</div>

<div><i>TL;DR</i> - Lamba Calculus interpreter in Scheme. </div>

<div style="margin-bottom: 10px">
	<br>
	<b class="label">Tags:</b>
	
		<span class="tags">scheme</span>
		
			<span> </span>
		
	
		<span class="tags">lambda-calculus</span>
		
			<span> </span>
		
	
		<span class="tags">interpreter</span>
		
	
</div>
</div>

<div class="plain stretch">
  <h2>Related Posts</h2>
  <ul class="posts">
    
      <li><span>07 Oct 2015</span> &raquo; <a href="http://www.ics.uci.edu/~vpalepu/index.html">Spider SENSE: Software-Engineering, Networked, System Evaluation</a></li>
    
      <li><span>07 Oct 2015</span> &raquo; <a href="http://www.ics.uci.edu/~vpalepu/index.html">Revealing Runtime Features and Constituent Behaviors within Software</a></li>
    
      <li><span>01 Oct 2015</span> &raquo; <a href="http://www.ics.uci.edu/~vpalepu/2015/10/01/Attended-VISSOFT-2015.html">Attended VISSOFT 2015</a></li>
    
  </ul>
</div>


    <div class="plain stretch" style="background:rgba(255, 255, 255, 0.85)">  
      <small>
        <a href="http://www.ics.uci.edu/~vpalepu/index.html">home</a> &bull;
        <a href="https://bitbucket.com/vpalepu"><b>bitbucket</b>.com</a> &bull;
        <a href="http://www.linkedin.com/in/palepuvijaykrishna" target="_blank">Linked<b>in</b></a> &bull;
        <a href="http://instagram.com/vpalepu" target="_blank">Instagram</a> &bull;
        <a href="https://medium.com/@vkrishnapalepu" target="_blank">medium</a> &bull;
        <a href="http://stackoverflow.com/users/1481262/vijay">stack<b>overflow</b></a> &bull;
        <a href="https://github.com/VijayKrishna"><b>github</b>.com</a>  &bull;
        <a href="http://www.ics.uci.edu/~vpalepu/archives.html"><b>arch</b>ives</a>
        &bull;
        Background: <a href="http://www.ics.uci.edu/~vpalepu/images/mt-rainier.JPG" target="_blank">Mt. Ranier</a>, Â© Vijay Krishna Palepu, 2015
        <!-- Background Photo Credit: <a href="http://sudhapalepu.wordpress.com/" target="_blank">Sudha Palepu</a> -->
      </small>
    </div>    
  </div>
  </div> <!-- end of main -->
  <!-- <div class="header"></div> -->
</body>
</html>
