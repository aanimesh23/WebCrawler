<!DOCTYPE html>
<html lang="en">
<head>
<title>SEAL - Savasana</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="Reply-to" content="malek at uci dot edu">
<meta http-equiv="Owner" content="Sam Malek">
<meta name="Author" content="Sam Malek">
<meta name="Generator" content="Emacs">
<link rev="MADE" href="mailto:malek at uci dot edu">
<link href="../../seal.css" rel="stylesheet" type="text/css">
</head>

<body>
<div class="wrapper">
    
<!-- *************** Beginning of content ****************** -->

<h2>Savasana: Adaptation Consistency via Code Analysis</h2>

<p>
Savasana is the first white-box approach that uses code analysis for reasoning about consistency of adaptation.
</p>

<h3>Approach Overview</h3>
<p>
 Savasana consists of two parts: Static Code Analysis runs on the system's code and Run-time Control manages the corresponding running system.</p>

<img style="margin:10" ALT="[Savasana picture]" height="350" src=./savasana_approach.png><br>

<p>
    We realized Savasana's code analysis capabilities on top of <a href="https://sable.github.io/soot/">Soot</a>. Soot is a Java optimization framework, which can also be used for static analysis. We used Soot for the implementation of Dependency Extractor and Model Analyzer.

    We implemented Savasana's runtime control capabilities on top of the <a href="http://spring.io/">Spring</a> framework. For implementing
the Monitor component, we used Spring's extensive support for aspect-oriented programming, and for the Adapter component, we relied on Spring's dynamic (re)con.figuration facilities.
</p>

<h3>Implementation</h3>
<p>Savasana project source code is available <a href="./savasana_src.zip">here</a>. 
</p>

<h3>Evaluation</h3>

<p>
We examine Savasana's behavior by measuring two properties:
</p>
<ul>
    <li>
        Reachability: the amount of time it takes for fulfilling the adaptation request.
    </li>
    <li>
        Disruption: the amount of time that application threads are suspended for adaptation.
    </li>
</ul>

<p>
There are two factors that impact these properties:
</p>
<ul>
    <li>
        The internal structure of root transactions (i.e., scenarios).
    </li>
    <li>
        The level of concurrency in the system.
    </li>
</ul>

<p>
The experiments are conducted on a software system called Emergency Deployment System (EDS), which is intended for the deployment and management of personnel in emergency response scenarios. 
<br>
EDS source code is available <a href="./EDS.zip">here</a>.
<br><br>
We applied Savasana in three scenarios, each one is adopted from one of EDS's main tasks, namely: Strategy Analysis, Deployment Advising, and Resource Estimation. Inter-component dependency of these scenarios are depicted in the following figure.
<br>The evaluation results are available <a href="./savasana_evaluation.xlsx">here</a>. 

</p>


<!-- ***************** End of content ****************** -->
<br><br>
<div style="float:left">
            <a href="http://www.ics.uci.edu/~seal/"><img ALT="[seal's logo]" height="200" src=../../seal.png></a>
</div>
<div style="float:right">
            <a href="http://www.ics.uci.edu"><img ALT="[uci's logo]" style="padding-top: 40px" height="100" src=../../uci.jpg></a>
</div>
</div>
</body>