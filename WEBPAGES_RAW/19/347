<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC
 "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="../../course.css" type="text/css" />

<title>ICS 46 Spring 2016, Notes and Examples: Binary Search Trees</title>

</head>

<body>

<div class="navbar">

<p>
ICS 46 Spring 2016 |
<a href="../../index.html">News</a> |
<a href="../../CourseReference.html">Course Reference</a> |
<a href="../../Schedule.html">Schedule</a> |
<a href="../../ProjectGuide">Project Guide</a> |
<a href="../../Notes">Notes and Examples</a> |
<a href="http://www.ics.uci.edu/~thornton/">About Alex</a>
</p>

<hr />

</div>

<div class="header">

<p>ICS 46 Spring 2016<br />
   Notes and Examples: Binary Search Trees</p>

</div>

<div class="section">

<hr />

<p class="title">Ordering what's stored in a binary tree</p>

<p>The <a href="../NaryBinaryTrees">N-ary and binary trees</a> that we saw previously are not, themselves, especially interesting.  They form the basis of solutions to some interesting problems, but without additional care, they aren't sufficient to solve any particular problems.  But we can use what we know about their structure to create clean, performant solutions to problems, if we can make some additional decisions about how to organize our data into the tree.  What do we store where?  What other guarantees do we need to make about the shape of the tree, besides just how many children each node might have?</p>

<p>We'll explore one such application of binary trees here, as we use their structure to help us organize information so that we can search for it efficiently later.  Along the way, we'll discover that we're only better off if we're careful about how we use them; we'll need to understand the ways in which they behave badly, so that we can then work on ways of avoiding those situations.</p>

</div>

<div class="section">

<hr />

<p class="title">Binary search trees</p>

<p>First, let's consider the following definition:</p>

<blockquote>
A <i>binary search tree</i> is a binary tree in which every (internal) node stores a unique <i>key</i>.  For every node <i>n</i> containing a key <i>k</i>:

<ul>
  <li>All of the nodes in <i>n</i>'s left subtree have keys smaller than <i>k</i></li>
  <li>All of the nodes in <i>n</i>'s right subtree have keys larger than <i>k</i></li>
</ul>
</blockquote>

<p>So, generally, a binary search tree is a binary tree containing keys (and possibly values associated with those keys).  There are limitations on where the keys are allowed to reside, so that if we're ever looking at a given node that contains some key, we can be certain that every node in its left subtree will have keys that are smaller, and every node in its right subtree will have keys that are bigger.  Of course, binary search trees don't just fall out of the sky already organized this way; it'll be up to us to maintain this property whenever we add or remove keys, and in that lies a lot of the challenge.  But once we have a binary search tree, as we'll see, finding keys (and their associated values) becomes surprisingly simple and, more importantly, can be very fast indeed, even for very large collections of keys.</p>

<p>It's important to note that the keys must have a meaningful ordering.  Integer keys could be ordered smaller-to-larger; string keys could be ordered alphabetically or lexicographically; and so on.  For simplicity, we'll demonstrate binary search trees using only integer keys, but the keys can be anything, as long as there's an unambiguous way to order them.</p>

<p>An example of a binary search tree is pictured below.</p>

<p class="center"><img src="BinarySearchTree.png" alt="Binary Search Tree with integer keys" /></p>

<p>What makes this a binary search tree is that it fits both of the necessary properties of the definition:</p>

<ul>
  <li>It is a binary tree.  Every node has exactly two subtrees, though some of them (such as 10's left subtree) are empty.</li>
  <li>The keys are ordered according to the data-ordering property; no matter what node you choose, all of the keys in that node's left subtree are smaller and all of the keys in that node's right subtree are larger.</li>
</ul>

<p class="subtitle">Lookups in binary search trees</p>

<p>The <i>lookup</i> operation in a binary search tree is one that finds out whether a particular key is in the binary search tree somewhere; if so, and if there is a value associated with it, that value might also be returned, but the general behavior &mdash; how we find the key &mdash; is the same regardless.</p>

<p>Because we know how the keys are organized &mdash; in particular, that smaller keys will only be found in left subtrees and larger ones will only be found in right subtrees &mdash; we can do this job surprisingly well.  For example, suppose we lookup the key 25 in the binary search tree above.  We would follow this sequence of steps.</p>

<ul>
  <li>Begin by looking at the root node, which contains the key 30.  Since 30 isn't the key we're looking for, we haven't found it.  But since the key 25 is smaller than the key in the root node, we're sure that one of two things is true: (1) the key 25 is in the left subtree of the root, or (2) the key 25 is nowhere to be found.</li>
  <li>Armed with this knowledge, we proceed to the left child of 30, in which we find the key 10.  10 isn't 25, either, but we do know that 25 is larger than 10; so the key 25, if present, will be in 10's right subtree.</li>
  <li>Continuing on, we look at 10's right child, in which we find the key 20.  20 isn't 25, but 25 is larger, so we should proceed to the right.</li>
  <li>Finally, we reach 20's right child, in which we find the key 25 that we were looking for.</li>
</ul>

<p>If we had instead been searching for the key 27, note that we would have followed all the same steps, with the only difference being that we would have reached the node containing 25, concluded that 27 could only be in its right subtree, and then discovered that 25's right subtree was empty.  At that point, we can be sure that 27 isn't anywhere in the tree, even though we've only looked at a few of the nodes.</p>

<p>In principle, lookups in binary search trees really are that simple.  Start at the root, and proceed downward to the left or right, following one path from the root toward a leaf.  If you find what you're looking for at any point, you're done; if not, continue until you either find it or you're led to an empty subtree.</p>

<p>As always, though, we're concerned not only with <i>how</i> the algorithm works, but also with <i>how well</i> it works, so let's do some analysis.</p>

<p class="subtitle">Asymptotic analysis of lookup</p>

<p>From our understanding of the lookup algorithm, it seems clear that the amount of time spent will be a function of how far we have to go.  We can compare each key to the key we're searching for in a constant amount of time, which will lead us to either be finished, or to take a step downward to the left or the right, always along a single path in the binary search tree.  For a binary search tree of height <i>h</i>, we would say that this takes <i>O</i>(<i>h</i>) time, because we might have to follow the longest path in the tree &mdash; the length of which is, by definition, the tree's height &mdash; and because we might not have to get all the way to a leaf (or follow the path that's the longest).</p>

<p>But a key issue to consider is how the height of the tree, <i>h</i>, relates to the number of nodes in the tree, which we'll call <i>n</i>.  This is the thing we'll be most interested in knowing &mdash; it's certainly true that more nodes will tend to make searches take longer, but by how much?  To answer that, we'll have to consider the shapes that binary search trees can take.</p>

<p>Imagine that we have a binary search tree containing the keys 1, 2, 3, 4, 5, 6, and 7.  What shape(s) might it have?  There are many possibilities, but there are two extremes.  One of those extremes looks like this:</p>

<p class="center"><img src="DegenerateTree.png" alt="Degenerate Tree" /></p>

<p>This shape is known as a <i>degenerate tree</i>, so named because this is the worst shape you can be faced with.  A degenerate tree is one that contains <i>n</i> nodes and has a height of <i>n</i> &minus; 1.  The reason why this shape is so bad is because a lookup would essentially be a linear-time search, because you might have to visit every node.  A lookup, given this shape, would take <i>O</i>(<i>n</i>) time, which is no better than unordered linear data structures like arrays or linked lists.</p>

<p>By way of contrast, we might also have the opposite extreme:</p>

<p class="center"><img src="PerfectBinaryTree.png" alt="Perfect Binary Tree" /></p>

<p>This shape is known as a <i>perfect binary tree</i>, so named because it's as good as it gets.  A perfect binary tree with <i>h</i> levels is one in which every level is "full" (i.e., every node that could possibly be on that level will actually be on that level).  Thought differently, a perfect binary tree could be defined this way:</p>

<blockquote>
A <i>perfect binary tree</i> of height <i>h</i> is a binary tree with the following properties.

<ul>
  <li>If <i>h</i> = 0, then its left and right subtrees are empty.</li>
  <li>Otherwise, <i>h</i> &gt; 0 and its left and right subtrees are both perfect binary trees.</li>
</ul>
</blockquote>

<p>Our intuition should immediately tell us that this tree's shape is better than that of a degenerate tree, because it's now possible to perform a lookup without visiting every node; however, the question is "How much better is it?"  To understand that, we'll need to know how its height relates to the number of nodes it has.  There are a couple of mathematical facts that help:</p>

<ul>
  <li>A perfect binary tree has 2</i><sup><small><i>k</i></small></sup> nodes on level <i>k</i>.  (So, for example, there will be 2<sup><small>0</small></sup> = 1 nodes on level 0, 2<sup><small>1</small></sup> = 2 nodes on level 1, and so on.)  This can be proven by induction on <i>k</i>.</li>
  <li>A perfect binary tree of height <i>h</i> has 2<sup><small><i>h</i>+1</small></sup> &minus; 1 nodes.  This can be proven by induction on <i>h</i>, with the previous fact being a handy one to use in that proof.</li>
</ul>

<p>We'll skip the two proofs by induction by now, but the latter of the two facts, in particular, leads to a useful conclusion.  If the height of the tree is <i>h</i> and the number of nodes is <i>n</i>, we have:</p>

<blockquote><pre>
                n = 2<sup><small>h+1</small></sup> - 1
</pre></blockquote>

<p>Some algebra lets us solve for <i>h</i> instead of <i>n</i>, which will tell us the height of a perfect binary tree with <i>n</i> nodes:</p>

<blockquote><pre>
            n + 1 = 2<sup><small>h+1</small></sup>
       log<sub><small>2</small></sub>(n + 1) = h + 1       <i>see interlude on logarithms below</i>
   log<sub><small>2</small></sub>(n + 1) - 1 = h
</pre></blockquote>

<p>So, generally, we see that the height of a perfect binary tree with <i>n</i> nodes is &Theta;(log <i>n</i>).  A lookup in a binary search tree with this shape would take <i>O</i>(log <i>n</i>) time.</p>

<p class="subtitle">Interlude: Logarithms in asymptotic notation</p>

<p>You've likely seen before that mathematics defines a <i>logarithm</i> as the inverse of exponentiation, which is what allows us to solve the equation above for <i>h</i>.  When we use them in asymptotic notations, you'll notice that we don't generally write a base; we're apt to simply write &Theta;(log <i>n</i>), rather than something more specific like &Theta;(log<sub><small>2</small></sub><i>n</i>) or &Theta;(log<sub><small>10</small></sub><i>n</i>).  The reason follows from the formula that is used to convert between logarithms of different bases; the ratio, ultimately, is a constant.  The formula for that ratio is:</p>

<blockquote><pre>
log<sub><small><i>a</i></small></sub><i>n</i> / log<sub><small><i>b</i></small></sub><i>n</i> = log<sub><small><i>a</i></small></sub><i>b</i>
</pre></blockquote>

<p>So, for example, the ratio of log<sub><small>2</small></sub><i>n</i> to log<sub><small>16</small></sub><i>n</i> is log<sub><small>2</small></sub>16 = 4, a constant.  When we use logarithms in asymptotic notations, then, we need not write a base, because the difference between any two bases is simply a constant factor; constant factors are considered irrelevant in asymptotic notations, so there's no reason to write the base.</p>

<p class="subtitle">Another interlude: How much better is logarithmic than linear?</p>

<p>While there are many shapes a binary search tree might take, we've seen that the two extremes are "degenerate" and "perfect," and that the performance distinction between them is that lookups will take <i>O</i>(<i>n</i>) or <i>O</i>(log <i>n</i>) time, depending on the shape.  Is this difference significant?  How much better is logarithmic than linear?  The answer is <i>much, much better, indeed!</i></p>

<p>To understand why, consider some values of <i>n</i> and log<sub><small>2</small></sub><i>n</i>:</p>

<table class="normal">
  <tr class="top">
    <td>log<sub><small>2</small></sub><i>n</i></td>
    <td><i>n</i></td>
  </tr>
  <tr><td>0</td><td>1</td></tr>
  <tr><td>1</td><td>2</td></tr>
  <tr><td>2</td><td>4</td></tr>
  <tr><td>3</td><td>8</td></tr>
  <tr><td>4</td><td>16</td></tr>
  <tr><td>5</td><td>32</td></tr>
  <tr><td>6</td><td>64</td></tr>
  <tr><td>7</td><td>128</td></tr>
  <tr><td>8</td><td>256</td></tr>
  <tr><td>9</td><td>512</td></tr>
  <tr><td>10</td><td>1,024</td></tr>
  <tr><td>11</td><td>2,048</td></tr>
  <tr><td>12</td><td>4,096</td></tr>
  <tr><td>13</td><td>8,192</td></tr>
  <tr><td>14</td><td>16,384</td></tr>
  <tr><td>15</td><td>32,768</td></tr>
  <tr><td>16</td><td>65,536</td></tr>
  <tr><td>17</td><td>131,072</td></tr>
  <tr><td>18</td><td>262,144</td></tr>
  <tr><td>19</td><td>524,288</td></tr>
  <tr><td>20</td><td>1,048,576</td></tr>
  <tr><td>21</td><td>2,097,152</td></tr>
  <tr><td>22</td><td>4,194,304</td></tr>
</table>

<p>The first column would represent the height of a particular perfect binary tree.  The second column would represent (roughly) the number of nodes you could store in that tree.  So, for example, in a perfect binary tree with 1,000,000 nodes, we would have to visit approximately 20 of them to perform one lookup.  With 1,000,000,000 nodes, that number would only increase to 30.  The moral of this story is that logarithms grow very, very slowly as <i>n</i> grows, and increasingly slowly the bigger <i>n</i> gets.  Logarithmic time, generally, is very good news.</p>

<p class="subtitle">Traversing a binary search tree</p>

<p>We've seen previously that there are, broadly speaking, two kinds of tree traversals: <i>breadth-first</i> and <i>depth-first</i>, and that depth-first traversals come in two categories: <i>preorder</i> and <i>postorder</i>, distinguished by when the visit step is done &mdash; preorder traversals visit before traversing subtrees, while postorder traversals visit afterward.</p>

<p>Binary search trees offer one more interesting variant called an <i>inorder traversal</i>, which is another kind of depth-first traversal that can visit all of the keys in a binary search tree is ascending order (i.e., smallest to largest).  It does this by using the data-ordering property of binary search trees to its advantage:</p>

<ul>
  <li>All keys in the left subtree of a node will be smaller than whatever key is in that node.</li>
  <li>The key in that node will be smaller than all of the keys in the right subtree.</li>
</ul>

<p>The trick, then, is to simply visit the keys in that precise order:</p>

<blockquote><pre>
inorder(Tree t):
    if t is not empty:
        inorder(left subtree of t)
        visit(key in root of t)
        inorder(right subtree of t)
</pre></blockquote>

<p>With the same algorithm applied recursively, we'll make the same decision at every level of the tree, visiting keys in the left subtree of a node before the key in that node, and the key in that node before visiting keys in its right subtree.  This will naturally visit the keys in ascending order, from smallest to largest.</p>

<p class="subtitle">Inserting keys into a binary search tree</p>

<p>Of course, binary search trees don't just fall out of the sky, magically organized the way we've seen.  You have to be able to build them, by inserting one key at a time, which means we need an algorithm that lets us insert a key.  Given a binary search tree <i>T</i>, our insertion algorithm would modify <i>T</i> so that it has one more node than it did before and the additional key desired.  And, notably, the result will still have to be a binary search tree, so we can't do anything that violates the data-ordering property &mdash; and we'll need to be sure we don't insert a key that's already present, since the keys must be unique.</p>

<p>Unlike linked lists, insertion into a binary search tree is a trickier problem, because changes in one part of the tree can invalidate other parts of it.  For example, suppose we wanted to insert the key 60 into our first example binary search tree:</p>

<p class="center"><img src="BinarySearchTree.png" alt="Binary search tree" /></p>

<p>To do that, one problem we'll need to solve is being sure that 60 is not already in the binary search tree.  The simplest way to do that is to do a lookup, using the same algorithm we discussed previously:</p>

<ul>
  <li>Compare 60 to the key in the root, 30.  60 is larger, so we'll proceed to the right.</li>
  <li>Compare 60 to the key in 30's right child, 55.  60 is larger, so we'll again proceed to the right.</li>
  <li>Compare 60 to the key in 55's right child, 70.  60 is smaller, so we'll now proceed to the left.</li>
</ul>

<p>At this point, we've reached a point where we can't go any farther; 70 has no left child.  This means we know two useful things:</p>

<ul>
  <li>The key 60 is not in the binary search tree.</li>
  <li>The key 60 could reasonably fit into the binary search tree as the left child of 70.</li>
</ul>

<p>So, we'll create a new node, make it the left child of 70, and place our key 60 into it.</p>

<p class="center"><img src="BinarySearchTreeAfterInsertion.png" alt="Binary search tree after inserting 60" /></p>

<p>In general, a leaf position is a great place to insert a node into a binary search tree, because it can't cause problems with the nodes above it; as long as the new key "fits" in the leaf position we select, no other keys will be misplaced.  By way of contrast, if we tried to insert nodes higher up in the tree, such as making 60 the new root, we would have a lot of work to do in ensuring that we placed the correct nodes into 60's left and right subtrees.  And since we have to search for 60, anyway, we'll naturally find the correct leaf position automatically.  What's not to like?</p>

<p class="subtitle">Asymptotic analysis of insertion</p>

<p>The asymptotic analysis of insertion is actually quite simple.  Fundamentally, it's the same operation as lookup, with the only difference being a constant amount of work &mdash; creating a new node and linking it into the tree &mdash; done at the end.  So, insertion will take <i>O</i>(<i>n</i>) time in a degenerate tree or <i>O</i>(log <i>n</i>) time in a perfect binary tree; generally, the smaller the tree's height, the better off we'll be.</p>

<p class="subtitle">Removing a key from a binary search tree</p>

<p>Removing a key from a binary search tree turns out to be somewhat more complicated than the other operations.  Lookups are simple because they rely only on the data-ordering property of a binary search tree.  Insertions are also relatively straightforward, because we can always insert our new node in a convenient place &mdash; a leaf position &mdash; where we don't otherwise damage the ordering of the keys already in the tree.  But removals don't offer us that option: If we want to remove a key from the tree, we have to deal with it wherever it is, which may or may not be in a convenient place.  However, there is one important observation that helps:</p>

<blockquote>
When we remove a key from a binary search tree <i>t</i>, the result is a binary search tree <i>t</i> ' with one fewer node than <i>t</i> and the appropriate key missing.
</blockquote>

<p>Wording things carefully, we see that the ultimate goal is removing one node and one key.  But we don't have to remove the node that currently contains the key we want to remove; if it's in an inconvenient place, we can instead move it somewhere more convenient.</p>

<p>The algorithm involves two steps:</p>

<ul>
  <li>Perform a lookup, finding the node containing the key we want to remove.  (If we don't find it, we're done.)</li>
  <li>Depending on how many children the node has, we'll do different things.</li>
</ul>

<p>There are three possibilities.  Let's consider the effect of removing keys from our most recent binary search tree:</p>

<p class="center"><img src="BinarySearchTreeAfterInsertion.png" alt="Binary search tree after inserting 60" /></p>

<ul>
  <li>If we wanted to remove the key 25, it's actually quite simple, because 25 is a node that has no children.  We would simply make 20's right subtree be empty (e.g., by pointing a pointer to null) and we would be done; everything else will still be a binary search tree.</li>
  <li>If we wanted to remove the key 70, things are a little more complex, because it has one child, and we have to make sure the orphaned child is placed back into the binary search tree in an appropriate place.  An observation helps: All of the keys in 70's left subtree are smaller than 70 (by definition), which means we could simply make 60 into the right child of 55.  In other words, we can remove nodes with one child by simply "pointing around" them.</li>
  <li>If we wanted to remove the key 55, then it gets a bit more complicated than that, because 55 has two children, so we'll have two orphaned children to move around.  But there's no law that says we have to remove the node currently containing 55; we just have to remove a node and remove the key 55, with the remaining nodes containing all keys except 55 and being organized as a binary search.  This leads to an interesting approach:
    <ul>
      <li>Find the maximum key in the left subtree of 55 <i>or</i> the minimum key in the right subtree of 55.  In practice, it makes little difference which of these you do; either one has the property that you've found a key in one of 55's subtrees that is about as close to 55 as you can get.</li>
      <li>Swap the key you found with the key 55.  So, for example, if we found the minimum key in the right subtree of 55, that key would be 60, so we would swap the keys 55 and 60.</li>
      <li>The key 55 is now misplaced &mdash; it's in 60's right subtree! &mdash; but that's fine, because we're going to remove it.  And, luckily, it is guaranteed to be in a node that has either zero or one child.  Why?  Because if the node had two children, 60 wouldn't have been the minimum key in the right subtree; keys in 60's left subtree would have been smaller!  So we just remove 55 using one of the simpler cases (zero children or one child) above.</li>
    </ul>
  </li>
</ul>

<p>Conceptually, this boils down to the following idea: If the key you want to remove is in an inconvenient place, move it to a convenient place so it becomes easier to remove, though we have to do that a little bit carefully, so we don't disrupt the ordering of other keys in the tree.</p>

<p class="subtitle">Asymptotic analysis of removal</p>

<p>The asymptotic analysis of removal is only slightly more complex than insertion.  Fundamentally, it starts with a lookup.  After that, it's possible that we'll have to search even further down the tree, looking for the largest or smallest key in some subtree.  In total, though, we're only going to follow one path in the tree, and then change a constant number of pointers in the tree to remove the node.  So, just like lookup and insertion, removal will take <i>O</i>(<i>n</i>) time in a degenerate tree or <i>O</i>(log <i>n</i>) time in a perfect binary tree; generally, the smaller the tree's height, the better off we'll be.</p>

</div>

</body>
</html>
