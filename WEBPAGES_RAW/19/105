
## Install astsa (one time only)

## Load astsa (every time you need to use this package)

## To access all datasets in astsa
astsadata()

## These commands are taken from Shumway and Stoffer (2010)

############### Global temperature data ####################

## plot
par(mfrow=c(1,1))
plot(gtemp, type="o", ylab="Global Temperature Deviations")

## fit a linear model
fit <- lm(gtemp ~ time(gtemp)) ## regress gtemp on time
## fit is an object that stores output from lm
names(fit)
summary(fit)
par(mfrow=c(1,1))
plot(gtemp, type="o", ylab="Global Temperature Deviation")
abline(fit, col=2) ## add estimated regression line to the plot

## examine the residuals
resid = fit$resid;
pred = fit$fitted;
par(mfrow=c(2,1)); 
plot(resid, type="o", ylab="Residuals", xlab="time"); 
N = length(resid);
zeroline = rep(0, N);
lines(zeroline, col=2);
plot(y=resid, x=pred, type="o", ylab="Residuals", xlab="predicted"); 
lines(x=pred, y=zeroline, col=2);

par(mfrow=c(2,1)); 
acf(resid);
pacf(resid); 


############### LA County Cardiac Mortality Data ##############

## Plot the LA County mortality dataset
## Series: cmort, temperature, particulate
par(mfrow=c(3,1))
plot(cmort, main="Cardiovascular Mortality", xlab="", ylab=""); 
plot(tempr, main="Temperature", xlab="", ylab="")
plot(part, main="Particulates", xlab="", ylab="")

dev.new()
pairs(cbind(Mortality=cmort, Temperature=tempr, Particulates=part))

##### Fit a model for cardiac mortality
temp= tempr-mean(tempr) ## center temperature 
temp2 = temp^2        ## square of temp
trend = time(cmort)  ## time
fit = lm(cmort~trend + temp + temp2 + part, na.action=NULL)
summary(fit)    ## regression results
summary(aov(fit))  ## ANOVA table   (compare to next line) 
summary(aov(lm(cmort~cbind(trend, temp, temp2, part)))) ##  Table 2.1 

## Illustration on how to compute the information criteria
num = length(cmort) ##  sample size
AIC(fit)/num- log(2*pi) ## AIC
AIC(fit, k=log(num))/num- log(2*pi) ##  BIC
(AICc = log(sum(resid(fit)^2)/num)+ (num+5)/(num-5-2)) ## AICc

## Example on smoothing/filtering
ma5 = filter(cmort, sides=2, rep(1,5)/5)
ma53 = filter(cmort, sides=2, rep(1,53)/53) 
par(mfrow=c(1,1));
plot(cmort, type="p", ylab="mortality") 
lines(ma5,col=2)
lines(ma53,col=3)

##### Fitting some polynomial and sinusoidal trends
wk = time(cmort) - mean(time(cmort)) ## wk is essentially t/52 centered at zero
wk2 = wk^2 
wk3 = wk^3
cs = cos(2*pi*wk)
sn = sin(2*pi*wk)
reg1 = lm(cmort ~ wk + wk2 + wk3, na.action=NULL)
reg2 = lm(cmort ~ wk + wk2 + wk3 + cs + sn, na.action=NULL) 
par(mfrow=c(1,1));
plot(cmort, type="p", ylab="mortality") 
lines(fitted(reg1), col=2)
lines(fitted(reg2), col=3)

## Compare the residual series for each model
resid1 = reg1$resid
resid2 = reg2$resid
par(mfrow=c(2,1));
plot(resid1)
plot(resid2)

par(mfrow=c(2,2)); 
acf(resid1)
acf(resid2)
pacf(resid1)
pacf(resid2)


###### Kernel smoothing (with Guassian kernel)
par(mfrow=c(1,1));
plot(cmort, type="p", ylab="mortality");
sm1 = ksmooth(time(cmort), cmort, "normal", bandwidth=5/52);
sm2 = ksmooth(time(cmort), cmort, "normal", bandwidth=2);
lines(sm1, col=2); 
lines(sm2, col=3);


#################### ARIMA ##########################

##### Generating time series 

##### AR
ts1 = arima.sim(list(order=c(1,0,0), ar=0.9), n=100);
ts2 = arima.sim(list(order=c(1,0,0), ar=-0.9), n=100);

par(mfrow=c(2,1))  ## in the expression below, -is a  space and == is equal
plot(ts1, ylab="TS", xlab="Time"); title(paste("AR(1) phi=+.9"));
plot(ts2, ylab="TS", xlab="Time"); title(paste("AR(1) phi=-.9"));

##### MA
ts1 = arima.sim(list(order=c(0,0,1), ma=c(0.5)), n=100);
ts2 = arima.sim(list(order=c(0,0,5), ma=c(1, 0.3, 0.2, 0.1, 0.05)), n=100);

par(mfrow=c(2,1))  ## in the expression below, -is a  space and == is equal
plot(ts1, ylab="TS", xlab="Time"); title(paste("MA(1)"));
plot(ts2, ylab="TS", xlab="Time"); title(paste("MA(5)"));


##### Fitting ARIMA models to data

## Data is generated by an AR(1) process
data1 = arima.sim(list(order=c(1,0,0), ar=0.9), n=100);

## Fit ARMA(2,0,1) to data1
fit1 = arima(data1, order=c(2,0,1))









