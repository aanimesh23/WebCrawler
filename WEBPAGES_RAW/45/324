<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>CHEM.ML.Util.FeatureDictWriter</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="CHEM-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="CHEM-module.html">Package&nbsp;CHEM</a> ::
        <a href="CHEM.ML-module.html">Package&nbsp;ML</a> ::
        <a href="CHEM.ML.Util-module.html">Module&nbsp;Util</a> ::
        Class&nbsp;FeatureDictWriter
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options">[<a href="javascript:void(0);" class="privatelink"
    onclick="toggle_private();">hide&nbsp;private</a>]</span></td></tr>
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="CHEM.ML.Util.FeatureDictWriter-class.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<!-- ==================== CLASS DESCRIPTION ==================== -->
<h1 class="epydoc">Class FeatureDictWriter</h1><br /><br />
<pre class="base-tree">
object --+    
         |    
      dict --+
             |
            <strong class="uidshort">FeatureDictWriter</strong>
</pre>

<hr />
<p>Utility class to encode data feature vectors (represented as 
  string:value feature dictionaries) into a plain text file format.</p>
  <p>These should then be re-read using the matching 
  &quot;FeatureDictReader&quot; class. The basic strategy is to identify 
  every feature encountered among the data items and assign each a unique 
  index number.  This class (which extends the dict class) stores the 
  feature:index mappings and then prints out each data item with the 
  corresponding index:value pairs.</p>
  Example Usage: (Note this may have problems as a doctest since the 
  feature:index mapping order is arbitrary based on the &quot;random&quot; 
  traversal of feature keys through the feature dictionaries.
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> cStringIO <span class="py-keyword">import</span> StringIO
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">from</span> CHEM.ML.features.SpectrumExtractor <span class="py-keyword">import</span> SpectrumExtractor
<span class="py-prompt">&gt;&gt;&gt; </span>dataList = [<span class="py-string">&quot;asdfsdfg&quot;</span>,<span class="py-string">&quot;asdfasdfASDF&quot;</span>,<span class="py-string">&quot;dfghDFGH&quot;</span>]
<span class="py-prompt">&gt;&gt;&gt; </span>outfile = StringIO()
<span class="py-prompt">&gt;&gt;&gt; </span>kernel = SpectrumExtractor();
<span class="py-prompt">&gt;&gt;&gt; </span>kernel.k = 1;
<span class="py-prompt">&gt;&gt;&gt; </span>featureEnum = FeatureDictWriter(outfile)
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-comment"># Determine and output all of the feature:index mappings</span>
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> item <span class="py-keyword">in</span> dataList:
<span class="py-more">... </span>    featureDict = kernel(item)
<span class="py-more">... </span>    <span class="py-keyword">for</span> feature <span class="py-keyword">in</span> featureDict.iterkeys():
<span class="py-more">... </span>        success = featureEnum.add(feature)
<span class="py-more">...</span>
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-comment"># Output the feature dictionaries in index:value text format</span>
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">for</span> item <span class="py-keyword">in</span> dataList:
<span class="py-more">... </span>    featureDict = kernel(item)
<span class="py-more">... </span>    featureEnum.update( featureDict, item )
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">print</span> &gt;&gt; outfile, <span class="py-string">&quot;&lt;BLANKLINE&gt;&quot;</span>,            <span class="py-comment"># Hack.  doctest doesn't like blank lines in expected output</span>
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">print</span> outfile.getvalue().replace(<span class="py-string">&quot;\t&quot;</span>,<span class="py-string">&quot; &quot;</span>); <span class="py-comment"># Doesn't like tabs either</span>
<span class="py-output"># 0 a</span>
<span class="py-output"># 1 s</span>
<span class="py-output"># 2 d</span>
<span class="py-output"># 3 g</span>
<span class="py-output"># 4 f</span>
<span class="py-output"># 5 A</span>
<span class="py-output"># 6 F</span>
<span class="py-output"># 7 S</span>
<span class="py-output"># 8 D</span>
<span class="py-output"># 9 h</span>
<span class="py-output"># 10 G</span>
<span class="py-output"># 11 H</span>
<span class="py-output">asdfsdfg UNKNOWN_ID 0:1 1:2 2:2 3:1 4:2 </span>
<span class="py-output">asdfasdfASDF UNKNOWN_ID 0:2 1:2 2:2 4:2 5:1 6:1 7:1 8:1 </span>
<span class="py-output">dfghDFGH UNKNOWN_ID 2:1 3:1 4:1 6:1 8:1 9:1 10:1 11:1 </span>
<span class="py-output">&lt;BLANKLINE&gt;</span></pre><br /><br />

<!-- ==================== INSTANCE METHODS ==================== -->
<a name="section-InstanceMethods"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Instance Methods</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-InstanceMethods"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.Util.FeatureDictWriter-class.html#__init__" class="summary-sig-name">__init__</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">outfile</span>=<span class="summary-sig-default">None</span>)</span><br />
      Constructor.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.Util.FeatureDictWriter-class.html#__getitem__" class="summary-sig-name">__getitem__</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">feature</span>)</span><br />
      Override dictionary access method &quot;dict[key]&quot; to 
      automatically add items for newly encountered keys.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.Util.FeatureDictWriter-class.html#add" class="summary-sig-name">add</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">feature</span>)</span><br />
      Makes the writer aware of a feature that will have to be written 
      for subsequent feature dictionaries.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.Util.FeatureDictWriter-class.html#__setitem__" class="summary-sig-name">__setitem__</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">feature</span>,
        <span class="summary-sig-arg">featureIndex</span>)</span><br />
      Override dictionary set method &quot;dict[key] = value&quot; to 
      automatically address newly encountered features.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.Util.FeatureDictWriter-class.html#new_key" class="summary-sig-name">new_key</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">feature</span>,
        <span class="summary-sig-arg">featureIndex</span>)</span><br />
      Output the given feature:index mapping.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.Util.FeatureDictWriter-class.html#update" class="summary-sig-name">update</a>(<span class="summary-sig-arg">self</span>,
        <span class="summary-sig-arg">featureDict</span>,
        <span class="summary-sig-arg">description</span>,
        <span class="summary-sig-arg">nameID</span>=<span class="summary-sig-default">&quot;UNKNOWN_ID&quot;</span>)</span><br />
      Output a specific feature dictionary to text format.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
  <tr>
    <td colspan="2" class="summary">
    <p class="indent-wrapped-lines"><b>Inherited from <code>dict</code></b>:
      <code>__cmp__</code>,
      <code>__contains__</code>,
      <code>__delitem__</code>,
      <code>__eq__</code>,
      <code>__ge__</code>,
      <code>__getattribute__</code>,
      <code>__gt__</code>,
      <code>__hash__</code>,
      <code>__iter__</code>,
      <code>__le__</code>,
      <code>__len__</code>,
      <code>__lt__</code>,
      <code>__ne__</code>,
      <code>__new__</code>,
      <code>__repr__</code>,
      <code>clear</code>,
      <code>copy</code>,
      <code>fromkeys</code>,
      <code>get</code>,
      <code>has_key</code>,
      <code>items</code>,
      <code>iteritems</code>,
      <code>iterkeys</code>,
      <code>itervalues</code>,
      <code>keys</code>,
      <code>pop</code>,
      <code>popitem</code>,
      <code>setdefault</code>,
      <code>values</code>
      </p>
    <p class="indent-wrapped-lines"><b>Inherited from <code>object</code></b>:
      <code>__delattr__</code>,
      <code>__reduce__</code>,
      <code>__reduce_ex__</code>,
      <code>__setattr__</code>,
      <code>__str__</code>
      </p>
    </td>
  </tr>
</table>
<!-- ==================== STATIC METHODS ==================== -->
<a name="section-StaticMethods"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Static Methods</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-StaticMethods"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
<tr>
    <td width="15%" align="right" valign="top" class="summary">
      <span class="summary-type">&nbsp;</span>
    </td><td class="summary">
      <table width="100%" cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><span class="summary-sig"><a href="CHEM.ML.Util.FeatureDictWriter-class.html#formatFeature" class="summary-sig-name">formatFeature</a>(<span class="summary-sig-arg">feature</span>)</span><br />
      Return a string representation of a feature suitable for storage 
      in the file.</td>
          <td align="right" valign="top">
            
            
          </td>
        </tr>
      </table>
      
    </td>
  </tr>
</table>
<!-- ==================== PROPERTIES ==================== -->
<a name="section-Properties"></a>
<table class="summary" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Properties</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-Properties"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
  <tr>
    <td colspan="2" class="summary">
    <p class="indent-wrapped-lines"><b>Inherited from <code>object</code></b>:
      <code>__class__</code>
      </p>
    </td>
  </tr>
</table>
<!-- ==================== METHOD DETAILS ==================== -->
<a name="section-MethodDetails"></a>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr bgcolor="#70b0f0" class="table-header">
  <td colspan="2" class="table-header">
    <table border="0" cellpadding="0" cellspacing="0" width="100%">
      <tr valign="top">
        <td align="left"><span class="table-header">Method Details</span></td>
        <td align="right" valign="top"
         ><span class="options">[<a href="#section-MethodDetails"
         class="privatelink" onclick="toggle_private();"
         >hide private</a>]</span></td>
      </tr>
    </table>
  </td>
</tr>
</table>
<a name="__init__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__init__</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">outfile</span>=<span class="sig-default">None</span>)</span>
    <br /><em class="fname">(Constructor)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Constructor.  Just pass it the output file (object, not filename) to 
  write to.
  <dl class="fields">
    <dt>Returns:</dt>
        <dd><pre class="literalblock">
new empty dictionary

</pre></dd>
    <dt>Overrides:
      dict.__init__
    </dt>
  </dl>
</td></tr></table>
</div>
<a name="__getitem__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__getitem__</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">feature</span>)</span>
    <br /><em class="fname">(Indexing operator)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Override dictionary access method &quot;dict[key]&quot; to 
  automatically add items for newly encountered keys.
  <dl class="fields">
    <dt>Overrides:
      dict.__getitem__
    </dt>
  </dl>
</td></tr></table>
</div>
<a name="add"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">add</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">feature</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Makes the writer aware of a feature that will have to be written for 
  subsequent feature dictionaries.</p>
  <p>Should be called for every possible feature in the dataset before 
  actually trying to write the data to the output file with the 
  &quot;update&quot; method.  This way the object can first assign index 
  numbers to every feature.</p>
  Return value indicates whether the feature is new to the writer or 
  not
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="__setitem__"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">__setitem__</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">feature</span>,
        <span class="sig-arg">featureIndex</span>)</span>
    <br /><em class="fname">(Index assignment operator)</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  Override dictionary set method &quot;dict[key] = value&quot; to 
  automatically address newly encountered features.
  <dl class="fields">
    <dt>Overrides:
      dict.__setitem__
    </dt>
  </dl>
</td></tr></table>
</div>
<a name="formatFeature"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">formatFeature</span>(<span class="sig-arg">feature</span>)</span>
    <br /><em class="fname">Static Method</em>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Return a string representation of a feature suitable for storage in 
  the file.</p>
  <p>Should be structured enough to be parseable back into object form by a
  respective FeatureDictReader.parseFeature method. By default will just 
  use the &quot;__str__&quot; interface to format it.</p>
  For something more sophisticated, you should create your own 
  FeatureDictWriter sub-class that overrides this method.  You can then 
  write a respective extension to the FeatureDictReader to parse the string
  back into an object.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="new_key"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">new_key</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">feature</span>,
        <span class="sig-arg">featureIndex</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Output the given feature:index mapping.</p>
  Automatically invoked by calls to the set and &quot;add&quot; methods 
  for newly encountered features.
  <dl class="fields">
  </dl>
</td></tr></table>
</div>
<a name="update"></a>
<div>
<table class="details" border="1" cellpadding="3"
       cellspacing="0" width="100%" bgcolor="white">
<tr><td>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
  <tr valign="top"><td>
  <h3 class="epydoc"><span class="sig"><span class="sig-name">update</span>(<span class="sig-arg">self</span>,
        <span class="sig-arg">featureDict</span>,
        <span class="sig-arg">description</span>,
        <span class="sig-arg">nameID</span>=<span class="sig-default">&quot;UNKNOWN_ID&quot;</span>)</span>
  </h3>
  </td><td align="right" valign="top"
    >&nbsp;
    </td>
  </table>
  
  <p>Output a specific feature dictionary to text format.</p>
  <p>It would be nice to call the &quot;add&quot; method on every possible 
  feature before calling this method so that the feature:index mappings 
  will all be output at the beginning of the file, instead of intermixed 
  with the data. However, this method will automatically try doing so if it
  has not. Either way, guaranteed that each feature:index mapping will 
  appear before they are ever referenced by a data row.</p>
  The provided object's description will be printed first for each. It 
  is important that this description NOT:
  <ul>
    <li>
      be empty or
    </li>
    <li>
      contain any whitespace or
    </li>
    <li>
      equal the FEATURE_PREFIX &quot;#&quot;
    </li>
  </ul>
  <p>Otherwise the &quot;decoding&quot; steps later will be confused.</p>
  Preferably this description should be some kind of data identifying 
  string, but uniqueness is not enforced.
  <dl class="fields">
    <dt>Returns:</dt>
        <dd><pre class="literalblock">
None

</pre></dd>
    <dt>Overrides:
      dict.update
    </dt>
  </dl>
</td></tr></table>
</div>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="CHEM-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

      <th class="navbar" width="100%"></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:32 2007
    </td>
    <td align="right" class="footer">
      <a href="http://epydoc.sourceforge.net">http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie()
  // -->
</script>
  
</body>
</html>
