<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
  <title>Program 6</title>
</head>

<body BGCOLOR="white">

<center>
<h1>Program 6</h1>
<h1>Writing Classes with Arrays and Interfaces</h1>
<p>
<h2>Introduction to Computer Science I
<br>
ICS-21<br>
</h2>
<p>
</center>


<!-- Introduction -->

<a name="Introduction">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Introduction</b></td>
<td width ="80%">
  This programming assignment is designed to ensure that you know how to write
    more complicated classes: both classes that use arrays to store large
    quantities of data and classes that employ interfaces to specify general
    things to do with the values stored in the array in the class.
  Primarily, you will be writing methods that manipulate values stored in an
    array of <b>Object</b>; the class will declare instance variables to store
     an array
    (which is not required to be filled) and keep track of the number of
    values that it stores.
  Of course, you will continue gaining experience with the standard control
    structures in Java (blocks, ifs, loops/breaks) as well as the more basic
    Java features (declarations and expression statements using arithmetic,
    state-change, relational and logical operators).
  <p>
  You will write just one class in this assignment.
  I will provide a driver program that you will use to test this class.
  As always, you can check the behavior of your programs against mine by
    downloading, unzipping, and then running the file
     <a href="executable.zip">Program #6 Executables</a>,
    to help you understand the specification of the problem and observe the
    programmer/user interaction that you are to implement.
  Use the <b>toString</b> option liberally, to examine the contents of the
    array storing the information.
  <p>
  See <a href="../program1/program.html">Program #1</a> for details on how
    to run these executables on both PCs and in Eclipse (PCs and Macs).
  Remember, you can run these programs, but not examine their source (Java)
    code.
  <p>
  To start working on this assignment, download
    <a href="start.zip">Program #6 Project Folder</a>
    which contains a template for the class that you should write for this
    assignment, some other completely written classes, and the driver program
    that you should use to test these classes.
  When you finish, submit the <b>Sequence.java</b> file.
  <p>
  Note that the methods/classes in <b>Sequence</b> are all written or stubbed;
    so the driver program compiles but fails to work correctly until you write
    the required code.
  <p>
  <b>Only one programmer of the pair should dropoff the program.
     It doesn't matter which of the pair submits.
     Of course, the program should contain both student names (in the
        comment: the same one you cut, pasted, ane filled in at the top of
        each program in <a href="../program1/program.html">Program #1</a>).</b>
</td>
</tbody>
</table>


<!-- Sequence Collection Class -->

<a name="StockPortfolio">
<hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width ="20%"><b>Sequence Collection Class</b></td>
<td width ="80%">
  You are to read and write the unwritten methods in the <b>Sequence</b>
    collection class.
  A sequence is just collection of values <b>whose order is important</b>;
    programmers
    using this class can insert, put, and remove values in specified indexes
    in the sequence (as well as empty all the values out of a sequence or
    reverse the order of its values).
  They can also examine the values stored at and indexes, find the index
    storing a value, and get other useful information (e.g., the size of the
    sequence).
  Finally, by using classes implementing the <b>Decision</b> interface, we can
    count how many values in the collection return <b>true</b> according to
    some <b>Decision</b> object's <b>isOK</b> method, or construct a new
    sequence containing only those values that return <b>true</b> according to
    some <b>Decision</b> object's <b>isOK</b> method (called <b>filtering</b>).
  <p>
  The constructors for <b>Sequence</b> are written; the <b>toString</b> and
    <b>toStringAllIndex</b> methods are also written: the former includes only
    those indexes thought to be <b>0</b> to </b> used; and the
    <b>doubleLength</b> method is written as well.
  First examine the two instance variables declared for this class (for
    storing an array of values and keeping track of the number of values
    stored in the array).
  Second, observe and understand how the constructor and written methods
    examine/update values in these variables.
  <p>
  The class uses an <b>Object</b> array to store all the values in a sequence.
  These arrays double their lengths when necessary (to accomodate inserting
    more values into the sequence when the array is full), and thus are often
    not filled.
  Pay close attention to the difference between the <b>size</b> of a collection
    and the <b>length</b> of the array storing the collection.
  The <b>size</b> of the collection is the actual number of values stored in
    the collection (e.g., the number of indexes "used" to store values in the
    array); the <b>length</b> of an array is the physical size of the array,
    e.g., its capacity to store values.
  An object of the <b>Sequence</b> class stores both an <b>Object[]</b> and an
    <b>int</b> storing the number of <b>used</b> values in the array.
  As a data invariant, all array indexes from <b>0</b> to <b>used-1</b> store
    values in the sequence; all array values from <b>used</b> to
    <b>length-1</b> in the array should store <b>null</b>.
  When adding or removing values from the array, remember to retain this
    data invariable and update the <b>sequence</b> array and <b>used</b>
    instance variable when necessary.
  <p>
  The methods you must write are the accesors <b>get</b>, <b>getSize</b>,
    <b>isEmpty</b>, <b>findIndex</b>, <b>countTrue</b>, and <b>filterTrue</b>;
    and also the mutators <b>makeEmpty</b>, <b>putAt</b>, <b>insert</b>,
    <b>insertAt</b>, <b>removeAt</b>, <b>remove</b>, and <b>reverse</b>.
  The details of each of these methods is specified inside the
    <b>Sequence.java</b> file; read them carefully.
  Each method is written in stubbed form (with a correct header but
    a generic body).
  If a method must check its parameters and throw an exception, execute
    this code as early as possible in the method (and supply a helful message
    in the exception: see my messages by testing my executable).
  The driver allows you to test each method individually, and also includes
    and automatic testing feature.
  <p>
  I suggest writing the <b>insert</b> method first (it is similar to push in
    stack and enqueue in queues) and testing it by calling <b>toString</b> and
    <b>toStringAllIndex</b>.
  Then try writing and testing each of the "simple" accessors (all except
    <b>countTrue</b> and <b>filterTrue</b>, although you might find writing
    these methods simple as well).
  Try writing and testing each mutator in the order listed above.
  You can write <b>remove</b> by a simple combination of calling the
     <b>findIndex</b> and <b>removeAt</b> method.
  If you haven't already written <b>countTrue</b> and <b>filterTrue</b>,
    write these methods.
  Finally, you can use the driver to perform an autotest on all these methods.
</td>
</tbody>
</table>

</table>
</body>
</html>
