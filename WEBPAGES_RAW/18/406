<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>



  
  
  
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">



  
  
  
  <meta name="GENERATOR" content="Mozilla/4.79 [en] (WinNT; U) [Netscape]">



  
  
  
  <title>Walt Scacchi's Publications Page</title>
</head>


<body>



<hr>
<h1> Walt Scacchi's Publications Page (<a href="http://www.ics.uci.edu/%7Ewscacchi">Home Page</a>)</h1>



<hr><b><a href="http://www.usc.edu/dept/ATRIUM/index.html">What is the
ATRIUM Laboratory?</a> </b>
<hr> <dt> <b>Selected Research Papers (in Postscript, HTML, or PDF
format) and Interactive Presentations (in HTML format)</b></dt>



<h5> Need a Postscript viewer and printing utility? Get a <a href="http://www.cs.wisc.edu/%7Eghost/gsview/index.html"> Postscript
viewer and print utility</a> for MS-Windows and OS/2 systems called <b>GSview</b>
.</h5>



<ul>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/NSF-Workshop-Jan02/Scacchi-Position-Paper-Jan2002a.pdf">
Understanding the Social, Technological, and Policy Implications of Open
 Source Software Development</a>. Interest in open source software
development has emerged in many different research communities. Much of
this interest   has focused attention primarily onto the products of
open software development   (source code), and secondarily onto the
processes and productive units that   facilitatre such development. This
position paper identifies what I believe   are areas, topics, or basic
questions requiring further research in the arena  of open source
software development. Position paper presented at the <a href="http://cip.umd.edu/osagenda.htm"> NSF Workshop on Advancing the
Research Agenda on Open Source</a>, 28 January  2002, Revised August
2002.</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/IEE-Proc-Software/Scacchi.pdf">
Understanding the Requirements for Developing Open Source Software
Systems</a>. This study presents an initial set of findings from an
empirical study  of social processes, technical system configurations,
organizational contexts,    and interrelationships that give rise to
open software. The focus is directed    at understanding the
requirements for open software development efforts,   and how the
development of these requirements differs from those traditional   to
software engineering and requirements engineering. Four open software 
development communities are described, examined, and compared to help
discover what these differences may be. Eight kinds of software
informalisms are found to play a critical role in the elicitation,
analysis, specification, validation,  and management of requirements
for developing open software systems. Subsequently,    understanding
the roles these software informalisms take in a new formulation    of
the requirements development process for open source software is the 
focus of this study. (<i>IEE Proceedings--Software</i>, 149(1), 24-39,
February 2002).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/SE-Encyc/Software-Engineering-Hypertext.pdf">
Hypertext for Software Engineering</a>. This chapter provides a survey
of tools, techniques, and concepts for how hypertext capabilities can be
employed  to support large team-oriented software development projects.
(appears  in  J. Marciniak (ed.), <i>Encyclopedia of Software
Engineering, 2nd. Edition</i> , Wiley, 612-621, 2002).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/SE-Encyc/Process-Models-SE-Encyc.pdf">
Process Models in Software Engineering</a>. This chapter provides a
survey of tools, techniques, and concepts for how alternative softwre
process models   and modeling capabilities can be employed to support
large team-oriented  software development projects. (revised version
appears in J. Marciniak (ed.), <i>Encyclopedia of Software Engineering,
2nd. Edition</i>, 993-1005,  Wiley, 2002).</li>



  <li><a href="http://opensource.ucc.ie/icse2001/scacchi.pdf">Software
Development Practices in Open Software Development Communities</a>. This
study presents an initial set of findings from an empirical study of
social  processes, technical system configurations, organizational
contexts, and interrelationships that give rise to open software. "Open
software", or more narrowly, open source software, represents an
approach for communities of like-minded participants to develop software
system representations that  are intended to be shared freely, rather
than offered as closed commercial  products. While there is a growing
popular literature attesting to open software,   there are very few
systematic empirical studies that informs how these communities
produce software. Similarly, little is known about how people in these
communities coordinate software development across different settings,
or about what  software processes, work practices, and organizational
contexts are necessary  to their success. To the extent that academic
research communities and commercial  enterprises seek the supposed
efficacy of open software, they will need grounded  models of the
processes and practices of open software development to allow
effective investment of their resources. This study investigates four
communities engaged in open software development. Case study methods are
used to compare  practices across communities. (Position paper
presented at the <a href="http://opensource.ucc.ie/icse2001/default.htm">
1st Workshop on Open  Source Software Engineering</a>, Toronto, Ontario,
May  2001).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/ProSim-2K/ProSim-2K-Paper.pdf">
Modeling and Simulating Software Acquisition Process Architectures</a>. (with S. James Choi),
In this paper, we describe our efforts to support the modeling and
simulation of processes associated with software system acquisition
activities. Software    acquisition is generally a multi-organization
endeavor concerned with the    funding, management, engineering, system
integration, deployment and long-term    support of large software
systems. We first describe a language for modeling    software
acquisition processes at the architectural level. We then describe
our approach supporting the simulation of software acquisition processes
within a process architecture. Along the way, we introduce how we
employ  the High-Level Architecture (HLA) and Run-Time Infrastructure
(RTI) to support   the distribution, concurrent execution and
interoperation of multiple software   process simulations to address
the complexity of software acquisition process architectures. In
addition, we also introduce the design and prototyping  of a Web-based
environment which supports the modeling and simulation of acquisition
process architectures. (appears in <i>Journal of Systems and Software</i>
, 59(3), 343-354, 15 December 2001<small>).</small></li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Process-Hypertext/Process-Hypertext.pdf">
Specifying Process-Oriented Hypertext for Organizational Computing</a>. (with John Noll),
Organizations deploy intranets to provide access to documents for those 
who use them. But the web of computing comprises more than just
documents: people, tools, and processes are critical to organizational
function. In particular, people may need guidance on how to perform
tasks, as well as access to information necessary to carry out those
tasks. In this paper, we present a language for describing
process-oriented hypertexts. A process-oriented hypertext links
information, tools, and activities into a seamless organizational web.
Using such a hypertext, and process performer can enact a process by
browsing, and receive guidance on how to perform the process
activities, where to and relevant information, and what tools to use.
The PML process modeling language provides a way for process engineers
to specify process models in terms of activities, and the sequence in
which they should be performed. The specifcation can be elaborated with
descriptions of resources and tools required and provided by activities,
and the skills necessary to carry out an activity. The resulting models
are then translated into one or more process-oriented hypertexts that
represent instances of the process currently being performed. PML
includes features that allow the modeler to specify how the process
activities should be dynamically linked to information and resource
nodes at the time the process is performed.  This enables processes to
be described as abstract models that can be instantiated as
process-oriented hypertexts in different organizational settings. We
used PML to model processes in a case study of the grants management
process at the US Office of Naval Research. We describe some of our
experiences applying PML to this study, and conclude with lessons
learned and directions for future study. (appears in<i> Journal of
Network Computing and Applications</i> , 24(1):39-61, 2001).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Internet-Procurement/internet-procurement.pdf">
Redesigning Contracted Service Procurement for Internet-based Electronic
 Commerce: A Case Study</a>. This paper describes a case study focused
on redesigning procurement processes for research grants at the Office
of Naval  Research. These processes focus on the procurement of research
(R&amp;D) services and how they can be redesigned and supported using
Web-based capabilities.   By examining these processes, we gain insight
into issues and challenges  to be addressed in&nbsp;&nbsp;&nbsp;
redesigning service procurement with Internet-based  Electronic
Commerce capabilities. In collaboration with other participants  in
this effort, we found that we could contribute to a substantial 
reduction  in process cycle time and operational costs associated with
the  funding of  thousands of research grant procurement actions.
Accordingly,  this investigation  will focus on topics that underlie
these results. This  includes defining an approach to redesign
procurement processes for Internet-based  EC, a case study applying
this approach and technology at ONR, and a discussion  of lessons 
learned. Along the way, challenges, issues, and possible solutions  are
identified  that foreshadow&nbsp;&nbsp; the development of a new
generation  of Internet-based  procurement processes and supporting
Web-based environments.  (Revised version  appears in&nbsp;<i>J.
Information Technology and Management</i> , 2(3), 313-334,  2001).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/KWMS-SAWMAN/KWMS-SAWMAN.pdf">
An Environment for Research in Software Systems Acquisition</a>. (with A. Valente, J. Noll, and J.S. Choi),&nbsp; In this
 paper, we present initial results from basic research and exploratory
studies in the area of software systems acquisition. This research
sought to design    a web-based, computer-supported work environment
that facilitates research    and development in the area of software
systems acquisition. This environment    supports the capture,
representation, and operationalization of various  forms of knowledge
associated with a new vision for virtual system acquisition,    called
VISTA. The schemes for organizing and managing knowledge rooted in
software feasibility heuristics and informal/formal models of software
acquisition and systems engineering processes are called knowledge webs.
Accordingly, the environment that provides the mechanisms for capturing,
 representing,  interlinking and operationalizing access to these
knowledge webs is called  a knowledge web management system (KWMS).
Thus, the environment  that is the  focus of this research effort is
designed to provide a KWMS capability  that  provides access to an
incrementally evolving knowledge web for software  acquisition research
and practice in line with the VISTA vision. This environment for 
software acquisition web management is called SAWMAN (submitted for
publication,  June 2001).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/WESAS-2000/WESAS-2000.pdf">
Experience with Software Architectures and Configured Software
Descriptions</a>. (with S. J. Choi),  In this position paper, we highlight some of the
things we have learned   over the past 15 years in our experience with
software architectures. Much    of what we have learned results from our
experience in the specification,    design, implementation and
evolution of software engineering environments    and process-driven
software environments. Along the way, we have developed    or used a
variety of alternative architectural notations to support these
efforts. We also have employed architectural design concepts and
notations to specify, "code" and evolve a variety of configured software
descriptions,    including software life cycle documents, software
hypertexts, software processes,   and others. In this regard, we have
found it useful to explore alternative   schemes for combining software
architecture concepts, techniques, notations   and tools with those for
software configuration management. Accordingly,   we will highlight
some of our experiences in these areas or topics. (Position paper
presented at the <a href="http://www.isr.uci.edu/events/wesas2000/">
Workshop on Evaluating  Software Architectural Solutions &nbsp;-
&nbsp;2000</a>, Irvine, CA May 2000).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Software_Process_Redesign/">
Understanding Software Process Redesign using Modeling, Analysis and
Simulation</a>. This paper introduces the problem of understanding what
software process   redesign (SPR) is, and how software process modeling,
analysis and simulation    may be used to support it. It provides an
overview of research results from  business process redesign to help
draw attention to the importance of treating  process redesign as a
process of organizational and process transformation. This in turn
requires examining and practicing SPR through an approach that 
combines organizational change management together with process
management technologies. A discussion follows which then identifies a
number of topic  areas that require further study in order to make SPR a
subject of software  process research and practice. (Presented at <b>ProSim'99</b>
, Silver Falls,  OR, June 1999. Revised version appears in <i>Software
Process --Improvement  and Practice </i>5(2/3):183-195, 2000).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/KnowledgeWeb/KnowledgeWeb.pdf">
Developing a Knowledge Web for Business Process Redesign</a>. (with Andre Valente), We
describe our effort  at developing and demonstrating a prototype
knowledge-based Web  environment  for modeling, diagnosing and
redesigning complex business processes.  Our goal was to investigate how
a modern knowledge representation system,  Loom [MB95], can favorably
leverage the development and evolution of a knowledge   web that links
narrative, informal and formal descriptions of cases on business  
process redesign found on the Web. In so doing, we demonstrate
concepts,  techniques and tools that facilitate the development of a
knowledge web management  system (KWMS) in an application domain of
interest to enterprises throughout  the world. (Presented at the 1999
Knowledge Acquisition Workshop, Banff, Canada, October 1999).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/JODI-1999.pdf">
Supporting Software Development in Virtual Enterprises</a>. (with John Noll), This paper
presents recent   developments in a distributed semantic hypertext
framework called DHT that   supports software development projects
within virtual enterprises. We show   how hypertext functionality
embodied in DHT solves the practical problems   of project coordination
including, collaborative sharing data in a virtual   enterprise of
distributed teams, integrating existing tools and environments,   and
enacting software processes to coordinate development activities for
teams across wide-area networks. In particular, we describe how software
process enactment can be achieved within a virtual enterprise without
centralized    mechanisms. This is when the process description is
represented as a user    navigable hypertext graph whose nodes
associate process steps, staff roles,    and associated tools with
designated software products. Overall, these capabilities  provide
support for coordinating software development projects across a virtual
enterprise of teams connected via the Internet. (appears in <a href="http://journals.ecs.soton.ac.uk/jodi/"> Journal of Digital
Information</a>,  1(4), February 1999). The <a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/Noll-Scacchi-DHT-1996.pdf">
original version of this paper</a> was presented at <a href="http://www.cs.nott.ac.uk/%7Ehla/HTF/HTFII/Proceedings.html"> The
Second International Workshop on Incorporating Hypertext Functionality
Into Software   Systems</a>, Washington, DC, March 1996.</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/VISTA/VISTA.html">
Virtual System Acquisition: Approach and Transitions</a>. (with Barry Boehm),  In this
paper, we describe a radically new approach for the acquisition  of
software-intensive systems. We start be reviewing problems and
opportunities for improving the acquisition of these systems. We put
forward a statement  of objective on the need to make the software
system acquisition more agile  and adaptive,  through the evolutionary
modeling, simulation, and development  of the system  being acquired. We
describe a new vision for the re-tooling  and re-engineering software
system acquisition into a form we call, VISTA,  denoting an approach 
to the virtual acquisition of these systems. We then  outline the VISTA
approach  to software acquisition. This is followed by a discussion of
the technical  and organizational transitions that must be investigated
and managed to ensure  the eventual success of such a radical change to
software system acquisition.  (appears in <i><a href="http://www.dsmc.dsm.mil/pubs/arqtoc.htm"> Acquisition  Review
Quarterly</a></i>, 5(2):185-216, Spring 1998).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/ProSim-1998/Process-Experience.pdf">
Experience with Software Process Simulation and Modeling</a> . This paper
 describes an approach taken and experiences encountered in developing
and applying simulation and modeling technologies to software processes.
Processes   for both software development and use have been
investigated. As such, the    focus of this paper is aimed at addressing
three aspects of software process    simulation and modeling. First, I
describe an approach and examples of software simulation and modeling
as investigated with the Articulator environment developed at USC.
Second, I describe how by focusing on process modeling,   analysis, and
simulation, we are led to expand the scope of work with software  
processes toward a more comprehensive software process life cycle
engineering.   Third, I describe some of the lessons learned from
applying modeling and  simulation concepts, techniques, and tools to
software processes in a variety  of organizational settings.
Conclusions then stress the complementary value arising from the use of
both qualitative and quantitative technologies for  software process
simulation and modeling. (<i> Journal of Systems and Software</i> ,
46(2/3):183-192,1999. <a href="http://www.usc.edu/dept/ATRIUM/Papers/SPS.html"> The original
version of this paper</a> presented at <b><i>ProSim'98</i></b>, Silver
Falls, OR,  22-24 June 1998).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/EC/CompBusProcess-Components-EC.pdf">
Computational Business Process Components for Electronic Commerce</a>.
In this position paper, I focus on addressing computational business
processes as software components for&nbsp; Electronic Commerce. These
components can   be configured into an organizational process
architecture that serves as  a reusable framework for developing an EC
information infrastructure. Process-driven   Intranets then serve as a
distributed development and run-time support environment   for the
framework. Since PDIs can span organizational boundaries, and since
PDIs in different organizations may be interconnected, then
process-driven extranets can be created and deployed. PDIs and PDEs
enable the design, integration, and enactment of virtual enterprises.
When a community of virtual enterprises emerges and begins to support
business transactions among these enterprises, then virtual markets can
appear, as can different kinds of computational   economies. With the
exception of this last item, I have experience in developing   and
applying these capabilities in different organizational settings. My
experience leads me to believe that CBPs are viable components for EC.
Furthermore, such components address an orthogonal set of issues
compared to those addressed   by other potential EC technologies such as
CORBA/DCOM, EDI X12 transaction   standards, Java/ActiveX, UML, and
others. Subsequently, the potential value   of CBPs can be assessed
independent of choices made in using or evolving  other EC technologies.
Thus, CBPs merit consideration as a foundational software   technology
for EC. (Presented at the <a href="http://haas.berkeley.edu/%7Ecitm/CEC/program1.html"><i> 1998</i> <i>
Intern. Workshop on Component-Based Electronic Commerce</i></a>,
Berkeley, CA, July 1998).</li>



  <li><a href="http://www.usc.edu/dept/ATRIUM/Papers/New/CCA-Draft.html">
Comparative Case Analysis for Understanding Software Processes</a>. This
paper provides   an exploration of the analysis and use of comparative
case studies as an  approach to understanding software processes in
complex organizational settings.  Case studies are well suited to
capture and describe how software  processes  occur in real-world
settings, what kinds of problems emerge, how they are  addressed, and
how software engineering tools, techniques, or concepts are  employed.
The overall purpose of comparative case analysis is to discover   and
highlight second- or higher-order phenomena or patterns that transcend
the analysis of an individual case. Comparative case analysis provides a
strategy that enables the development of more generalizable results and
testable  theories  than individual or disjoint case studies alone can
provide. This  study incorporates  an examination and review of four
empirical studies of  processes involved  in developing, using, or
evolving software systems that  employ comparative  case analyses.
Finally, a meta analysis of these four  studies then highlights  the
strengths and weaknesses of comparative case  analyses when used to
empirically examine and understand software processes.  (Draft for
review, 1998).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/Business_Process_Modeling.pdf">
Modeling, Integrating, and Enacting Complex Organizational Processes</a>,
or an html presentation version can be found <a href="http://cwis.usc.edu/dept/ATRIUM/Process_Life_Cycle.html"> here</a>.
We describe our approach and mechanisms to support the engineering of
organizational processes throughout their life cycle. We describe our
current understanding  of what activities are included in the process
life cycle. We then go on to describe our approach, computational
mechanisms, and experiences  in supporting  many of these life cycle
activities, as well as compare it to other related  efforts. Along the
way, we present examples drawn from a current study aimed  at modeling,
analyzing, and integrating an order fulfillment process in a  product
development organization. (appears in K. Carley, L. Gasser, and M.
Prietula (eds.), <i>Simulating Organizations: Computational Models of
Institutions and Groups</i>, 153-168, MIT Press, 1998).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Process_Engineering/Process_Life_Cycle.pdf">
Process Life Cycle Engineering: A Knowledge-Based Approach and
Environment</a>.  (with P. Mi), We describe our approach and mechanisms to support
the engineering of  organizational   processes throughout their life
cycle. We describe our current  understanding   of what activities are
included in the process life cycle.  We then go on  to describe our
approach, computational mechanisms, and experiences in supporting many
of these life cycle activities, as well as compare it to other related 
efforts. Along the way, we present examples drawn from a recent study
that  uses the approach and the mechanisms of our knowledge-based
process engineering  environment to support the (re)engineering of
corporate financial operations  in a mid-size consumer products
organization. (<b>NB</b> : Contains 12 image files).(appears in <i>Intelligent
Systems in Accounting, Finance, and Management</i> ,&nbsp; 6(1):83-107,
1997). In addition, an interactive presentation on this subject can be
found <a href="http://cwis.usc.edu/dept/ATRIUM/Process_Life_Cycle.html">
here</a> .</li>



  <li><a href="http://www.usc.edu/dept/ATRIUM/Papers/PDI.pdf">Process-Driven
Intranets: Life Cycle Support for Process Reengineering</a>. (with John Noll),    In this
 paper, we describe our approach and experience in a case study
focused on redesigning processes for research grant funds management at
the Office of Naval Research. We found that we could contribute to a
substantial reduction  in process cycle time and operational costs
associated with the   funding  of thousands of research grant
procurement actions. Accordingly,  we focus  our discussion on topics
that underlie these results. This includes   defining  our approach
process design, the technology of process-driven intranets  for
electronic commerce, our case study applying this approach and
technology at ONR, and a discussion of lessons learned. Along the way,
we identify  challenges,  issues, and possible solutions that
foreshadow the development  of a new generation  of intranet-based
networked information systems. (appears  in <i>IEEE Internet Computing</i>,
1(5):42-49, 1997).</li>



  <li><a href="http://www.usc.edu/dept/ATRIUM/Papers/DHT-SCM7.ps">Supporting
Distributed Configuration Management in Virtual Enterprises</a>. (with John Noll),&nbsp;This
paper presents a semantic hypertext-based framework called DHT that
supports distributed  software configuration management, provides
transparent access  to heterogeneous,  autonomous software repositories,
and enables an implementation  strategy with low cost and effort. We
show how DHT solves the practical problems  of sharing and updating
heterogenous multi-version software in a virtual enterprise of
distributed teams, integrating existing CM tools and environments,
executing CM processes to coordinate development activities across
wide-area networks.  This is when the process model is represented as a
user navigable hypertext  graph whose nodes associate process steps,
user roles, and associated tools  with designated software product
versions and configurations. Furthermore,   we show that this can
require the support for alternative policy models for  the commitment of
software updates into local CM repositories. Overall, these
capabilities provide support for product-centered enactment of CM
policies and processes across a virtual enterprise of teams connected
via the Internet.  (appears in R. Conradi (ed.), <i>Software
Configuration Management</i> , Lecture  Notes in Computer Science, Vol.
1235, Springer-Verlag, New York,  142-160,  1997) .</li>



  <li> <a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Internet-Procurement/reengineer-grants-mgmt-97.pdf">
(Re)Engineering Research Grants Management: From Acquisition Reform to
Knowledge Brokering at ONR</a>. (with John Noll, Cedric Knight, Capt. J. F. Miller), In this paper, we briefly describe our
approach and experience in a research effort focused on (re)engineering
the activity of research grants management at the Office of Naval
Research. We found that  we could contribute to a substantial reduction
in process cycle time and operational costs associated with the funding
of thousands of research grant procurement actions. Accordingly, we
focus our discussion on topics that underlie these results. We also
observe that knowledge brokering is an area where a new R&amp;D
initiative could lead to more effective and efficient  research funding
and research program management, as well as serve the mutual
self-interests of the Federal research funding agency and researcher
communities. (presented at NSF Workshop on Research and Development
Opportunities for Federal Information Services, Arlington, VA, <a href="http://www.isi.edu/nsf"> http://www.isi.edu/nsf</a>, May 1997).</li>



  <li><a href="http://www.usc.edu/dept/ATRIUM/Papers/SAMSA/samcover.html">
Simulation and Modeling for Software Acquisition (SAMSA)</a>. (with Barry Boehm), In this
extended final   report, we describe the results from a series of
workshops and contributions    from a Blue Ribbon Panel of government,
industry, and academic experts addressing  alternative approaches to the
acquisition of large software systems. The results focus attention on
redesigning the process of software acquisition  around the use of (a)
a knowledge-based Feasibility Analysis Modeling system  to assist
assessing the costs, risks, and technical feasibility of a new software
system to be acquired; (b) research on software architectures to help
better characterize whether proposed system requirements can be
satisfied by a given system architecture; and (c) the overall
integration of simulation and modeling technologies to support a new
approach to the "virtual information systems acquisition" (VISTA). Other
reports from the workshops can be accessed through links within this
report. (Final Report, March 1996).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/ieee90-articulator.pdf">
A knowledge-based environment for modeling and simulating software
engineering processes</a>.&nbsp;(with P. Mi), In this paper, we describe the design and
representation schemes  used in constructing a prototype computational
environment for modeling  and  simulating multi-agent software
engineering processes. We refer to this  environment  as the
Articulator. We provide an overview of the Articulator's  architecture
which identifies five principal components. Three of these components,
the knowledge meta-model, the software process behavior simulator, and a
knowledge  base querying mechanism are detailed and examples are
included. The conclusion  reiterates what is novel to this approach in
applying knowledge  engineering  techniques to the problems of
understanding the statics and dynamics of complex  software engineering
processes. (appears in <i>IEEE Trans. Data and Knowledge  Engineering</i>,
2(3):283-294, September 1990. Reprinted in <i>Nikkei Artificial
Intelligence</i>, 20(1):176-191, January 1991, (in Japanese). Reprinted
in <i>Process-Centered Software Engineering  Environments</i>, P.K.
Garg  and M. Jazayeri (eds.), IEEE Computer Society,  119-130, 1996).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/Process-Meta-Model.pdf">
A Meta-Model for Formulating Knowledge-Based Models of Software
Development</a>.(with P. Mi),  In this paper, we introduce a knowledge-based
meta-model which serves  as   a <i>unified resource model</i> for
integrating characteristics of major   types of objects appearing in
software development models (SDMs). The URM   consists of a taxonomy of <i>resource
classes</i> and a <i>web of relations</i> that link different types of
resources found in different kinds of models   of software development.
The URM includes specialized models for software  systems, documents,
agents, tools, and development processes. The URM has   served as the
basis for integrating and interoperating a number of process-centered  
CASE environments. The major benefit of the URM is twofold: First, it
forms   a higher level of abstraction supporting SDM formulation that
subsumes many   typical models of software development objects. Hence,
it enables a higher   level of reusability for existing support
mechanisms of these models. Second,   it provides a basis to support
complex reasoning mechanisms that address  issues across different
types of software objects. To explore these features, we describe the
URM both formally and with a detailed example, followed by a
characterization of the process of SDM composition, and then by a
characterization of the life cycle of activities involved in an overall
model formulation  process. (appears in <i>Decision Support Systems</i>,
17(4):313-330, 1996).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/icse94-smart.pdf">
The SMART Approach to Software Process Engineering</a>. (with P. Garg, P. Mi, and G. Thunquest), In this paper,
we describe  a methodology for software process engineering and an
environment, SMART, that supports it. SMART supports a process
life-cycle that includes   the modeling, analysis, and execution of
software processes. SMART's process   monitoring capabilities can be
used to provide feedback from process execution   to the process model.
SMART represents the integration of three separately   developed process
mechanisms, and it uses two modeling formalisms (object-oriented   
data representation and imperative-style programming language) to
bridge   the gap between process modeling, analysis, and execution.
SMART demonstrates    the meta-environment concept, using a process
modeling formalism as input    specification to a generator that
produces Process-Centered Software Engineering Environments (PSEEs).
Furthermore, SMART supports a team-oriented approach    for process
modeling, analysis, and execution. (appears in, <span style="font-style: italic;">Proc. 16th. Intern. Conf. Software Engineering</span>, IEEE Computer  
Society, Sorrento, Italy, pp. 341-350, May 1994. Reprinted in <i>Process-Centered
Software Engineering Environments</i>, P.K. Garg and M. Jazayeri
(eds.),  IEEE Computer Society, pp. 131-140, 1996).</li>



  <li><a href="http://www.usc.edu/dept/ATRIUM/Papers/Requirements_Documentation.ps">
Understanding the Requirements for Information System Documentation: An
Empirical Investigation</a>.(with A. Jazzar), Software and Information Systems (IS)
documents are a common product of large IS development efforts. These
documents are   produced and consumed through a variety of documentation
processes. These&nbsp;   processes involve developers and users working
within complex organizational   settings, as well as with the focal
system under development. These organizational   settings facilitate
and constrain IS documentation and development efforts   in complicated
ways. Accordingly, we present, analyze, and compare cases from field
studies of three different IS development efforts in a large industrial
corporation. Based on these studies, we identify a new set of variables
and  hypotheses that we believe represent a more plausible set of
requirements   for IS documentation products and processes in different
organizational settings.  In this regard, we utilize the concept of
viewing IS documentation requirements  as hypotheses to be tested,
refined, or refuted. (appears in <i>Proc. 1995  ACM Conf.
Organizational Computing Systems</i>, San Jose, CA, 268-279, August
1995).</li>



  <li><a href="http://cwis.usc.edu/dept/ATRIUM/Papers/Software_Productivity.html">
Understanding Software Productivity</a>. What affects software
productivity and how do we improve it? This report examines the current
state of the art  in software productivity measurement. In turn, it
describes a framework for  understanding software productivity, some
fundamentals of measurement, surveys  empirical studies of software
productivity, and identifies challenges involved in measuring software
productivity. A radical alternative to current approaches is suggested:
to construct, evaluate, deploy, and evolve a knowledge-based   
"software productivity modeling and simulation system" using tools and
techniques  from the domain of software process engineering. (appears
in <i>Intern. J.  Software Engineering and Knowledge Engineering</i>,
1(3):293-321, 1991. Revised  and reprinted in&nbsp; <i>Advances in
Software Engineering  and&nbsp; Knowledge  Engineering</i> , D. Hurley
(ed.), Volume 4, 37-70, 1995).</li>



  <li><a href="http://cwis.usc.edu/dept/ATRIUM/Papers/MetaCASE.ps">Meta-Environments
for Software Production</a>. (with A. Karrer),&nbsp; Researchers who create software production
 environments face considerable problems. Software production
environments are large systems that are costly to develop. Furthermore,
software production  environments which support particular software
engineering methods may not  be applicable to a large number of
software production projects. These conditions  have formed a trend
towards research into ways which will lessen the cost  of developing
software production environments. In particular, the trend has been
towards the construction of meta-environments from which specific
software production environments can be created. In this paper, we
attempt to categorize more than 60 meta-environment efforts. For each of
the categories, we review research efforts which illustrate different
approaches within that category. We conclude by presenting an emerging
common thread of requirements which links this field together. (appears
in <i>Intern. J. Soft. Engr. and Know. Engr.</i> , 3(2):139-162, May
1993. Revised and reprinted in <i>Advances  in Software Engineering
and Knowledge Engineering</i> , D. Hurley (ed.), Volume 4,&nbsp; 37-70,
1995).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/usc94-emergence-EC.pdf">
The Emergence of Electronic Commerce on the Internet</a>, also available
 in HTML <a href="http://cwis.usc.edu/dept/ATRIUM/Papers/Electronic_Commerce.html">
here</a>, or for an interactive presentation version with some
interesting WWW links, try <a href="http://cwis.usc.edu/dept/ATRIUM/Papers/EC_on_the_Inet.html"> here</a>
.). In this article, three questions are addressed. First, what is the
Internet and what are its implications for modern businesses or
strategic planners?  Second, what are the current opportunities for
using the Internet  in different  business activities? Third, what
research is being persued in  the USC School  of Business Administration
that can help better answer the  preceding two questions? (appears in <i>USC
Business</i>, 5:32-36, Fall 1994).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/uci94-hypertext-repositories.pdf">
A Hypertext System for Integrating Heterogeneous Autonomous Software
Repositories</a>. (with J. Noll), Hypertext is a simple concept for organizing
information into a graph  structure  of linked container objects. This
paper examines issues involved  in applying  hypertext concepts to the
integration of heterogeneous, autonomous  software  repositories, and
presents a solution called the Distributed Hypertext System (DHT). Based
on a hypertext data model and client-server architecture,   DHT
features powerful modeling capabilities, integration of heterogeneous,
pre-existing repositories, update with concurrency control, and full
local autonomy. (appears in <i>Proc. 4th. Irvine Software Symposium</i>,
University   of California, Irvine, CA, 49-60, April, 1994)</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/ieee92-process-integrated-CASE.pdf">
Process Integration in CASE Environments</a>.(with P. Mi), Integrated CASE
Environments (CASEEs) have been focused on tool and object integration.
In this paper,   we present a new type of integration called process
integration as a strategy   for creating process-centered CASEEs. We
argue that the major benefits of   process integration to software
development include explicit process guidance and improved project
management. We also present a few key components to implement process
integration which form the backbone of a process-centered  CASEE. These
components include software process models, a process enactment 
mechanism, a developer's interface and a process manager's interface.
Furthermore,   our strategy implements process integration by merging
these key components   with existing CASEEs and creates
process-centered CASEEs with reasonable  effort.  To exemplify this
strategy, we have migrated an operational CASEE,  the SOFTMAN 
environment, into a process-centered CASEE. (appears in IEEE
Software,9(2):45-53, 1992. Reprinted in E. Chikoski (ed.), <i>Computer-Aided
Software Engineering</i> (2nd. Edition), IEEE Computer Society Press,
1993).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/ieee93-kbse-articulation.pdf">
Articulation: An Integrated Approach to the Diagnosis, Replanning, and
Rescheduling of Software Process Failures.</a> (with P. Mi), This paper presents an
integrated approach  for how to <i>articulate</i> software engineering
process plans that fail.  The approach, called articulation, repairs a
plan when a diagnosed failure  occurs and reschedules changes that
ensure the plan's continuation. In implementing  articulation, we
combine knowledge-based diagnosis, replanning, and rescheduling  into a
powerful mechanism supporting process-based software development. Use of
articulation in plan execution supports recovery and repair of
unanticipated failures, as well as revising and improving process plans
to become more effective. In this paper, we also describe how a
prototype knowledge-based system we developed implements this approach
to articulation. (appears in <i> Proc. 8th. Knowledge-Based Software
Engineering Conference</i> , Chicago, IL, IEEE Computer Society, 77-85,
September 1993).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/ieee92-kbse-splib.pdf">
A Knowledge-Based Software Process Library for Process-Driven Software
Development</a>. (with P. Mi and S. Li), Process-driven software development represents a
technique for software  production, in which a conceptual knowledge
representation. called a software  process, is used to represent and
guide development activities.  Management  and reuse of software
processes therefore becomes a requirement  for process-driven  software
development. In this paper, we present a knowledge-based  process
library (SPLib) that supports the organization, access and reuse  of
software processes. SPLib consists of a knowledge base of software
process representations.  It also provides a set of process operations
that support  browsing, searching  composition and abstraction. These
operations reason  about the content of  software processes as well as
maintain proper interdependency  relationships  among the software
processes. To demonstrate the use of SPLib  in process-driven  software
development, we provide a usage scenario where  SPLib facilitates  the
access and reuse of software processes in real applications.  (appears
in <i>Proc. 7th. Knowledge-Based Software Engineering Conf.</i> ,
Washington, DC, IEEE Computer Society, 122-131, September 1992).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/ieee90-dht.pdf">
Integrating Diverse Information Repositories: A Distributed Hypertext
Approach</a>. (with J. Noll), Today's networked information systems and software
engineering environment    is characterized by a multitude of
autonomous, heterogeneous information   repositories, a variety of
incompatible user interfaces, diverse, unconventional   data types,
including text, graphics, and possibly video and sound, rapid change,
both in structure and content, and multiple ways of viewing
relationships among the same information items. Existing information
storage mechanisms   fail to combine diverse data types/models, complex
objects and storage structures,   personal views and organizations of
shared objects, access to distributed,   heterogeneous repositories, and
ease of evolution. This paper examines these   issues and describes a
Distributed Hypertext (DHT) architecture that provides transparent
access to autonomous, heterogeneous software object repositories,  
resulting in both a powerful organizational tool and a simple yet
effective   integration mechanism. (appears in <i>Computer</i>,
24(12):38-45, December   1991).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/ieee90-articulation.pdf">
Modeling Articulation Work in Software Engineering Processes</a>.(with P. Mi),
Current software process modeling techniques do not generally support
articulation work. Articulation work includes the diagnosis, recovery,
and resumption   of development activities unexpectedly fail. It is an
integral part of software    process enactment since software processes
can sometimes fail or breakdown.    This paper presents a
knowledge-based model of articulation work in software    engineering
processes. It uses empirically grounded heuristics to address    three
problems in articulation work: diagnosing failed development activities,
determining appropriate recovery, and resuming software process
enactment,    We first investigate the role and importance of
articulation work with respect   to planned software development
activities. We then outline a knowledge-based    model of articulation
work. The model has been implemented in a knowledge-based    software
process modeling environment called the Articulator. Combining
available software process modeling techniques and the model for
articulation leads  to a better foundation for process improvement and
evolution. appears  in <i> Proc. 1st. Intern. Conf. Soft. Processes</i>,
IEEE Computer Society,   Redondo Beach, CA, pp. 188-201, October
1991.&nbsp;</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/DistSysFactory.pdf">
The Software Infrastructure for a Distributed Software Factory</a>. <big><font face="Times New Roman, Times, serif" size="2"><big><ab> This paper
presents an innovative approach to the construction, application and
deployment of   software factories. Based on experience in creating and
evolving the System   Factory project at USC, the authors present a new
experimental project called   Distributed System Factory (DSF) project.
The DSF project is intended to  provide a software infrastructure
suitable for engineering large-scale software  systems with dispersed
teams working over wide-area networks. This software  infrastructure is
the central focus of the author. As such, he describes the information
structures that can be used to model and create the infrastructure,  as
well as target software applications. He  also describes an electronic
market-place of logically centralised software services which populate
and execute within this infrastructure. A brief view of how the DSF
project can  grow to accommodate academic and industrial research groups
is also given.</ab></big></font></big> (appears in the <i>Software
Engineering Journal</i>, 6(5), 355-369, September   1991).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/DIF90.pdf"> A
Hypertext System to Manage Software Life-Cycle Documents</a>. (with P. Garg), <ab>The
Documents Integration   Facility, an environment based on objects and
relationships between objects   that was constructed for the
development, use, and maintenance of large-scale   systems and their
life-cycle documents, is presented. DIF helps integrate   and manage the
documents produced and used throughout the life cycle: requirements 
specifications, functional specifications, architectural designs
(structural specifications), detailed designs, source code, testing
information, and   user and maintenance manuals. DIF supports
information management in large   systems where there is much
natural-language text. The documentation method   used by DIF and DIF's
structure are described. How DIF is used is discussed,   and the DIF
environment is examined. Issues that were encountered in the  design of
DIF are considered.</ab> (appears in <i>IEEE Software</i> , 7(3), 90-89,
May 1990).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/ieee89-ishys.pdf">
ISHYS: Designing and Intelligent Software Hypertext System</a>. (with P. Garg), This
paper <ab>describes the design of ISHYS, an intelligent software
hypertext   system, and discuss novel applications that such a system
can support. In   designing ISHYS, they sought to support the software
life cycle from a 'web   of computing' framework, which necessarily
requires the consideration of  sociotechnical factors influencing and
influenced by the software life cycle.  ISHYS supports functionalities
that include influencing work interactions   on the basis of social
interactions and determining tools and their options on the basis of
project status information. Implementation of required enhancements to
DIF (documents integration facility), the authors' current software
hypertext    system, has been completed using Prolog, C, and X Windows.</ab>
(appears in <i>IEEE Intelligent Systems</i>, 4(3), 52-63, Fall 1989).<br>



  </li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/jasis90-DSHE.pdf">
On the Power of Domain-Specific Hypertext Environments</a>. What is the
potential power of hypertext technology? This article examines this
question and outlines the answer by focussing attention to a
domaim-specific view  of hypertext environments. I first define what
domain-specific hypertext environments (DSHE) represent. Next, I examine
DSHE for the domains of encyclopedic and classical studies, creative
writing and interactive fiction, journal and book publishing, insurance
policy management, and computer-aided software engineering. Then I
describe in more detail the structure of information  to evolve within
a DSHE for software engineering in terms of document products,  
processing tasks and mechanisms, and workplace attributes. In turn,
this  examination provides the basis for identifying seven dimensions
along which  the power of DSHE can be defined, experienced, and
accumulated. I also address  the organizational costs that may be borne
to realize this power. I conclude  with observations as to the source
of DSHE power as well as identifying topics   for further
investigation. (appears in <i>Journal American Society Information  
Science,</i> 40(3):183-191, May, 1989).</li>



  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/ieee89-icse-work-strux-01.pdf">
Work Structures and Shifts: An Empirical Analysis of Software
Specification Teamwork</a>.(with S. Bendifallah), <ab>The study and support of teamwork in
upstream software   development activities (e.g., specification,
design) have been approached   from a variety of perspectives. Those
which address aspects of the division   of labor typically focus on
authority or communication structures. In this   paper, we examine how
teams of engineers develop software specifications,   from a perspective
emphasizing the division of labor in terms of the work structures
themselves. We present a new typology of work structures and report on
an empirical investigation of these work structures. We examine the
teamwork  process followed by each  of five comparable teams of
specification developers.  The teams worked over a ten-day period with
state-of-the- art specification  resources to deliver functional
specification documents meeting prescribed  quality standards. Our data
and analysis show the recurrence of various kinds of shifts in the
teams' work structures. We discuss the resulting patterns  of work
structures and shifts and their implications. In particular, separative
work structures were associated with improved specification teamwork
efficiency,  whereas integrative work structures were associated with
improved specification  product quality.</ab> (appears in <i>Proc.
11th. Intern. Conf. Software Engineering</i> , Pittsburgh, PA, ACM and
IEEE Computer Society, 260-270, May 1989).</li>

  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/Understand-Soft-Maint-1987.pdf">Understanding Software Maintenance Work</a>. (with S. Bendifallah), Software maintenance can be successfully accomplished if the computing
arrangements of the people doing the maintenance are compatible with
their established patterns of work in the setting. To foster and
achieve such compatibility requires an understanding of the reasons and
the circumstances in which participants carry out maintenance
activities. In particular, it requires an understanding of how software
users and maintainers act toward the changing circumstances and
unexpected events in their work situation that give rise to software
system alterations. To contribute to such an understanding, we describe
a comparative analysis of the work involved in maintaining and evolving
text-processing systems in two academic computer science organizations.
This analysis shows that how and why software systems are maintained
depends on occupational and workplace contingencies, and vice versa. <span style="font-style: italic;">IEEE Trans. Software Engineering</span>, SE-13(3), 311-323, 1987.</li>

  <li><a href="http://www.ics.uci.edu/%7Ewscacchi/Papers/Vintage/Maint-Evolving-Soft-Config-1987.pdf">Maintaining Configurations of Evolving Software Systems</a>. (with K. Narayanaswamy), Software configuration management ( SCM) is an emerging discipline. An
important aspect of realizing SCM is the task of maintaining the
configurations of evolving software systems. In this paper, we provide
an approach to resolving some of the conceptual and technical problems
in maintaining configurations of evolving software systems. The
approach provides a formal basis for existing notions of system
architecture. The formal properties of this view of configurations
provide the underpinnings for a rigorous notion of system integrity,
and mechanisms to control the evolution of configurations. This
approach is embodied in a language, NuMIL, to describe software system
configurations, and a prototype environment to maintain software system
configurations. We believe that the approach and the prototype
environment offer a firm base to maintain software system
configurations and, therefore, to implement SCM.&nbsp;<span style="font-style: italic;">IEEE Trans. Software Engineering</span>, SE-13(3), 324-334, 1987.</li>



</ul>



<ul>



  <br>



&nbsp;
</ul>



<hr>
<h3> Contact Information</h3>



<ul>



  <li> <a href="http://www.ics.uci.edu/%7Ewscacchi">Walt Scacchi</a>
(previously Director of the <a href="http://www.usc.edu/dept/ATRIUM/index.html"> USC ATRIUM lab</a> )</li>



  <li> Institute for Software Research</li>



  <li> Information and Computer Science Dept.</li>



  <li> University of California, Irvine, CA 92697-3455 USA</li>



  <li> PHONE: +1-949-824-4130</li>



  <li>FAX: +1-949-824-1715<br>



  </li>



  <li> EMAIL:&nbsp;wscacchi &nbsp;&lt;&lt;@&gt;&gt; ics (.) uci [.] edu </li>



</ul>



<hr> <br>



&nbsp; <br>



<br>



<br>



</body>
</html>
